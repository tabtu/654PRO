wai-aria 1.0 authoring practices contents wai-aria 1.0 authoring practices an author s guide to understanding and implementing accessible rich internet applications w3c working draft 7 march 2013 this version http www.w3.org tr 2013 wd-wai-aria-practices-20130307 latest version http www.w3.org tr wai-aria-practices previous version http www.w3.org tr 2010 wd-wai-aria-practices-20100916 editors joseph scheuhammer invited expert michael cooper w3c previous editors lisa pappas society for technical communication richard schwerdtfeger ibm copyright 2007 2013 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract this document provides readers with an understanding of how to use wai-aria aria to create accessible rich internet applications. it describes considerations that might not be evident to most authors from the wai-aria specification alone and recommends approaches to make widgets navigation and behaviors accessible using wai-aria roles states and properties. this document is directed primarily to web application developers but the guidance is also useful for user agent and assistive technology developers. this document is part of the wai-aria suite described in the wai-aria overview. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this is a public working draft by the protocols formats working group of the web accessibility initiative. it supports the accessible rich internet applications wai-aria aria specification providing detailed advice and examples beyond what would be appropriate to a technical specification but which are important to understand the specification. this version incorporates changes made in response to public comments received on the previous version and issues identified by the working group in the course of its general work on wai-aria. this snapshot is being published to bring the public working draft up to date with important improvements since the prior publication but it does not address all issues known to date. a history of changes to wai-aria 1.0 authoring practices is available. refer to the summary of actions made in response to comments on the previous draft and the issue disposition report for the previous draft. feedback on the information provided here is essential to the ultimate success of rich internet applications that afford full access to their information and operations. the pfwg asks in particular is it clear how to create accessible rich internet applications is the usage of roles states and properties clear are the various types of rich web content covered are considerations beyond the use of wai-aria sufficiently explained is the relationship of this document to the wai-aria specification clear are the design patterns clear start with the instructions for commenting page to submit comments preferred or send email to public-pfwg-comments@w3.org comment archive comments should be made by 5 april 2013. in-progress updates to the document may be viewed in the publicly visible editors draft. publication as a working draft does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. the group does not expect this document to become a w3c recommendation. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. the disclosure obligations of the participants of this group are described in the charter. table of contents abstract status of this document 1. introduction 2. general steps for building an accessible widget with wai-aria 3. keyboard and structural navigation 3.1. providing keyboard navigation for widgets 3.1.1. wai-aria keyboard bindings and behaviors 3.1.2. keyboard navigation between widgets 3.1.3. keyboard navigation within widgets 3.1.4. keyboard shortcuts for widgets 3.1.5. example keyboard operation radio group radio 3.1.6. other widget authoring practices 3.2. providing keyboard focus 3.2.1. using tabindex to manage focus among widgets 3.2.2. using activedescendant to manage focus for widget children 3.2.3. managing visual focus with tabindex alone 3.2.4. managing focus with scroll 3.2.5. managing the perception of a dual focus 3.2.6. author-defined keyboard short-cuts or mnemonics 3.2.7. providing navigable structure within web pages 3.3. making a dialog modal 3.3.1. trapping focus 4. relationships 4.1. labeling and describing 4.1.1. labeling 4.1.2. describing 4.2. owning and controlling 4.2.1. the owns relationship 4.2.2. using owns with reusable content 4.2.3. the controls relationship 4.3. changing the reading flow 4.4. popups and drop-downs 5. managing dynamic changes 5.1. managing content and presentational changes 5.2. implementing live regions 5.2.1. live region properties and how to use them 5.3. choosing between special case live regions 6. presentation role 6.1. rationale 6.2. inheritance of presentation by parent element s children 6.3. overriding presentation 7. form properties 8. math 9. drag-and-drop support 10. states and properties and assistive technologies 11. design patterns 12. reusable component libraries 13. appendices 13.1. references 13.1.1. normative references 13.1.2. informative references 13.2. acknowledgments 13.2.1. participants active in the pfwg at the time of publication 13.2.2. other previously active pfwg participants and other contributors to the accessible rich internet applications specification 13.2.3. enabling funders 1. introduction this section is informative. the wai-aria authoring practices guide is intended to provide readers with an understanding of how to use wai-aria to create an accessible rich internet application. as explained in the wai-aria primer accessibility deficiencies in today s markup render rich internet applications unusable by people who use assistive technologies at or who rely on keyboard navigation. the w3c web accessibility initiative s wai protocols and formats working group pfwg plans to address these deficiencies through several w3c standards efforts with a focus on the wai-aria specifications. for an introduction to wai-aria see the accessible rich internet applications suite wai-aria overview. the wai-aria authoring practices guide is part of a set of resources that support the wai-aria specification. the practices describe recommended usage patterns for web content developers and the wai-aria primer aria-primer provides a basic introduction to the concepts behind and reason for wai-aria. the wai-aria suite fills gaps identified by the roadmap for accessible rich internet applications wai-wai-aria roadmap aria-roadmap these documents serve as important places of clarification where topics appear to be unclear. note most of the javascript examples are written to be understandable by all readers including novice and intermediate javascripters. for example most modern rich web applications use dom level 2 event listener assignment now but some source code examples in this document use dom level 1 assignment e.g. el.onclick foo or el onclick foo because it is easier for all readers to understand. expert javascripters are encouraged to use modern javascript best practices when developing accessible rich internet applications. with the conceptual basis provided in the wai-aria primer you should have a good understanding of how wai-aria provides for interoperability with assistive technologies and support for a more usable accessible experience. this guide begins by providing some general steps for building an accessible widget using wai-aria script and css. it then extends your knowledge of wai-aria with detailed guidance on how to make rich internet applications keyboard accessible. next the scope widens to include the full application addressing necessary layout and structural semantics within the web page. these semantics are critical to enable assistive technologies to provide a usable experience when processing rich internet applications with rich documents on the same page. it includes guidance on dynamic document management use of wai-aria form properties wai-aria drag and drop and then the creation of wai-aria-enabled alerts and dialogs. the appendix provides substantial reference information including code samples for developers of user agents assistive technologies and web pages. wai-aria markup is currently not included in x html. the w3c wai pf working group will be creating dtds for xhtml 1.0 and html 4.01 for those wishing to validate their markup with wai-aria embedded into these host languages. 2. general steps for building an accessible widget with wai-aria at this point you should have a basic understanding of how wai-aria is used to support interoperability with assistive technologies. if you are not reusing a wai-aria-enabled widget library and wish to create your own the following steps will guide you through the thought process for creating an accessible widget using wai-aria. pick the widget type role from the wai-aria taxonomy wai-aria provides a role taxonomy aria section 3.4 constituting the most common ui component types. choose the role type from the provided table. if your desire was to create a toolbar set the role to toolbar div role toolbar from the role get the list of supported states and properties once you have chosen the role of your widget consult the wai-aria specification aria for an in-depth definition for the role to find the supported states properties and other attributes. for example the toolbar role definition includes superclass role in the taxonomy the widget you selected inherits states and properties from this role. in the case of a toolbar you will see that a toolbar is a subclass of a group. this makes sense given that a toolbar is a collection of commonly used functions. related concept this is really more informative to state what other concepts are similar to this role. these may exist in different host languages outside wai-aria. the keyboard model for the control should emulate that of the related concept control. supported states and properties these are unique states and properties that this widget supports and that were not inherited from its ancestors in the taxonomy. in the case of a toolbar there are no such states or properties. however in the case of a listbox you may choose to set the property of aria-multiselectable to true if you were to have more than one item in the listitem selected at a time. this indicates to the assistive technology that the listbox manages a collection of selectable options. inherited states and properties these are all the states and properties which are inherited from the roles s ancestors and which you may use. global states and properties these are states and properties which apply to all host language components regardless of whether a role is set or not. you may use these as well. once you have chosen the states and properties that apply to your widget you must set those properties you will use to set their initial values. note you do not need to use all the states and properties available for your role. in our case we shall use div role toolbar id customtoolbar tabindex 0 aria-activedescendant button1 onkeydown return optionkeyevent event onkeypress return optionkeyevent event onblur hidefocus onfocus showfocus img src img btn1.gif title home alt home role button id button1 onclick updatetext home was invoked img src img btn2.gif title refresh alt refresh role button id button2 onclick updatetext refresh was invoked img src img btn3.gif title help alt help role button id button3 onclick updatetext help was invoked div by setting tabindex 0 on the toolbar the toolbar will receive focus in the document order. it is necessary then to use script and the aria-activedescendant property to manage virtual focus among the buttons. the details are given in step five below. important when embedding wai-aria markup in x html all wai-aria states and properties must be preceded with the characters aria- with the exception of the role and tabindex attributes. otherwise the user agent will not map the wai-aria information resulting in it not being recognized by assistive technologies. when embedding wai-aria into other host languages tabindex does not carry over. the wai-aria tabindex extensions are specific to x html to repair deficiencies in keyboard support. establish the widget structure in the markup parent child assistive technologies are very dependent on the structure of widgets as well as general document structure. structure provides context to the user. a toolbar is a collection of common functions made available to the user. therefore all functions you would like in the toolbar must be contained within it. this can be determined by using the document object model dom tree structure created by the browser when parsing the host language. by using the parent child relationship of the dom an assistive technology can determine all the related toolbar widgets associated with the toolbar. the toolbar widgets would be dom children of the toolbar container. for our purposes we will define three image buttons for cut copy and paste. div role toolbar tabindex 0 aria-activedescendant button1 img src buttoncut.png alt cut id button1 img src buttoncopy.png alt copy id button2 img src buttonpaste.png alt paste id button3 div repeat steps 1-3 for the children of the parent we now need to assign the roles and states for each of the children. however we shall save the detailed navigation for step 5. div role toolbar tabindex 0 aria-activedescendant button1 img src buttoncut.png alt cut role button id button1 img src buttoncopy.png alt copy role button id button2 img src buttonpaste.png alt paste role button id button3 div the process of setting roles and states may be a recursive procedure if the children themselves have children such as in the case of an expandable collapsible tree widget. establish keyboard navigation of the widget and plan for how it will be navigated to within the document it is very important that your widget be keyboard accessible. in fact there must be a keyboard equivalent for every mouse operation. where possible you should refer to the wai-aria examples in this guide for tips on how to implement keyboard navigation for your widget. if you find that an example is not provided you should follow standard keyboard bindings for ui components such as those used for the java foundation classes for windows 95 nt. for our toolbar we have chosen to have the toolbar manage the focus for its children and through the use of the aria-activedescendant property. we have also chosen to have the toolbar receive focus based on the tab order by using tabindex. in order to use aria-activedescendant each focusable descendant must have an assigned id. head script function optionkeyevent event var tb event.target var buttonid dom_vk_enter 13 partial sample code for processing arrow keys if event.type keydown if event.altkey return true browser should use this the menu view doesn t need alt-modified keys xxx implement circular keyboard navigation within the toolbar buttons if event.keycode dom_vk_enter executebuttonaction getcurrentbuttonid this is an author defined function else if event.keycode event.dom_vk_right change the active toolbar button to the one to the right circular by var buttonid getnextbuttonid this is an author defined function tb.setattribute aria-activedescendant buttonid else if event.keycode event.dom_vk_left change the active toolbar button to the one to the left circular by var buttonid getprevbuttonid this is an author defined function tb.setattribute aria-activedescendant buttonid else return true return false else if event.type keypress script div role toolbar tabindex 0 aria-activedescendant button1 id tb1 onkeydown return optionkeyevent event onkeypress return optionkeyevent event img src buttoncut.png alt cut role button id button1 img src buttoncopy.png alt copy role button id button2 img src buttonpaste.png alt paste role button id button3 div the details of implementing keyboard navigation are described in keyboard and structural navigation section of this document. note you must also show the visual focus for each element that has focus. apply and manage needed wai-aria states in response to user input events similar to the processing of aria-activedescendant in step 5 as author you must set any additional wai-aria states and properties on document elements. synchronize the visual ui with accessibility states and properties for supporting user agents you should consider binding user interface changes directly to changes in wai-aria states and properties such as through the use of css attribute selectors. for example the setting of the aria-selected state state may change the background of a selected treeitem in a tree. this may also be done with javascript. treeitem role treeitem aria-selected true color white background-color 222222 treeitem role treeitem aria-selected false color white background-color beige authors should be aware that css attribute selectors are not supported in some browsers such as internet explorer 6. a consistent way to apply styling to reflect wai-aria semantics would be to assign an element a class name based on the wai-aria attribute being set using script as shown here function setselectedoption menuitem if menuitem.getattribute role menuitem return var menu getmenu menuitem var oldmenuitem getselectedoption menu set class so that we show selection appearance oldmenuitem.classname unselected menu.setattribute aria-activedescendant menuitem.id menuitem.classname selected showing and hiding sections in a widget the proper synchronization of showing and hiding sections in a widget with the wai-aria display state is also critical. some platform accessibility apis provide events for applications to notify the assistive technology when pop-ups such as menus alerts and dialogs come into view or go away. rich internet applications can assist browsers which support these conventions by creating an entire section and then insert it into the document object model dom as a subtree of the parent element activated to show the pop-up and then removing the section from the inserted area when the pop-up goes away. or using the following style sheet properties to show and hide document sections being used to represent the pop-up items menus or dialogs display block display none visibility visible visibility hidden by monitoring these behaviors a user agent may use this information to notify assistive technology that the pop-up has occurred by generating the appropriate accessibility api event. some assistive technologies may use the dom directly to determine these when pop-up occurs. in this case the first mechanism of writing a section to the dom would work using the dom events as demonstrated here. create new table row with table cell and div var newtr document.createelement tr var newtd document.createelement td var newdiv document.createelement div newtr.appendchild newtd newtd.appendchild newdiv insert this new table row before the node selected var container thenode.parentnode container.insertbefore newtr thenode remove thenode selected container.removechild thenode however if you are using css to show and hide sections of the dom 2 it is essential that you set the corresponding wai-aria aria-hidden state property to indicate that the section is visible or hidden and synchronize it with your css styling as shown here aria-hidden true visibility hidden div role button aria-haspopup true aria-owns mypopupmenu div role menu aria-hidden true id mypopupmenu div support basic accessibility such as alternative text on images when an image is used to represent information within a component such as image buttons you need to set the alternative text on those images. this is then mapped by the user agent to the accessible name in the platform accessibility api. using our example div role toolbar tabindex 0 aria-activedescendant button1 id tb1 onkeydown return optionkeyevent event onkeypress return optionkeyevent event img src buttoncut role button id button1 alt cut img src buttoncopy role button id button2 alt copy img src buttonpaste role button id button3 alt paste div establish wai-aria relationships between this widget and others once you have made the basic widget accessible you may then need to establish its relationship to other widgets. examples of this are aria-labelledby aria-controls aria-describedby and aria-flowto. the details of using these relationships are described in the relationships section of this document. other relationships which should be considered are more declarative and provide context to the widget within a set. for these aria-level aria-posinset and aria-setsize are provided. if you structure your document object model appropriately so that the user agent can determine this information from it using the dom hierarchy directly you do not need to set these properties. there are however situations in rich internet applications where all the elements in a container are not in the dom at one time such as when you can only render the ten of fifty items in a subtree. in this case the user agent cannot determine the number of tree items aria-setsize for the position in the set aria-posinset and potentially the tree depth aria-level from the dom. in these situations you will need to provide these wai-aria properties. review widget to ensure that you have not hard coded sizes the ability for applications to respond to system font settings is a requirement. most user agents are designed to meet this requirement. this also means your web application running within your browser is impacted when the user agent changes the font sizes to meet the need. if you have hard coded your font size in pixels an increase in system fonts will not be reflected in your web application. you must also not hard code the size of your widgets in pixels either. if the fonts are scalable but the widget they are encapsulated in is not then the text could flow outside your widget. follow these rules to allow your application to respond to system font settings establish a base set of font sizes used in widgets based on percentage of the container element font size. use css width borders margin padding background and positioning properties to specify the graphical rendering of widgets and their sub-components use percentage units or em units to specify widths of widget components an em is a the font unit of measure between the top and bottom of an upper case letter m. border widths padding and margins can use px units. use scripting for run time css positioning of widget sub-components in relation to other sub components. make sure all widgets use consistent height and width units of measure. percentages are the most reliable way to consistently specify proportional text sizes in widgets. the use of percentages and em should be used for specifying widths of a widget and the widget sub components. the use of percentages for text size and percentages and em units for widths support browser zoom capabilities to make widgets larger or smaller. pixels can be used for specifying line widths padding and margins. important most browsers today have a zoom feature which allow the user to magnify the entire web page. most legislation today requires that your application respond to system font and color settings and therefore you will want to consider the fact the system settings could adversely affect your web page should you decide to hard code pixel sizes. compensate for background images when in high contrast mode authors use background images when styling their widgets including situations where the background image is not merely decorative but informative. an example is a horizontal progress bar that it is filled by gradually revealing more of a background image. this is accomplished by initially setting the width of the element to zero and then incrementing its width in accordance with the degree of progress. high contrast mode is an operating system display modification that makes the screen easier to see for low vision users. some operating systems e.g. windows do not display background images when in high contrast mode. consequently the progress bar described above appears empty regardless of the progress. it is recommended that authors not use background images as the sole method to convey important information and to compensate with alternative or additional style rules. in the case of the progress bar example a technique that works when in high contrast mode is to style the element with a border. since the width of the element is updated as progress increases its border gradually expands horizontally forming an ever wider unfilled rectangle. this provides alternative visual feedback as to the extent of the progress. another technique is to replace a background image with text. consider a dialog that uses a background image for its close box. to compensate for the missing close box when in high contrast mode a lower case x is used instead. the compensation technique used depends on the context particularly the purpose of the background image. there are two general approaches with respect to detecting high contrast mode. they are 1 executing a script to determine if the system is in high contrast mode or 2 providing a preference to use alternative styles. the advantage of automatic detection is that some operating systems simply apply a different color palette when in high contrast mode and do not turn off background images. in that case authors need not compensate for missing background images. however detection of high contrast mode by script is relatively expensive compared to a preference that users can set and presumably users can see whether background images are displayed in high contrast mode on their system. it is up to individual authors to decide which method they find acceptable for their particular situation. the following code fragment outlines how to detect high contrast mode. define styles for the high contrast test element hicontrasttestel border 1px solid border-color red green position absolute height 5px top 999px background-image url resources blank.gif an onload event handler that inserts the high contrast test element and then tests its computed styles. function detecthicontrast var div document.createelement div div.setattribute id hicontrasttestel append div#hicontrasttestel to the body element var cs window.getcomputedstyle div var bki cs.backgroundimage var hicontrast false the css sets the top and right borders of the test element to red and green respectively. in high contrast mode either the borders are the same colour or there is no legitimate url to the background image. hicontrast cs.bordertopcolor cs.borderrightcolor bki null bki none bki url invalid-url if hicontrast apply hi contrast styles to compensate for missing background images. remove the test element from the document test with user agent assistive technology and people with disabilities to ensure you have set your wai-aria semantics correctly test your application with your user agent an assistive technology and a person with disability. example assistive technologies are screen readers and screen magnifiers. ensure that your user agent is designed to support wai-aria and their your assistive technology is designed to support wai-aria in the selected user agent. finding people with disabilities to do testing may be difficult but many companies employ people with disabilities including your customers and you should reach out to them to ask for help. other places to look are advocacy groups like the national federation of the blind or your local schools for the blind reading and learning centers and so on. the people you reach out to may someday need to use what you produce. 3. keyboard and structural navigation providing an effective navigation experience to the user is critical for usability. this section starts with guidance on how to provide effective keyboard navigation for widgets in a rich internet application environment. this includes a discussion on how to manage keyboard focus and the specifics on providing keyboard navigation for tooltips. this is is followed by a broader discussion on how to convey structural semantics for the entire web page. these semantics help an assistive technology provide additional navigation increase user productivity and render the page in an alternative formats. this rendering may be in different forms including but not limited to speech page restructuring and alternative input solutions. 3.1. providing keyboard navigation for widgets 3.1.1. wai-aria keyboard bindings and behaviors essential to accessible web 2.0 widgets is keyboard support to provide full operation and functionality of a widget through keyboard-only events. unlike traditional html form controls web 2.0 widgets typically have no inherent keyboard support. the developer must enable keyboard support for the widgets they create or use widget libraries with keyboard support. the model for keyboard support for web 2.0 widgets are graphical user interface gui operating systems like microsoft windows mac os x and other desktop operating systems like gnome and gtk. basic accessibility requirements for keyboard focus include support users who cannot use pointing devices due to physical or visual impairment to access the full functionality of the web application. all major software and web accessibility guidelines for people with disabilities require keyboard-only operation of the interface for accessibility. communicate accessibility information to assistive technologies on the type of widget and its associated state and properties. for example if a screen reader user hears a tree announced they know that pressing the right arrow key will expand a node. similarly when they hear a grid announced they know they can use their screen reader s table reading commands. 3.1.2. keyboard navigation between widgets the tabindex attribute enables focus to be moved via keyboard to html elements. for standard html 4.01 tabindex was limited to form and anchor elements. for wai-aria the tabindex attribute is now applicable to all renderable html elements with additional functionality designed to help the author produce keyboard accessible web 2.0 widgets. tab and shift+tab key move focus among widgets and standard html controls. widgets with tabindex 0 will be added to the tab sequence based on document order widgets with tabindex 0 will be added to the tab sequence based on the tabindex value widgets with tabindex 0 will not be added to the tab sequence but are enabled to receive keyboard focus. once a widget has keyboard focus arrow keys space enter key or other keyboard commands can be used to navigate the options of the widget change its state or trigger an application function associated with the widget. 3.1.3. keyboard navigation within widgets each element that receives keyboard focus needs to have a tabindex attribute set to its current active descendant element and itself if an active descendant does not exist. the element with keyboard focus is essential because it communicates information about the widget to assistive technologies like screen readers and magnifiers through operating specific accessibility apis like microsoft active accessibility msaa the apple ax apis and the atk accessibility toolkit. the tab key moves keyboard focus to the widget and other keys operate the features of the widget typically cursor keys enter key and space. the actual keys are up to the developer but best practices recommend using the same key bindings that are used to control similar widgets in common gui operating systems like microsoft windows mac os x and other desktop operating systems like gnome and gtk. javascript can use either the focus method to move focus to the appropriate element in the widget or it can use a wai-aria property called aria-activedescendant on the actual widget container to indicate which element in the widget must have focus. the following procedure should be followed when focus is completely dependent on the use of tabindex to provide focus in a widget set tabindex 0 to the current active descendant in the widget while setting tabindex 1 on all the other child elements of the widget as the user navigates e.g. arrows away from an item the old item gets a tabindex 1 and the new item gets tabindex 0 use the javascript method to set focus using its javascript focus method on the item whose tabindex 1 this procedure creates a roving tabindex. if you tab away and the tab back to the widget the same last active descendant becomes active again. this relieves the author from having to compute and set the focus to the last activedescendant. conversely if you use the wai-ari aria-activedescendant property things get a lot easier set tabindex 0 on the element which is the composite widget and set its activedescendant property to the id of the child you wish to be active as the user navigates e.g. arrows away from an item in the widget refresh the activedescendant property on the containing widget to the id of the new active descendant child. the browser will then be responsible for managing focus changes for you. for greater detail see using tabindex to manage focus among widgets. in both scenarios the author must indicate through styling and or markup which element in the widget has focus or is active. 3.1.4. keyboard shortcuts for widgets it is useful to provide keyboard access to widgets to focus a widget directly and to activate the features within the widget. these may be mnemonics that use a letter from the label of the control as well as other special keys that perform familiar operations on the system. when providing non-standard key commands document them so the user knows how to use them. when localizing the user interface it may be necessary to localize keyboard mnemonics as well in order to keep them apparent. be sure not to introduce key conflicts when doing this and ensure that the correct key commands remain apparent to the user. 3.1.5. example keyboard operation radio group radio see working radio button examples from the university of illinois. key bindings for radio group behavior example key description of radio group behavior tab key if no radio button is checked focus moves to the first radio button in the group but the radio button remains unchecked. if one radio button is checked focus moves to the checked radio button. if shift+tab is pressed focus moves to the last radio button in the group but the radio button remains unchecked. space bar checks the radio button with keyboard focus this is a special case when using tab and no radio buttons have been marked as checked down arrow if no button is checked check the first radio button. if the last radio button is checked check the first radio button. otherwise move the check from the current radio button to the next radio button. up arrow if no button is checked check the last radio button. if the first radio button is checked check the last radio button. otherwise move the check from the current radio button to the previous radio button. in this radio group example the tabindex of the first and last radio button elements has a tabindex 0 assuming none of the radio buttons is checked the remaining radio elements have tabindex 1 as soon as the first or the last radio button receives focus it changes the tabindex value of the other radio button to 1. if none of the radio buttons is selected the and the keyboard focus leaves the group the first and the last radio buttons have their tabindex values set to 0. 3.1.6. other widget authoring practices the common widget design patterns section of this document contains best practices such as keyboard navigation for creating common widgets found on the web. this section contains miscellaneous authoring practices that you should also consider. 3.1.6.1. maintain a valid format for aria-valuenow it is essential that application vendors maintain a valid format for aria-valuenow and aria-valuenow should accurately represent the value of the widget.the value must be within range of aria-valuemin and aria-valuemin where the value of aria-valuemin is less than or equal to the value of aria-valuemax throughout the life cycle of your widget. if aria-valuemin is not less than or equal to the value of aria-valuemax or if the aria-valuemax is indeterminate this creates an error condition that will be handled by the assistive technology resulting in undesirable results. should an alternative text equivalent be needed to properly represent the aria-valuenow such as a day of the week then you should accompany the aria-valuenow with an appropriate aria-valuetext equivalent such as in this example div role slider aria-valuenow 1 aria-valuemin 1 aria-valuemax 7 aria-valuetext sunday here the values 1 through 7 represent the days of the week and aria-valuenow of 1 is equivalent to the first day of the week or sunday. when aria-valuetext is made available aria-valuenow should also be treated as an index which is 1 based. 3.2. providing keyboard focus one way to provide keyboard support in x html is with form and list elements that accept keyboard focus by default. with the tab key the user can navigate to these types of elements. however when building sophisticated widgets it s necessary to be able to control keyboard navigation exactly. authors may require or prefer to use host language elements that do not have built-in keyboard navigation features. for example the author may wish to provide keyboard navigation without altering the tab order. navigating within large composite widgets such as tree views menubars and spreadsheets can be very tedious and is inconsistent with what users are familiar with in their desktop counterparts. the solution is to provide full keyboard support using the arrow keys to provide more intuitive navigation within the widget while allowing tab and shift+tab to move focus out of the widget to the next place in the tab order. a tenet of keyboard accessibility is reliable persistent indication of focus. the author is responsible in the scripts for maintaining visual and programmatic focus and observing accessible behavior rules. screen readers and keyboard-only users rely on focus to operate rich internet applications with the keyboard. 3.2.1. using tabindex to manage focus among widgets one requirement for supporting the keyboard is to allow focus to be set to any element. the tabindex attribute can be used to include additional elements in the tab order and to set programmatic focus to them. originally implemented in internet explorer 5 the feature has been extended to opera gecko-based user agents such as firefox and webkit-based user agents such as safari. the following table outlines the use of the tabindex attribute use of the tabindex attribute tabindex attribute focusable with mouse or javascript via element.focus tab navigation not present follows default behavior of element only form controls and anchors can receive focus. follows default behavior of element zero tabindex 0 yes in tab order relative to element s position in document positive tabindex x where x is a positive integer between 1 and 32768 yes tabindex value directly specifies where this element is positioned in the tab order. negative tabindex 1 yes no author must focus it with element.focus as a result of arrow or other key press setting a tabindex value of 1 to an element enables the element to receive focus via javascript using the element.focus method. this method is used to enable arrow key navigation to elements. each element that can be navigated to via arrow keys must have a tabindex of 1 to enable it to receive focus. here are just a few additional tips to help you with managing keyboard focus use focus and blur events or event delegation to monitor changes to the current focus focus and blur events can now be used with every element. modern browsers now support an activeelement property on the document object to get the focused element. don t assume that all focus changes will come via key and mouse events because assistive technologies such as screen readers can set the focus to any focusable element and that needs to be handled elegantly by the javascript widget. techniques such as event delegation for example intercepting events on a list rather than on every listitem can greatly increase web application performance and code maintainability and authors are encouraged to use javascript best practices whenever possible. note the activeelement property is now standard in html 5. follow keydowns to move focus a keydown event handler can determine the next object to receive focus and call that element s focus method. use onkeydown to trap key events not onkeypress key press events do not fire for all keys and they vary across browsers. dynamically change focusability using the tabindex property you may want to update tabindex values if a custom control becomes disabled or enabled. disabled controls should not be in the tab order. however you can typically arrow to them if they re part of grouped navigation widget. when an element receives focus it should change the tabindex value to 0 to make an element the default element of the widget. this is important if the user leaves the widget and returns to the widget again so focus is on the last element of the widget the user was on. if other elements of a widget can receive keyboard focus only one element of the widget should have a tabindex value of 0. use element.focus to set focus do not use createevent initevent and dispatchevent to send focus to an element because these functions do not change the focus. dom focus events are informational only generated by the user agent after an element has acquired focus but not used themselves to set focus. the use of focus pseudo-class selectors to style the keyboard focus is not supported in many versions of internet explorer. authors should use the active pseudo-class which older versions of ie treat like focus in conjunction with the focus pseudo-class. example a focus a active text-decoration underline if the related css pseudo-classes are not appropriate or not supported in all browsers authors can use javascript techniques to indicate an appropriate focus alternative such as using focus and blur events to toggle a classname on an element. always draw the focus for tabindex 1 items and elements that receive focus programmatically when supporting versions of internet explorer older than 8 choose between changing the background color via something like this.style.backgroundcolor gray or add a dotted border via this.style.border 1px dotted invert in the dotted border case you will need to make sure those elements have an invisible 1px border to start with so that the element doesn t grow when the border style is applied borders take up space and ie doesn t implement css outlines prevent used key events from performing browser functions if a key such as an arrow key is used prevent the browser from using the key to do something such as scrolling by using code like the following span tabindex 1 onkeypress return handlekeypress if handlekeydown returns false the event will be consumed preventing the browser from performing any action based on the keystroke. in addition to the return value the browser must call the event methods that will prevent the default action for ie this is setting the event property returnvalue false and for other browsers supporting the w3c event model this means calling the preventdefault method of the event object. span tabindex 1 onkeydown return handlekeydown if handlekeydown returns false the event will be consumed preventing the browser from performing any action based on the keystroke. use key event handlers to enable activation of the element for every mouse event handler a keyboard event handler is required. for example if you have an onclick dosomething you may also need onkeydown return event.keycode 13 dosomething in order to allow the enter key to activate that element. note there are user agent-specific considerations for key event handling. consider using a roving tabindex for complex widgets if you are not using the aria-activedescendant property. 3.2.2. using activedescendant to manage focus for widget children in addition to tabindex wai-aria provides the aria-activedescendant property for managing the focus of child elements within a widget. widgets like grid and tree typically manage their children. the root element of the widget should have a tabindex value greater than or equal to 0 to ensure that the widget is in the document tabbing order. rather than setting a key event handler on each element within a larger component the event handler can be set on the parent element such as the tree. it is then the job of the parent element to manage the focus of the children. the parent may use the aria-activedescendant property to indicate the active child. for example the container element with the role of tree can provide an onkeydown event handler so that each individual tree item within the tree does not need to be focusable and to listen for the keydown event. the container object in this case the tree needs to maintain the point of regard and manage which individual child item must be perceived as active. important for a given container widget where activedescendant must cause focus events to be fired to ats the actual focus must be on the container widget itself. in html this is done by putting tabindex 0 on the container widget. the key handler on the parent captures the keystrokes and determines what item becomes active next and updates the aria-activedescendant property with the id of the appropriate next active child element. the browser takes that id information and generates the focus event to the assistive technology. each individual element does not have to be made focusable via a tabindex value of 1 but it must be styled using css to indicate the active status. as active status is moved to the next descendant ensure that it is scrolled into view using scrollintoview see section managing focus with scroll below for more information. 3.2.3. managing visual focus with tabindex alone an alternative to using activedescendant is to have the parent element in response to the same keyboard input move focus to its children by first removing tabindex from children that do not have focus which removes them from the tab order. this would be followed by setting the tabindex to 1 on the element that is to receive focus and then using script to set focus on the element to receive focus. as with aria-activedescendant this omits managed children from the tabbing order. it enables browsers that do not yet support aria-activedescendant to maintain keyboard navigation and it provides notification to many assistive technologies like screen magnifiers to move visual focus without relying on other wai-aria properties. today this technique will work in most user agents but in the long run aria-activedescendant will require less work by the developer. although not always ideal based on the widget you are creating one benefit of using tabindex to manage focus on an element is that the user agent will scroll the element into view when focus is set to the it. this is not the case for aria-activedescendant. when setting or updating the aria-activedescendant property e.g. aria-activedescendant cell23 authors must ensure that the element with id cell23 is in view. in either case consider positioning your widget in the visible area of your browser to maximize usability. this can be achieved using available javascript scrolling functions. 3.2.4. managing focus with scroll in some browsers a javascript call to scrollintoview on this element should suffice but in browsers where this is unreliable authors should explicitly set the scrolltop and scrollleft properties of the cell23 element and its ancestors to scroll the element into view. scrolltop and scrollleft adjust the node positions by the amounts pixels needed to scroll a node into view. scrolling values are adjusted by the amounts pixels needed to scroll a node into view. this is done by comparing the sizes of the nodes using available measurements such as scroll+offset+clientwidth height left top. it s important to note that you have to adjust a node so that it s viewable within the context of its parent node. then you have to move up the dom tree and make each parent node visible. for example create a custom scrollintoview method that is called at various times including coincidence with the setting of the aria-activedescendant property. the method takes a dom node argument say n here is the high level algorithm if n is already in view stop otherwise continue. adjust n.scrolltop and n.scrollleft such that it is in view. adjust scrolltop and scrollleft for the ancestor nodes of n such that that the region of the ancestors which n consumes is visible. this is a minimum-position-change algorithm. understanding how the dom scrollintoview works across browsers is important. browsers including firefox3 force the node either to the top or the bottom of the screen as defined by the single boolean parameter even if its already in view. this is problematic when you only need to scroll horizontally to see the element. it is also problematic when the node is partially off the bottom of the screen and the parameter is true which forces the node all the way to the top and vice versa with the top going to the bottom on false ie forces the node to the left of the client area or right in right-to-left mode even if it s horizontally in view already. the scrolltop and scrollleft functions create some challenges. scrolltop is always accurate but misleading with respect to inner nested scrollbars. scrollleft cannot be relied on in right-to-left languages because it is sometimes negative and sometimes positive especially with respect to inner nested scrollbars. different browsers handle right-to-left completely differently. 3.2.5. managing the perception of a dual focus often applications give the perception of having a dual focus. two examples of this are multi-selection list boxes and selected tabs within a tablist when focus is in a tabpanel. in the case of a muti-selection list box a developer may gray selected items as they move focus to list box items to toggle their selected state. in the case of a tabpanel the user selects a tab but then navigates to a focused item in the corresponding tabpanel the tab appears to also have focus. in reality only one element may have focus in an application. in these scenarios authors should ensure keyboard focus is set on the current element that visibly receives keyboard user input while ensuring other highlighted elements have an aria-selected state of true until de-selected. when the de-selection occurs such as when a multi-select item is de-selected or a user moves to a new tab and de-select the old tab the author should ensure that the visible selection of the de-selected item is removed. 3.2.6. author-defined keyboard short-cuts or mnemonics author-defined keyboard short-cuts or mnemonics present a high risk for assistive technology users. because they are device- browser- and at-dependent conflicts among key bindings are highly probable. therefore if you needed to use accesskey you should be aware that it will behave differently in different browsers. it also may not work with small devices so it is still advisable to ensure that all features are accessible with the basic keys like tab shift+tab arrow enter space and escape. the xhtml 2 working group is currently developing a new access module to address this issue and we hope to have it or a feature like it in future versions of x html. refer to section 9 implementation guidance. 3.2.6.1. supporting tooltips with the keyboard a tooltip is a popup messages typically triggered by moving a mouse over a control or widget causing a small popup window to appear with additional information about the control. to provide simple text tooltips the html title attribute should more than suffice because the user agent will render it for tooltips. when creating a tooltip it is essential that the user be able to activate it using the keyboard. when a form control or widget receives keyboard focus the tooltip must display. when the form control or widget loses focus the tooltip must disappear. browsers do not currently support this functionality. the following code snippet from the icita site shows the use of a onfocus tooltipshow function to display the tooltip when focus is placed on an element. html lang en-us head title inline tooltip example 1 title link rel stylesheet href css tooltip1_inline.css type text css script type text javascript src js tooltip1_inline.js script script type text javascript src js widgets_inline.js script script type text javascript src js globals.js script link rel icon href http www.cites.uiuc.edu favicon.ico type image x-icon link rel shortcut icon href http www.cites.uiuc.edu favicon.ico type image x-icon head body onload initapp div id container h1 tooltip example 1 h1 h2 create account h2 div class text label for first first name label input type text id first name first size 20 onmouseover tooltipshow event this tp1 onfocus tooltipshow event this tp1 aria-describedby tp1 aria-required false div id tp1 role tooltip aria-hidden true your first name is optional. div div 3.2.6.2. when keyboard handlers shortcuts steal the keys similar to the tip specified in using tabindex to manage focus on widgets a web application should cancel or swallow the keyboard event in the keyboard handler to prevent the key from being used outside the web application. for example if the user presses control+pagedown in a tab panel in a web application this keyboard event should not also go to the user agent which would cycle the active browser tab confusing the user. 3.2.7. providing navigable structure within web pages this section takes a broader look at the web page. it is intended to assist you in conveying a logical usable and accessible layout to an assistive technology or adaptive system designed to modify the visual layout to meet the users needs. one of the deficiencies of x html for disabled users has been the usability of keyboard navigation. users dependent on a keyboard for navigation have been forced to tab everywhere in the document as the only keyboard accessible document elements are form and anchor elements. this has forced developers to make most everything a link to make it keyboard accessible and to get to each link you have to tab to it. with the advent of portals and other content aggregation means web pages are divided into visible regions and there has been no vehicle to get to them other than perhaps to do things such as create a skip link at the top of the page to the main content make the head of each perceivable region search bar stock quote tv listing etc. an h1 tag there are number of problems with this approach both force the user interface to change to support accessibility in the case of using h1 to mark your regions this is not consistent across web sites the semantics are limited to main content and a section neither convey the need for the rich internet application developer to control keyboard navigation to an assistive technology this remainder of this section provides the author with a playbook for using wai-aria to add semantically rich navigation structure in a web page so that an assistive technology may provide an effective user experience and avoid these shortcomings. 3.2.7.1. steps for defining a logical navigational structure due to the complexity of today s web content it is imperative that all content reside in a navigation landmark. sight and mobility impaired users must be able to quickly access a list of landmarks for a web page to be used as a table of contents. this allows the user to quickly navigate to important sections of the page without endless tab navigation. if this is not done then content will be orphaned and missed by the user. in fact many of today s accessibility test tools have built-in rules to flag this issue as a compliance error. this section defines how to create these navigable regions of the page identify the logical structure of your page break up your page into perceivable block areas which contain semantically associated information called regions you can further break down each region into logical regions as needed. this is a common process undertaken by portal developers who break the page into perceivable regions called portlets. think about the user wanting to navigate to these logical block areas on your web page. write down a description of what you believe each region to be. depending on your web application you may then need to break it into sub regions depending on the complexity of your web application. this is a recursive process. a user will look at these perceivable areas like pealing an onion. you might have an outermost collection of perceivable regions or block areas and upon entering each region you may have a collection of regions within it. implement the logical structure in markup implementing the block structure in markup often involves wrapping elements contained with a region such as a div or iframe with visible borders so that each region or block is perceivable to the user. label each region once you have broken up each region you need to label it. the start of each region must have a perceivable header and it should be used to label the region. for details on how to do this see section 3.4.3.1 header levels vs. nesting level to create a header to label each region. if you re finding it difficult to come up with a label for the region make sure at least to use one of the standard roles defined in the following step. the drawback of not providing a label is that users will not know the purpose of the region. by definition regions would be included in a summary of a page. if an assistive technology were to summarize it would be unable to provide information about the section without a label. assign landmark roles to each region now that you labeled your regions you need to assign them semantic navigation landmarks. landmarks are a vast improvement over the rudimentary skip to main content technique employed prior to wai-aria. if possible it is best to use these as landmarks. skip to main content links may impact the placement of web application elements. this may be a consideration for developers that want to try to keep their web application in a specific visible area. consequently layout adjustments may need to be made to support skip to main content links. also skip to main content links are limited in that they only address only one main content area. wai-aria provides a collection of landmarks which are applied to each of the regions you identified in step 2. the presence of common semantic navigation landmarks allows each site to support the same standard and allows your assistive technology to provide a consistent navigation experience an important feature for screen readers and alternate input solutions. for users with cognitive and learning disabilities the landmark information could be used to expand and collapse these regions of your page to aid in simplifying the user experience by allowing the user to manage the amount of information processed at any one time. wai-aria landmark roles that are applied to elements having strong native semantics are not mapped consistently to the platform accessibility api. an example is the table element. for this reason it is recommended that authors apply landmarks to div and span containers. there are also mainstream benefits of providing navigation landmarks. your browser may assign key sequences to move focus to these sections as they can be set on every site. navigation to these landmarks is device independent. a personal digital assistant pda could assign a device key to get to them in your document. the common landmarks in wai-aria include application represents a region of the page representing a unique software unit executing a set of tasks for its users. it is an area where assistive technologies should also return browse navigation keys back over to the web application in this region. if the entire web page has a role of application then it should not be treated as a navigational landmark by an assistive technology. banner a region that contains the prime heading or internal title of a page. complementary any section of the document that supports but is separable from the main content but is meaningful on its own even when separated from it. contentinfo meta information which applies to the first immediate ancestor whose role is not presentation. form a region of the document that represents a collection of form-associated elements some of which can represent editable values that can be submitted to a server for processing. main main content in a document. navigation a collection of links suitable for use when navigating the document or related documents. search the search tool of a web document. to set a landmark in your page div role navigation title table of contents div div role main title game statistics div for application landmarks with static prose if you have a regional landmark of type application and static descriptive text is available then on the application landmark include an aria-describedby reference to associate the application and the static text as shown here div role applicaton aria-labelledby calendar aria-describedby info h1 id calendar calendar h1 p id info this calendar shows the game schedule for the boston red sox. p div role grid div for landmarks unsuited to specialized region wai-aria roles you can create custom regional landmarks by using a generic region. while it is not essential to label these specialized regions with a header you should provide a title to ensure that the region name is accessible to all users just as you would the standard regional landmarks. see header levels versus nesting levels for directions on how to label the region. div role main div role region title weather note the region role is generic and should only be used when a more specific role is not applicable. indicate to the assistive technology who controls the keyboard navigation today s screen readers for the blind have been designed to give the user a browsing experience meaning the screen reader consumes a number of keys to aid in the browsing experience. for example the up and down arrow keys are used to read the next and previous line of text on your web page. accessible rich internet applications will use these keys in an application to navigate within widgets like a tree view. assistive technologies must be able to identify widgets which implement wai-aria and allow them use of the keyboard. however if you have used numerous widgets to form an application you must set the role on the encompassing region to application. should you have regions which should be browsed as documents within the application region you should mark those regions with a document role as needed. see section 3.4.2 structural roles used to facilitate assistive technology navigation. 3.2.7.2. structural roles that facilitate navigation with assistive technologies while wai-aria is designed to address many disabilities this section is best described in terms of screen reader use. in desktop applications screen readers typically treat widgets as discrete entities reading and interacting with each widget one at a time. the user moves the point of focus from widget to widget using tab shift tab mnemonics or accelerators keyboard commands which are usually provided by the application or the operating system. we refer to this mode of interaction as application mode. when viewing web content however screen readers often gather information about all the widgets in an area and present them in a document-like view which the user navigates using keyboard commands provided and controlled by the screen reader. think of this mode as a virtual environment that presents web content in a way that makes it convenient for adaptive technology users to navigate and read. this is sometimes called browse mode or virtual mode. we refer to this as document browse mode. because many screen readers provide document mode navigation support using single key mnemonics on the alpha-numeric keyboard they may provide a third mode called forms mode used to interact with form controls that are encountered in document mode. behavior in forms mode is similar to that of application mode. the key feature of forms mode is that it can be toggled with document mode to make it easy to both interact with a specific widget and read virtualized content of which the widget is a part. since as described above a screen reader s perception of an area as either a document or an application greatly influences how the user reads and interacts with it wai-aria provides content authors a way to indicate whether their pages must be viewed as applications or documents by assistive technologies. to set document or application mode follow these steps set the application role after you have divided your web page into regions through the use of role landmarks and custom regions you must make a decision is your web page an application or not if the majority of the content is application-like the default interaction mode should be set to application with document regions embedded within the application if applicable. otherwise the default interaction mode is document-like and therefore should not be overridden by the use of a global role of application. in this case the application role can be placed on discrete regions within the document if applicable. if it is set the role of application on the body tag as follows body role application when using application all static text must be associated with widgets groups or panes via using the aria-labelledby and aria-describedby properties otherwise it will not be read by the screen reader when the user navigates to the related widget or group. special considerations if you have selected to have a role of application on the body tag it is recommended that a widget have focus after the page is first loaded. there may be an instance when an application itself needs to receive focus such as an application consisting solely of a scrollable editable text area. if when your page loads and you should have focus on a widget this is a strong indicator that your web page should have role of application. if your page has only a few isolated widgets like pop-up calendars located on a web page it is not necessary to expressly set the role of application on the body. screen readers based on widget roles must be able to provide access to these widgets without recognizing the entire page as an application. also browsers make use of a feature called the contenteditable attribute which will be incorporated into html 5. contenteditable allows an author to turn the browser section into a rich text editor similar to a word processor. any section which has contenteditable set to true is considered a widget. if the body element has been given the role of application please follow step 3. otherwise the web page is considered a document and no further action is required in this regard. dialogs and alert dialogs special case application roles wai-aria provides dialog and alertdialog roles that are to be treated as special case application roles. like application screen readers will leave the main job of keyboard navigation up the dialog. when using dialog all static text must be associated with widgets groups or panes using the aria-labelledby and aria-describedby properties otherwise it will not be read by the screen reader when the user navigates to the related widget or group. unlike an application your web page is unlikely to start out as either of these two roles but rather the author is most likely to dynamically create dialogs or alertdialog sections within the web page. unlike dialog descriptive text of the alert does not need to be associated via a relationship as the contents of alert dialogs will be read automatically by the screen reader when the dialog opens. set the document role the default mode for a screen reader to be processing an html web page is document browse mode. this is equivalent to having a role of document on the html body tag. if you have already specified a role of application on the body tag there may be times in which you tell the screen reader to switch into document browse mode and start stealing the necessary keys to browse a document section of your web page. these keys are the typical keys used by wai-aria widgets and to provide this level of navigation the keys must be stolen from your browser. to mark areas of your page to tell the assistive technology when to switch into document browse mode look at the regions landmarks you have defined and determine which ones must be browsed as a document or navigated as an application. for each region which must be browsed in document browse mode embed a div element within it with the role of document as follows div role document now when a screen reader encounters this region it will change its interaction model to that of document browsing mode. 3.2.7.3. implicit nesting and headings this section discusses the use of the heading role and nesting levels. 3.2.7.3.1. header levels versus nesting levels the heading role value signifies a heading for a section of the document instance. use of the heading role indicates that a specific object serves as a header. the region of the document to which the heading pertains to should be marked with the aria-labelledby property containing the value of the id for the header. if you have a heading and there is no element containing the content that it heads wrap the content in a div bearing this aria-labelledby attribute. if headings are organized into a logical outline the aria-level property can be used to indicate the nesting level. here is an example with and without aria. note that the preferred way is using native semantics without aria but the approach with aria is shown first to demonstrate use of the heading role using aria div role main aria-labelledby page_title p id page_title role heading aria-level 1 top news stories p main page contents here div using native markup div role main aria-labelledby page_title h1 id page_title top news stories h1 main page contents here div 3.2.7.3.2. owns repairs nesting assistive technology briefs users on the context where they are. when they arrive at a new page a page summary may be given. when they move into a new context some of the labeling from elements containing the new focus or reading location may be rendered by the assistive technology to give context to the details to be read next. the syntactic structure of a page provides the default nesting of contexts. if a paragraph is nested in a div or table cell it is assumed that labels for the div or headers for the table cell are pertinent to what is in the paragraph. on the other hand it is not possible to always flow the logical structure one-to-one into the parse structure. the aria-owns relationship is provided to annotate logical nesting where the logical child is not a syntactic descendant of the logical parent. in a rich internet application updates may be made to the document without updating the logical syntactic structure yet elements may appear to be added to the document structure. from a dom and accessibility hierarchy perspective aria-owns is a fallback mechanism to using the tree hierarchy provided in the dom. an example of where aria-owns is needed is a treeitem where children in a folder subtree are added to a visible subtree but not reflected in the actual document subtree of the folder. the aria-owns relationship can be used to associate the folder with the new adopted child. for more details on the use of aria-owns see section 4.2 owning and controlling. the aria-owns relationship is used to indicate to a user agent that a menu is an adopting parent of a sub menu. another use for aria-owns is a hierarchical diagram where the child nodes of the diagram are not be adequately represented using the dom structure. 3.2.7.4. directories groups and regions there are several wai-aria roles used to indicate a collection of user interface objects and each has a distinct purpose directory contains a static table of contents group small set of related user interface objects that would not be included in a page summary or table of contents by an assistive technology region section of related user interface objects that should be included in a page summary or table of contents. the use of each is described below. 3.2.7.4.1. directories and their applicability the wai-aria role directory allows authors to mark static table of content sections of a document. prior to wai-aria the user would need to guess if an area of a document actually pertained to the table of contents. authors should mark these sections within a document with a role of directory. div role directory ul li global warming causes ul li co2 buildup li li auto emissions li li factory emissions li li destruction of rainforests li ul li li tailoring co2 buildup ul li elimination of the incandescent light bulb li li hydrogen fuel cells li li solar energy li li wind power li ul li ul div 3.2.7.4.2. groups and their applicability authors should use a role of group to form logical collections of items with related functionality in a widget. a group should not be considered a major perceivable section on a page. a group neither has a heading nor appears in the table of contents. a group may delineate a set of treeitems having the same level in the tree or it may be used to group a set of related checkboxes in a form. other examples include a row in a grid a row is a specialized group representing a row in a grid a group of children in a tree widget forming a collection of siblings in a hierarchy or a group of items having the same container in a directory proper handling of a group by assistive technologies therefore is determined by the context in which it is provided. group members that are outside the dom subtree of the group need to have explicit relationships assigned for them in order to participate in the group. groups may also be nested. if an author believes that a section is significant enough in terms of the entire document instance then the author must assign the section a role of region or one of the designated standard landmarks. the designated landmark roles are listed in the section regions and xhtml role landmarks. 3.2.7.4.3. regions and their use when defining a region for a section of a document authors must consider using standard document landmark roles defined in the xhtml vocabulary. this makes it possible for user agents and assistive technologies to treat roles as standard navigation landmarks. if the definition of these regions is inadequate authors must use the wai-aria region role and provide the appropriate title text. for more information on the use of region see regions and xhtml role landmarks. 3.2.7.5. remaining structural roles columnheader directory grid gridcell img list listitem row rowheader separator treegrid 3.2.7.5.1. tabular structure-related roles supporting tabular widgets a number of structural roles support the tabular widgets grid and treegrid. these structural roles indicate additional keyboard navigation as well as the ability to select rows and or columns. typically you would apply these roles to an underlying table in the base markup as shown here table role grid however that may not work for the developer in all instances such as when the developer has need for a div or span or when additional semantics are needed. to assist the following roles are provided to support tabular widgets columnheader grid gridcell row rowheader treegrid when constructing a gridor treegrid the author must use gridcells for the actual cells table role grid tr td role columnheader apples td td role columnheader oranges td tr tr td role gridcell macintosh td td role gridcell valencia td tr table unlike table cells within a table authors should ensure a grid s gridcells are focusable through the use of tabindex in html or aria-activedescendant on the grid.they may also be editable as is shown in the above example. treegrid s may require expanding and collapsing rows which may not be performed using a tr in these instances authors will use an html div wai-aria provides a role of row which may be assigned to the div to convey to the assistive technology that this is still a row. if you decide to not use the native html table elements and choose more flexible elements such as div and span s with applied wai-aria roles in this section you should structurally lay out your elements in line with what you would expect from html. all of your rowheaders should be in a row and your gridcells should be children of each subsequent row in the same format as html for td s and th s within tr s. 3.2.7.5.2. marking descriptive sections a new feature of wai-aria is the ability to associate descriptive text with a section drawing form element picture and so on using the aria-describedby property. the use case for aria-describedby is to reference the local id of the long description. the most common use case for longdesc is for the author to create a separate file to describe a picture. it is prefereable to have the descriptive text in prose as well so that it is readily available to all users. this is useful for authors who do not want to create a separate document that contains the description and for cognitively impaired users who can be confused by context changes when having to go to another page for the description. yet like longdesc descriptive text is treated separately from the short name provided by the title or alt attributes in html. the aria-describedby property allows for the text of hidden elements to be used for accessible descriptions. some screen reader vendors have used non-standard attributes to provide hidden help text for form elements. in order to standardize this feature hidden text is exposed in the description property of accessibility api objects when referenced by aria-describedby. img src foo alt abbreviated name aria-describedby prose1 div id prose1 the prose in this div describes the image foo in detail. div this is the preferred vehicle for providing long descriptions for elements in your document. when the author does not desire the entire descriptive text to be located on the main page aria-describedby can also be used to point to a link to another page. div id figuretitle figure 1-1 entity relationship diagram showing emp and dept div img src foo aria-labelledby figuretitle aria-describedby link1 a href descriptionlocation.html id link1 description of figure 1-1 entity relationship diagram showing emp and dept a div it is not good practice to use the above pattern when the describing element the a tag with id link1 is hidden since there is no way for a user to navigate to and activate the link. use the technique only when the description is not hidden. 3.2.7.6. miscellaneous xhtml section roles in order to synchronize with the xhtml role attribute module wai-aria includes two xhtml roles which are neither landmarks nor widgets of any kind. these roles were incorporated to replace standard elements found in host languages. these roles are definition and note. if either role has a corresponding element in the host language it is recommended that authors use the corresponding element in the host language. the definition role indicates a definition statement in your document. for html developers implementing lists of definitions we recommend you using the dl dt and dd elements rather than marking an arbitrary element with a role of definition. an arbitrary element would be appropriate for inline definitions used in conjunction with the dfn element. example of an inline definition with an explicit labelledby relationship p the doctor explained it had been a dfn id placebo placebo dfn span role definition aria-labelledby placebo an inert preparation prescribed more for the mental relief of the patient than for its actual effect on a disorder. span p example of an inline definition with an implicit labelledby relationship determined by nesting p the doctor explained it had been a span role definition dfn placebo dfn an inert preparation prescribed more for the mental relief of the patient than for its actual effect on a disorder. span p note in the case where host language semantics do not allow for implicit nesting of definitions terms inside definition roles authors should explicitly use the aria-labelledby attribute even when the definition term is nested in the definition as shown here p the doctor explained it had been a span role definition aria-labelledby placebo dfn id placebo placebo dfn an inert preparation prescribed more for the mental relief of the patient than for its actual effect on a disorder. span p the following is an example using a definition list dl dt id anathema anthema dt dd role definition aria-labelledby anathema a ban or curse solemnly pronounced by ecclesiastical authority and accompanied by excommunication dd dd role definition aria-labelledby anathema a vigorous denunciation cursor dd dt id homily homily dt dd role definition aria-labelledby homily a usually short sermon dd dd role definition aria-labelledby homily a lecture or discourse on or of a moral theme dd dl the note role defines a parenthetic or ancillary remark to the main content of the resource. it also allows assistive technologies to skip over this section of the document unless more information is requested about the main content. div role main aria-labelledby foo h1 id foo wild fires spread across the san diego hills h1 strong winds expand fires ignited by high temperatures div div role note this article was last updated july 30 2008 at 6 05pm. div 3.3. making a dialog modal wai-aria provides for two dialog roles dialog and alertdialog. when authors simulate dialogs on a web page they often limit their interaction considerations to the mouse. unlike graphical user interface dialog boxes on a desktop computer a user during keyboard navigation could accidentally navigate outside the dialog box and become disoriented. this can happen when the user is tabbing in the dialog. a modal dialog prevents the user from setting focus outside of the dialog until the dialog is closed. mouse clicks outside of the dialog must be ignored and the user must not be able to tab into or out of the dialog itself. all wai-aria enabled dialog boxes should be modal. this section describes how. mouse clicks outside of the dialog can be prevented by creating a css positioned element that is the size of the viewport to append as a child of the body element. set the css z-index of this element so that it is above all other elements on the page except for the dialog element. set the tabindex of the underlay element to tabindex 1 to prevent it from receiving focus via a keyboard event or mouse click. you may lower the opacity of the underlay element in order to emphasize that the dialog itself is modal and has focus. depending upon the action to be performed by the dialog the object with focus before the dialog box is opened should be saved. this will allow restoring focus to this element when the dialog box is closed. when the dialog box is opened focus should be set to the first tab focusable element within the dialog. if there is no tab focusable element within the dialog box contents set the focus to the item that is used to cancel or close the dialog. there must be some element within the dialog which can accept focus in order for the screen reader to speak the dialog title and information when it is opened. in order to prevent keyboard focus from leaving the dialog determine the first and last tab focusable elements in the dialog and trap keyboard events within the document. search the contents of the dialog container to find the first and last tab focusable elements. this can be implemented by walking the dom tree of the dialog container to find all visible and enabled anchor elements input elements and all elements that have a tabindex value greater than or equal to 0. remember that elements with a tabindex 0 will appear in the tab order before all other focusable elements in ascending order by tabindex. store the first and last tab focusable items within variables in the scope of the dialog box code. before the dialog is shown create and display the dialog underlay. connect an onkeypress event handler to the dom document.documentelement. this will catch all keystrokes on the document and allow trapping keyboard focus within the dialog. size and position the dialog box in the viewport above the underlay make it visible and set focus to the first tab focusable item in the dialog box. 3.3.1. trapping focus the onkeypress handler will catch all key presses within the document. this onkeypress event handler should be within the scope of the dialog box code so that it has access to the first and last tab focusable elements within the dialog. in the onkeypress handler determine the target of the keypress event. in addition determine if there is only a single focusable item within the dialog box. in this instance the first tab navigable object will equal the last tab navigable object. if key presses within the dialog box may create destroy enable disable or change the visibility of tab focusable elements then determine the first and last tab-focusable items each time a keypress is received. based on the event target and the key pressed take the following actions if the keypress is a shift+tab key and the target the first tab navigable object then set focus to the last tab-navigable object and stop the key press event. if there is only a single tab focusable item then focus does not have to be set but the key press event must be stopped. if the keypress is a tab key and the target the last tab navigable object then set focus to the first tab-navigable object and stop the keypress event. if there is only a single tab-focusable item then focus does not have to be set but the keypress event must must be stopped. if the keypress is an escape key and the target node is the container node for the dialog box then close the dialog box and hide or destroy the dialog underlay. determine if the target node of the keypress is within the dialog box container. this can be done using a while loop to walk the parent chain of the target node until the container node of the dialog box is found. other than those outlined above all key presses from within the dialog box should be allowed to execute so that the user can interact with the controls in the dialog box. if the target node is not within the dialog box the keypress is from the documentelement and the keypress event should be stopped unless it is a tab key press. allowing a tab key press from the document element will enable tabbing back into the dialog box if for some reason focus on the dialog box is lost. this can happen due to timing issues when the dialog box is first loaded and focus does not properly get set to the first tab-focusable item within the dialog. the dialog box itself should contain buttons or other mechanisms to cancel the dialog box or execute the dialog box functions and close the dialog box. here is a pseudo code onkeypress handler for a modal dialog box. pseudo code is used to focus on the actions in the handler rather than on the differences in browser event handling. assume that the event object evt has been normalized between browsers and the helper object is a library of functions that handle browser differences. the keys object is a set of key definition variables. dialog is the dialog box object which has a function to cancel the dialog. onkey function normalized event evt summary handles the keyboard events for accessibility reasons if evt.charorcode var node evt.target get the target node of the keypress event if evt.charorcode keys.tab find the first and last tab focusable items in the hierarchy of the dialog container node do this every time if the items may be added removed from the the dialog may change visibility or state var focusitemsarray helper.getfocusitems dialogcontainernode dialog.firstfocusitem focusitemsarray 0 dialog.lastfocusitem focusitemsarray focusitemsarray.length-1 assumes firstfocusitem and lastfocusitem maintained by dialog object var singlefocusitem dialog.firstfocusitem dialog.lastfocusitem see if we are shift-tabbing from first focusable item on dialog if node dialog.firstfocusitem evt.shiftkey evt.charorcode keys.tab if singlefocusitem dialog.lastfocusitem.focus send focus to last item in dialog helper.stopevent evt stop the tab keypress event see if we are tabbing from the last focusable item else if node dialog.lastfocusitem evt.charorcode keys.tab evt.shiftkey if singlefocusitem dialog.firstfocusitem focus send focus to first item in dialog helper.stopevent evt stop the tab keypress event else see if the key is for the dialog while node if node dialogcontainernode if this is the container node of the dialog if evt.charorcode keys.escape and the escape key was pressed dialog.cancel cancel the dialog else return just let it go node node.parentnode this key is for the document window if evt.charorcode keys.tab allow tabbing into the dialog helper.stopevent evt stop the event if not a tab keypress end of if evt.charorcode end of function 4. relationships 4.1. labeling and describing marked up content or widgets will often need additional context to make clear what the meaning or purpose is. it is also reasonable that some content media types will need additional descriptions in another format to give clarity to those who are unable to consume the origin format. these additional meta-content sections are linked together by tagging them as labels or descriptions. wai-aria provides the aria-labelledby and aria-describedby attributes to signal the browser to feed these relationships into the accessibility layer. this layer is then used by screen readers and other accessibility technology at to gain awareness of how disparate regions are actually contextually connected to each other. with this awareness the at can then present a meaningful navigation model for discovery and presentation of these additional content sections. the user agent itself can also choose to present these insights in a meaningful way. generally you should always add these attributes to any widgets on your site as they are often merely a construct of html and javascript which provides no obvious insight as to what the widget s behavior or interactivity is. 4.1.1. labeling when using one element to label another use the aria-labelledby by attribute. a label should provide the user with the essence of what the object does. for example you could have a dialog box erected from html div and you need to assocate a label for the dialog. with a wai-aria role of dialog you can indicate its widget type and define a label using an html header and then associate that label with the dialog using the aria-labelledby relationship. div role dialog aria-labelledby dialogheader h2 id dialogheader choose a file h2 dialog contents div the section doing the labeling might be referenced by multiple widgets or objects as these need only reference the same id so contextual description may not always be viable. the labelledby attribute can have multiple ids specified as a space separated list much like applying multiple classes to a single dom object. the aria-labelledby property can be used to label all visual objects however it should be noted that x html provides a for attribute on the label element which is used to label form controls. use this attribute where possible and valid. because the aria-labelledby attribute accepts multiple idrefs it is recommended that authors use aria-labelledby for labeling elements that require more than one label string. some elements receive their label for embedded text content but that is the exception. often user agents will operate with images turned off for network performance reasons. in these situations alt text is provided in the place of the image. when the host language provides alternative text capability it is recommended that authors use the alternative text to support these situations and not use separate labeling as a replacement. 4.1.2. describing 4.1.2.1. using aria-describedby when one element describes another use the aria-describedby attribute. an aria-describedby section provides further information about a given object or widget which may not be intuitively obvious from the context content or other attributes. for example a fake window is a common widget used in web applications and is often constructed using a div absolute positioned in a layer above other content. to simulate common window behavior look and feel there is often an x box in the corner which when activated dismisses the window widget. one common way to make this x box is to simply make a link whose content is an x. this doesn t give a non-visual user much to go on and belies the real purpose of the x link. to help we add more descriptive text stored elsewhere in the page like this button aria-label close aria-describedby descriptionclose onclick mydialog.close x button and then elsewhere in the html div id descriptionclose closing this window will discard any information entered and return you back to the main page div like labelledby describedby can accept multiple ids to point to other regions of the page using a space separated list. it is also limited to ids for defining these sets. in our contrived example we would also want a good labelledby section to fully explain what the window does and how closing will effect the task being worked on. if an object or widget lacks describedby the user agent or at may try to extract information from the label or th tags if present. the label and th tags have limited use in that they can only be applied to forms or tables respectively. 4.1.2.2. using a tooltip as a description wai-aria also defines the tooltip role to which aria-describedby may reference an author defined tooltip. the assistive technology can tell from the type of object describing the document element what the purpose of that element is. for example a screen reader could announce the tooltip without the user having to wave the mouse over the element by following the describedby relationship to a document area with a tooltip role. the aria-describedby property is also useful for describing groups. here is a code snippet showing a set of the tooltip div class text label for first first name label input type text id first name first size 20 onfocus tooltipshow tooltip1 onblur tooltiphide tooltip1 onmouseover tooltipshow tooltip1 onmouseout tooltiphide tooltip1 aria-describedby tp1 div id tp1 class tooltip role tooltip your first name is optional div div 4.1.2.3. descriptions on external pages the aria-describedby property is not designed to reference descriptions on an external resource since it is an idref it must reference an element in the same dom document. this is different from the html longdesc attribute which accepts any uri. in general the preferred pattern for wai-aria applications is to include all relevant resources in the same dom but if you wish to reference an external resource with aria-describedby you can reference a link that in turn references the external resource. this requires the user to follow two steps first following the aria-describedby arc then following the link but does address the use case. the following example demonstrates this p img src images histogram.png alt histogram of blackberry tree heights width 40 aria-describedby longdesc1 p p a id longdesc1 href blackberry-description.html target description data for blackberry histogram a p it is not good practice to use the above pattern when the describing element the a tag with id longdesc1 is hidden since there is no way for a user to navigate to and activate the link. use the technique only when the description is not hidden. 4.2. owning and controlling two relationships expand the logical structure of a wai-aria web application. these are aria-owns and aria-controls the aria-owns relationship completes the parent child relationship when it cannot be completely determined from the dom created from the parsing of the markup. the aria-controls relationship defines a cause-and-effect relationship so that assistive technologies may navigate to content effected by and changes to the content where the user is operating. 4.2.1. the owns relationship in addition to wai-aria role and state information for a document element an assistive technology needs to convey its context. in the case of a treeitem it is important to know the parent container which may provide a folder depth and the number of siblings in the folder. this containment hierarchy can often be determined by the dom tree as it provides parent siblings and children for a given document element. that said the dom hierarchy is rigid and acyclical in that each node may only have one parent. in some situations a child is reused by multiple parents or a child is separated from its sibilings or parent in the dom tree. one example is when a radio button appears in a table but it is not a dom child of the radiogroup due to the authors use of a table for formatting and the placement of the radio buttons placing them outside the radiogroup container. to solve this problem wai-aria provides the aria-owns property. the aria-owns property is set on a document element and its values are the unique ids of all the adopted children. these elements may appear anywhere in the dom yet they are treated as siblings of each owning parent. this example illustrates a radiogroup that first uses the dom hierarchy to convey context and then aria-owns first consider the preferred method for using the w3c dom to describe the relationship between radiogroup and radio roles for html div id radio_label my radio label div ul role radiogroup aria-labelledby radio_label li role radio item 1 li li role radio item 2 li li role radio item 3 li ul in this example the elements with role radio are child nodes of the parent role radiogroup element node. now consider an alternative method using the aria-owns property to describe the parent-child role relationship between radiogroup and radio roles for html table tr td role radiogroup aria-owns myradio1 myradio2 myradio3 rowspan 3 my radio label td td id myradio1 role radio item 1 td tr tr td id myradio2 role radio item 2 td tr tr td id myradio3 role radio item 3 td tr table the aria-owns property should be used sparingly since it increases the computational load on assistive technology to provide alternative renderings. also when accessing the dom and enumerating children of a dom node an at should then enumerate the adopted children using the aria-owns property. at that instance of walking the dom the parent of the adopted children is the adopted parent and not the dom parent. this will avoid recursion problems. each child adopted or natural should have the appropriate aria-posinset and aria-setsize properties set consistent with their rendering if these cannot be determined from the dom from a direct parsing of the host language. places where direct parsing does not allow the user agent to determine aria-posinset and aria-setsize are long lists where only the currently visible items are loaded via ajax if the children are re-sorted then the aria-posinset and aria-setsize values should be updated consistent with their visual rendering. rather than setting size only on a container content authors should specify aria-setsize on each member of a set to avoid performance issues. if this property is not set the user agent must compute and set the property on supporting roles. platform accessibility api mappings must invert this relationship for assistive technologies so that they may determine the owning parent from a child and couple it with aria-posinset and aria-setsize information to provide context information to the user. 4.2.2. using owns with reusable content if you are re-using content across different transient sections of content by restyling it to render it in association with a different object you need to maintain the aria-owns property as well to match the current use and apparent ancestry of the reused sub-section. a good example of this is a context help menu that resides at the end of the document. when the user wishes to launch the context help menu in association with different visual elements styling is used to render the menu in context with that object. prior to rendering the visual submenu you should ensure the object to which you have requested help assigns its aria-owns property value to the submenu id. when the menu closes you can remove the aria-owns property. 4.2.3. the controls relationship in rich internet applications document elements may control the behavior on another part of web page outside themselves. the aria-controls attribute indicates cause-and-effect relationships between document elements. an example might be a group of radio buttons that control contents of a listbox in another part of the page. here you would want the radio group to assign a aria-controls relationship to the listbox which will be updating without a page reload. the user through their assistive technology can then navigate to the listbox by following the aria-controls relationship when a different radio is selected to see how the contents changed in the listbox. the ability to update parts of a page without a page reload is a common practice of applications making use of ajax. without the aria-controls attribute a user would be unable to effectively use these types of web pages as assistive technologies often will not make the user aware of what is happening outside the context of the element the user is currently operating. with the aria-controls attribute the user may use the assistive technology to follow the relationship to the object it is controlling. it is extremely important for an assistive technology to present changes in the document in response to user input. therefore an assistive technology immediately presents changes to a live region when the controlling widget is the one which has user keyboard focus. for example if a tree view controls a help document pane each time the tree item changes the new tree item and then the new help contents should also be read. in the case of a screen reader the amount of information read in the target live region is dependent on how the live region is configured. the aria-controls attribute takes one or more ids which refer to the document element. if this relationship is not implied by the host language semantics then the controlling element must be given a controls attribute with the ids of the other elements where the changes will show up listed in the attribute value. 4.3. changing the reading flow x html suffers from a number of disadvantages in keyboard navigation today. one such example is the restriction of navigation to the tabbing order. this is a common problem with presentations in office suites where the logical perceivable navigation order of a slide may not match the tabbing order. sighted users may see a logical navigation process such as visual steps in the process for assembling a lawn mower this flow is not conveyed by the tab order. the user might tab from step 1 and land on step 4. another problem is the construction of model-based authoring tools on a web page. in a model-based authoring tool a visual object may provide a number of paths that the user can take such as a multiplexor which may have output that logically flows to a number of optional electronic components in a drawing. in web 2.0 developers are actually creating drawings like this to perform tasks such as visually model a work flow. in this scenario the user will want to decide which object they will navigate their screen reader or alternate input device to next. although it is recommended that tab order follow the reading flow there may be instances where this is not possible. for these reasons wai-aria provides a relationship property called aria-flowto. this allows the author to provide an assistive technology with alternative navigation flows through the document that best represents the author s intent and which is more logical for people with disabilities. aria-flowto establishes the recommended reading order of content so that the an assistive may overriding the default of reading in document order to its user. aria-flowto does not change the keyboard navigation order of the browser. consider the first case of changing a basic reading flow to circumvent x html tabbing. a good example of this is a logical reading flow in a portal with landmarks. in the future the user may wish to change the reading flow based on the order of priority with which they navigate a personalized web application. in the following example the navigation would follow the order of top news stories television listings stock quotes and messages from friends by following x html document reading order. however the author or end user may determine that the main content is most important followed by stock quotes messages from friends and then tv listings. the end user can change the order if the web page or assistive technology provides an interface for such personalization. html div role main title top news stories id main aria-flowto stock div div role complementary title television listings id tv div div role complementary title stock quotes id stock aria-flowto messages div div role complementary title messages from friends id messages aria-flowto tv div the second use case is such that the web developer may wish to circumvent the flow by branching to multiple paths in the web page requiring the assistive technology to present a collection of options where the user could go next. this is important for work flows or business process management applications. more of these applications are becoming web based and a vehicle is required to tell the user how to get through the work flow. the flowto property takes multiple idrefs allowing the author to define each object the user could flow to. to implement this technique do the following. make each object in the work flow accessible this will require assigning a title or wai-aria label for each object and a unique html id. also if the html element is repurposed assign it a wai-aria role. html img src foo.jpg id 331 title what is the invoice value img src foo.jpg id 333 title finance manager approval img src foo.jpg id 334 title sales manager approval assign the flowto properties for each visual object that will flow to one or more other objects assign the flowto property the list of ids to which it flows. html img src foo.jpg id 331 title what is the invoice value aria-flowto 333 334 img src foo.jpg id 333 title finance manager approval img src foo.jpg id 334 title sales manager approval each element referenced by the flowto must have have a unique id. the combination of the unique id and the name allow the assistive technology to adequately assist the user in retracing their steps backward through a flow to reference or moving forward to it. since the author sets only the target the user agent is responsible for mapping the backward reference relationship. therefore neither the user agent nor the user can get lost. the host user agent does not provide an alternative navigation order this is an assistive technology function. make sure visual objects are keyboard accessible use tabindex to enable objects to receive focus. actually setting focus to them may be performed by an assistive technology such as an alternative input device. this example places each drawing object in document order with respect to the tab sequence. img src foo.jpg id 331 title what is the invoice value aria-flowto 333 334 tabindex 0 img src foo.jpg id 333 title finance manager approval tabindex 0 img src foo.jpg id 334 title sales manager approval tabindex 0 when an assistive technology encounters what is the invoice value it will know to tell the user that they may choose to navigate either to the financial manager approval or to the sales manager approval object. the options may be provided through a menu for the what is the invoice value object by the assistive technology. after a choice is made then the at can move focus to the target object or in the case of a screen reader it may just move the user to that location in the screen reader s virtual buffer. note wai-aria does not specify backward flowto properties for the same reason that we do not have the reverse of relationships like labelledby. the author may incorrectly do the reversal creating a whole set of new problems. rather the task of the reversal relationships may be handled by the user agent through its accessibility api mapping or in the assistive technology itself. 4.4. popups and drop-downs in order for menus menubars and menuitems to indicate that it opens a menu set its aria-haspopup property to true. the type of menu being launched submenu context help etc. is not explicitly indicated with wai-aria but is based on the operational characteristics keyboard and mouse commands combo boxes or drop down lists work differently. controls with the role combobox must contain a list of items that can be opened usually as a drop-down. because this is intrinsic to the functionality of a combo box it does not need to be explicitly indicated with aria-haspopup. the following html fragment shows the use of aria-haspopup with a menubar its menus and submenus. all of the menuitems associated with the menubar have aria-haspopup set to true also the zoom menuitem of the view menu has an aria-haspopup property as it leads to a submenu. div role menubar file menu file menuitem has an aria-haspopup attribute set to true that popup div follows immediately below. div role menuitem aria-haspopup true id filemenu file div div role menu aria-labelledby filemenu div role menuitem open div div role menuitem save div div role menuitem save as div div view menu div role menuitem aria-haspopup true id viewmenu view div div role menu aria-labelledby viewmenu div role menuitem normal div div role menuitem outline div the view s zoom menuitem has aria-haspopup true as it leads to a submenu. div role menuitem aria-haspopup true id zoomsubmenu zoom div div role menu aria-labelledby zoomsubmenu div role menuitem 50 div div role menuitem 75 div div role menuitem 100 div div role menuitem 150 div div role menuitem 200 div div div div 5. managing dynamic changes 5.1. managing content and presentational changes general rules for managing content and displaying information do not change an element s role once it has been set. if you need to change the role of an object first remove the element from the dom tree and then add the new element to the tree with the new role set. for supporting browsers tie css attribute selectors to wai-aria properties to reduce script browser issue with refresh tie css display property to wai-aria hidden state. this is important for assistive technologies who communicate directly with the user agent s dom versus a platform accessibility api supported by the user agent. you can also tie css visibility hidden or visibility collapse to the wai-aria hidden state but the use of visibility hidden will affect layout in that content will continue to flow around the hidden area even though the content to be hidden is invisible. if you are refreshing areas asynchronously then you need to designate live regions. the following sections explain how to implement live regions and when to use roles that are considered live sections by default including alert status or log. 5.2. implementing live regions live regions are parts of a web page that the author expects to change. examples of live regions include tables with dynamically updated content sports stats stock information logs where new information is being added chat transcript logs notification areas status alerts etc. live regions enable assistive technologies such as screen readers to be informed of updates without losing the users place in the content. live region settings provide hints to assistive technologies about how to process updates. note that the assistive technology is responsible for handling these updates and enabling users to override these hints. the section on live region properties and how to use them gives the details of how to apply live region properties. this process will help rich internet application ria developers to set live region settings that will provide a good user experience for most assistive technology users with little configuration on their part. when applying these live region properties it is recommended that you conduct user testing. if the at supports scripting of the response to live regions you may wish to customize the response such as through a screen reader script for your web page. identify the live regions live regions are any region on a page that receives dynamic updates through client-side scripting. note the regions of your page that will be live. see if any of the special case live regions meet your needs wai-aria provides a number of special case live region roles whose live region properties are pre-defined and which you may use. if one of these live region roles meet your needs just apply the specific role to the region of the web page. decide the priority of each live region when a live region changes should the user be notified of the change notifications could include a sound for a screen reader user. for simplicity we will use the case of an audio notification in this discussion. the shorter the interval between changes and the less important the information the less likely that the user needs to hear every change. a simple example of changes that should not be heard are changes to time a sound for every second would be very annoying. if the user should hear the change should the change be announced immediately as soon as possible or only when the user is idle announcing a change immediately can be disorienting for users so that should be done sparingly. most updates should probably only be announced when the user is idle. after you have decided the priority for each live region then decide the live property value never spoken then aria-live off spoken when user is idle then aria-live polite spoken as soon as possible then aria-live assertive for more specifics see live region properties. decide how much context is needed for each update when part of a live region changes how much context is needed to understand the change. does the user need to hear the entire live region or just the change by itself if the user needs to hear the entire live region then mark the entire live region with aria-atomic true decide what types of changes are relevant for each live region three possible types of changes are additions removals and text. additions means new nodes are added to the dom removals means nodes are removed from the dom and text means changes are solely to the textual content. should the user hear all types of changes or only certain types by default the user will hear additions and text type changes. if you wish to explicitly define the types of changes you need to set relevant the_types_of_changes if more than one type of change is relevant the types are separated by a space. for example to define additions and removals as relevant but not text set relevant additions removals 5.2.1. live region properties and how to use them one of the most important concepts behind live regions is politeness. politeness indicates how much priority a live region has. the following politeness values are available for aria-live off polite and assertive. aria-live off this is the default. any updates made to this region must not be announced to the user. live off would be a sensible setting for things that update very frequently such as gps coordinates of a moving vehicle. aria-live polite any updates made to this region should only be announced if the user is not currently doing anything. live polite should be used in most situations involving live regions that present new information to users such as updating news headlines. aria-live assertive any updates made to this region are important enough to be announced to the user as soon as possible but it is not necessary to immediately interrupt the user. live assertive must be used if there is information that a user must know about right away for example warning messages in a form that does validation on the fly. there are times to suppress at presentation changes while a region is updating. for that you can use the aria-busy state property. aria-busy state true to suppress presentation of changes until a region is finished updating or until a number of rapid-fire changes are finished set aria-busy state true and then clear the attribute when the region is finished. while it is busy the at will track and collate the changes. it will finally speak the changes once the region is no longer busy. when a live region is updated the update can often be announced on its own and still make sense. for example if a news headline is added it would make sense to simply announce the headline. however sometimes the entire live region must be read in order to give the user enough context to make sense of the update. for example it would not make sense to only give the current value of a stock without saying the name of the stock. the atomic setting gives assistive technologies a hint about which of these cases an update falls into. aria-atomic false this is the default. it means that when there is a change in the region that change can be presented on its own the at should not present the entire region. atomic false is generally a good idea as it presents users with only changes and does not cause them to hear repetitive information that has not changed. however web developers should take care that the changed information when presented by itself can still be understood and contextualized by the user. aria-atomic true if atomic is set to true it means that the region must be presented as a whole when there is a change the at should present the entire region not just the change. atomic true can make it harder for users to understand changes as the changed areas are not presented independently. atomic true can also be annoying as it can force users to listen to repetitive information that has not changed. however atomic true is necessary in cases where the change when presented by itself cannot be understood and contextualized by the user. note that when aria-atomic true the at will attempt to speak the atomic region only once when multiple changes occur in the same region and it hasn t been spoken yet. not all updates to a live region are relevant. for example if the oldest headline in a list of headlines is removed and a new headline is added the removal of the oldest headline is probably not important enough to announce to the user. however in a chat application when a user leaves the chat and their username is removed from the list of users that removal may be important enough to announce. the relevant setting gives a hint about what types of changes are relevant and should be announced. any change which is not relevant will be treated as if the region had live off and will not be announced. multiple types of changes can be listed as relevant the types are separated by a space. the default is relevant additions text and this is the most common use case. if the default is applicable to your application you do not need to provide the relevant property explicitly. aria-relevant additions insertion of nodes to the live region should be considered relevant. aria-relevant removals removal of nodes to the live region should be considered relevant. often removals are not relevant because nodes are removed to make space for new information e.g. a log implemented as a table where items are taken off the top. however in the case of something like a buddy list it is relevant if a buddy is removed. it doesn t require the screen reader to speak the removal but it notifies the screen reader that it could be useful to do so. use of aria-relevant removals or aria-relevant all should be used sparingly. notification of an assistive technology when content is removed may cause an unwarranted number of changes to be notified to the user. aria-relevant text changes to the textual content of nodes that already exist in the live region should be considered relevant. textual content includes text equivalents such as the alt attribute of images. this example shows two live regions. if both regions update simultaneously liveregiona should be spoken first because its message has a higher priority than liveregionb. div id liveregiona aria-live assertive div div id liveregionb aria-live polite div 5.3. choosing between special case live regions you may wish to use a special live region role instead of applying live region properties. wai-aria contains a number of standard roles which are by default considered live sections of your web page. it is important to know when to use these and when to create a custom live region on your known. here are some rules of thumb alert you must use the alert role for a one-time notification which shows for a period of time and goes away and is intended to alert the user that something has happened. the assistive technology should be notified by the user agent that an alert has occurred if your operating system supports this type of event notification. when choosing to use alert you should use the alertdialog role instead if something inside the alert is to receive focus. both alert and alertdialog appear to pop-up to the user to get their attention. status you must use the status role when you want to mark an area which is updated periodically and provides general status of your web application. changes in status are not typically announced automatically by an assistive technology. however it is possible to configure some assistive technologies such as a scriptable screen reader to watch for changes in the status bar and announce them. using the status role is also important in that the user could always check the status section for changes in status on different web pages. many applications provide status widgets and they are often found visibly at the bottom of the application and contain a variety of widgets within it to convey status. the use of status does not guarantee how the at will respond to changes in the status. the author can still put live off or live assertive to influence the ats treatment of the status. timer you must use a timer role when you want to mark an area which indicates an amount of elapsed time from a start point or the time remaining until an end point. the text encapsulated within the timer indicates the current time measurement and are updated as that amount changes. however the timer value is not necessarily machine parsable. the text contents must be updated at fixed intervals except when the timer is paused or reaches an end-point. marquee- you must use a marquee role when you need to mark an area with scrolling text such as a stock ticker. the latest text of the scrolled area must be available in the dom. a marquee behaves like a live region with an assumed default aria-live property value of polite. log you must use log if you have a live area where new information is added like a scrolling chat log of text. unlike other regions implied semantics indicate the arrival of new items and the reading order. the log contains a meaningful sequence and new information is added only to the end of the log not at arbitrary points. if you have a chat text entry area you should indicate that it also controls the aria log aria like so div contenteditable true role log id chatlog div label id gettext send text label div aria-controls chatlog role textbox contenteditable true aria-labelledby gettext div live region if you have some other live area use case wai-aria allows you to mark an area using the aria-live attribute. this accompanied by the collection of attributes which support the live property allow you to create your own custom live area on your web page. for more details regarding live regions refer to the live region section of this guide. live region roles that are applied to elements having strong native semantics are not mapped consistently to the platform accessibility api. an example is the table element. it is recommended that authors apply live regions to div and span containers. for example live region log role used with table element the log role is not consistently mapped to platform aapi. do not use. table role log table wrap the table element in a div with role log instead div role log table table div 6. presentation role this section describes the presentation role including the conditions under which it is inherited by an element s children. 6.1. rationale authors devote a good deal of effort to the appearance of their web pages and this is especially true in the case of scripted web applications. to this end authors employ various elements purely for visual presentation. for example img elements are used for spacing and decoration and table s are used to create a column based layout. elements used strictly for presentation are semantically neutral and irrelevant in terms of accessibility. it is necessary to mark such elements as presentational so that they do not appear in the accessible tree created by the user agent. for example a current technique used with spacer images is to provide blank alt text to indicate that the image is not meaningful. user agents will not publish any information about images with blank alt text to the platform accessibility api. there are elements other than img and table that are used solely for visual presentation. any element is a potential candidate for presentation and if so used these elements also need to be marked as semantically neutral. note it is important to separate content and presentation. css 3 has introduced new table layout functionality to allow a user agent to layout content using css. there are many advantages to using this feature of css such as browser style sheet caching and improved adaptability to mobile devices with limited screen real estate. there are however cases where presentational markup cannot be avoided. in such instances authors are counseled to consult wcag 2.0 for more detailed guidance. wai-aria introduces the presentation role as a general device for marking elements as presentational. the presentation role overrides the element s native implicit role and informs the user agent to not publish the element to the accessiblity api. in fact the preferred way to mark img elements as decorative is to use a role presentation attribute instead of or in addition to an empty alt attribute. here is a code fragment sample role presentation informs the user agent that the spacer images are for layout only. h2 other histories of architecture h1 p a href www.somewhere.com ancient roman architecture a img src spacer.png role presentation a href somewhere.else.com 19th century italian architecture a img src spacer.png role presentation a href www.elsewhere.com modern buildings more than 100 years old a p h2 modern building design h1 the resulting accessible tree is shown below. note that none of the spacer img elements are present root h2 text other histories of architecture p a text ancient roman architecture a text 19th century italian architecture a text modern buildings more than 100 years old h2 text modern building design 6.2. inheritance of presentation by parent element s children in general the presentation role is not inherited by an element s children. the exceptions are elements whose role entails that the element has required owned children. examples include the table element and list role and these exceptions are discussed further below. for all other elements only the element marked presentational is eliminated from the accessible tree. note however that its contents are published in particular the element s textual content is published but any attributes of the element that may form a text-equivalent are not. for example a header element with a presentation role would not appear in the accessible tree but its text does. an image with a role of presentation is not exposed in the accessible tree nor is the contents of its alt attribute. this is shown in the following code fragment 1. role presentation negates the implicit heading role semantics but does not affect the contents. h1 role presentation presentation role overrides header role h1 h1 another header h1 2. role presentation hides the image from the accessibility api and does not publish the alt attribute contents. img role presentation alt this text will not appear in the accessibility api src the first header element is absent from the accessible tree for the above example but its text appears. the second header element is present as a heading. the img element is not exposed at all root text presentation role overrides header role h1 text another header be aware that the markup img role presentation alt non-empty alt text is in fact contradictory declaring a role of presentation says that the image is for layout is decorative and meaningless whereas the non-empty alt text implies that the image is meaningful. it is recommended that authors instead use empty alt text alt where they use role presentation earlier it was noted that the presentation role is not generally inherited by an element s children. the exception are roles that have required owned elements. examples include the table element and the list and tree roles. a list is required to have listitem children a tree treeitem children. the table element s child components are tbody thead tfoot th tr td and caption these component elements would not appear in the markup without the enclosing table root element. thus when a table is used for layout it follows that all of its component elements are present in the markup for layout as well. since annotating all the required child elements with role presentation is error prone and difficult to maintain it is sufficient to mark the table root element as presentational. the presentation role propagates to all the table component elements. however as before the contents of the table elements do appear in the accessible tree. here is an example layout table marked with role presentation table role presentation tbody tr td some text td td p paragraph p td tr tr td a href www.somewhere.com link text a td td img src meaningful.jpg alt meaningful image td tr tbody table all table specific elements table tr td etc. are eliminated from the tree by inheriting the presentation role but other elements and textual content in the table cells are exposed root text some text p text paragraph a link text img name meaningful image the same logic applies to other roles that have required owned children such as a list. if the list s root element is declared presentational using role presentation all of its listitem elements inherit the presentation role and none of the list item elements appear in the accessible tree. however the contents of each list item that is other elements and textual content are included in the tree. 6.3. overriding presentation the presentation role is overridden in some circumstances. recall that the presentation role informs user agents that certain elements are semantically neutral and are irrelevant for accessibility. if however there is an aspect of an element that makes it meaningful it is no longer neutral and cannot simultaneously be presentational. the user agent implementation guide describes the cases where this occurs element is focusable. element has a global wai-aria attribute other than aria-hidden. element is referenced by another element s aria-controls aria-describedby aria-flowto aria-labelledby or aria-owns property. element normally inherits presentation from a parent but the element explicitly declares a role other than presentation. e.g. a table cell td within a table role presentation where that cell is marked with a button role td role button the cell has a role of button not presentation. these situations entail that the given element is semantically relevant and will appear in the accessible tree. marking the element with a role presentation is an error and user agents will ignore the presentation role in these cases. authors are advised to not mark an element with a role of presentation when it has any of the above properties rather to use a role that reflects the element s purpose. 7. form properties this section identifies authoring practices for elements used as form elements. use aria-invalid and aria-required to improve access to forms until the introduction of wai-aria s aria-invalid state and aria-required property only presentational strategies have been available to web content authors to indicate that certain form fields and controls are required or invalid. in applications these states are only available through styling or varying markup which is inconsistent and therefore is inconclusive. in web-based forms fields required may be marked by an asterisk. forms submitted with required data missing or improperly specified may be redisplayed with the unacceptable elements highlighted in red. the assistive technology user is poorly served by such imprecise methods and all users confront inconsistent indicators for consistent situations. the wai-aria invalid state and required property provide a programmatic aria-required property that can be applied to a form element to indicate to an at that it is required to complete the form. a programmatic aria-invalid state that can be used to indicate which data fields have incorrect data to an at so that the user knows they have entered invalid data. invalid data is often rendered in red by html form developers. alert the user when maximum length value is reached when a text input field that has a maximum length value or the host markup language s equivalent receives focus the value defined for maximum length should be communicated to the user. when text entry reaches that maximum length or the markup language s equivalent an alert expressed in accordance with user preferences and capabilities should inform the user that the maximum length for a given field has been reached. such an alert can be expressed programmatically or using as an aural icon by using a wai-aria alert the user agent may alert the user through a system beep and by triggering the operating systems show sounds facility. when maximum length or the markup language s equivalent is reached the user must then be able to move to another form field in a manner consistent with tab-navigation for that document. automatic focus changes having a user agent automatically change focus in a form in response to user input can be advantageous in situations where that change saves the user keystrokes or on-screen keyboard interaction in order to manually move the focus from one field to another. however as with form auto-completion this type of text input event must be firmly under user control because this may not have been the user s intention and some users with disabilities may become disoriented such as those with sight impairments. consider these cases for a text input field that automatically moves focus to a new field when the value defined for maximum length or the markup language s equivalent is reached the user must have the ability to suppress the change in focus. otherwise the user s assistive technology may not be able to make the user aware of the error. a textarea field that has a scripted counter to display the number of characters entered or the number of characters available for input in this case the dynamic content the character count must be owned by the textarea as a live region so that the user can keep either a running real-time account of how many characters are left for him to input or can obtain such information on user query. form auto-submit use caution when using automatic submission of a form without explicit user command or in response to a user-defined setting that permits such behavior as expressed by the priority 1 uaag 1.0 checkpoints 7.1 7.2 and 11.1. unless the user has specifically chosen to set the user agent to allow auto-submission authors are advised not to set onchange or onfocus events either to trigger submission of a form or to provide an auto-submission event upon completion of all or all required fields of a form or input field. 8. math editors note this section was added as part of disposition of comment 4 but is very incomplete. the section needs to be reordered so that instructions on how to use the math role properly appear before considerations of legacy content and negative examples such as the use of generic html to approximate a visual representation of a mathmatical expression it needs more introductory text about how to use math. the examples need better introductions and the positive examples should preceded the negative examples which need to be explained more fully. there exists significant amounts of legacy content that uses images and or textual approximations to represent mathematical expressions. examples of this include the use of ascii art and or the misuse of html tags in particular sub and sup to achieve a visual approximation of a mathematical expression one which is void of the structure needed to render mathematical expressions inherently meaningful. use of generic html to approximate a visual rendering of a mathematical expression i a i i x i sup 2 sup i b i i x i i c i 0 accessible example of the same function using the math role appropriate label and mathml rendering div role math aria-label a times x squared plus b times x plus c equals 0 math xmlns http www.w3.org 1998 math mathml mrow mrow mrow mi a mi mo x2062 invisible times mo msup mi x mi mn 2 mn msup mrow mo mo mrow mi b mi mo x2062 invisible times mo mi x mi mrow mo mo mi c mi mrow mo mo mn 0 mn mrow math div similarly i f i i x i i x i sup 2 sup i x i 2 accessible example of the same function using the math role appropriate label and mathml rendering div role math math xmlns http www.w3.org 1998 math mathml mrow mrow mi f mi mo x2061 mo mrow mo mo mrow mi x mi mrow mo mo mrow mrow mo mo mrow msup mi x mi mn 2 mn msup mo mo mi x mi mo x2212 mo mn 2 mn mrow mrow math div 9. drag-and-drop support drag-and-drop operations are a common feature of rich internet applications rias drag-and-drop features have traditionally challenged people with functional disabilities. these problems arise from the difficulty of manipulating the mouse finding targets capable of receiving the object being dragged and actually moving the object to the drop target. screen readers and alternate input systems assist the user to some degree by allowing the user to simulate a click drag and release operation. it is then up to the user to find a target that hopefully will receive the object s being dragged. additionally the user may not be aware if the desired drop operation is supported or what source objects can be selected for dragging. the end result can be a very unproductive and frustrating experience. wai-aria introduces two new drag and drop properties that aide web application authors with the drag and drop process called aria-grabbed and aria-dropeffect. the property aria-grabbed state is applied to the source s being dragged while aria-dropeffect is applied to the target s use of these properties--combined with best practices for enabling the user to select the appropriate drag operations and for assigning appropriate keyboard operations for dragging and dropping--will vastly improve the accessibility of drag and drop functionality. the following steps will guide you through the process. identify draggable objects set the initial aria-grabbed state state of all draggable interface objects. roles that typically support drag and drop operations are listitem and treeitem. the default state for all objects is assumed to be undefined meaning that they are not draggable. for objects that may be dragged set the aria-grabbed state state to false this will allow assistive technologies to indicate which objects are draggable and potentially facilitate in choosing the objects to grab. objects that can be dragged need to have a determinable role. html tags such as div and span provide no semantics unlike select and would require you to set the wai-aria role attribute. this step clearly marks elements that can be grabbed for drag-and-drop operation. assistive technologies such as screen readers or alternate input devices can help the user move focus directly to the grab-supporting objects without having to navigate through all the elements and to guess which could be ready to initiate a drag operation. although not necessary authors or intermediaries could use css to highlight those elements that may be grabbed. at this point qualified drop targets cannot be determined as they are determined based on the objects being dragged--which have not yet been selected. all grabbable objects must be navigable using the keyboard. allow the user to initiate the appropriate drag operation using the keyboard the author must provide a keyboard accessible way of selecting one or more elements to drag. it is recommended that the space bar be used for selection. it is further recommended that shift+space be used to select multiple objects and define a contiguous set and that control+space be used to define a noncontiguous set. as each object is selected its aria-grabbed state property must be set to true giving the ats references as to what has been grabbed. it is recommended that control+m be supported to indicate that all objects have been selected for drag. note selection of the objects to be dragged may differ depending on their type. for example a list of emails might be selected one at a time or many at a time in contiguous or non-contiguous manner using the space key as indicated above. however text in a document might better be selected by positioning the cursor at the beginning of a word and holding down the control key while using the right and left arrow keys to mark the letters you wish to move. mark the drop targets when the user has completed selecting source objects to drag you must indicate which targets may receive them by setting the aria-dropeffect properties on those targets. this will indicate to the assistive technology that all objects have been grabbed as well as what targets are capable of receiving the drop. when using a mouse users click hold the mouse button and drag the mouse when moving the selected objects and by implication are no longer selecting them. with respect to keyboard users the previous section item 2 allow the user to initiate the appropriate drag operation using the keyboard recommends using control+m to indicate the end of the selection phase. copy a duplicate of the source object will be dropped onto the target. move the source object will be removed from its original location and dropped onto the target. link a reference or short cut to the dragged object will be created in the target object. execute a function supported by the drop target is executed using the drag source as an input. popup the author must provide a popup menu or dialog to allow the user to choose one of the drag operations copy move reference and any other drag functionality such as drag cancel. none no drop operation is supported. this is the default for all objects. example div role treeitem aria-dropeffect copy move popup css may also be used to highlight the targets to show sighted users which objects can receive a drop of the grabbed source s any object without an aria-dropeffect property set will have an assumed aria-dropeffect value of none. any object with an aria-dropeffect value of none is ignored by ats in the drop operation. implement keyboard functionality to assist the user and at with executing the drop. after all objects have been grabbed the author should provide standard keyboard accessible navigation such as through tabbing to enable the user to navigate to the desired drop target. to achieve this you may optionally support shift+f10 to invoke a single select list of possible drop targets from which the user may choose a single drop target that when selected would move focus to that drop target. otherwise you must provide a keyboard accessible way through tabbing and arrowing to allow the user to navigate to the drop target. the user s point of regard should be clearly visible during this navigation. when the user arrives at the drop target the author should provide a keyboard accessible way to drop the selected object s onto the target. control+m should be used to provide the most intuitive type of drop either copy move or a shortcut. in the case of only one drop operation available the control+m should be used to drop the selected object s onto the target. if drop target supports additional drop operations then the author should provide a wai-aria-enabled pop-up menu from which the user can choose supported operations from the list. a recommended way to invoke this menu is to use the shift+control+m key sequence when focus is on the drop target. furthermore the aria-dropeffect property should include popup in its list of values to indicate that a keyboard accessible menu is provided. after the user has selected an action from the pop-up menu the menu must close with focus returning to the drop target. if the user does not choose an action and instead presses the escape key the application must dismiss the menu returning focus to the drop target. cancelling a drag operation users can cancel the entire drag operation at any time with one exception by pressing the escape key. the one exception is when the drop operations pop-up menu is displayed see previous step four above in this case escape simply dismisses the pop-up and a second escape keystroke is needed to cancel the drag operation. when the drag operation is so cancelled all aria-dropeffect properties are set to none all grabbable objects aria-grabbed state properties are set to false and keyboard focus returns to the last grabbed source object. clean-up after drag drop once the drop has occurred you should clean up the dom as you would do for drag-and-drop operation. this should include setting all aria-dropeffect properties to none or remove them altogether. all aria-grabbed of draggable objects to false all objects that are not grabbable must either omit the aria-grabbed property or have an aria-grabbed property set to undefined. focus on the appropriate dom element and its role must also be determinable. other methods of performing the same operation as drag-and-drop may be the best way to meet the accessibility requirements. as an example when moving a mail message from the inbox to another folder a list of those folders could be presented in a select list as an alternative to drag-and-drop. document non-recommended keyboard navigation if the author must use alternatives to the keyboard navigation recommended here it should be documented on the page. 10. states and properties and assistive technologies assistive technologies at access wai-aria state and properties via a platform accessibility api. an example of such an api is linux s at-spi. the user agent is responsible for publishing wai-aria roles states and properties and relevant changes via the accessibility api. for more information see the user agent implementation guide. with respect to desktop applications the interaction between the platform accessibility api and an at is bidirectional. the application sends information to the at using the accessibility api and the at can request a change in the accessible state of an application through the same accessibility api. however with respect to aria 1.0 the flow of information is one way only from wai-aria to the accessibility api. there is no provision currently to go the other way. an at cannot use an accessibility api to alter any wai-aria information in the dom. the reason is that there is no consistent cross-browser implementation of a mutation event that web applications can rely on to detect when a wai-aria state or property has changed. web applications use wai-aria information for rendering their components. for example if the web application includes a dhtml checkbox as part of its interface then the web app renders the visual appearance of the checkbox based on its aria-checked state. if an outside agent were to change the state of that checkbox without the web app receiving any notification then the checked state of the checkbox is no longer in agreement with its visual appearance. it is likely that the behaviour of the web app will suffer. w3c is investigating device-independent interfaces to allow web applications to receive notification of changes to wai-aria states and properties. when this is available wai-aria will be bidirectional with respect to the platform accessibility api allowing assistive technologies to alter wai-aria states and properties. even so the set of states and properties that an assistive technology is likely to change is limited to the following aria-activedescendant aria-expanded aria-grabbed aria-selected aria-sort aria-valuenow the following states and properties are unlikely to be manipulated by an assistive technology an at would need to have greater understanding of the application and the results could be adverse. aria-atomic aria-autocomplete aria-busy aria-checked aria-controls aria-describedby aria-disabled aria-dropeffect aria-flowto aria-haspopup aria-hidden aria-invalid aria-labelledby aria-level aria-live aria-multiline aria-multiselectable aria-owns aria-posinset aria-pressed aria-readonly aria-relevant aria-setsize aria-valuemax aria-valuemin aria-valuetext 11. design patterns for these widgets and structures this document describes the keyboard interaction and identifies the relevant wai-aria roles states and properties. if the host language does not define key mappings such as hot keys and the author defines key mappings other than those described here or in drag-and-drop support then the author must provide documentation of those key mappings. these mappings can be provided in the contents of the web page or in the case of a more complex application within the help file documentation and training materials. note although users of mac os x are familiar with using the command key instead of the control key the command key is typically reserved for desktop applications and os-level integration. until device and platform independence can be addressed in wai-aria 2.0 the primary control modifier key for wai-aria widget interaction is specified as control on all platforms including mac os x. accordion alert alertdialog autocomplete button checkbox combobox datepicker dialog_modal dialog_nonmodal dialog_tooltip draganddrop grid sortablegrid landmarks link listbox mediaplayer menu menubutton popupmenu popuphelp radiobutton richtext site_navigator_general site_navigator_tree site_navigator_tabbed_style slider slidertwothumb spinbutton tabpanel toolbar tooltip treegrid treeview windowsplitter wizard global recommendations the following may apply to some or all widgets. control+z optionally a developer may choose to implement undo functionality as needed. it is recommended that control z be used. control+y optionally a developer may choose to implement redo functionality as needed. it is recommended that control y be used. control+c copies to clipboard control+v pastes from clipboard control+x copies to clipboard and cuts shift+f10 is used to bring up an associated popup menu widgets within widgets the general navigation model is for a user to tab to a widget interact with the controls in that widget and then tab to move focus to the next widget in the tab order. by extension when the construct of a widget contains another widget tab will move focus to the contained widget because it is the next item in the tab order. this continues down the layers of widgets until the last widget is reached. for example we have two widgets a and b on a page. widget a contains within it widget c and widget c contains within it widget d. when tabbing focus would land on widget a then another tab would focus on c and then another tab would focus on widget d. because d is the last widget in c and c is the last widget in a one more tab would move focus to b. accordion widget characteristics description an accordion component is a collection of expandable panels associated with a common outer container. panels consist of a header and an associated content region or panel. the primary use of an accordion is to present multiple sections of content on a single page without scrolling where all of the sections are peers in the application or object hierarchy. the general look is similar to a tree where each root tree node is an expandable accordion header. the user navigates and makes the contents of each panel visible or not by interacting with the accordion header. terms for understanding accordions include accordion component collection of panels within a common outer pane. accordion header label area of an accordion panel. this is where you find the control to expand or collapse the panels. accordion panel contents area associated with an accordion header. keyboard interaction tab when focus is on an accordion header pressing the tab key moves focus in the following manner if interactive glyphs or menus are present in the accordion header focus moves to each in order. when the corresponding panel is expanded its aria-expanded state is true then focus moves to the first focusable element in the panel. if the panel is collapsed its aria-expanded state is false or missing or when the last interactive element of a panel is reached the next tab key press moves focus as follows if a subsequent accordion panel is already expanded focus moves to the first focusable element in this subsequent panel. if no subsequent accordion panel is expanded focus moves to the first focusable element outside the accordion component. left arrow when focus is on the accordion header a press of up left arrow keys moves focus to the previous logical accordion header. when focus reaches the first header further up left arrow key presses optionally wrap to the first header. right arrow when focus is on the accordion header a press of down right moves focus to the next logical accordion header. when focus reaches the last header further down right arrow key presses optionally wrap to the first header up arrow behaves the same as left arrow down arrow behaves the same as right arrow control+up arrow moves focus from anywhere in the accordion content to its associated accordion header or tab respectively. control+pageup when focus is inside of an accordion pane pressing control+pageup moves focus to the accordion header of the previous accordion pane. when focus is in the first accordion header content pressing control+pageup optionally moves focus to the last accordion header. focus will simply move to the header and will require enter space to expand collapse the accordion pane. control+pagedown when focus is inside of an accordion pane pressing control+pagedown moves focus to the header of the accordion pane. when focus is in the last accordion header content pressing control+pagedown optionally moves focus to the first accordion header. in the case of an accordion focus simply moves to the header and requires enter space to expand collapse the accordion pane. end when focus is on the accordion header an end key press moves focus to the last accordion header. home when focus is on the accordion header a home key press moves focus to the first accordion header. enter space when focus is on an accordion header pressing enter space toggles the expansion of the corresponding panel. if collapsed the panel is expanded and its aria-expanded state is set to true if expanded the panel is collapsed and its aria-expanded state is set to false shift+tab generally the reverse of tab. alt+delete when deletion is allowed with focus anywhere within the tab panel or tab pressing alt+delete will delete the current tab and tab panel from the tabbed interface control. if additional tabs remain in the tabbed interface focus goes to the next tab in the tab list. if no additional tabs remain then focus moves to the last place that held focus in the previous tab panel. an alternative to providing a keystroke to close a tab is to provide a context menu that is associated with the tab title. when focus is on the tab pressing shift-f10 or pressing the right mouse button will open a context menu with the close choice. a warning should be given to the user before allowing the delete to occur. in firefox pressing control+pageup control+pagedown moves between browser tabs. firefox also supports control+tab and control+shift+tab to move between tabs. internet explorer 7 also uses control+tab and control+shift+tab. there may be advantages to using control+pageup pagedown as the keys to change tabs because it is a recognizable keystroke to at least firefox users and it is also supported by the windows operating system to move between panels in a tabbed dialog. you should be aware of two issues with using control+pageup pagedown the first arises when the user is within a tabbed interface control on a web page. here they can not easily switch browser tabs without first moving focus outside of the tabbed interface control. this may be acceptable. the second arises when the entire web page is a tabbed interface control. in this case the user could not switch browser tabs unless the control on the web page ignored the control+pageup pagedown keypress and thus letting the browser access it when the first or last tab was reached. wai-aria roles states and properties the accordion component must have a role of tablist and have aria-multiselectable true this will enable an assistive technology such as screen reader to convey that the tablist is an accordion or a multiselectable tablist. this will also tell the user that the keyboard navigation matches an accordion and not a tablist. contained within the tablist is a set of tab tabpanel pairs. each header tab in the tablist has a role of tab. the accordion panel uses the role tabpanel and should have an aria-labelledby relationship referencing the correponding header having a role of tab the tabpanel is considered a grouping for all content consisting of that tabpanel. an accordion should manage the expanded collapsed state of each tab by maintain its aria-expanded state. an accordion should manage the selected state of each tab by maintaining its aria-selected state. an accordion should convey the visibility of each tabpanel by maintaining its aria-hidden state. example open ajax alliance accordion alert widget characteristics description a message with important information keyboard interaction an alert wai-aria live region does not require any keyboard shortcuts wai-aria roles states and properties the widget has a role of alert. it is a child of the role region. and it can have a child with role alertdialog. example open ajax alliance alert or message dialog widget characteristics description a dialog with the primary purpose of communicating a message and acquiring a user response to that message. examples include action confirmation prompts warning messages or help for an invalid form entry. the dialog should be modal. keyboard focus is set on an element in the dialog. the element that has initial focus will depend on the nature of the information conveyed in the dialog. simple message dialogs as described below have their initial focus set to the confirmation button e.g. the ok button detail message dialogs have their initial focus set on the element containing the message. a detail message dialog conveys a message that has any one of the following attributes is more than one sentence in length contains information where punctuation is an essential part of the message such as syntax of a required date format contains detail information the user may need to re-use e.g. a phone number e-mail address error number etc. contains an interactive element such as a link to a help resource. if the dialog is not a detail message dialog one can consider it a simple message dialog. keyboard interaction see dialog modal content authors make alert dialogs modal by ensuring that while the alertdialog is shown keyboard and mouse interactions only operate within the dialog. the message area of a detail message dialog is focusable and has a document role so screen reader users will have complete access to the message content e.g. the screen reader can read it by character word or line. when the message area of a dialog is focusable and has focus a visual focus indicator around the message is recommended. wai-aria roles states and properties the node containing all elements of the dialog including the alert message and any dialog buttons has an alertdialog role. message areas have role document and tabindex 0 the alert dialog has an aria-labelledby that references the title of the dialog. if there is not a visible title use an appropriate aria-label instead. the element with role alertdialog has an aria-describedby referring to the message element that has role document. example open ajax alliance auto complete widget characteristics description a textbox and an associated drop-down list of choices where the choices offered are filtered based on the information typed into the box. typically an icon associated with the textbox triggers the display of the drop-down list of choices. an editable auto-complete accepts text entry of choices that are not in the list. an example of an editable auto-complete is the url field in the browsers. keyboard interaction with focus in an empty textbox press down arrow up arrow alt+down arrow or alt+up arrow to display the entire list of choices. focus remains in the textbox and no choice is highlighted. press the down arrow to highlight the first choice in the list. press the down arrow and up arrow keys to highlight the desired choice in the list. note that the arrows will wrap through the textbox when the top or bottom of the list is reached. for example pressing the down arrow when the last choice is highlighted will move focus back to the textbox pressing down again will move focus to the first item in the list. likewise with focus in the textbox and the list displayed pressing up arrow will move focus to the last item in the list. when a choice is highlighted using the arrow keys the highlighted choice is displayed in the textbox. press enter to select the highlighted choice and close the drop-down list. this mimics the behavior of the html select element. with the drop-down list of choices displayed move the mouse pointer over an item in the list to highlight it. the textbox value is not modified when the mouse is used to highlight a choice. clicking on the highlighted choice will close the drop-down and update the textbox with the selected choice. this mimics the behavior of the html select element. with focus in an empty textbox type any letter. if any of the available choices begin with the letter typed those choices are displayed in a drop down. if the letter typed does not match any of the available choices the drop-down list is not displayed. with focus in textbox with an existing value type additional letters. as the user types letters the list of choices is filtered so that only those that begin with the typed letters are displayed. until the user presses the arrow keys to highlight a particular choice only the typed letters are displayed in the textbox. in an editable auto-complete if no choices match the letter s typed the drop down list closes. in a non-editable auto-complete any letters that do not result in a match from the list are ignored the drop down list of choices remains static until the user presses escape to clear the text field backspace to remove some of the letters previously typed or types an additional letter that results in a valid list of choices. navigation through the list of choices and display of the highlighted choice in the textbox works as described above. optional when a choice is highlighted via arrow key navigation the input cursor is left at the end of the typed entry and the highlighted choice is displayed in the textbox with the characters after the input cursor selected. typing an additional character will remove the auto-completed portion and append the newly typed character to the end of the previously typed characters. the list will be filtered based on the additional character s typed. with focus in a textbox press escape if there is no text in the textbox pressing escape closes the drop-down if it is displayed. for an editable autocomplete that has text in the textbox that was both typed by the user and auto-completed by highlighting a choice using the keyboard the auto-completed portion of the text is cleared and the user typed characters remain in the textbox. the drop-down list is closed. to completely clear the textbox contents the user must use the backspace key to remove the typed characters. this is how the google search box in the firefox ui works. recommend that pressing the escape key again completely clears the textbox rather than relying on only the backspace key. for a non-editable auto-complete that has text in the textbox that was both typed by the user and auto-completed by highlighting a choice using the keyboard pressing escape closes the drop-down list and leaves the current choice in the textbox. for an editable or non-editable auto complete with text in the textbox that was typed by the user and the mouse is highlighting a choice in the drop down keyboard navigation was not used pressing escape closes the drop down and leaves the typed text displayed in the text box. need to consider if pressing escape again should clear the typed text. the user must press the down arrow or alt+down arrow or click the associated icon to invoke the drop-down list of choices again. moving focus out of an empty auto complete field where a value is required should either invoke an error or if a default value was initially assigned reset the value to the default value. moving focus out of an auto complete field that does not contain a valid entry should either invoke an error or if a default value was initially assigned reset the value to the default value. it is good practice to limit the number of matching items in the drop down to a reasonable number. the reasonable number is determined by the task at hand. a list of the 50 us states is probably reasonable but a list containing all of the office numbers in a building is probably not appropriate. wai-aria roles states and properties the widget has a role of combobox and its parent role is input. it has a child with role textbox. the property aria-autocomplete indicates whether user input completion suggestions are provided. example dojo autocomplete button widget characteristics description button widgets allow for user-triggered actions and they are most often used for discrete atomic actions. buttons support the optional state aria-pressed state buttons with this state are toggle buttons. when aria-pressed state is true the button is depressed when pressed is false it is not depressed. sometimes a button will launch a dialog box. this is indicated using ellipsis at the end of the button label. an example is save as keyboard interaction with focus on the button pressing space or enter keys executes the action for that button. if the button activation closes the containing entity or launches another entity then focus moves to the newly opened entity. if the button activation does not close or dismiss the containing entity then focus remains on the button. an example might be an apply or recalculate button. wai-aria roles states and properties the button receives a role of button. the button description is given by its aria-describedby property. when the action associated with a button is unavailable the button displays in a aria-disabled state. if the button is a toggle button it has an aria-pressed state. when the button is toggled the value of this state is true and when not toggled the state is false. example open ajax alliance button with text label open ajax alliance button using image label check box widget characteristics description a widget that has three possible values true false or mixed. many checkboxes do not use the mixed value and thus are effectively dual state checkboxes. however the aria-checked state state supports the mixed value to handle cases such as installers where an option has been partially installed. a tristate checkbox is frequently associated with a set of dual state checkboxes. the relationships between the tristate and dual state checkboxes are tristate unchecked aria-checked false none of the dual state checkboxes are checked. tristate checked aria-checked true all of the dual state checkboxes are checked. tristate mixed aria-checked mixed some of the dual state checkboxes are checked. if the tristate checkbox is currently unchecked and is clicked with the mouse then it changes to checked and all of the dual state checkboxes are also set to checked. if the tristate checkbox is checked and is clicked then it changes to unchecked and all of the dual state checkboxes are switched to unchecked. the behavior is the same if using the keyboard if the tristate checkbox has focus then space switches between checked and unchecked states. a tristate checkbox changes to the mixed state by interacting with the dual state checkboxes associated with it such that only some of them are in a checked state. the effect is achieved using the mouse or keyboard by navigating among the dual state checkboxes switching their checked state such that only some are checked while the rest are unchecked. although it requires effort it is sometimes more user friendly to track which of the dual state checkboxes are checked. if that information is stored then for the tristate checkbox repeated clicking or pressing space cycles through checked unchecked and mixed states. the associated dual state checkboxes correspondingly switch among all checked all unchecked and a checked subset the subset that the tristate s mixed state represents. keyboard interaction dual state check box space key toggles the selection checking or unchecking the box. tristate check box if not checked space mixed state unknown checks the check box. mixed state known reinstates the mixed state. if checked space unchecks the check box. if mixed space checks the check box. wai-aria roles states and properties the checkbox should have a role of checkbox. if checked it should have the state aria-checked true if not checked it should have the state aria-checked false if partially checked it should have the state aria-checked mixed if you use an image to render the state of a checkbox it should not appear in the accessibility api mapping. this can be accomplished using css to render it or setting a role of presentation on the image. put the checkbox in the tab order such as by setting its tabindex 0 checkboxes having a logical grouping should be children of a dom element whose role is group. the group should assign a label that is visible and referenced through the aria-labelledby property set to the id of the label. use an aria-describedby property to add additional help information to the checkbox or grouping. examples examples that use images to depict the state of the checkbox. the images have role presentation to remove them from the accessibility tree. open ajax alliance two-state checkbox open ajax alliance tri-state checkbox also illustrates use of the group role examples that use background images or css selectors to depict the state of the checkbox. open ajax alliance tri-state checkbox background images open ajax alliance tri-state checkbox css selectors combo box widget characteristics description a combo box enables the user to type in a field and at the same time chose a predefined value from a list. by using the keyboard the user can select an item from the list. after selection she will be able to type further characters in the field. keyboard interaction left arrow or right arrow move the caret within the edit field. alt+up down arrow opens and closes the list. up arrow and down arrow moves focus up and down the list. as focus moves inside the dropdown list the edit field is updated. page up page down selects the next previous pages item depending on the lists size. escape closes the dropdown list returns focus to the edit field and does not change the current selection. enter selects the current item on the list updates the edit field highlights the selected item in the dropdown list closes the dropdown list and returns focus to the input field. typing a letter printable character key moves focus to the next instance of a visible node whose title begins with that printable letter. for combo boxes that implement aria-autocomplete see the autocomplete design pattern. wai-aria roles states and properties a combobox can be implemented using either of two design patterns as a combination of text field which may be editable a displayable list of items and a drop button to toggle the display of that list all wrapped in the form of a single widget with role of combobox. as a combobox which behaves like a textfield and may be editable with a displayable list of items and a drop button to toggle the display of that list like text fields a combobox should be labeled to convey the purpose of the widget. keyboard focus within the widget must be managed by the widget. comboboxes are used extensively in graphical user interfaces and the design pattern for the widget should be semantically correct. for the first combobox design pattern the container element that wraps the combobox has a role of combobox. the first element within the combobox is an input text field and is responsible for managing the keyboard focus between the text field and the list as well as displaying the list. the text field is in the tab order. if you create a text field without using a standard html text field form control then ensure that it is in the tab order. if the text field is not editable it must have have aria-readonly true. the combobox must have aria-expanded true if the list is displayed or aria-expanded false when it is not. the next element is an html button or another element with a role of button. this element is used to toggle the display of the combobox s drop down list. the next element has a listbox role and represents the drop down list. it manages keyboard navigation among list items and navigating back to the text field if necessary. each item in the listbox is an option. options are not in the tab order. provide a label for the combobox by referencing the text field in the combobox. you can use an aria-label to associate this label with the combobox or you may use the html label element and its for attribute to reference the text field. for the second combobox design pattern the first element for the combobox has a role of combobox and behavies like an input text field and is responsible for managing the keyboard focus between the combobox and the list as well as displaying the list. the text field is in the tab order. if you create a text field without using a standard html text field form control then ensure that it is in the tab order. if the combobox is not editable it must have have aria-readonly true the combobox must have aria-expanded true if the list is displayed or aria-expanded false when it is not. the next element is an html button or another element with a role of button. this element is used to toggle the display of the combobox s drop down list. the next element has a listbox role and represents the drop down list. it manages keyboard navigation among list items and navigating back to the text field if necessary. each item in the listbox is an option. options are not in the tab order. provide a label for the combobox by referencing the text field in the combobox. you can use an aria-label to associate this label with the combobox or you may use the html label element and its for attribute to reference the text field. for each combobox pattern the button need not be in the tab order if there is an appropriate keystroke associated with the input element such that when focus is on the input the keystroke triggers display of the associated drop down list. in this case a tab to focus the button is unnecessary. this is the same behavior as the select element. example first design pattern container element with role combobox open ajax combobox autocomplete inline open ajax combobox autocomplete list dojo dijit nightly build combobox dojo nightly build combobox with autocomplete second pattern text field with role combobox open ajax combobox no autocomplete open ajax combobox autocomplete inline open ajax combobox autocomplete list date picker widget characteristics description the datepicker widget allows the user to select a date or date ranges. the datepicker shows one month at least. all navigation that is described below depends on the application. if no range selection is possible the relevant keystroke interaction can be ignored. also navigation to the past might be optional. each week might be labeled with the corresponding calendar week number. as a general rule the actual calendar portion of the date picker follows a table structure where days of the week and calendar day numbers are layed out in table cells. this provides context so an assistive technology can render the day of the week its corresponding numeric calendar day and week number if necessary. consequently it is best to start with an html table and apply wai-aria semantics for a grid. however should the author wish to uses a div or span to represent the cells then the dom structure for a table is duplicated with rows marked with role row. the calendar portion can be displayed in a numbers of ways including as a popup associated with another widget or as a static region of a page. keyboard interaction keyboard navigation on days that are not included the currently displayed month should move to the month automatically and lead to the day in the next or previous month. tab like other widgets the date picker widget receives focus by tabbing into it. once focus is received focus is repositioned on today s date in a grid of days and weeks. a second tab will take the user out of the date picker widget. focus initially is placed on today s date. shift+tab reverses the direction of the tab order. once in the widget a shift+tab will take the user to the previous focusable element in the tab order. up arrow and down arrow goes to the same day of the week in the previous or next week respectively. if the user advances past the end of the month they continue into the next or previous month as appropriate. left arrow and right arrow advances one day to the next also in a continuum. visually focus is moved from day to day and wraps from row to row in a grid of days and weeks. control+page up moves to the same date in the previous year. control+page down moves to the same date in the next year. space singleton mode acts as a toggle either selecting or deselecting the date. contiguous mode similar to selecting a range of text. space selects the first date. shift+arrows add to the selection. pressing space again deselects the previous selections and selects the current focused date. home moves to the first day of the current month. end moves to the last day of the current month. page up moves to the same date in the previous month. page down moves to the same date in the next month. enter if the the calendar is a popup attached to some other widget e.g. a text field then enter dismisses the popup and the selected date s are shown in the associated widget. if the calendar is a static region on the page then enter confirms the selected date s escape in the case of a popup date picker closes the widget without any action. navigation into the past is optional do not implement keyboard navigation schemes that would place more than one calendar day in the tab order at any time as this impacts the usability of keyboard navigation. for example using html anchors for the gridcells places them all in the tab order impacting the usability of keyboard navigation. wai-aria roles states and properties the current month has a label representing the month and year. it is advisable to use a role heading but is not essential. this label should have a unique id. if the author would like to ensure that a label is announced by a screen reader as the label changes include live region properties with the label element aria-live assertive and aria-atomic true the container for the day of week headers and numeric days of the week has a role of grid. the grid has an aria-labelledby property with a value equivalent to the id of the label for the grid. each name for the day of the week has a role columnheader and is not navigable via the keyboard. each numeric day of the week has the role gridcell. when a day is selected its aria-selected is set to true otherwise it is set to false or removed. changes in aria states identified here as well as focus are clearly styled to show the user where their point of regard is and what days are selected. when the datepicker is active a calender day of the week always has focus. this can be achieved by setting the tabindex on that day as appropriate and then using script to give it focus. alternatively the grid container could set aria-activedescendant to the id of the currently focused gridcell. keep in mind that older browsers may not support aria-activedescendant. example open ajax alliance date picker dojo dijit dialog modal widget characteristics description a dialog is a small application window that sits above the application and is designed to interrupt the current processing of an application in order to prompt the user to enter information or require a response dialog a modal dialog is a dialog that takes and holds focus until the dialog is closed or submitted. a specific kind of modal dialog is the alertdialog that is used to convey a short message to the user. see the alert dialog design pattern. keyboard interaction keyboard navigation within a modal dialog includes these aspects enter if the purpose of the dialog is to gather information the dialog should have a mechanism to submit the data gathered usually via a keyboard accessible button. the enter key should serve as the default submit action. escape there should be a method to close the dialog without taking any action. this could be implemented via a cancel button which is keyboard accessible. it is recommended that a dialog also be cancelled by pressing the escape key with focus on any item. tab focus must be held within the dialog until it is cancelled or submitted. as the user presses tab to move within items in the dialog pressing tab with focus on the last focusable item in the dialog will move focus back to the first focusable item in the dialog. shift+tab likewise if the user is shift-tabbing through elements in the dialog pressing shift-tab with focus on the first focusable item in the dialog will move focus to the last item in the dialog. notes if the current focus item has escape key behavior the press of the escape will be handled by the current item and the user may have to press escape an additional time to close the dialog. even if the user clicks outside of the dialog on the application which invoked the dialog focus remains in the dialog. because the dialog is modal and the user can not interact with the invoking application while the dialog is displayed there is no requirement to make the dialog moveable via the mouse although this behavior is recommended. when the dialog is closed or cancelled focus should return to the element in the application which had focus before the dialog is invoked. this is usually the control which opened the dialog. when a modal dialog opens focus goes to the first focusable item in the dialog. determining the first focusable item must take into account elements which receive focus by default form fields and links as well as items which may have a tabindex attribute with a positive value. if there is no focusable item in the dialog focus is placed on the dialog container element. authors should take care when using enter to trigger default actions since enter might be connected to and trigger some other user interface element or it might trigger the focused element. authors should ensure that enter activates only the widget they intend. wai-aria roles states and properties generally a modal dialog has a role of dialog. if it is a simple dialog with a message that alerts warns or requests confirmation e.g. are you sure you want quit then authors are advised to use the alertdialog role. see the alert dialog design pattern for more information. the dialog box title is provided by either the aria-label or the aria-labelledby property. example yui dialogs use first two dialog buttons open ajax alliance alertdialog dojo nightly dialog non-modal widget characteristics description a dialog is a small application window that sits above the application and is designed to interrupt the current processing of an application in order to prompt the user to enter information or require a response dialog a non-modal dialog is one which is displayed and focusable at the same time as the application which invoked it. also like the modal dialog focus via the tab and shift-tab key must be maintained within the dialog. however a non-modal dialog should have a keyboard mechanism to return focus to the application while leaving the dialog open. keyboard interaction escape cancels the dialog without taking any action enter submits any data gathered in the dialog. f6 is the recommended key to move focus between the application and an open non-model dialog. notes the mouse user may click on either the application or the dialog to change focus between the two. in a web application the non-modal dialog is usually always displayed above the application page rather than in a separate browser window but that is not a requirement. this dialog box is dragable by the mouse user and an equivalent behavior drag drop should be offered to the keyboard only user. authors should take care when using enter to trigger default actions since enter might be connected to and trigger some other user interface element or it might trigger the focused element. authors should ensure that enter activates only the widget they intend. wai-aria roles states and properties see dialog modal example experimental dojo floating non-modal pane dialog tooltip widget characteristics description a tooltip dialog is a modal dialog that is rendered near the invoking element and visually connected via a cartoon bubble-like protrusion. it is displayed when the mouse passes over or rests on that element. keyboard interaction escape the tooltip dialog is closed by pressing the escape key when focus is within the dialog mouse clicking on a close icon or mouse clicking outside of the dialog onto the application. tab focus must be held within the dialog until it is cancelled or submitted. as the user presses tab to move within items in the dialog pressing tab with focus on the last focusable item in the dialog will move focus back to the first focusable item in the dialog. shift+tab likewise if the user is shift-tabbing through elements in the dialog pressing shift-tab with focus on the first focusable item in the dialog will move focus to the last item in the dialog. note it is modal because focus is trapped within the dialog as the user navigates via the tab and shift+tab key. note unlike a true modal dialog the user can click outside of the dialog however in that case the tooltip dialog is immediately closed. note a tooltip dialog can not be moved dragged. note other than the close and move behavior all other behaviors of a modal dialog are implemented by the tooltip dialog. wai-aria roles states and properties see dialog modal example dojo nightly drag drop characteristics description a drag and drop operation can occur in contexts that support selection of objects including single and multiple selection models. an example is a tree view. the tree is a container of objects that are potentially draggable. keyboard interaction see drag and drop support above. wai-aria roles states and properties draggable objects are identified using the aria-grabbed state. if the aria-grabbed state is absent or if it has the value undefined then the object cannot partake in a drag and drop operation. if aria-grabbed is false the object is draggable but currently not being dragged. if aria-grabbed is true the object is both draggable and currently being dragged. other objects are potential drop targets. drop targets are identified using the aria-dropeffect property. see drag and drop support for more detail. example tic tac toe open ajax slide show open ajax grid simple data tables widget characteristics description unlike an html table which is display only a grid presents tabular data in rows and columns that are navigable via the keyboard and allows for cells to be selected in the grid. the user moves focus through each data cell having a role of gridcell through the use of arrow keys. each column has an associated element with the role columnheader. data cells carry the role gridcell. a grid may also contain hierarchical rows. in this case the role of the grid container should be treegrid rather than grid. this design pattern and corresponding examples reflect a basic two-dimensional grid without grids embedded within a gridcell. wai-aria grids are not meant to replace the full functionality of a table. consequently there may be instances when you need to have cells span multiple columns or rows for which wai-aria does not provide semantics. this can be achieved by overlaying grid and gridcell semantics onto an html table to provide appropriate column and row span semantics. authors should ensure that headers are properly marked using a native header tag or wai-aria columnheader or rowheader semantics. the connection between gridcell and header can be achieved using standard html attribute header. in html multiple column or row headers for one data cell can be identified through the use of a space separated list of header ids in the headers attribute. if a wai-aria grid is not overlayed on a table authors should mark the rowheader columnheader and gridcell roles on the appropriate elements. for gridcells that span multiple columns or have multiple headers the author should apply the aria-labelledby property to the cell to the space delimited list of corresponding row or column header element ids. gridcells that span multiple rows or columns should be reflected in the keyboard navigation. if a grid contains editable data it should have both an editable mode and a navigation mode. keyboard interaction there are two modes of keyboard interaction namely navigation mode and actionable mode. navigation mode read-only is the default mode and allows quick and intuitive navigation around the grid. the first tab into the grid moves focus to the first cell of the first row. the second tab leaves the grid and moves focus to the next tabbable item on the page. subsequent tab once focus has been moved inside the grid subsequent tab presses that re-enter the grid shall return focus to the cell that last held focus. right left arrow keys navigate through the columns. there is no wrap at the end or beginning of columns. up down arrow keys navigate through the rows. there is no wrap at the first or last rows. home moves the focus to the first cell of the current row. end moves the focus to the last cell in the current row. page up moves the focus to the first cell in the current column page down moves the focus to the last cell in the current column selecting cells control+space selects the current column. shift+space selects the current row. control+a selects the entire grid. shift+arrow selects contiguous cells. shift+f8 allows additional cells to be added to a previous selection to accomplish non-contiguous selection. see global recommendations for information on cut copy and paste. enter or f2 pressed while focus is on a cell containing an actionable item enters actionable mode see following optionally alphanumeric keys pressed while focus is on an actionable item enters actionable mode. focus remains on the actionable item that has focus. actionable mode interactive allows interaction with other objects that might be found in the grid cells such as edit fields links menu buttons and so on. tab moves to the next actionable item in the grid and stays within the grid wrapping at the bottom. in this mode each tabbable object in each cell of the grid can be reached with the tab key. if multiple tabbable items are located inside a single grid cell tab stops at each one. when the last tabbable item in a cell is reached the next tab moves to the next tabbable item in the grid wrapping at the last tabbable item in the grid. shift+tab moves to the previous actionable tabbable item in the grid and stays within the grid wrapping at the top. escape exits actionable mode by which the user may enter text or perform an action to complete a operation and returns to navigation mode where the user is allowed to move focus among elements if a widget is in the current grid cell that also uses the escape key then it should cancel the event propagation. a subsequent press of the escape key returns focus to the parent widget. option the author may choose to enable auto action on a cell in order to avoid having to press enter or f2 a second time to activate the default behavior of the object contained in a cell. for example if the cell contains a single link the author may want to have enter follow the link rather than just move focus to it. this auto action mode should be configurable on a per cell basis as its utility is dependent on each cell s content. for example if the cell contains multiple links auto action should be disabled as its behavior would be ambiguous. option the author may choose to implement enter or f2 as a toggle such that pressing these keys multiple times will enter and exit actionable mode. opinion was divided on this point. some thought this would be confusing while others found it intuitive. it is recommended the developer use different styling for the selection when the grid is not focused hint non-active selection is often shown with a lighter background color wai-aria roles states and properties the dom representation of the grid should follow the html dom structure although it will be possible to use aria-owns to add a row or table cell. this is an edge case and may not be supported by assistive technologies. the grid container should have a role of grid. the data cells should have a role of gridcell. each row should be clearly marked using a tr from html and by using a role of row. column and row headers may be represented by a th if you are using an html table or you may explicitly use an aria role of columnheader and rowheader respectively. whenever a gridcell is selected set aria-selected true whenever a row is selected set its role to row and its aria-selected true allowing an at to quickly determine that the entire row is selected. by default a grid is considered to be editable meaning all gridcells are editable. should you want to make a grid read-only set aria-readonly true on the document element having a role grid this will make all grid cells read-only. to override the read-only status on an individual grid cell set its aria-readonly property to false. example travel form open ajax alliance email client open ajax alliance actionable sortable column header in a grid widget characteristics description an example of a grid whose headers are sortable in either ascending or descending order based on the name in the grid column headers. this design pattern matches that of the grid design pattern where specifically the author has included use of the arrow keys to permit navigation to the row or column headers that contain a button for sorting the rows of the table. sorting is based on the data cell contents in the column being sorted the name in the column header and whether the contents of the column are sorted in ascending or descending order. as the order of the cells change in the column the corresponding rows move in position with respect to that sort. keyboard interaction keyboard navigation is identical to grid with the exceptions that arrow key navigation includes the headers you are not required to enter actionable mode to toggle the sort of a row or column when on the corresponding header and content selection does not affect the selected state of row or column headers. simply pressing the space bar while focus is on a row or column header toggles the ascending descending sort of the corresponding row or column. it is recommended the developer use different styling for the selection when the grid is not focused hint non-active selection is often shown with a lighter background color wai-aria roles states and properties the same as the grid design pattern with the exception that each row or column header signified by a role of columnheader and rowheader respectively has an aria-sort value that reflects the current state for sort for the associated row or column. if another row or column header adjusts the sort of the grid the remaining row or column header aria-sort values must reflect their sorting impact on the grid. example grid email application sortable by column headers landmark navigation widget characteristics description keyboard interaction wai-aria roles states and properties example juicy studio real world example open ajax alliance another real world example link widget characteristics description the link widget provides an interactive reference to a resource either locally in the application or to an external resource. keyboard interaction the link is in the tab chain defined with the tabindex attribute. tab moves focus to the link. a second tab moves focus to the next focusable item. enter executes the link. shift+f10 is used to bring up an associated popup menu. wai-aria roles states and properties set a role of link on the element containing the text of the link. example listbox widget characteristics description a widget that allows the user to select one or more items from a list of choices. listbox keyboard interaction tab when a list is tabbed to select the first item if nothing else is already selected. a second tab will take the user out of the widget to the next tab stop on the page. up down arrows navigate up and down the list. shift+up arrow and shift+down arrow move and extend the selection. typing letter or several letters to navigate same letter goes to each item starting with that different letters go to first item starting with that entire string shift+f10 if the current item has an associated context menu then this key combination will launch that menu. selection checkbox space toggles checkboxes if the list items are checkable selectable list items space acts as a toggle to select and deselect the current item. if previous items have been selected it also deselects them and selects the current item. shift+space selects contiguous items from the last selected item to the current item. control+arrow moves without selecting. control+space toggles selection of non-contiguous items adding or removing the current item from the set of selected items. control+a it is recommended a checkbox link or other method be used to select all. the control+a key could be used to provide the shortcut key. it is recommended the developer use different styling for the selection when the list is not focused hint non-active selection is often shown with a lighter background color wai-aria roles states and properties the listbox container has a role of listbox. each entry in the listbox should have a role option and should be dom children of listbox. if is not a dom child of listbox then it should be referenced in the listbox by aria-owns. if all items in the listbox are not dom children of the listbox then set their aria-setsize and aria-posinset accordingly otherwise this information cannot be computed for context by the user agent. if the listbox is not part of another widget then it should have a visible aria-label referenced on the listbox by aria-labelledby. each selected list item should have aria-selected true example media player widget characteristics description keyboard interaction wai-aria roles states and properties example menu or menu bar widget characteristics description a menu type of widget that offers the user a list of choices. it is often a list of links to important sections of a document or a site. the menu role is appropriate when the list of links is presented in a manner similar to a menu on a desktop application. a menubar is also considered a form of menu. a menu should manage the focus of its descendants. sometimes a menu item will launch a dialog box. this is indicated using ellipsis at the end of the menu item label. an example is save as when presenting a menu ensure that it is completely visible on screen. keyboard interaction if a menu bar item has focus and the menu is not open then enter space and the up down arrow keys opens the menu and places focus on the first menu item in the opened menu or child menu bar. left or right arrow keys move focus to the adjacent menu bar item. when a menu is open and focus is on a menu item in that open menu then enter or space invokes that menu action which may be to open a submenu up arrow or down arrow keys cycle focus through the items in that menu. escape closes the open menu or submenu and returns focus to the parent menu item. if the menu item with focus has a submenu pressing enter space or the right arrow key opens the submenu and puts focus on the first submenu item. when a submenu is open and focus is on a menu item in that submenu up arrow or down arrow keys cycle through the submenu items behaves the same as open menu escape or the left arrow key closes the submenu and returns focus to the parent menu item. typing a letter printable character key moves focus to the next instance of a visible node whose title begins with that printable letter. first item in menu bar should be in the tab order tabindex 0 disabled menu items receive focus but have no action when enter or left arrow right arrow is pressed. it is important that the state of the menu item be clearly communicated to the user. tabbing out of the menu component closes any open menus. with focus on a menu item and a sub menu opened via mouse behavior pressing down arrow moves focus to the first item in the sub menu. with focus on a menu item and a sub menu opened via mouse behavior pressing up arrow moves focus to the last item in the sub menu. with focus on a submenu item the user must use arrows or the escape key to progressively close submenus and move up to the parent menu item s at the top level escape key closes any sub menus and keeps focus at the top level menu. wai-aria roles states and properties a menu is a container of options. the container may have a role of menu or menubar depending on your implementation. a menubar is usually rendered horizontally. the menu contains elements with roles menuitem menuitemcheckbox or menuitemradio depending on your implementation. if activation of a menuitem produces a popup menu then the menuitem has aria-haspopup set to true so that an assistive technology knows that the menuitem has a sub menu. menuitemcheckbox and menuitemradio set aria-checked to true when checked. menu focus is managed by the menu using tabindex or aria-activedescendant. a menuitem within a menu or menubar may appear in the tab order only if it is not within a popup menu. each menuitem is usually a dom child of its menu or menubar in the dom tree. a menuitem that is not a dom child of the menu or menubar is referenced by the menu or menubar using aria-owns and will appear in order at the end of the list of menuitems. therefore ensure that navigation to each menuitem follows this order. grouping of menuitems in a menu or menubar is performed by introducing an element with the role of separator. a separator delineates groups of menu items within a menu or menubar. a separator is not placed in the navigation order and it is in no way interactive. authors provide an aria-orientation consistent with the separator s orientation in the menu or menubar. since the separator is not navigable it does not support the aria-expanded state. it is recommended that when grouping menu items of type menuitemradio that they all be grouped together preceding or following a separator. example open ajax alliance menu bar open ajax alliance menu bar using css selectors menu button widget characteristics description a menu button is a push button that is used to invoke a menu. it appears as a normal button typically with a downward pointing arrow or triangle as a visual cue that it triggers the display of a menu. menu buttons are used in situations where authors want to provide a single menu without having to construct a complete menu bar. when presenting the menu ensure that it is completely visible on screen. keyboard interaction space or enter with focus on the button pressing space or enter will toggle the display of the drop-down menu. focus remains on the button. down arrow with focus on the button and no drop-down menu displayed pressing down arrow will open the drop-down menu and move focus into the menu and onto the first menu item. with focus on the button and the drop-down menu open pressing down arrow will move focus into the menu onto the first menu item. up and down arrow with focus on the drop-down menu the up and down arrow keys move focus within the menu items wrapping at the top and bottom. escape with focus on the drop-down menu pressing escape closes the menu and returns focus to the button. tab with focus on the button pressing the tab key will take the user to the next tab focusable item on the page. with focus on the drop-down menu pressing the tab key will take the user to the next tab focusable item on the page. note that this may be difficult to achieve on a web page. typing a letter printable character key moves focus to the next instance of a visible node whose title begins with that printable letter. wai-aria roles states and properties the menu button itself has a role of button. the menu button has an aria-haspopup property set to true. see the menu design pattern for information about the wai-aria roles states and properties of the associated menu invoked via the menu button. example dojo dijit menu button popup menu widget characteristics description a popup menu is otherwise known as a context menu. unlike a menu in a menubar or a menu button a popup menu has no visible trigger widget. the popup menu is typically invoked using the mouse with a right-click on empty space. the items in the menu depend on where the right-click occurred or the context in which the menu was invoked. an example is clicking on white space on a web page. a menu appears with items applicable to the page such as back forward reload bookmark this page and so on. clicking right in a different context such as an empty spot on the desktop will invoke a different menu one that is appropriate to desktop operations such as new folder when presenting the popup ensure that it is completely visible on screen. keyboard interaction the keyboard navigation for this widget was designed to work for both the popup and menubar menu widgets. the goal was to present a desktop paradigm for posting and dismissing menu widgets. shift f10 posts the popup menu widget when it is used as a context menu. place input focus on the first available menuitem in the popup menu. the browser s context menu pops up if the element with input focus does not have a popup menu attached. experiment indicated that javascript is able to re-purpose to post the widget s popup menu instead of the browser s. shift f10 is used by ie to display a shortcut menu for a link in ie7 and ie8 event.cancelbubble true and event.returnvalue false will allow the re-purposing of keys used by the browser. in the case of ie6 you can not stop the bubble up of keys used by the browser but can stop the bubble up to the os. in the case of firefox and other standard compliant browsers event.stoppropagation and event.preventdefault will re-purpose the keys. esc causes no menu action and dismisses popup menu. input focus is returned to the element from which the popup menu was called. up and down arrow moves input focus vertically between each menuitem. input focus wraps from the last to the first menuitem on a down key press and vice-versa when the up key is pressed. right and left arrow where applicable causes a sub-menu to post or un-post. causes no action if there is no sub-menu. enter what occurs when enter is pressed depends on the state the menu is in posts the popup menu if input focus is on the element or widget it is attached to e.g. a menubutton link etc. input focus is placed on the first menuitem when the menu pops up. dismisses the menu when input focus is on an active menuitem. nothing occurs if input focus is on a menuitem marked as disabled. page down moves input focus to the first menuitem on the next view of the menu. moves input focus to the last menuitem on menus that display all their content in one view. page up moves input focus to the last menuitem on the previous view of the menu. moves input focus to the first menuitem on menus that display all their content in one view. tab one of the following occurs moves input focus between elements in the popup menu s tabbing order. input focus stays in the popup menu until one of the following occurs esc is pressed. enter is pressed when input focus is on an interactive widget element. typing a letter printable character key moves focus to the next instance of a visible node whose title begins with that printable letter. wai-aria roles states and properties see the menu design pattern for information about the wai-aria roles states and properties of the popup menu. in all cases where there is no visual cue in the context that a popup menu is supported it is unnecessary to add an aria-haspopup property. example dojo nightly build mouse right click on the page. keyboard control+space mac or shift+f10 windows popup help aka bubble help widget characteristics description popup help contains more descriptive or actionable help-like text and elements. it may contain and was designed to handle interactive elements such as a button link or text field. it is essentially a popup menu with un-necessary keystrokes turned off. the key sequence for posting popup help was to take advantage of f1 s tie to the help paradigm f1 calls up application help for example keyboard interaction control+f1 posts the popup help widget. input focus is placed on the first interactive element in the popup help. control f1 is used by ie to display a help dialog box in ie7 and ie8 event.cancelbubble true and event.returnvalue false will allow the re-purposing of keys used by the browser. in the case of ie6 you can not stop the bubble up of keys used by the browser but can stop the bubble up to the os. in the case of firefox and other standard compliant browsers event.stoppropagation and event.preventdefault will re-purpose the keys. with the exception of control f1 to bring up popup help this widget is very similar to dialog modal and or dialog non-modal and or dialog tooltip described elsewhere in this document. esc causes no menu action and dismisses popup help. input focus is returned to the element or widget the popup help was invoked from. pressing enter when input focus is on the x glyph acts the same as pressing esc. tab one of the following occurs modal behavior moves input focus between elements in the popup help s tabbing order. input focus stays in the popup help until one of the following occurs esc is pressed. enter is pressed when input focus is on an interactive widget element. non-modal behavior moves input focus to the next tab-able element in the tabbing order if the following applies popup help is posted. it contains no tab navigable elements in it. shift+tab as with other keyboard conventions described here the shift+tab has the effect of moving the focus up rather than down and follows the same conventions as described for the modal and non-modal tab key above. enter activates the element in the popup help that has input focus if applicable then dismisses the popup. input focus should be placed on the appropriate element after the user presses the enter key. the appropriate place to move input focus to will not always be the parent element the popup help was invoked from. nothing occurs if input focus is on an element that has no associated action. f6 in the non-modal instance the f6 key can be used to move focus between the application and the open non-modal window. this is also the behavior described in dialog non-modal above. wai-aria roles states and properties see dialog modal and or dialog non-modal and or dialog tooltip example radio button widget characteristics description an option in single-select list keyboard interaction tab key will enter the radio group. when tab or shift+tab into a radio group focus goes to the selected radio button. if none is selected focus goes to the first radio button if tab was pressed or the last radio bottom if shift+tab was pressed. when focus is on any radio button tab or shift+tab will exit the radio group. up arrow and left arrow moves focus to the previous radio button in the group and selects that button. if focus is on the first item then focus wraps to last item. down arrow and right arrow moves focus to the next radio button in the group and selects that button. if focus is on the last item then focus wraps to first item. control+arrow moves through the options without updating content or selecting the button. space selects the radio button with focus and de-selects other radio buttons in the group. wai-aria roles states and properties the individual option uses the role list radio. it is a member of a group of radio controls radiogroup. example open ajax alliance radio button group open ajax alliance radio group using aria-activedescendant open ajax alliance radio button group using background images open ajax alliance radio button group using aria css selectors rich text editor widget characteristics description input control that accepts free-form text as its value. keyboard interaction the edit control is provided by the browser it provides the keyboard support for navigating adding removing and selecting text so that behavior is not defined by the rich internet application. the browser should also provide a keyboard mechanism for navigating into and out of the edit control. within most browsers the edit control is put into the tab order of the page and can be navigated into out of and through using the tab and shift-tab keys like any standard form control. a rich text editor widget needs to provide a user interface for interacting with the browser provided edit control. interaction between the user interface and editor is defined here assuming that a toolbar is used. tab and shift+tab if not provided by the browser the rich text editor widget provides a keyboard mechanism to move into and out of the edit control. tab and shift-tab are the recommended keystrokes. the toolbar or other user interface component associated with the editor is placed in the tab order immediately before the editor. to set an attribute on text within the edit control the user sets focus into the edit control moves the insertion point selects text and presses shift-tab to move focus from the editor back to the toolbar. the user navigates through the toolbar see toolbar behavior to a desired attribute and invokes that attribute. when an attribute is invoked that attribute is applied to the selected text in the editor and focus moves back into the editor at the previous insertion point with the selection intact. options rather than using shift+tab to move focus from within the editor to the toolbar another key combination could be used alt+up arrow control+shift+letter etc. this would eliminate the need to put the user interface control in this example a toolbar into the tab order immediately before the editor component. however there are drawbacks to using a different keystroke to navigate to the user interface it is not as discoverable as relying on the standard tab shift+tab behavior it is difficult to find key combinations which are not already captured by the browser or assistive technology. focus could stay within the toolbar after the user invokes an attribute. the user would then have to press an additional key to move focus back into the editor. this would allow multiple attributes to be set on the current selection without having to return back to the user interface but it would add an extra key sequence after setting just a single attribute. requiring a keystroke to move focus back into the editor would also require modifying the toolbar behavior to intercept this keystroke and to know how to set focus back to the component the editor that the toolbar is associated with. optionally if the developer wishes to provide the ability to insert a tab into the document it is recommended one of the following methods be used. provide indent and outdent buttons in the menu. keyboard shortcuts to the buttons should be control+m for indent and control+shift+m for outdent. provide a button in the menu to toggle the use of tab between the two modes. if this button is used then control+m is recommended as a keyboard shortcut to toggle the button. wai-aria roles states and properties authors are advised to not use aria for rich text editors but to rely on native html markup. current rich text editors typically use an iframe element for editable content. as a result the editable content is implicitly mapped to a document role in accessibility apis. if using html5 it is recommended that authors use the designmode or contenteditable attributes. example dojo nightly. ckedtor. yui rich text editor. site navigator general widget characteristics description a collection of links buttons or tabs usually presented in a region on the left or top of a page that is persistent across most pages of the site. it provides quick access to the primary sections or functions of the site. it may also communicate the structure or hierarchy of the site allowing the user to quickly drill down to a desired page. it often provides orientation information similar to that of bread crumbs by indicating which page is currently displayed and what its relationship is to the other pages shown in the navigator. some navigators are overloaded with support for other functions e.g. reordering pages in a wiki. multiple navigators may be present on a page. for example there may be a top-level navigator presented as tabs across the top and a second level navigator presented as sub tabs either on the top or left. the site navigator patterns described in this guide are for interactive navigation widgets designed to help standardize solutions to accessibility requirements that have often either been ignored or implemented with other methods that are more limitted in their usefulness. for example most site navigators implemented with static html provide a visual indicator of what page is currently displayed but few provide the same information programatically. also the static html navigators often provide information about page relationships through their visual layout that is not represented in their html structure. finally static html navigators require the user to tab to every element within the navigator whereas aria-enabled navigators implement arrow key navigation within the navigation widget. the navigator then becomes a single tab stop dramatically reducing the length of the tab sequence and improving usability. keyboard interaction see the site navigator tree and site navigator tabbed style sections for more detail. wai-aria roles states and properties an aria-enabled site navigator is made up of a container widget that enables ineraction with the navigation items. the widget is wrapped in a navigation region. the requirements for the navigation widget items and region are as follows. navigation container widget the navigation items need to be contained in an appropriate widget such as a tree menubar toolbar or listbox. see below for additional guidance on implementation using specific widget containers. if the navigator is for a hierarchical site or application the hierarchy may be represented in one of two ways by using a tree for the container widget or by using a separate widget for each level of the hierarchy. if a hierarchical site or application uses a tabbed navigation construct it will need to use one of the patterns that implements a separate widget for each level of the hierarchy. the container widget implementation should address the following considerations and requirements. label the widget should be labelled by using aria-label or aria-labelledby. the label should briefly and adequately describe the scope of navigation. for example if the navigator scope is the entire site or application the label could be set to the name of the site or application. labels should normally be brief e.g. one to three words. if multiple widgets are used to provide navigation of a hierarchy the widget label for levels below the root widget should use aria-labelledby to refer to the label of the item in the parent widget that represents the currently active navigation element. focus management when the widget receives focus the item in the widget that is currently active e.g. currently displayed should recieve the focus. aria-controls aria-controls should be set with a value that refers to the content region that is controlled by the navigator. if multiple navigators are used to provide navigation of a hierarchy navigation widgets that change the elements of a child navigator should have aria-controls set with a value that refers to the controlled child navigation widget. aria-multiselectable if the navigation widget is overloaded with non-navigation functions and if those functions can be performed on multiple elements then the widget must support aria-multiselectable and have it set to true. navigation items each page or content container represented in the navigator should be represented by an element such as an option treeitem menuitemradio or button. if the navigator visually communicates which page is currently displayed the navigation item must be able to programatically communicate the currently displayed status using aria-selected aria-checked or aria-pressed. for this reason a navigation item may not be a link unless the link is contained inside an option or treeitem. the states and properties of the navigation item should communicate the following. name of the target page or function every item must have an accessible name. current display status the item representing the page that is currently displayed should have either aria-selected or if it is a button aria-pressed set to true. all other items in the widget must have the same state set to false. if the navigation widget is overloaded with non-navigation functions and if it supports multi-selection then aria-checked should be used instead of aria-selected to indicate the display status. operational selection status if the navigator is overloaded with non-navigation functions each selected item must have aria-selected set to true and each selectable item must have aria-selected set to false. navigation region each navigation widget should be wrapped in a container with role navigation and have a label that is the same as the label on the the widget. if multiple widgets are used to support a hierarchy and if the widgets are sequential in the tab order then the navigation regions for child widgets should be nested inside the navigation region of the parent. the following two sections provide detailed descriptions of how to meet the above implementation requirements for site navigators using specific widgets. the site navigator tree section describes how to build a hierarchical navigator using a tree widget that contains links. the site navigator tabbed style section describes how to implement tabbed style site navigation using a toolbar containing toggle buttons a menubar containing menuitemradio elements or a listbox containing links. these are provided as examples and are not necessarily the only implementation options that can meet all the requirements described in this section. example see the site navigator tree and site navigator tabbed style sections for examples. site navigator tree widget characteristics description a site navigator implemented using a tree widget that provides navigation for a hierarchical set of pages content containers or application functions. for example a tree-based navigator is appropriate for the typical left-hand web site navigator that has an outline-like structure where activating a link displays the target of that link in the main content area and displays the pages that are children of the current page in the navigator. unlike the typical static left-hand navigator a dynamic tree widget could also provide the ability for the user to explore the hierarchy of the site without having to load a parent page in order to see the titles of the children. this would improve the navigation efficiency for all users by reducing the number of page loads. some sites or applications may provide support for hierarchical navigation using tabbed style navigation by providing a tab set for each level of the hierarchy. keyboard interaction the tree should implement keyboard navigation consistent with the tree view design pattern with one exception. when enter is pressed the default action can be activated on any node containing a link even if it is not an end node. note that the user can still use left and right arrow to expand and collapse nodes. note that selection keys should not be implemented unless aria-multiselectable is true. if aria-multi-selectable is false the default action should be to display the content associated with that item and if possible move the focus to the beginning of the controlled region. if aria-multiselectable is true and aria-haspopup is true for the current node then enter should open a pop-up menu that provides options for navigating to the target specified by the current node and for performing supported non-navigation operations on the currently selected items. focus when the tree receives focus the item in the tree that is marked as currently displayed should receive focus. wai-aria roles states and properties to build a site navigator tree build a tree where each treeitem contains a link. the states and properties of the tree and tree items should be set as follows. aria-label or aria-labelledby if the navigator has a visual label that briefly and adequately describes the scope of navigation the element with role tree should have aria-labelledby set with a value that refers to the element containing that label. otherwise aria-label should be used to provide an appropriate label. see site navigator for more details on appropriate labelling of a navigation widget. aria-controls the element with role tree should have aria-controls set with a value that refers to the content region controlled by the navigator. typically this is the element with role main. aria-multiselectable aria-multiselectable should be set to false unless the navigator also provides non-navigation functions that require selection. an example of non-navigation function is the ability to re-arrange pages in a wiki. aria-selected if aria-multiselectable is false the treeitem containing the link to the page or content that is currently displayed should be indicated by setting aria-selected to true and all other tree items should have aria-selected set to false. if aria-multiselectable is true then aria-selected should be used to indicate which items are either selectable or selected for non-navigation functions. aria-checked if aria-multiselectable is false aria-checked should not be specified. if aria-multiselectable is true then aria-checked should be set true on the tree item containing the link to the page or content that is currently displayed and all other tree items should have aria-checked set to false. aria-haspopup if aria-multiselectable is false aria-haspopup should not be specified. if aria-multiselectable is true one method for exposing non-navigation functions is to provide a pop-up menu containing those functions. if this is done nodes that support non-navigation functions should have aria-haspopup set to true and the pop-up menu must also provide as its first option the default navigation function. in this way the user can perform the navigation function simply by pressing enter twice. or the user can easily access non-navigation functions by pressing enter and then navigating the pop-up menu. navigation region the tree should be wrapped in a container with role navigation which also has the same label as the tree. example site navigator tabbed style widget characteristics description a site navigator that provides navigation for a small sibling set of pages content containers or application functions. all the pages in the set are at the same logical level in the site navigation scheme i.e. there are no parent child relationships. it will often have a look and feel similar to a tabpanel. some sites or applications may provide support for hierarchical navigation using tabbed style navigation by providing a tab set for each level of the hierarchy. keyboard interaction option 1 listbox containing links the listbox should implement keyboard navigation consistent with the listbox design pattern. in addition when enter is pressed the default action associated with the the currently focused option will be executed. note that selection keys should not be implemented unless aria-multiselectable is true. if aria-multi-selectable is false the default action should be to display the content specified by the link contained in that option and if possible move the focus to the beginning of the controlled region. if aria-multiselectable is true and aria-haspopup is true for the currently focused option then enter should open a pop-up menu that provides items for navigating to the target specified by the currently focused option and for performing supported non-navigation operations on the currently selected options. focus when the listbox receives focus the option in the listbox that is marked as currently displayed should receive focus. option 2 tool bar containing toggle buttons the tool bar should implement keyboard navigation consistent with the tool bar design pattern. in addition when enter or space is pressed and the focus is on a button that is not pressed the content controlled by the currently focussed button should be displayed and aria-pressed should be set true. the button that was previously pressed should have aria-pressed set to false. if the focus is on a button that was already pressed the focus should move to the beginning of the controlled region or to the pressed button in a controlled toolbar. focus when the toolbar receives focus the button in the toolbar that is marked as currently displayed should receive focus. option 3 menu bar containing menuitemradio elements the menu bar should implement keyboard navigation consistent with the menu bar design pattern. in addition when enter or space is checked and the focus is on a menuitemradio element that is not checked the content controlled by the currently focussed menuitemradio element should be displayed and aria-checked should be set true. the menuitemradio element that was previously checked should have aria-checked set to false. if the focus is on a menuitemradio element that was already checked the focus should move to the beginning of the controlled region or to the checked menuitemradio element in a controlled menubar. focus when the menubar receives focus the menuitemradio element in the menubar that is marked as currently displayed should receive focus. wai-aria roles states and properties option 1 listbox containing links to build a tabbed style navigator using a listbox implement the listbox design pattern where each option element contains a link. the listbox options and links should have the following states properties and behaviors. aria-label or aria-labelledby if the navigator has a visual label that briefly and adequately describes the scope of navigation the element with role listbox should have aria-labelledby set with a value that refers to the element containing that label. otherwise aria-label should be used to provide an appropriate label. see site navigator for more details on appropriate labelling of a navigation widget. if multiple navigators are used to support a hierarchy then a navigator containing elements that are controlled by a parent navigator should have aria-labelledby set to a value that refers to the currently active navigation item in the parent navigator. aria-controls the element with role listbox should have aria-controls set with a value that refers to the content region controlled by the navigator. typically this is the element with role main. if multiple listboxes are used to support a hierarchy then listboxes that control another listbox should have aria-controls set with a value that refers to the controlled listbox. aria-multiselectable aria-multiselectable should be set to false unless the navigator also provides non-navigation functions that require selection. an example of non-navigation function is the ability to re-arrange pages in a wiki. aria-selected if aria-multiselectable is false the option containing the link to the page or content that is currently displayed should be indicated by setting aria-selected to true and all other options should have aria-selected set false. if aria-multiselectable is true then aria-selected should be used to indicate which options are either selectable or selected for non-navigation functions. aria-checked if aria-multiselectable is false aria-checked should not be specified. if aria-multiselectable is true then aria-checked should be set true on the option containing the link to the page or content that is currently displayed and all other options should have aria-checked set to false. aria-haspopup if aria-multiselectable is false aria-haspopup should not be specified. if aria-multiselectable is true one method for exposing non-navigation functions is to provide a pop-up menu containing those functions. if this is done options that support non-navigation functions should have aria-haspopup set to true and the pop-up menu must also provide as its first item the default navigation function. in this way the user can perform the navigation function simply by pressing enter twice. or the user can easily access non-navigation functions by pressing enter and then navigating the pop-up menu. navigation region the listbox should be wrapped in a container with role navigation which also has the same label as the listbox. option 2 tool bar containing toggle buttons to build a tabbed style navigator using a toolbar implement the tool bar design pattern with one button in the toolbar for each navigation item. note that this pattern can not be overloaded with non-navigation functions. the toolbar and buttons should have the following states properties and behaviors. aria-label or aria-labelledby if the navigator has a visual label that briefly and adequately describes the scope of navigation the element with role toolbar should have aria-labelledby set with a value that refers to the element containing that label. otherwise aria-label should be used to provide an appropriate label. see site navigator for more details on appropriate labelling of a navigation widget. if multiple navigators are used to support a hierarchy then a navigator containing elements that are controlled by a parent navigator should have aria-labelledby set to a value that refers to the currently active navigation item in the parent navigator. aria-controls the element with role toolbar should have aria-controls set with a value that refers to the content region controlled by the navigator. typically this is the element with role main. if multiple toolbars are used to support a hierarchy then toolbars that control another toolbar should have aria-controls set with a value that refers to the controlled toolbar. aria-pressed the button for the page or content that is currently displayed should be indicated by setting aria-pressed true and all other buttons in the toolbar should have aria-pressed set to false. navigation region the toolbar should be wrapped in a container with role navigation which also has the same label as the toolbar. option 3 menu bar containing menuitemradio elements to build a tabbed style navigator using a menubar implement the menu bar design pattern with a group containing one menuitemradio element in the menubar for each navigation item. note that this pattern can not be overloaded with non-navigation functions. the menubar and menuitemradio elements should have the following states properties and behaviors. aria-label or aria-labelledby if the navigator has a visual label that briefly and adequately describes the scope of navigation the element with role menubar should have aria-labelledby set with a value that refers to the element containing that label. otherwise aria-label should be used to provide an appropriate label. see site navigator for more details on appropriate labelling of a navigation widget. if multiple navigators are used to support a hierarchy then a navigator containing elements that are controlled by a parent navigator should have aria-labelledby set to a value that refers to the currently active navigation item in the parent navigator. aria-controls the element with role menubar should have aria-controls set with a value that refers to the content region controlled by the navigator. typically this is the element with role main. if multiple menubars are used to support a hierarchy then menubars that control another menubar should have aria-controls set with a value that refers to the controlled menubar. aria-checked the menuitemradio element for the page or content that is currently displayed should be indicated by setting aria-checked true and all other menuitemradio elements in the menubar should have aria-checked set to false. navigation region the menubar should be wrapped in a container with role navigation which also has the same label as the menubar. example slider widget characteristics description a slider is user input where the user selects a value from within a given range. sliders typically have a button such that when moved will change the current value within the current range of the slider. the button must be keyboard accessible. it is typically possible to add or subtract to the current value by using directional keys such as arrow keys. keyboard interaction right arrow and up arrow increase the value of the slider. left arrow and down arrow decrease the value of the slider. home and end move to the minimum and maximum values of the slider. tab into and out of the slider. page up and page down optionally increment or decrement the slider by a given amount. focus is placed on the slider. the visual object that the mouse user would move also known as the thumb. localization for right to left languages may wish to reverse the left and right arrows. wai-aria roles states and properties the slider control uses the role slider and the role as well as its states and properties must be applied to the element that has focus. the slider must support the aria-valuenow aria-valuemax and aria-valuemin properties. if the valuenow property should be provided in a more human readable form than a decimal such as a day of the week then the slider should provide that information using aria-valuetext. sliders should be labelled and a reference to the label should be provided using aria-labelledby. example open ajax alliance sliders mindtrove rating widget paciello group slider please note that not all examples work in all browser and version combinations. for example note the compatibility statement. slider multi-thumb widget characteristics description a multi-thumb slider is a slider with multiple user inputs designed to change the maximum and minimum range for an object it controls. keyboard interaction this range slider allows author to modify the maximum and minimum range of an object within an applications. moving the thumb on either end allows the author to modify the corresponding maximum or minimum value of what it is controlling. tab to the first slider thumb. second tab moves to next slider thumb.. third tab moves to the next slider thumb or if there are no more it moves to the next tab stop on the page. shift+tab moves backwards through the tabs. with focus on a thumb same as slider above. right arrow and up arrow increase the value of the slider constrained by the value of the other thumb. left arrow and down arrow decrease the value of the slider constrained by the value of the other thumb. home and end move to the minimum and maximum values of the slider constrained by the value of the other thumb. page up and page down optionally increment or decrement the slider by a given amount constrained by the value of the other thumb. focus is placed on one of the thumbs of the slider. all thumbs are in the tab order. localization for right to left languages may wish to reverse the left and right arrows. if the current value of a slider crosses over one of the other sliders the tab order remains the same. example. if a high range slider is moved so that its current value is below the current value of a low range slider the thumb will visually appear to be before the low range slider. this should not change the tab order of the slider. wai-aria roles states and properties each thumb uses the role slider the thumb must support the aria-valuenow aria-valuemax and aria-valuemin properties. if the valuenow property should be provided in a more human readable form than a decimal such as a day of the week then the slider should provide that information using aria-valuetext. each thumb should define a aria-controls relationship between it and the opposing slider thumb as this will effect the corresponding aria-valuenow aria-valuemax and aria-valuemin properties. each slider thumb should define a aria-controls relationship between the thumb and the object it is controlling the maximum or minimum value sliders should be labelled and a reference to the label should be provided using aria-labelledby. finally if your range slider also controls a live area you should establish the controls relationship between each slider button upper and lower and the live area you it is controlling. example open ajax alliance sliders see second example on page paciello group double slider spinbutton widget characteristics description a widget that allows users to select from a range of values. a spinbutton typically provides the use of an up and down button on the keyboard. visibly the value is incremented or decremented until a maximum or minimum value is reached. a spinbutton usually includes a text field to display the current value and allow users to edit the value directly. keyboard interaction the associated text field generally supports standard text entry operations such as selection of characters deletions insertions and caret movement using the right arrow and left arrow keys. the exception is when the spinbutton s value space is restricted and the associated script limits the characters. for example an hour-and-minute spinner would allow only the digits 1-59 the colon and the characters am and pm if the user typed any other character it would not change the contents of the text field nor the value of the spinbutton. up arrow increases the value. down arrow decreases the value. home and end key move to the maximum or minimum values. optional page up and page down increase or decrease the value in larger steps. tab key moves into and out of the widget. focus should remain on the edit field localization for right to left languages may wish to reverse the left and right arrows. wai-aria roles states and properties spinbutton is a child of both composite and range. it requires current minimum and maximum values be set with the wai-aria properties aria-valuenow aria-valuemin and aria-valuemax. example open ajax alliance spinbutton dojo dijit nightly build tab panel widget characteristics description a tabbed interface component is a container for resources associated with a tab. it is a set of layered pages where only one page is displayed at a time. the general look is similar to a file folder with a tab that contains the title of the folder. the tabs are arranged along one of the edges of the contents but most commonly are found at the top of the page. the user navigates and makes the contents of each page visible by interacting with the title tab of the page. sometimes referred to as a tab container or tab panel. terms for understanding tab panels include tabbed interface component a set of tabs and associated tab panels tab panel contents area that is associated with a tab tab the label title area of the tab panel. this is where you click to activate a tab panel tablist the set of tabs when the user activates a tab the contents of the corresponding tab panel is made visible. the tab is considered active the tab remains active until another tab is activated. the active tab is placed into the tab order. only the active tab should be in the tab order. a default tab is specified that is active when the tabbed interface component is initialized. a collection of tabs and their associated tab panels is a complex widget because it performs show hide actions as well as moving the user s point of regard around within the content. keyboard interaction tab only the active tab is in the tab order. the user reaches the tabbed panel component by pressing the tab key until the active tab title receives focus. left arrow with focus on a tab pressing the left arrow will move focus to the previous tab in the tab list and activate that tab. pressing the left arrow when the focus is on the first tab in the tab list will move focus and activate the last tab in the list. right arrow with focus on a tab pressing the right arrow will move focus to the next tab in the tab list and activate that tab. pressing the right arrow when the focus is on the last tab in the tab list will move focus to and activate the first tab in the list. up arrow behaves the same as left arrow in order to support vertical tabs down arrow behaves the same as right arrow in order to support vertical tabs control+up arrow with focus anywhere within the tab panel pressing control+up arrow will move focus to the tab for that panel. this is not standard behavior is this something we want to implement is it necessary if we provide a mechanism to change the active tab similar to control+pageup control+pagedown in firefox to switch tabs alt+delete when deletion is allowed with focus anywhere within the tab panel pressing alt+delete will delete the current tab and tab panel from the tabbed interface control. if additional tabs remain in the tabbed interface focus goes to the next tab in the tab list. an alternative to providing a keystroke to close a tab is to provide a context menu that is associated with the tab title. when focus is on the tab pressing shift+f10 or pressing the right mouse button will open a context menu with the close choice control+pageup when focus is inside of a tab panel pressing control+pageup moves focus to the tab of the previous tab in the tab list and activates that tab. when focus is in the first tab panel in the tab list pressing control+pageup will move focus to the last tab in the tab list and activate that tab. control+pagedown when focus is inside of a tab panel pressing control+pagedown moves focus to the tab of the next tab in the tab list and activates that tab. when focus is in the last tab panel in the tab list pressing control+pageupwill move focus to the first tab in the tab list and activate that tab. regarding control+pageup control+pagedown. this is currently implemented in firefox to move between browser tabs. firefox also supports control+tab and control+shift+tab to move between tabs. internet explorer 7 also uses control+tab and control+shift+tab. there may be advantages to using control+pageup control+pagedown as the keys to change tabs since it is a recognizable keystroke to at least firefox users and is also supported by the windows operating system to move between panels in a tabbed dialog. the problem is that if the user is within a tabbed interface control on a web page they can not easily switch browser tabs without first moving focus outside of the tabbed interface control. this may be acceptable. the other issue is if the entire web page is a tabbed interface control in that case the user could not ever switch browser tabs unless the control on the web page ignored the control+pageup control+pagedown keypress and thus letting the browser access it when the first or last tab was reached. wai-aria roles states and properties the tabbed interface component contains tabs and their associated content panels. the content panel uses the role tabpanel. an element with role tab is used as a grouping label providing a link for selecting the tabpanel to be rendered to the user. assign the aria-controls relationship of a tab to the id of its tabpanel. authors manage the selected state of each tab by maintaining its aria-selected state. a tablist is the container role for a set of elements with the role attribute set to tab. example open ajax alliance simple tab panel open ajax alliance tab panel using aria css selectors tool bar widget characteristics description a toolbar is a flat non-hierarchical collection of controls that provides quick access to a subset of the functions found in the menubar menu hierarchy. its purpose is to reduce effort in using these functions. there should neither be too few nor too many controls within a toolbar. when creating toolbars try to limit the number of items to approximately seven as forcing users to navigate through an excessive number of items is a usability concern. since navigation between toolbars is accomplished using a tab keystroke too few controls within a toolbar also creates a usability issue as it requires numerous tab keystrokes to navigate between toolbars. authors must supply an aria-label property on each toolbar when their application contains more than one toolbar. the label provides information about the purpose of each toolbar for example an edit toolbar that contains cut copy paste clear undo and redo controls. if the application has many toolbars it is recommended that they be placed inside a container element with a role of group to allow for keyboard navigation to the entire collection of toolbars. it is recommended that authors provide a documented key combination that allows a user to move focus quickly to the tool bar from elsewhere within the web application placing keyboard focus on a tool within the tool bar. it is further recommended that authors provide access to these functions via a menubar and menus to avoid cluttering the user interface with a surplus of toolbars. keyboard interaction tab moves focus to the first enabled toolbar button. a subsequent tab moves focus out of the toolbar left arrow and right arrow keys navigate to the enabled buttons in the toolbar direction may need to be adjusted for right to left languages recommended provide a documented keystroke that allows users to move focus quickly to the tool bar from elsewhere within the web application placing focus on a tool within the tool bar. there is debate concerning the treatment of disabled toolbar buttons should they be focusable or not visually disabled buttons are grayed-out and typicially not placed in the navigation order. this invites an issue about how a screen reader user discovers these buttons if they are not keyboard navigable. several ways of handling this include in software applications like microsoft word the toolbars themselves are not reachable by the keyboard user but the features are available on one of the drop-down menus. users set a preference indicating whether they want disabled buttons focusable. disabled buttons are not focusable until they are enabled. this is the way tool bars currently work. disabled buttons are focusable but read by the screen reader as disabled. wai-aria roles states and properties the toolbar is a child of group. example open ajax alliance toolbar toolbar that does not require mananged focus tooltip widget widget characteristics description popup that displays a description for an element when a user passes over or rests on that element. supplement to the normal tooltip processing of the user agent. it should popup automatically when the user gives input focus to the widget or element with which it is associated. the tooltip widget can be dismissed by pressing the escape key or by other methods noted below. the tooltip widget differs from the dialog tooltip in that it does not receive focus at any time. keyboard interaction escape dismisses the tooltip. note the trigger element to which the tooltip is attached e.g. a link should never actually lose input focus. note if the tooltip is invoked when the trigger element gets focus then it should be dismissed when it no longer has focus onblur if the tooltip is invoked with mousein then it should be dismissed with a mouseout. note if more then one widget uses the same keys e.g. escape then they should be handled in a last in first out lifo manner. for example an editable grid contains gridcells which contain date fields. the user invokes actionable mode on the grid and then interacts with the date field to invoke the date picker. at this point the first press of the escape key will close the date picker the second press will exit actionable mode and return to navigation mode. wai-aria roles states and properties uses the wai-aria role tooltip example open ajax alliance tooltip open ajax alliance tooltip using aria css selectors dojo nightly tree grid widget characteristics description a grid whose rows can be expanded and collapsed in the same manner as for a tree. a tree grid is a combination of a treeview and a table with rows that are expandable keyboard interaction there are two modes of keyboard interaction navigation mode read-only is the default mode and allows quick and intuitive navigation around the grid. tab the initial tab enters the grid with focus on the first cell of the first row often a header. once in the grid a second tab moves out of the grid to the next tab stop. once focus is established in the grid a tab into or a shift+tab into the grid will return to the cell which last had focus. left arrow and right arrow keys navigate between columns. if the next cell in the row is empty focus should not move. up arrow and down arrow the down arrow moves focus to the first column of a child row if expanded. otherwise focus is moved to the same column in the next row. up arrow performs the same navigation but in reverse. control+left and control+right arrows expand or collapse rows. if the cell contains an editable field the enter key starts edit mode and the escape key exits edit mode. selecting cells control+space selects the current column. shift+space selects the current row. control+a selects the entire grid. shift+arrow selects contiguous cells. shift+f8 allows additional cells to be added to a previous selection to accomplish non-contiguous selection. see global recommendations for information on cut copy and paste. note the author may choose to indent child nodes visually. this should be done with an appropriate number of spacer cells marked as presentation in order to keep the headers aligned. note if cells are used for padding or layout of the hierarchy navigation to those presentational cells should be prevented. actionable mode interactive allows the interaction with other objects that might be found in the grid cells such as edit fields links etc. f2 pressed anywhere inside the grid will enter actionable mode. focus will not be moved. enter pressed while focus is on an actionable item will enter actionable mode. focus will remain on the actionable item that has focus. optionally alphanumeric keys pressed while focus is on an actionable item will enter actionable mode. focus will remain on the actionable item that has focus. tab will move to the next actionable tabbable item in the grid and stay within the grid wrapping at the bottom. in this mode each tabbable object in each cell of the grid can be reached with the tab key. if multiple tabbable items are located inside a single grid cell the tab will stop at each one. when the last tabbable item in a cell is reached the next tab will move to the next tabbable item in the grid wrapping at the last tabbable item in the grid. shift+tab moves to the previous actionable tabbable item in the grid and stays within the grid wrapping at the top. escape exits actionable mode by which the user may enter text or perform an action to complete a operation and returns to navigation mode where the user is allowed to move focus among elements if a widget is in the current grid cell that also uses the escape key then it should cancel the event propagation. a subsequent press of the escape key will return focus to the parent widget. wai-aria roles states and properties uses the wai-aria role treegrid and requires the child element row. by default a treegrid is considered to be editable meaning all gridcells are editable. to make a treegrid read-only set aria-readonly true on the document element having a role treegrid. this will make all gridcells read-only. to override the read-only status on an individual gridcell set its aria-readonly property to false. example for a visual not accessible example of where padding cells have been implemented see dojo s treegrid example. an example where padding cells have not been used also not accessible oracle s tree grid. tree view widget characteristics description a tree view is a component to navigate hierarchical lists. it is made up of one or more top level nodes. a node may have children or it may be an end node. nodes with children can be expanded or collapsed when expanded its child nodes are visible. when collapsed the children are not visible. there is generally some sort of visual indication whether a node has children and can be expanded. any number of nodes can be expanded at a time and child nodes may contain children. a tree node is commonly used to navigate the directories and files on a file system. the directory nodes can be expanded and collapsed to reveal its contained subdirectories and files. terms for understanding tree views include node an item in a tree. parent node node with children. it can be opened expanded or closed collapsed open node expanded node with children first-level children are visible. closed node closed node with children the children are not visible. end node node with no children general behavior for tree views follows on first load of the tree component the top level node is in the tab order. one and only one node of the tree component is in the tab order of the page at any time. the last visited node in the tree control is retained in the tab order when the user navigates away from the tree control. nodes can be focused and or selected. there must be visual distinction between focused and selected nodes. arrowing to an item with the keyboard or clicking on an item with the mouse will focus and select the node. any previous selections are cleared keyboard interaction up arrow and down arrow keys move between visible nodes. left arrow key on an expanded node closes the node. left arrow key on a closed or end node moves focus to the node s parent. right arrow key expands a closed node moves to the first child of an open node or does nothing on an end node. enter key performs the default action on end nodes. typing a letter key moves focus to the next instance of a visible node whose title begins with that letter. home key moves to the top node in the tree view. end key moves to the last visible node in the tree view. control+arrow to an item with the keyboard focuses the item but does not select it previous selections are maintained provided that the control key is not released or that some other keyboard function is not performed. control+space with focus on an item toggles the selection of the item. shift+up arrow extends selection up one node. shift+down arrow extends selection down one node. shift+home extends selection up to the top-most node. shift+pagedown extends selection down to the last node. asterisk on keypad expands all nodes. wai-aria roles states and properties a tree view uses the wai-aria role tree where tree is a main container element. a tree can itself contain subtrees that may be collapsed and expanded these have the role treeitem. a collection of treeitems to be expanded and collapsed are enclosed in a group. see the xhtml example in the wai-aria aria specification. example open ajax alliance treeview open ajax alliance treeview using aria-owns open ajax alliance treeview using aria css selectors dojo nightly window splitter widget characteristics description visible separator between sections of a window that is used to modify the size of the panes. keyboard interaction a window splitter can take one of two forms namely fixed size and variable size. tab like other widgets the tab key is used to move focus to the splitter. it should appear in the normal tab order of the page. a second tab will move focus to the next tabbable item on the page. left arrow and right arrow in the case of a vertical splitter these keys will move the splitter to the left and to the right. up arrow and down arrow in the case of a horizontal splitter these keys will move the splitter up and down. end moves splitter to the maximum size of the region. home moves splitter to the minimum size of the region. enter restore splitter to previous position undo home or end f6 optionally is recommended to rotate through the window panes. control+f6 optionally brings focus directly to the splitter. pressing control+f6 again would rotate forward through additional splitters located on the page. shift+control+f6 optionally reverses the direction rotating backwards through additional splitters located on the page. note fixed size splitter simply omits implementation of the arrow keys. note the group recommends unique naming of the window splitter to avoid the confusion that could be created by multiple splitters located on the same window. note the group recommends that a splitter default position restore option be available in a context menu. wai-aria roles states and properties uses the wai-aria role separator. most window splitters are expandable and collapsible. ensure that the splitter s aria-expanded state is updated accordingly. as there may be multiple splitters use aria-label aria-labelledby or the title attribute to label text on the splitter in order that an accessible name is computed by the user agent. the assistive technology can then convey to users which window splitter they are controlling. authors should set the aria-controls attribute of the element having the separator role. its value should be the ids of the panes whose sizes it controls. an assistive technology can then provide navigation among the panes. example window splitter aria splitter wizard widget characteristics description a sequence of dialogs or panels guiding the user through performing a task. keyboard interaction a wizard can be done in several ways. either is valid. method 1 like a tool bar method 2 controls as default actions escape cancels the wizard. enter invokes the next action if the last page it invokes finish method 3 hot keys control+alt+n next finish control+alt+p previous escape cancel exit without saving control+alt+r reset current page to default settings control+alt+s save and exit method 4 like a dialog authors should take care when using enter to trigger default actions since enter might be connected to and trigger some other user interface element or it might trigger the focused element. authors should ensure that enter activates only the widget they intend. wai-aria roles states and properties example dojo nightly 12. reusable component libraries rich internet applications are complex to author. to save time it is often faster to use existing widget libraries that implement wai-aria and that have already gone through extensive assistive technology testing cross browser testing testing to ensure that the widgets respond to desktop settings testing to ensure that the widgets match a common keyboard style guide some publicly available ui component libraries have already implemented wai-aria. authors can reuse such libraries to start developing accessible rich internet applications. 13. appendices 13.1. references this section is normative. 13.1.1. normative references resources referenced normatively are considered part of this specification. implementations of this specification must implement the requirements of these resources. aria accessible rich internet applications wai-aria 1.0. j. craig m. cooper l. pappas r. schwerdtfeger l. seeman editors w3c candidate recommendation work in progress 18 january 2011. this version of wai-aria is available at http www.w3.org tr 2011 cr-wai-aria-20110118 latest version of wai-aria available at http www.w3.org tr wai-aria aria-implementation wai-aria 1.0 user agent implementation guide. a. snow-weaver m. cooper a. leventhal editors w3c working draft work in progress 16 august 2012. this version of wai-aria user agent implementation guide is available at http www.w3.org tr 2012 wd-wai-aria-implementation-20120816 latest version of wai-aria user agent implementation available at http www.w3.org tr wai-aria-implementation 13.1.2. informative references resources referenced informatively provide useful information relevant to this document but do not comprise a part of its requirements. aria-practices wai-aria authoring practices. j. scheuhammer m. cooper l. pappas r. schwerdtfeger editors w3c working draft work in progress 7 march 2013. this version of wai-aria 1.0 authoring practices is available at http www.w3.org tr 2013 wd-wai-aria-practices-20130307 latest version of wai-aria authoring practices available at http www.w3.org tr wai-aria-practices aria-primer wai-aria 1.0 primer. l. pappas r. schwerdtfeger m. cooper editors w3c working draft work in progress 16 september 2010. this version of wai-aria primer is available at http www.w3.org tr 2010 wd-wai-aria-primer-20100916 latest version of wai-aria primer available at http www.w3.org tr wai-aria-primer aria-roadmap roadmap for accessible rich internet applications wai-aria roadmap r. schwerdtfeger editor w3c working draft work in progress 4 february 2008. this version of wai-aria roadmap is available at http www.w3.org tr 2008 wd-wai-aria-roadmap-20080204 latest version of wai-aria roadmap available at http www.w3.org tr wai-aria-roadmap atk gnome accessibility toolkit. available at https developer.gnome.org atk unstable at-spi assistive technology-service provider interface. available at https developer.gnome.org libatspi stable axapi the mac os x accessibility protocol. available at http developer.apple.com library mac documentation cocoa conceptual accessibility cocoaaxintro cocoaaxintro.html. dom document object model dom level 2 core specification l. wood g. nicol a. le hors j. robie s. byrne p. le h garet m. champion editors w3c recommendation 13 november 2000 http www.w3.org tr 2000 rec-dom-level-2-core-20001113 latest version of dom core available at http www.w3.org tr dom-level-2-core ia2 iaccessible2. available at http www.linuxfoundation.org collaborate workgroups accessibility iaccessible2. msaa microsoft active accessibility msaa available at http msdn.microsoft.com en-us library ms697707.aspx. uia-aria ui automation for w3c accessible rich internet applications specification. available at http msdn.microsoft.com en-us library ee684013 28vs.85 29.aspx. wcag20 web content accessibility guidelines 2.0 b. caldwell g. vanderheiden l. guarino reid m. cooper editors w3c recommendation 11 december 2008 http www.w3.org tr 2008 rec-wcag20-20081211 latest version of wcag 2.0 available at http www.w3.org tr wcag20 13.2. acknowledgments the following people contributed to the development of this document. 13.2.1. participants active in the pfwg at the time of publication christy blew invited expert uiuc david bolter mozilla alex qiang chen university of manchester michael cooper w3c mit james craig apple inc. steve faulkner invited expert the paciello group jon gunderson invited expert uiuc markus gylling daisy consortium mona heath invited expert uiuc matthew king ibm corporation dominic mazzoni google inc. shane mccarron invited expert aptest charles mccathienevile yandex mary jo mueller ibm corporation james nurthen oracle corporation janina sajka invited expert the linux foundation joseph scheuhammer invited expert inclusive design research centre ocad university stefan schnabel sap ag richard schwerdtfeger ibm corporation lisa seeman invited expert aqueous cynthia shelly microsoft corporation andi snow-weaver ibm corporation l onie watson invited expert nomensa gottfried zimmermann invited expert access technologies group 13.2.2. other previously active pfwg participants and other contributors to the accessible rich internet applications specification special thanks to aaron leventhal for effort and insight as he implemented a working prototype of accessibility api bindings. special thanks to al gilman for his work while chair of the pfwg in bringing the aria technology to fruition. jim allan tsb simon bates chris blouch aol judy brewer w3c mit sally cain royal national institute of blind people ben caldwell trace charles chen google inc. christian cohrs dimitar denev frauenhofer gesellschaft donald evans aol geoff freed invited expert ncam kentarou fukuda ibm corporation becky gibson ibm alfred s. gilman andres gonzalez adobe systems inc. scott gonz lez jquery foundation georgios grigoriadis sap ag jeff grimes oracle barbara hartel james hawkins google inc. sean hayes microsoft corporation john hrvatin microsoft corporation kenny johar vision australia shilpi kapoor barrierbreak technologies masahiko kaneko microsoft corporation earl johnson sun jael kurz diego la monica international webmasters association html writers guild iwa-hwg rajesh lal nokia corporation aaron leventhal ibm corporation gez lemon international webmasters association html writers guild iwa-hwg alex li sap thomas logan hisoftware inc. william loughborough invited expert linda mao microsoft anders markussen opera software matthew may adobe systems inc. joshue o connor invited expert cfit artur ortega yahoo inc. lisa pappas society for technical communication stc dave pawson rnib steven pemberton cwi amsterdam david poehlman simon pieters opera software sarah pulis media access australia t.v. raman google inc. gregory rosmaita invited expert tony ross microsoft corporation martin schaus sap ag marc silbey microsoft corporation henri sivonen mozilla henny swan opera software vitaly sourikov mike squillace ibm gregg vanderheiden invited expert trace ryan williams oracle tom wlodkowski wei wu ritt 13.2.3. enabling funders this publication has been funded in part with federal funds from the u.s. department of education national institute on disability and rehabilitation research nidrr under contract number ed05co0039. the content of this publication does not necessarily reflect the views or policies of the u.s. department of education nor does mention of trade names commercial products or organizations imply endorsement by the u.s. government. 