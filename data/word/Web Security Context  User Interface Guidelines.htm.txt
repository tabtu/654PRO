web security context user interface guidelines web security context user interface guidelines w3c recommendation 12 august 2010 this version http www.w3.org tr 2010 rec-wsc-ui-20100812 latest version http www.w3.org tr wsc-ui previous version http www.w3.org tr 2010 pr-wsc-ui-20100622 editors thomas roessler w3c anil saldhana redhat please refer to the errata for this document which may include some normative corrections. see also translations. copyright 2010 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstractthis specification defines guidelines and requirements for the presentation and communication of web security context information to end-users. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr please see the working group s implementation report. to frame its development of this specification the working group had previously published a use case note wsc-usecases this specification addresses most of the use cases and issues documented in that note by documenting best existing practice with the following exceptions this specification does not include advice for web site authors. this specification does not provide advice to address the issue explained in sections 9.1.2 visually extending the chrome and 9.2.7 information bar aka notification bar additionally section 10.4 implementation and testing of wsc-usecases articulated an expectation that the recommendations in this specification would be subject to usability testing at least on a low fidelity level and that such testing would form part of the candidate recommendation exit criteria. resources available to the working group at this point will not permit the group to conduct extensive usability testing. at the same time the focus of this specification has shifted toward documenting best existing practice. this document was developed by the web security context working group. for a list of changes to this document since its proposed recommendation version please refer to the diff document. all changes were editorial in nature. please send comments about this document to public-usable-authentication@w3.org with public archive this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. table of contents 1 overview 2 acknowledgments 3 conformance 3.1 product classes 3.2 language conventions 3.3 conformance levels 3.4 conformance claims 4 interaction and content model 4.1 overview 4.2 terms and definitions 4.2.1 common user interface elements 5 applying tls to the web 5.1 certificate handling and information 5.1.1 interactively accepting trust anchors or certificates 5.1.2 augmented assurance certificates 5.1.3 validated certificates 5.1.4 self-signed certificates and untrusted root certificates 5.2 types of tls 5.3 mixed content 5.4 error conditions 5.4.1 tls errors 5.4.2 error conditions based on third party or heuristic information 5.4.3 insecure form submission 6 indicators and interactions 6.1 identity and trust anchor signaling 6.1.1 identity signal 6.1.2 identity signal content 6.2 additional security context information 6.3 tls indicator 6.4 error handling and signaling 6.4.1 common error interaction requirements 6.4.2 warning caution messages 6.4.3 danger messages 7 robustness best practices 7.1 keep security chrome visible 7.2 do not mix content and security indicators 7.3 managing user attention 7.4 apis exposed to web content 7.4.1 obscuring or disabling security user interfaces 7.4.2 software installation 7.4.3 bookmarking apis 7.4.4 pop-up window apis 8 security considerations 8.1 active attacks during initial tls interactions 8.2 certificate status checking failures 8.3 certificates assure identity not security 8.4 binding human readable names to domain names 8.5 warning fatigue 8.6 mixing augmented assurance and validated certificates 8.7 dynamic content might change security properties 9 terms defined in this document 10 references 1 overview this specification deals with the trust decisions that users must make online and with ways to support them in making safe and informed decisions where possible. in order to achieve that goal this specification includes recommendations on the presentation of identity information by user agents 6.1.1 identity signal. we also include recommendations on conveying error situations in security protocols. the error handling recommendations both minimize the trust decisions left to users and represent known best practice in inducing users toward safe behavior where they have to make these decisions. to complement the interaction and decision related parts of this specification 7 robustness best practices addresses the question of how the communication of context information needed to make decisions can be made more robust against attacks. this document specifies user interactions with a goal toward making security usable based on known best practice in this area. this document is intended to provide user interface guidelines. most sections assume the audience has a certain level of understanding of the core pki public key infrastructure technologies as used on the web. the following sections are relevant to all readers and do not require a thorough understanding of pki 3 conformance 4 interaction and content model 6 indicators and interactions 6.4 error handling and signaling 7 robustness best practices and 8.5 warning fatigue. since this document is part of the w3c specification process it is written to clearly lay out the requirements and options for conforming to it as a standard. user interface guidelines that are not intended for use as standards do not have such a structure. readers more familiar with that latter form of user interface guideline are encouraged to read this specification as a way to avoid known mistakes in usable security. this specification comes with two companion documents wsc-usecases documents the initial assumptions about the scope of this specification. it also includes an initial set of use cases the working group discussed. wsc-threats documents the working group s initial threat uow.acc.tab.analysis. this document is based on current best practices in deployed user agents and covers the use cases and threats in those documents to that extent. 2 acknowledgments this specification is based on text from mary ellen zurko stephen farrell anil saldhana ian fette michael mccormick serge egelman johnathan nightingale yngve n. pettersen luis barriga hal lockhart tyler close bill doyle thomas roessler as well as input and discussions from the active members of the web security context working group primarily phillip hallam-baker mike beltzner joe steele jan vidar krey maritza johnson rachna dhamija and dan schutzer. it has also benefited from general public and working group commentary on earlier drafts. 3 conformance 3.1 product classes this specification addresses web user agents as a product class. web user agents and user agents are used synonymously in this specification. this specification also addresses products that might incorporate changes to a user agents such as plug-ins extensions and others they are summarily called definition plug-ins in this section. such products that might incorporate changes to the user agent e.g. through the addition or removal of features can render an otherwise conforming user agent non conforming or vice versa. 3.2 language conventions throughout the specification the rfc 2119 rfc2119 keywords must must not should should not may are applied with their respective meanings. 3.3 conformance levels a user agent conforms to this specification at the definition basic level if it honors all must and must not clauses of this specification. a user agent conforms to this specification at the definition advanced level if it also honors all should and should not clauses of this specification. conformance of a plug-in is defined in terms of the conformance of the user agent that results when the plug-in is added to a base user agent. e.g. if a given user agent conforms to this specification on the basic level and a plug-in adds features that lead to conformance on the advanced level then this plug-in conforms on the advanced level with respect to this base user agent. 3.4 conformance claims a claim about a web user agent s conformance with this specification must state whether basic or advanced conformance is claimed see 3.3 conformance levels what tls sslv3 tlsv11 tlsv12 protocol versions and algorithms are considered as strong tls algorithms and what protocol versions and algorithms are supported in tls negotiation but not considered strong. what user interface element is the tls indicator defined in this specification. what user interface element is the identity signal defined in this specification. what broadly accepted practices are considered sufficient for a trust anchor to be deemed augmented assurance qualified see 5.1.2 augmented assurance certificates and what data elements are deemed assured by those certificates. what features beyond the claimed conformance level the user agent conforms with. a claim about a plug-in s conformance with this specification must include all of the above and also identify the base user agent with respect to which conformance is claimed. 4 interaction and content model 4.1 overview this specification assumes a human user interacting with a web user agent interacting with web resources. many of the requirements specified are focused on the presentation of security context information to the user and therefore directly relate to user interfaces. where requirements or techniques are specific to certain modalities these are made explicit and are part of the preconditions for applying the requirement or technique. when this specification speaks of a web user agent to describe the application through which a user interacts with the web then this term is used on a conceptual level no assumption is made about implementation details the web user agent may denote a combination of several applications extensions to such applications operating system features and assistive technologies. a common user agent will therefore be a web browser with some number of plug-ins extensions call outs to external systems which render particular document formats and assistive technologies. this specification makes no specific assumption about the content with which the user interacts except for one there is a top-level web page that is identified by a uri rfc3986 this web page might be an html frameset an application running on top of a proprietary run-time environment or a document in a format interpreted by plug-ins or external systems served as part of a web interaction. the page s behavior might be determined by scripting stylesheets or other mechanisms. in interactive web applications the presentation to the user might also depend on state that is local to the client be it local storage of structured data or be it recent interactions with the web page. the security properties of those data will depend on the security properties of the client computer itself and are out of scope for this specification. some requirements are expressed in terms of user interface components commonly found in current-generation web user agents. 4.2 terms and definitions is expected to be consistent with the web content accessibility guidelines version 2 wcag20 4.2 terms and definitions definition a web user agent is any software that retrieves and presents web content for users. definition a web page is a resource that is referenced by a uri and is not embedded in another resource plus any other resources that are used in the rendering or intended to be rendered together with it. 4.2.1 common user interface elements this section defines terms for user interface elements commonly present in web user agents. definition primary user interface denotes the portions of a web user agent s user interface that are available to users without being solicited by a user interaction. examples of primary user interface include the location bar in common web user agents the padlock icon present in common web user agents or error pages that take the place of a web page that could not be retrieved. definition secondary user interface denotes the portions of a web user agent s user interface that are available to the user after they are solicited by a specific user interaction. examples of secondary user interface include the page information dialog commonly found in web user agents and the security properties dialog that can obtained by clicking the padlock icon in common web user agents. we occasionally use the term definition chrome to refer to the representation through which the user interacts with the user agent itself as distinct from the accessed web content. this includes both primary and secondary user interface. definition location bar is a widget in a web user agent s user interface which displays and often allows input of the textual location entered as a uri of the resource being requested or displayed after the response is received definition identity information is information about the web site which is used to present the identity signal. 5 applying tls to the web 5.1 certificate handling and information public key certificates see pkix are widely used in tls sslv3 tlsv11 tlsv12 but have been the basis for the generation of many inappropriate warnings and other dialogs for users. this section describes some modifications to current certificate processing aimed at improving this aspect of handling web security context and defines some new terms describing various cases related to certificate handling in user agents. user agents can base their acceptance of certificates that are presented by web servers on various sources including user action previous interactions involving the same certificate or as more traditionally assumed on validation of a certificate chain where each certificate is issued by a certification authority ca the practices used by cas and the information attested vary by ca and are not available in any useful sense to web user agents. 5.1.1 interactively accepting trust anchors or certificates a trust anchor represents an authoritative entity represented by a public key and associated data. the public key is used to verify digital signatures and the associated data is used to constrain the types of information for which the trust anchor is authoritative. relying parties use trust anchors to determine if digitally signed information objects are valid by verifying digital signatures using the trust anchor s public key and by enforcing the constraints expressed in the associated certificate data. trust anchor installation is typically handled by user agent vendors systems administrators and device manufacturers based on out-of-band information. note that updating trust anchors is therefore often handled as part of user agent or operating system software updates. however current user agents sometimes support the interactive acceptance of a trust anchor during a session based on user interaction. most users cannot sensibly decide how to handle such interactions. similarly end-entity e.g. web server certificates that cannot be currently verified using the basic path validation algorithm may trigger current user agents to offer the user a choice to accept the certificate in any case sometimes for a single session sometimes for all future sessions involving that certificate possibly scoped to specific host and port combinations. definition a trust anchor or certificate is interactively accepted if the acceptance was caused through a user interaction that happens while the user is focused on a primary task unrelated to trust and certificate management. for example if a web server certificate is presented for acceptance by a user during ordinary web interactions and is accepted by the user then this matches the test for interactive acceptance. if however a systems administrator or user adds a trust anchor s certificate to an agent s store of trust roots then that certificate is not considered interactively accepted. 5.1.2 augmented assurance certificates some trust anchors adhere to documented broadly accepted practices e.g. evtlscert these involve some level of guarantee that certificates chaining up to those roots embody augmented assurance and can therefore be treated more favorably in terms of the primary security indicators. we call such certificates augmented assurance certificates definition an augmented assurance certificate is a public key certificate where the issuer asserts that the subject entity has been authenticated by means of some process that adheres to the requirements of an augmented assurance specification supported by the user agent. the certificate chain for such a certificate must be validated up to a trust root that is recognized as augmented assurance qualified by the user agent. this specification does not define what an augmented assurance qualified trust root is except to note that this designation is made by user agents through an out of band mechanism consistent with the relevant underlying augmented assurance specification. marking a trust anchor as augmented assurance qualified is a security-critical step and most often will involve the use of some application-specific out-of-band mechanism. implementations must not enable users to designate trust roots as augmented assurance qualified as part of a unrelated interaction. in particular the notions of an augmented assurance qualified trust root and an interactively accepted trust root are mutually exclusive. in addition to the out of band designation process described above the trust anchor and possibly all certificates in a path chaining up to such a trust anchor may need to be specially marked e.g. through the use of specific policy object identifiers. the specific marking mechanisms to be used and the special treatment to be afforded to such certificates are out of scope of this document but will typically be covered by the underlying augmented assurance specification. user agent implementers determine the set of such standards that they support and the associated special treatment to apply other than as outlined below where we impose some consistency requirements on the handling of this type of certificate. to derive a human-readable subject name from an augmented assurance certificate user agents should use the subject field s organization o and country c attributes. they must use information that is subject to the certificate authority s additional assurances as documented in the user agent s conformance statement. note should certificates arise in the future that provide strong assurance of the holder s identity but do not include an organization attribute then user agents can make use of the additional assurance level and identity information without violating this specification. such future certificates could for example include high assurance certificates for individuals. 5.1.3 validated certificates the term definition validated certificate is used to denote a public key certificate that has been verified by chaining up to a locally configured trust anchor. the set of trust anchors used by a given web user agent is implementation-dependent. since augmented assurance certificates chain up to a special trust anchor all valid augmented assurance certificates are also validated certificates. certificates or certificate chains that are pinned to a particular destination are not considered validated certificates by virtue of being pinned. the notion of a validated certificate in this specification corresponds to the domain validated certificate commonly deployed on the web. this type of certificate attests to a binding between a domain name registration and a key pair additional certificate attributes are often not validated. 5.1.4 self-signed certificates and untrusted root certificates self-signed certificates ssc which are not trust anchors by themselves are commonly used for appliances and web sites catering to small groups of users and essentially serve as a container for cryptographic key material in a key exchange that is not verified by any third party. certificate chains that lead up to custom root certificates which are not part of the user agent s store of trust roots are sometimes used similarly. in both situations use of tls provides confidentiality protection services against passive attackers. no binding of a third-party asserted identity to the cryptographic key is achieved. in both cases the certificates are not considered validated certificates. using key continuity management kcm user agents can use self-signed certificates or certificates that chain up to an untrusted root to determine that they are consistently communicating with the same end entity thereby defending against active attacks as well. simply put if a web site consistently presents the same self-signed certificate or the same certificate chaining up to the same untrusted root to a client then this can be strong evidence that protection against an active attacker has been achieved as well. conversely a change of certificates for the same site can be evidence that a man in the middle attack occurs or it can merely indicate that the legitimate site has changed to a different certificate. user agents may support definition pinning a self-signed certificate or more generally a certificate chain that leads to an untrusted root certificate to a particular web site to enable behavior based on recorded state about certificates shown previously by the same site. such behavior includes e.g. warning users about changes of certificates and not showing warning messages if a site shows a certificate consistent with previous visits. the interaction that enables users to pin a certificate to a destination should not cause a self-signed certificate to be pinned to more than one site identified through uri scheme domain and port. the interaction must not cause an untrusted root certificate to be accepted automatically for additional sites. 5.2 types of tls the most common mechanism for applying tls to the web is the use of the https uri scheme rfc2818 the alternative upgrade mechanism rfc2817 is used rarely if at all. for the purposes of this specification the most relevant property of rfc2818 is that the uri used to identify a resource includes an assertion that use of tls is desired. this specification uses the term definition http transaction regardless of whether any kind of tls protection was applied in particular the transactions arising when an https uri is dereferenced are subsumed under this term. rfc2616 definition an http transaction is tls-protected if the resource was identified through a uri with the https uri scheme the tls handshake was performed successfully and the http transaction has occurred through the tls channel. note that an http transaction may be considered tls protected even though weak algorithms including null encryption are negotiated. definition an http transaction is strongly tls-protected if it is tls-protected an https url was used strong tls algorithms were negotiated for both confidentiality and integrity protection and at least one of the following conditions is true the server used a validated certificate that matches the dereferenced uri or the server used a self-signed certificate that was pinned to the destination or the server used a certificate chain leading to an untrusted root certificate that was pinned to the destination. tls modes that do not require the server to show a certificate such as the dh_anon mode do not lead to a strongly tls-protected transaction. the ability to provide privacy and secure the connection between a user agent and web server is in part determined by the strength and capabilities of the tls protocol and underlying cryptographic mechanisms. the tls protocol is versioned to keep pace with protocol features and cipher suites that are available. cipher suites are grouped according to algorithms and the key length used by cryptographic functions to provide cipher strength. when this document speaks of definition strong tls algorithms then the following must hold no version of the tls protocol that suffers known security flaws has been negotiated. at the point of writing of this document versions of ssl prior to sslv3 sslv3 must not be considered strong. a cipher suite has been selected for which key and algorithm strengths correspond to industry practice. at the time of writing of this document the export cipher suites explicitly forbidden in appendix a.5 of tlsv11 must not be considered strong. what set of algorithms is considered as strong by a given implementation must be described in any conformance claim against this specification see 3.4 conformance claims. definition an http transaction is weakly tls-protected if it is tls-protected but strong tls protection could not be achieved for one of the following reasons tls handshake used an anonymous key exchange algorithm such as dh_anon the cryptographic algorithms negotiated are not considered strong certificates were used that are not either validated certificates or self-signed certificates pinned to the destination see 5.1.4 self-signed certificates and untrusted root certificates weakly tls-protected interactions may provide security services such as confidentiality protection against passive attackers or integrity protection against active attackers without confidentiality protection these properties are often desirable even if strong tls protection cannot be achieved. 5.3 mixed content if a given web page consists of a single resource only then all content that the user interacts with has security properties derived from the http transaction used to retrieve the content. definition a web page is called tls-secured if the top-level resource and all other resources that can affect or control the page s content and presentation have been retrieved through strongly tls protected http transactions. definition a web page is called mixed content if the top-level resource was retrieved through a strongly tls protected http transaction but some dependent resources were retrieved through a weakly protected or unprotected http transaction. this definition implies that inline images stylesheets script content and frame content for a secure page need to be retrieved through strongly tls protected http transactions in order for the overall page to be considered tls-secured. any ui indicator used to signal the presence of augmented assurance certificates must not signal the presence of such a certificate unless the page is tls-secured i.e. all parts of the page are loaded from servers presenting at least a validated certificate over strongly tls-protected interactions. for relevant security considerations see 8.6 mixing augmented assurance and validated certificates. 5.4 error conditions 5.4.1 tls errors this section covers tls-related error conditions and maps them to the classes of error handling interactions see 6.4 error handling and signaling that are used when these conditions arise. if multiple error conditions apply the most severe signaling level currently known must be used as defined in 6.4 error handling and signaling. when during tls negotiation the certificate chain presented by the server does not lead to a trusted root certificate and the certificate chain presented was not pinned to the destination the following applies error signaling of class warning or higher 6.4.2 warning caution messages 6.4.3 danger messages must be used to signal the error condition. user agents may offer a possibility to pin newly encountered certificates to the destination. note that when untrusted certificates are accepted without user interaction an additional exposure to man-in-the-middle attacks is created. see 8.1 active attacks during initial tls interactions for a more detailed discussion of this scenario. when certificate information is presented in the interactions described in this section then human-readable information from certificates must not be presented as trustworthy unless it is attested. e.g. a self-signed certificate s common name or organization attribute must not be displayed even if that certificate is pinned to a destination. user agents may display this information in a dialog or other secondary user interfaces reachable from the warning or error messages specified here. when during tls negotiation the end-entity certificate presented or one of the intermediate certificates in the certificate chain are found to have been revoked error signaling of class danger 6.4.3 danger messages must be used. when during tls negotiation the end-entity certificate presented or one of the intermediate certificates in the certificate chain are found to have expired error signaling of class danger 6.4.3 danger messages must be used. when the uri corresponding to the transaction does not match the end-entity certificate presented and a validated certificate is used then error signaling of level danger 6.4.3 danger messages must be used. if tls negotiation otherwise fails error signaling of level danger 6.4.3 danger messages must be used. when tls error conditions occur user agents may choose to abort the connection without any further user interaction. the guidelines in this section apply when user agents choose to cause a user interaction in the case of tls error conditions. note that user agents may combine both practices e.g. an interactive approach may be chosen for the top-level frame of a web page but a non-interactive approach may be chosen for inline content. it is expected that the xmlhttprequest specification xhr will include a non-interactive approach as well. 5.4.2 error conditions based on third party or heuristic information user agents that use third party services or heuristic approaches to assess the possible danger of a pending web transaction must use error signaling of class danger 6.4.3 danger messages to signal positively identified dangers e.g. identified malicious downloads or exploits of user agent vulnerabilities. to signal risks that are identified with high likelihood but involve further user decisions e.g. phishing heuristics were triggered error signaling of class warning or above 6.4.2 warning caution messages 6.4.3 danger messages must be used. 5.4.3 insecure form submission users interacting with a tls-secured page are likely to develop the impression that information submitted during these interactions will be strongly tls-protected. user agents may warn users using an error of class warning or higher 6.4.2 warning caution messages 6.4.3 danger messages if form submissions from a tls-secured page are directed to an unsecured channel. 6 indicators and interactions 6.1 identity and trust anchor signaling this section specifies practices for signaling information about the identity of the web site a user interacts with. all signals specified in this section are passive. no claim is made about the effectiveness of these signals to counter impersonation attacks. 6.1.1 identity signal user agents must make information about the identity of the web site that a user interacts with available. this definition identity signal should be part of primary user interface during usage modes which entail the presence of signaling to the user beyond only presenting page content. otherwise it must be available through secondary user interface. note that there may be usage modes during which this requirement does not apply for example a web agent which is interactively switched into a presentation mode that does not display any chrome need not preserve security indicators in primary user interface. on the other hand a user agent such as a smart phone individual entertainment screen in an airplane seat back or tv set which has a usage mode that makes minimal but visible chrome elements available does need to preserve security indicators in such a mode. user agents with a visual user interface must show the identity signal in a consistent visual position. web content must not obscure security user interface 7.4.1 obscuring or disabling security user interfaces. 6.1.2 identity signal content information displayed in the identity signal must be derived from validated certificates or from user agent state. web user agents must not use information as part of the identity signal that is taken from unauthenticated or untrusted sources. during interactions with a tls-secured web page for which the top-level resource has been retrieved through a strongly tls-protected interaction that involves an augmented assurance certificate and for which all dependent resources have been retrieved through interactions that involve validated certificates the following applies the identity signal must include human-readable information about the certificate subject derived as specified in 5.1.2 augmented assurance certificates to inform the user about the owner of the web page. during interactions with a tls-secured web page for which the top-level resource has been retrieved through a strongly tls-protected interaction that involves a validated certificate including an augmented assurance certificate the following applies if the identity signal does not include any other human readable information about the identity of the certificate subject derived e.g. from an augmented assurance certificate then it must include an applicable dns name that matches either the subject s common name attribute or its subjectaltname extension. user agents may shorten such a dns name by displaying only a suffix. to inform the user about the party responsible for that information the issuer field s organization attribute must be displayed in the identity signal or in secondary user interface that is available through a consistent interaction with the identity signal. subject logotypes rfc3709 derived from certificates must not be rendered unless the certificate used is an augmented assurance certificate. note that this behavior does not apply when self-signed certificates or certificate chains that chain up to an untrusted root certificate are used. during interactions with a mixed content web page the identity signal must not include any site identity information beyond that which is in use for unprotected http transactions. in this situation the identity signal may include indicators that point out any error conditions that occurred. during interactions with mixed content user agents must not render any logotypes rfc3709 derived from certificates. 6.2 additional security context information this section describes additional security context information provided by web user agents. where security context information is provided in both primary and secondary interface the meaning of the presented information must be consistent. best practice will also avoid inconsistent presentation such as using identical or semantically similar icons for different information in different places. the information sources must make the following security context information available the web page s domain name owner information consistent with section 6.1.2 identity signal content verifier information consistent with section 6.1.2 identity signal content the reason why the displayed information is trusted or not this includes whether or not a certificate was accepted interactively whether a self-signed certificate was used and whether the self-signed certificate was pinned to the site that the user interacts with and whether trust relevant settings of the user agent were otherwise overridden through user action. the information sources should make the following security context information available an explanation of the information represented by the tls indicator e.g. concerning the presence mixed content if the web page is weakly tls-protected then what conditions cause the protection to be weak e.g. bad algorithms mixed content whether the user has visited the site in the past. whether the user has stored credentials for this site. whether the site content was encrypted in transmission. whether the site content was authenticated e.g. server authentication via tls additionally the information sources may make the following security context information available when the user first visited the site in the past. how often the user visited the site in the past. user agents that provide information about the presence or absence of cookies rfc2965 must not make any claims that suggest that the absence of cookies implies an absence of any user tracking as there are numerous tracking and session management techniques that do not rely on cookies. 6.3 tls indicator user agents must make information about the state of tls protection available. the definition tls indicator should be part of primary user interface during usage modes which entail the presence of signaling to the user beyond only presenting page content. otherwise it must be available through secondary user interface. as in the case of 6.1.1 identity signal there may be usage modes during which this requirement does not apply. web content must not obscure security interface see 7.4.1 obscuring or disabling security user interfaces. user agents with a visual user interface should make the tls indicator available in a consistent visual position. the tls indicator must present a distinct state that is used only for tls-secured web pages. the user agent should inform users when they are viewing a page that along with all dependent resources was retrieved through at least weakly tls protected transactions including mixed content. the user agent may accomplish this by using a third state in the tls indicator or via another mechanism such as a dialog info bar or other means 6.4 error handling and signaling this section defines common error interaction requirements and ordered by increasing severity practices to signal the following classes of errors 6.4.2 warning caution messages 6.4.3 danger messages user agents may communicate additional indicators to users. e.g. a user agent could additionally display a persistent indicator in a danger situation. for additional security considerations concerning frequent warning messages see 8.5 warning fatigue. 6.4.1 common error interaction requirements error signaling that occurs as part of primary user interface should be phrased in terms of threat to user s interests not technical occurrence. primary user interface error messages must not be phrased solely in terms of art. for example if a certificate includes a dns name in the subjectaltname extension that does not match the uri of the site that the user tries to visit an error message can explain that the user is reaching a different site instead of reporting a subjectaltname mismatch they should not tell the user to enter the destination site that caused the error e.g. to provide feedback or obtain assistance. for error messages that interrupt the user s flow of interaction user agents should enable the user to easily return to the page that the user was previously interacting with. note that this ideally implies returning to the previous user agent state including the results of user input and dynamic processing however this may not be feasible under all circumstances. for advanced users error interactions should have an option to request a detailed description of the condition that caused the error interaction to occur. the error interactions discussed in this section typically involve communication of security context information. 6.4.2 warning caution messages warning caution messages are intended for situations when the system has good reason to believe that the user may be at risk based on the current security context information but a determination cannot positively be made. warning caution messages must interrupt the user s current task such that the user has to acknowledge the message. warning caution messages must provide the user with distinct options for how to proceed i.e. these messages must not lead to a situation in which the only option presented to the user is to dismiss the warning and continue the options presented on these warnings must be descriptive to the point that their respective meaning can be understood in the absence of any other information contained in the warning interaction. one of the options offered should be recommended and the warning message should include a succinct text component denoting which option is recommended. in the absence of a recommended option the warning must present the user with a method of finding out more information e.g. a hyperlink secondary window etc if the options cannot be understood. 6.4.3 danger messages danger messages are intended for situations when there is a positively identified danger to the user i.e. not merely a risk the interactions communicating these messages must be designed such that the user s task is interrupted. these interactions must be presented in a way that makes it impossible for the user to go to or interact with the destination web site that caused the danger situation to occur without first explicitly interacting with the danger message. 7 robustness best practices 7.1 keep security chrome visible for visual user agents agent chrome should always be present to signal security context information. this requirement does not apply when user interface is explicitly dismissed by the user. 7.2 do not mix content and security indicators to the extent to which users pay attention to passive security indicators at all noticing and understanding them is made difficult to impossible when the same signal path that is commonly used for security indicators can also be controlled by web content. for example the location bar commonly found on agents is often used to both display the padlock security indicator and a possible favorite icon favicon which can in turn be a simple copy of the very padlock an informed and attentive user might look for. web user agents must not communicate positive trust information using user interface elements which can be mimicked within chrome under the control of web content. site-controlled content e.g. page title favicon may be hosted in chrome but this content must not be displayed in a manner that confuses hosted content and chrome indicators by allowing that content to mimic chrome indicators in a position close to them. this requirement applies to both primary and secondary elements of visual user interfaces. in particular web user agents should not use a 16x16 image in chrome to indicate security status if doing so would allow the favorite icon to mimic it. 7.3 managing user attention when confronted with multiple modal interactions during a short amount of time users are known to exercise the default option e.g. by pressing the enter key repeatedly until the sequence of modal interactions stops blocking the user s intended interaction. definition an interaction flooding attack refers to a web site with the malicious intent of performing an unintended action e.g. installing software that would have required an user intervention such as clicking ok on a warning dialog or by exploiting distraction and task-focus. the web site opens a large number of new windows over the desired web content and the malicious action is performed when the user tries to close these new windows and or clicks on a dialog that indicates a trust decision. user interfaces used to inform users about security critical events or to solicit input must employ techniques that prevent immediate dismissal of the user interface e.g. by using a temporarily disabled ok button on user interfaces that make such an interaction paradigm available. when users interact with security relevant notifications 6.4.2 warning caution messages and above web content must not be granted control of the user agent s interaction. a web user agent should not display a modal security dialog related to a web page which does not currently have focus. security dialogs include prompts for user credentials script errors and tls errors. 7.4 apis exposed to web content user agents commonly allow web content to perform certain manipulations of agent ui and functionality such as opening new windows resizing existing windows etc. to permit customization of the user experience. these manipulations need to be constrained to prevent malicious sites from concealing or obscuring important elements of the agent interface or deceiving the user into performing dangerous acts. this section includes requirements and techniques to address known attacks of this kind. 7.4.1 obscuring or disabling security user interfaces web user agents must prevent web content from obscuring hiding or disabling user interfaces that display security context information except in response to a user interaction. user agents must restrict window sizing and moving operations consistent with section 7.1 keep security chrome visible. this prevents attacks wherein agent chrome is obscured by moving it off the edges of the visible screen. user agents must not allow web content to open new windows with the agent s security ui hidden. allowing this operation facilitates picture-in-picture attacks where artificial chrome usually indicating a positive security state is supplied by the web content in place of the hidden ui. user agents must prevent web content from overlaying chrome. this helps to ensure that user interactions that are perceived to target agent chrome are not redirected to web applications. 7.4.2 software installation this section covers web user agent apis that allow web content to download software for later execution outside of the web user agent context. web user agents must not expose programming interfaces which permit installation of software without a user intervention. user agents must inform the user and request consent when the user agent is attempting to install software outside of the agent environment as a result of web content. the interaction used must follow the requirements in 6.4.2 warning caution messages user agents should not provide features which can be used by web content to install software outside of the agent environment without the user s consent. 7.4.3 bookmarking apis user agents often include features that enable web content to update the user s bookmarks e.g. through an ecmascript api. if permitted unchecked these features can serve to confuse users by e.g. placing a bookmark that goes by the same name as the user s bank but points to an attacker s site. web user agents must not permit web content to add bookmarks without explicit user consent. web user agents must not permit web content to add uris to the user s bookmark collection that do not match the uri of the page that the user currently interacts with. 7.4.4 pop-up window apis with visual user interfaces that use a windowed interaction paradigm user agents should restrict the opening of pop-up windows from web content particularly those not initiated by user action. creating excessive numbers of new pop-up windows is a technique that can be used to condition users to rapidly dismissing dialogs. this can be employed in interaction flooding attacks. user agents which offer this restriction should offer a way to extend permission to individual trusted sites. failing to do so encourages users who desire the functionality on certain sites to disable the feature universally. 8 security considerations 8.1 active attacks during initial tls interactions section 5.4.1 tls errors leads to additional exposure during the first tls interaction with a site even if that site uses validated or extended validation certificates an active attacker can show a self-signed certificate which will cause only weak warning signals to the user. traditional user agents react to this scenario with a dialog box that interrupts the user s flow of interaction but gives users the ability to override the security warning. empirical evidence shows that this ability is typically exercised by users. countermeasures against this threat include the prior designation of high-value sites for which extended validation or validated certificates are required causing a stronger warning signal during the attack scenario described above and communication of certification and tls expectations by a mechanism separate from http e.g. through authenticated dns records. 5.4.1 tls errors refers to the pinning of a new certificate to a destination. note that this newly pinned certificate could be the basis for a spoofing attack or it could represent a refresh of an self signed certificate. 8.2 certificate status checking failures the tls errors 5.4.1 tls errors section does not document intended behavior for user agents when a certificate status check fails for network or other non-revocation reasons. at time of writing the deployment environment for ocsp rfc2560 status checking is fragile and subject to frequent failures so it is inappropriate to require that user agents treat such failures as warnings or errors. however this creates a possibility for attack site operators using a fraudulently obtained and revoked certificate may attempt to attack a ca s revocation infrastructure as a way to suppress revocation errors. user agent countermeasures for this vulnerability include exposing failures of certificate validation checks to users as warning 6.4.2 warning caution messages or danger 6.4.3 danger messages level messages or refusal to load sites that fail these checks. 8.3 certificates assure identity not security while tls certificates of all types i.e. self-signed validated or augmented assurance provide the means for strong encryption of communications they should not be understood to be or treated as blanket security assurances. in particular validated and augmented assurance certificates make guarantees about some level of owner identity verification having been performed see definitions but they do not represent any guarantees that a site is operated in a safe manner or is not otherwise subject to attack. historically issues of security and identity have been conflated by user agent interfaces which present ssl tls connections as secure but implementers of this specification are advised to be cautious and cognizant of this distinction. 8.4 binding human readable names to domain names several recommendations in this document concern themselves with the binding between domain names and certificates but equally important for users is the binding between domain name certificate and the actual real-world entity involved in the transaction. it is helpful for example to know not only that example.com presents a valid certificate but also that it is the example inc. norway with whom the user expects to be interacting. in the case of augmented assurance certificates the identity information provided may be considered sufficient for this purpose but other validated certificates do not necessarily provide this real-world identity. user agents that wish to provide a mechanism for users to manually establish these linkages are advised to consider the petnames approach see petnames 8.5 warning fatigue requirements in this document often involve warning 6.4.2 warning caution messages and 6.4.3 danger messages messages when warranted by conditions in the user agent. however it is important to be aware when developing user interfaces that users will habituate to over-frequent warnings weakening the impact of the messages and their ability to effectively interrupt the user s task flow. user agents are advised to constrain the number of warnings and errors presented to the minimum required to satisfy these and other security guidelines. it is also recommended that user agents phrase options in these messages in terms of the action taken e.g. ignore this warning trust this site rather than using generic labels e.g. ok cancel 8.6 mixing augmented assurance and validated certificates the augmented assurance indicator tells the user that the owner and author of the web page being displayed can be identified using information from the associated augmented assurance certificate. identity signals in this specification only directly address displaying the identity of the party responsible for the top level resource in a web page. user agents may choose to make the identities of other resources that can affect or control the page s content available but we do not put forward a model for users on how they might use such information in their trust decisions. the identity of the top level resource vouches for the content of all dependent resources. what resources these are is under the control of the top-level resource which will typically identify these resources using uris with domain based authority. therefore this specification requires that in order to display any augmented assurance related indicators dependent resources must all be strongly tls protected using validated certificates. if an augmented assurance page includes content from other strongly tls-protected resources that are not identified by augmented assurance certificates the authors for these third party parts of the document cannot be identified to the same extent as for the main document. given that certain types of content for example external scripts and styling can change the containing document s entire appearance and framed content and plug-ins can be where the user s main interaction occurs the user s real interaction may be with content under the control of a completely different party than the one identified by the main document s augmented assurance certificate. using third party content also makes the main document reliant upon the security of the third party contributor and expands the available attack surface of the service thus giving attackers several more lines of attack. under the agent s same origin policy separately displayed web pages from the same origin can freely read and modify each other s state. a web page s origin is comprised of the scheme host and port of the uri used to retrieve the web page. the origin does not take into account any attributes of the tls session or server certificate used when retrieving a web page. for example consider a user agent that has loaded two web pages from https www.example.com when the first page was retrieved an augmented assurance certificate was used by the tls session. when the second page was retrieved a different certificate such as a domain validated or self-signed certificate was used. though the first page was retrieved using an augmented assurance certificate the second page can freely read and write the first page. differing security presentations of the two pages may obscure this relationship in the mind of the user. 8.7 dynamic content might change security properties this specification is expressed in terms of the fundamentally static indicators of existing agent security user interfaces. these indicators tend to assume that the security properties of a page will not change in a significant way once it has finished loading whatever that might mean in detail strictly speaking this assumption is flawed dynamic pages can load scripts and data at any time and from any source using techniques like the insertion of script tags into the dom at run time the effect may very well be that a page that was retrieved from a secure web site with an augmented assurance certificate could at some point be under the control of scripts that are retrieved insecurely. this specification does not prescribe any specific user interaction in this kind of situation. for tls-protected http requests caused using the xmlhttprequest api xhr xhr2 this specification permits either handling the error situation described above as a network error and leaving behavior to the web application in question or causing a user interaction. it is expected that upcoming specifications for the xmlhttprequest api will opt for the former choice. 9 terms defined in this document advanced level augmented assurance certificate basic level chrome http transaction identity information identity signal interaction flooding attack interactively accepted location bar mixed content pinning plug-ins primary user interface secondary user interface strong tls algorithms strongly tls-protected tls indicator tls-protected tls-secured validated certificate weakly tls-protected web page web user agent 10 references ecrypt2009 ecrypt2 yearly report on algorithms and key lengths 2009 edition available at http www.ecrypt.eu.org documents d.spa.7.pdf evtlscert guidelines for the issuance and management of extended validation certificates ca browser forum 7 june 2007 available at http www.cabforum.org ev_certificate_guidelines.pdf favicon how to add a favicon to your site d. haza l-massieux c. lilley o. th reaux w3c work in progress available at http www.w3.org 2005 10 howto-favicon kcm key management through key continuity kcm expired internet draft september 2008 peter gutmann. this draft is available at http tools.ietf.org id draft-gutmann-keycont-01.txt nessie portfolio of recommended cryptographic primitives new european schemes for signatures integrity and encryption nessie available at https www.cosic.esat.kuleuven.be nessie deliverables decision-final.pdf petnames petname systems hpl-2005-148 mark stiegler august 2005. this report is available at http www.hpl.hp.com techreports 2005 hpl-2005-148.html pkix internet x.509 public key infrastructure certificate and certificate revocation list crl profile rfc 5280 d. cooper s. santesson s. farrell s. boeyen r. housley w. polk may 2008 available at http www.ietf.org rfc rfc5280.txt rfc2119 key words for use in rfcs to indicate requirement levels rfc 2119 s. bradner march 1997 available at http www.ietf.org rfc rfc2119.txt rfc2560 x.509 internet public key infrastructure online certificate status protocol ocsp rfc 2560 m. myers r. ankney a. malpani s. galperin c. adams june 1999. this specification is available at http www.ietf.org rfc rfc2560.txt rfc2616 hypertext transfer protocol http 1.1 rfc 2616 r. fielding j. gettys j. mogul h. frystyk l. masinter p. leach t. berners-lee june 1999 available at http www.ietf.org rfc rfc2616.txt rfc2817 upgrading to tls within http 1.1 rfc 2817 r. khare s. lawrence may 2000 available at http www.ietf.org rfc rfc2817.txt rfc2818 http over tls rfc 2818 e. rescorla may 2000 available at http www.ietf.org rfc rfc2818.txt rfc2965 http state management mechanism rfc 2965 d. kristol l. montulli october 2000 available at http www.ietf.org rfc rfc2965.txt rfc3709 internet x.509 public key infrastructure logotypes in x.509 certificates rfc 3709 s. santeson r. housley t. freeman february 2004 available at http www.ietf.org rfc rfc3709.txt rfc3986 uniform resource identifier uri generic syntax rfc 3986 t. berners-lee r. fielding l. masinter january 2005 available at http www.ietf.org rfc rfc3986.txt sslv3 sslv3 specification netscape november 1996. this specification is archived at http web.archive.org web 20080208141212 http wp.netscape.com eng ssl3 tlsv11 the transport layer security tls protocol rfc 4346 t. dierks e. rescorla april 2006. this specification is available at http www.ietf.org rfc rfc4346.txt tlsv12 the transport layer security tls protocol version 1.2 rfc 5246 t. dierks e. rescorla august 2008. this specification is available at http www.ietf.org rfc rfc5246.txt wcag20 web content accessibility guidelines 2.0 b. caldwell m. cooper l. g. reid g. vanderheiden eds. w3c recommendation 11 december 2008. this version is http www.w3.org tr 2008 rec-wcag20-20081211 the latest version of wcag 2.0 is available at http www.w3.org tr wcag20 wsc-threats web user interaction threat trees t. roessler ed w3c working group note work in progress 1 november 2007. this version is http www.w3.org tr 2007 note-wsc-threats-20071101 the latest version is available at http www.w3.org tr wsc-threats wsc-usecases web security experience indicators and trust scope and use cases t. close editor w3c working group note work in progress 06 march 2008. this version is http www.w3.org tr 2008 note-wsc-usecases-20080306 the latest version is available at http www.w3.org tr wsc-usecases xhr xmlhttprequest. a. van kesteren ed. w3c working draft work in progress 19 november 2009. this version of the xmlhttprequest specification is at http www.w3.org tr 2009 wd-xmlhttprequest-20091119 the latest version of this specification is available at http www.w3.org tr xmlhttprequest xhr2 xmlhttprequest level 2. a. van kesteren ed. w3c working draft work in progress 20 august september 2009. this version of the xmlhttprequest level 2 specification is at http www.w3.org tr 2009 wd-xmlhttprequest2-20090820 the latest version of this specification is available at http www.w3.org tr xmlhttprequest2 