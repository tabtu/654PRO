owl 2 web ontology language direct semantics second edition owl 2 web ontology language direct semantics second edition w3c recommendation 11 december 2012 this version http www.w3.org tr 2012 rec-owl2-direct-semantics-20121211 latest version series 2 http www.w3.org tr owl2-direct-semantics latest recommendation http www.w3.org tr owl-direct-semantics previous version http www.w3.org tr 2012 per-owl2-direct-semantics-20121018 editors boris motik university of oxford peter f. patel-schneider nuance communications bernardo cuenca grau university of oxford contributors in alphabetical order ian horrocks university of oxford bijan parsia university of manchester uli sattler university of manchester please refer to the errata for this document which may include some normative corrections. a color-coded version of this document showing changes made since the previous version is also available. this document is also available in these non-normative formats pdf version. see also translations. copyright 2012 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract the owl 2 web ontology language informally owl 2 is an ontology language for the semantic web with formally defined meaning. owl 2 ontologies provide classes properties individuals and data values and are stored as semantic web documents. owl 2 ontologies can be used along with information written in rdf and owl 2 ontologies themselves are primarily exchanged as rdf documents. the owl 2 document overview describes the overall state of owl 2 and should be read before other owl 2 documents. this document provides the direct model-theoretic semantics for owl 2 which is compatible with the description logic sroiq. furthermore this document defines the most common inference problems for owl 2. status of this document may be superseded this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr summary of changes there have been no substantive changes since the previous version. for details on the minor changes see the change log and color-coded diff. please send comments please send any comments to public-owl-comments@w3.org public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions. open discussion among developers is welcome at public-owl-dev@w3.org public archive endorsed by w3c this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. patents this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. table of contents 1 introduction 2 direct model-theoretic semantics for owl 2 2.1 vocabulary 2.2 interpretations 2.2.1 object property expressions 2.2.2 data ranges 2.2.3 class expressions 2.3 satisfaction in an interpretation 2.3.1 class expression axioms 2.3.2 object property expression axioms 2.3.3 data property expression axioms 2.3.4 datatype definitions 2.3.5 keys 2.3.6 assertions 2.3.7 ontologies 2.4 models 2.5 inference problems 3 independence of the direct semantics from the datatype map in owl 2 dl informative 4 appendix change log informative 4.1 changes since recommendation 4.2 changes since proposed recommendation 4.3 changes since candidate recommendation 4.4 changes since last call 5 acknowledgments 6 references 6.1 normative references 6.2 nonnormative references 1 introduction this document defines the direct model-theoretic semantics of owl 2. the semantics given here is strongly related to the semantics of description logics description logics and it extends the semantics of the description logic sroiq sroiq as the definition of sroiq does not provide for datatypes and punning the semantics of owl 2 is defined directly on the constructs of the structural specification of owl 2 owl 2 specification instead of by reference to sroiq. for the constructs available in sroiq the semantics of sroiq trivially corresponds to the one defined in this document. since each owl 1 dl ontology is an owl 2 ontology this document also provides a direct semantics for owl 1 lite and owl 1 dl ontologies this semantics is equivalent to the direct model-theoretic semantics of owl 1 lite and owl 1 dl owl 1 semantics and abstract syntax furthermore this document also provides the direct model-theoretic semantics for the owl 2 profiles owl 2 profiles the semantics is defined for owl 2 axioms and ontologies which should be understood as instances of the structural specification owl 2 specification parts of the structural specification are written in this document using the functional-style syntax. owl 2 allows ontologies anonymous individuals and axioms to be annotated furthermore annotations themselves can contain additional annotations. all these types of annotations however have no semantic meaning in owl 2 and are ignored in this document. owl 2 declarations are used only to disambiguate class expressions from data ranges and object property from data property expressions in the functional-style syntax therefore they are not mentioned explicitly in this document. 2 direct model-theoretic semantics for owl 2 this section specifies the direct model-theoretic semantics of owl 2 ontologies. 2.1 vocabulary a datatype map formalizing datatype maps from the owl 2 specification owl 2 specification is a 6-tuple d ndt nls nfs dt ls fs with the following components ndt is a set of datatypes more precisely names of datatypes that does not contain the datatype rdfs literal. nls is a function that assigns to each datatype dt ndt a set nls dt of strings called lexical forms. the set nls dt is called the lexical space of dt. nfs is a function that assigns to each datatype dt ndt a set nfs dt of pairs f v where f is a constraining facet and v is an arbitrary data value called the constraining value. the set nfs dt is called the facet space of dt. for each datatype dt ndt the interpretation function dt assigns to dt a set dt dt called the value space of dt. for each datatype dt ndt and each lexical form lv nls dt the interpretation function ls assigns to the pair lv dt a data value lv dt ls dt dt. for each datatype dt ndt and each pair f v nfs dt the interpretation function fs assigns to f v the set f v fs dt dt. the set of datatypes ndt of a datatype map d is not required to contain all datatypes from the owl 2 datatype map this allows one to talk about subsets of the owl 2 datatype map which may be necessary for the various profiles of owl 2. if however d contains a datatype dt from the owl 2 datatype map then nls dt nfs dt dt dt lv dt ls for each lv nls dt and f v fs for each f v nfs dt are required to coincide with the definitions for dt in the owl 2 datatype map. a vocabulary v vc vop vdp vi vdt vlt vfa over a datatype map d is a 7-tuple consisting of the following elements vc is a set of classes as defined in the owl 2 specification owl 2 specification containing at least the classes owl thing and owl nothing. vop is a set of object properties as defined in the owl 2 specification owl 2 specification containing at least the object properties owl topobjectproperty and owl bottomobjectproperty. vdp is a set of data properties as defined in the owl 2 specification owl 2 specification containing at least the data properties owl topdataproperty and owl bottomdataproperty. vi is a set of individuals named and anonymous as defined in the owl 2 specification owl 2 specification vdt is a set containing all datatypes of d the datatype rdfs literal and possibly other datatypes that is ndt rdfs literal vdt. vlt is a set of literals lv dt for each datatype dt ndt and each lexical form lv nls dt vfa is the set of pairs f lt for each constraining facet f datatype dt ndt and literal lt vlt such that f lv dt1 ls nfs dt where lv is the lexical form of lt and dt1 is the datatype of lt. given a vocabulary v the following conventions are used in this document to denote different syntactic parts of owl 2 ontologies op denotes an object property ope denotes an object property expression dp denotes a data property dpe denotes a data property expression c denotes a class ce denotes a class expression dt denotes a datatype dr denotes a data range a denotes an individual named or anonymous lt denotes a literal and f denotes a constraining facet. 2.2 interpretations given a datatype map d and a vocabulary v over d an interpretation i i d c op dp i dt lt fa named for d and v is a 10-tuple with the following structure i is a nonempty set called the object domain. d is a nonempty set disjoint with i called the data domain such that dt dt d for each datatype dt vdt. c is the class interpretation function that assigns to each class c vc a subset c c i such that owl thing c i and owl nothing c op is the object property interpretation function that assigns to each object property op vop a subset op op i i such that owl topobjectproperty op i i and owl bottomobjectproperty op dp is the data property interpretation function that assigns to each data property dp vdp a subset dp dp i d such that owl topdataproperty dp i d and owl bottomdataproperty dp i is the individual interpretation function that assigns to each individual a vi an element a i i. dt is the datatype interpretation function that assigns to each datatype dt vdt a subset dt dt d such that dt is the same as in d for each datatype dt ndt and rdfs literal dt d. lt is the literal interpretation function that is defined as lt lt lv dt ls for each lt vlt where lv is the lexical form of lt and dt is the datatype of lt. fa is the facet interpretation function that is defined as f lt fa f lt lt fs for each f lt vfa. named is a subset of i such that a i named for each named individual a vi. the following sections define the extensions of op dt and c to object property expressions data ranges and class expressions. 2.2.1 object property expressions the object property interpretation function op is extended to object property expressions as shown in table 1. table 1. interpreting object property expressions object property expression interpretation op objectinverseof op x y y x op op 2.2.2 data ranges the datatype interpretation function dt is extended to data ranges as shown in table 3. all datatypes in owl 2 are unary so each datatype dt is interpreted as a unary relation over d that is as a set dt dt d. owl 2 currently does not define data ranges of arity more than one however by allowing for n-ary data ranges the syntax of owl 2 provides a hook allowing implementations to introduce extensions such as comparisons and arithmetic. an n-ary data range dr is interpreted as an n-ary relation dr dt over d that is as a set dt dt d n table 3. interpreting data ranges data range interpretation dt dataintersectionof dr1 drn dr1 dt drn dt dataunionof dr1 drn dr1 dt drn dt datacomplementof dr d n dr dt where n is the arity of dr dataoneof lt1 ltn lt1 lt ltn lt datatyperestriction dt f1 lt1 fn ltn dt dt f1 lt1 fa fn ltn fa 2.2.3 class expressions the class interpretation function c is extended to class expressions as shown in table 4. for s a set s denotes the number of elements in s. table 4. interpreting class expressions class expression interpretation c objectintersectionof ce1 cen ce1 c cen c objectunionof ce1 cen ce1 c cen c objectcomplementof ce i ce c objectoneof a1 an a1 i an i objectsomevaluesfrom ope ce x y x y ope op and y ce c objectallvaluesfrom ope ce x y x y ope op implies y ce c objecthasvalue ope a x x a i ope op objecthasself ope x x x ope op objectmincardinality n ope x y x y ope op n objectmaxcardinality n ope x y x y ope op n objectexactcardinality n ope x y x y ope op n objectmincardinality n ope ce x y x y ope op and y ce c n objectmaxcardinality n ope ce x y x y ope op and y ce c n objectexactcardinality n ope ce x y x y ope op and y ce c n datasomevaluesfrom dpe1 dpen dr x y1 yn x yk dpek dp for each 1 k n and y1 yn dr dt dataallvaluesfrom dpe1 dpen dr x y1 yn x yk dpek dp for each 1 k n imply y1 yn dr dt datahasvalue dpe lt x x lt lt dpe dp datamincardinality n dpe x y x y dpe dp n datamaxcardinality n dpe x y x y dpe dp n dataexactcardinality n dpe x y x y dpe dp n datamincardinality n dpe dr x y x y dpe dp and y dr dt n datamaxcardinality n dpe dr x y x y dpe dp and y dr dt n dataexactcardinality n dpe dr x y x y dpe dp and y dr dt n 2.3 satisfaction in an interpretation an axiom or an ontology is satisfied in an interpretation i i d c op dp i dt lt fa named if the appropriate condition from the following sections holds. 2.3.1 class expression axioms satisfaction of owl 2 class expression axioms in i is defined as shown in table 5. table 5. satisfaction of class expression axioms in an interpretation axiom condition subclassof ce1 ce2 ce1 c ce2 c equivalentclasses ce1 cen cej c cek c for each 1 j n and each 1 k n disjointclasses ce1 cen cej c cek c for each 1 j n and each 1 k n such that j k disjointunion c ce1 cen c c ce1 c cen c and cej c cek c for each 1 j n and each 1 k n such that j k 2.3.2 object property expression axioms satisfaction of owl 2 object property expression axioms in i is defined as shown in table 6. table 6. satisfaction of object property expression axioms in an interpretation axiom condition subobjectpropertyof ope1 ope2 ope1 op ope2 op subobjectpropertyof objectpropertychain ope1 open ope y0 yn y0 y1 ope1 op and and yn-1 yn open op imply y0 yn ope op equivalentobjectproperties ope1 open opej op opek op for each 1 j n and each 1 k n disjointobjectproperties ope1 open opej op opek op for each 1 j n and each 1 k n such that j k objectpropertydomain ope ce x y x y ope op implies x ce c objectpropertyrange ope ce x y x y ope op implies y ce c inverseobjectproperties ope1 ope2 ope1 op x y y x ope2 op functionalobjectproperty ope x y1 y2 x y1 ope op and x y2 ope op imply y1 y2 inversefunctionalobjectproperty ope x1 x2 y x1 y ope op and x2 y ope op imply x1 x2 reflexiveobjectproperty ope x x i implies x x ope op irreflexiveobjectproperty ope x x i implies x x ope op symmetricobjectproperty ope x y x y ope op implies y x ope op asymmetricobjectproperty ope x y x y ope op implies y x ope op transitiveobjectproperty ope x y z x y ope op and y z ope op imply x z ope op 2.3.3 data property expression axioms satisfaction of owl 2 data property expression axioms in i is defined as shown in table 7. table 7. satisfaction of data property expression axioms in an interpretation axiom condition subdatapropertyof dpe1 dpe2 dpe1 dp dpe2 dp equivalentdataproperties dpe1 dpen dpej dp dpek dp for each 1 j n and each 1 k n disjointdataproperties dpe1 dpen dpej dp dpek dp for each 1 j n and each 1 k n such that j k datapropertydomain dpe ce x y x y dpe dp implies x ce c datapropertyrange dpe dr x y x y dpe dp implies y dr dt functionaldataproperty dpe x y1 y2 x y1 dpe dp and x y2 dpe dp imply y1 y2 2.3.4 datatype definitions satisfaction of datatype definitions in i is defined as shown in table 8. table 8. satisfaction of datatype definitions in an interpretation axiom condition datatypedefinition dt dr dt dt dr dt 2.3.5 keys satisfaction of keys in i is defined as shown in table 9. table 9. satisfaction of keys in an interpretation axiom condition haskey ce ope1 opem dpe1 dpen x y z1 zm w1 wn if x ce c and x named and y ce c and y named and x zi opei op and y zi opei op and zi named for each 1 i m and x wj dpej dp and y wj dpej dp for each 1 j n then x y 2.3.6 assertions satisfaction of owl 2 assertions in i is defined as shown in table 10. table 10. satisfaction of assertions in an interpretation axiom condition sameindividual a1 an aj i ak i for each 1 j n and each 1 k n differentindividuals a1 an aj i ak i for each 1 j n and each 1 k n such that j k classassertion ce a a i ce c objectpropertyassertion ope a1 a2 a1 i a2 i ope op negativeobjectpropertyassertion ope a1 a2 a1 i a2 i ope op datapropertyassertion dpe a lt a i lt lt dpe dp negativedatapropertyassertion dpe a lt a i lt lt dpe dp 2.3.7 ontologies an owl 2 ontology o is satisfied in an interpretation i if all axioms in the axiom closure of o with anonymous individuals standardized apart as described in section 5.6.2 of the owl 2 specification owl 2 specification are satisfied in i. 2.4 models given a datatype map d an interpretation i i d c op dp i dt lt fa named for d is a model of an owl 2 ontology o w.r.t. d if an interpretation j i d c op dp j dt lt fa named for d exists such that j coincides with i on all named individuals and j satisfies o. thus an interpretation i satisfying o is also a model of o. in contrast a model i of o may not satisfy o directly however by modifying the interpretation of anonymous individuals i can always be coerced into an interpretation j that satisfies o. 2.5 inference problems let d be a datatype map and v a vocabulary over d. furthermore let o and o1 be owl 2 ontologies ce ce1 and ce2 class expressions and a a named individual such that all of them refer only to the vocabulary elements in v. furthermore variables are symbols that are not contained in v. finally a boolean conjunctive query q is a closed formula of the form x1 xn y1 ym a1 ak where each ai is an atom of the form c s op s t or dp s u with c a class op an object property dp a data property s and t individuals or some variable xj and u a literal or some variable yj. the following inference problems are often considered in practice. ontology consistency o is consistent or satisfiable w.r.t. d if a model of o w.r.t. d and v exists. ontology entailment o entails o1 w.r.t. d if every model of o w.r.t. d and v is also a model of o1 w.r.t. d and v. ontology equivalence o and o1 are equivalent w.r.t. d if o entails o1 w.r.t. d and o1 entails o w.r.t. d. ontology equisatisfiability o and o1 are equisatisfiable w.r.t. d if o is satisfiable w.r.t. d if and only if o1 is satisfiable w.r.t d. class expression satisfiability ce is satisfiable w.r.t. o and d if a model i i d c op dp i dt lt fa named of o w.r.t. d and v exists such that ce c class expression subsumption ce1 is subsumed by a class expression ce2 w.r.t. o and d if ce1 c ce2 c for each model i i d c op dp i dt lt fa named of o w.r.t. d and v. instance checking a is an instance of ce w.r.t. o and d if a i ce c for each model i i d c op dp i dt lt fa named of o w.r.t. d and v. boolean conjunctive query answering q is an answer w.r.t. o and d if q is true in each model of o w.r.t. d and v according to the standard definitions of first-order logic. in order to ensure that ontology entailment class expression satisfiability class expression subsumption and instance checking are decidable the following restriction w.r.t. o needs to be satisfied each class expression of type minobjectcardinality maxobjectcardinality exactobjectcardinality and objecthasself that occurs in o1 ce ce1 and ce2 can contain only object property expressions that are simple in the axiom closure ax of o. for ontology equivalence to be decidable o1 needs to satisfy this restriction w.r.t. o and vice versa. these restrictions are analogous to the first condition from section 11.2 of the owl 2 specification owl 2 specification 3 independence of the direct semantics from the datatype map in owl 2 dl informative owl 2 dl has been defined so that the consequences of an owl 2 dl ontology o do not depend on the choice of a datatype map as long as the datatype map chosen contains all the datatypes occurring in o. this statement is made precise by the following theorem and it has several useful consequences one can apply the direct semantics to an owl 2 dl ontology o by considering only the datatypes explicitly occurring in o. when referring to various reasoning problems the datatype map d need not be given explicitly as it is sufficient to consider an implicit datatype map containing only the datatypes from the given ontology. owl 2 dl reasoners can provide datatypes not explicitly mentioned in this specification without fear that this will change the meaning of owl 2 dl ontologies not using these datatypes. theorem ds1. let o1 and o2 be owl 2 dl ontologies over a vocabulary v and d ndt nls nfs dt ls fs a datatype map such that each datatype mentioned in o1 and o2 is rdfs literal a datatype defined in the respective ontology or it occurs in ndt. furthermore let d ndt nls nfs dt ls fs be a datatype map such that ndt ndt nls dt nls dt and nfs dt nfs dt for each dt ndt and dt ls and fs are extensions of dt ls and fs respectively. then o1 entails o2 w.r.t. d if and only if o1 entails o2 w.r.t. d proof. without loss of generality one can assume o1 and o2 to be in negation-normal form description logics furthermore since datatype definitions in o1 and o2 are acyclic one can assume that each defined datatype has been recursively replaced with its definition thus all datatypes in o1 and o2 are from ndt rdfs literal the claim of the theorem is equivalent to the following statement an interpretation i w.r.t. d and v exists such that o1 is and o2 is not satisfied in i if and only if an interpretation i w.r.t. d and v exists such that o1 is and o2 is not satisfied in i the direction is trivial since each interpretation i w.r.t. d and v is also an interpretation w.r.t. d and v. for the direction assume that an interpretation i i d c op dp i dt lt fa named w.r.t. d and v exists such that o1 is and o2 is not satisfied in i. let i i d c op dp i dt lt fa named be an interpretation such that d is obtained by extending d with the value space of all datatypes in ndt ndt c coincides with c on all classes and dp coincides with dp on all data properties apart from owl topdataproperty. clearly datacomplementof dr dt datacomplementof dr dt for each data range dr that is either a datatype a datatype restriction or an enumerated data range. the owl topdataproperty property can occur in o1 and o2 only in tautologies. the interpretation of all other data properties is the same in i and i so ce c ce c for each class expression ce occurring in o1 and o2. therefore o1 is and o2 is not satisfied in i qed 4 appendix change log informative 4.1 changes since recommendation this section summarizes the changes to this document since the recommendation of 27 october 2009. with the publication of the xml schema definition language xsd 1.1 part 2 datatypes recommendation of 5 april 2012 the elements of owl 2 which are based on xsd 1.1 are now considered required and the note detailing the optional dependency on the xsd 1.1 candidate recommendation of 30 april 2009 has been removed from the status of this document section. a bug in the specification of the semantics of keys in section 2.3.5 was fixed by replacing the isnamed function defined in section 2.3 with an extension of interpretations as defined in section 2.2 to include a set named that contains all those elements interpreting named individuals. minor typographical errors were corrected as detailed on the owl 2 errata page. 4.2 changes since proposed recommendation no changes have been made to this document since the proposed recommendation of 22 september 2009. 4.3 changes since candidate recommendation this section summarizes the changes to this document since the candidate recommendation of 11 june 2009. an editorial comment was added to clarify the role played by the owl 2 datatype map. 4.4 changes since last call this section summarizes the changes to this document since the last call working draft of 21 april 2009. some minor editorial changes were made. 5 acknowledgments the starting point for the development of owl 2 was the owl1.1 member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series. the working group also considered postponed issues from the webont working group. this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole. the editors extend special thanks to markus kr tzsch fzi michael schneider fzi and thomas schneider university of manchester for their thorough reviews. the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozen-bolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles st-quentin and lirmm sandro hawke w3c mit ivan herman w3c ercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus kr tzsch fzi carsten lutz universit t bremen deborah l. mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f. patel-schneider bell labs research alcatel-lucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap. 6 references 6.1 normative references owl 2 specification owl 2 web ontology language structural specification and functional-style syntax second edition boris motik peter f. patel-schneider bijan parsia eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-syntax-20121211 latest version available at http www.w3.org tr owl2-syntax 6.2 nonnormative references description logics the description logic handbook theory implementation and applications second edition. franz baader diego calvanese deborah l. mcguinness daniele nardi and peter f. patel-schneider eds. cambridge university press 2007. also see the description logics home page. owl 1 semantics and abstract syntax owl web ontology language semantics and abstract syntax. peter f. patel-schneider patrick hayes and ian horrocks eds. w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-semantics-20040210 latest version available at http www.w3.org tr owl-semantics owl 2 profiles owl 2 web ontology language profiles second edition boris motik bernardo cuenca grau ian horrocks zhe wu achille fokoue carsten lutz eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-profiles-20121211 latest version available at http www.w3.org tr owl2-profiles sroiq the even more irresistible sroiq. ian horrocks oliver kutz and uli sattler. in proc. of the 10th int. conf. on principles of knowledge representation and reasoning kr 2006 aaai press 2006. 