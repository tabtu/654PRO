composite capability preference profiles cc pp structure and vocabularies 1.0 composite capability preference profiles cc pp structure and vocabularies 1.0 w3c recommendation 15 january 2004 this version http www.w3.org tr 2004 rec-ccpp-struct-vocab-20040115 latest version http www.w3.org tr ccpp-struct-vocab previous version http www.w3.org tr 2003 pr-ccpp-struct-vocab-20031015 editors graham klyne gk@acm.org nine by nine franklin reynolds franklin.reynolds@nokia.com nokia research center chris woodrow woodroc@metaphoria.net information architects hidetaka ohto ohto@w3.org w3c through march 2002 panasonic johan hjelm johan.hjelm@ericsson.com ericsson mark h. butler mark-h_butler@hp.com hewlett-packard luu tran luu.tran@sun.com sun microsystems please refer to the errata for this document which may include some normative corrections. the english version of this specification is the only normative version. non-normative translations may also be available. copyright 2004 w3c mit ercim keio all rights reserved. w3c liability trademark document use and software licensing rules apply. abstract this document describes cc pp composite capabilities preference profiles structure and vocabularies. a cc pp profile is a description of device capabilities and user preferences. this is often referred to as a device s delivery context and can be used to guide the adaptation of content presented to that device. the resource description framework rdf is used to create profiles that describe user agent capabilities and preferences. the structure of a profile is discussed. topics include structure of client capability and preference descriptions and use of rdf classes to distinguish different elements of a profile so that a schema-aware rdf processor can handle cc pp profiles embedded in other xml document types. cc pp vocabulary is identifiers uris used to refer to specific capabilities and preferences and covers the types of values to which cc pp attributes may refer an appendix describing how to introduce new vocabularies an appendix giving an example small client vocabulary covering print and display capabilities and an appendix providing a survey of existing work from which new vocabularies may be derived. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document is a recommendation of the w3c. it has been reviewed by w3c members and other interested parties and has been endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited as a normative reference from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. a test suite for has been developed along with an implementation report. this document has been produced by the w3c device independence working group as part of the device independence activity within the w3c interaction domain. continued status of the work is reported on the device independence working group home page member-only link the public is invited to send comments or reports errors to the editors at www-mobile@w3.org the public forum for discussion of w3c s work on mobile web access. an archive is available at http lists.w3.org archives public www-mobile patent disclosures relevant to this specification may be found on the cc pp working group s patent disclosure page in conformance with w3c policy. table of contents 1. introduction 1.1 scope and normative elements 1.2 structure of this document 1.3 document conventions 1.3.1 terminology 1.3.2 rdf graph notation 2. cc pp architecture 2.1 cc pp profile structure 2.1.1 profile components 2.1.2 component attributes 2.1.3 defaults 2.2 extensibility and namespaces 3. cc pp structure 3.1 components 3.2 attributes 3.3 defaults 3.4 distinguishing profile structure from attributes 3.5 notes on rdf usage 3.6 rdf graph composition 4. attribute vocabularies 4.1 attribute data 4.1.1 simple cc pp attribute data 4.1.1.1 strings 4.1.1.2 integer numbers 4.1.1.3 rational numbers 4.1.2 complex cc pp attribute data 4.1.2.1 set of values 4.1.2.2 sequence of values 4.2 attribute identifiers 4.3 rdf vocabulary schema 5. conformance 5.1 cc pp document conformance 5.2 cc pp producer conformance 5.3 cc pp consumer conformance 5.4 conformance claims 5.4.1 validity 5.4.2 well-formed 6. acknowledgments 7. references 7.1 normative references 7.2 informative references appendix a terminology and abbreviations a.1 terminology a.2 abbreviations appendix b rdf schema for structure b.1 summary of cc pp class hierarchy b.2 summary of cc pp properties structural properties instances of ccpp property b.3 rdf schema cc pp core and class structure appendix c cc pp attribute vocabulary for print and display client attribute properties instances of ccpp attribute schema for client vocabulary appendix d recommendations for creating a vocabulary d.1 basic format for all vocabulary items d.2 use of xml namespaces d.3 principles for defining new attributes d.3.1 if possible reuse existing vocabularies d.3.2 attribute value type and interpretation d.3.3 interpretation not dependent on other attribute values d.3.4 attribute naming conventions d.3.5 attributes should have specific applicability d.4 protocol interactions appendix e review of applicable vocabularies e.1 ietf media feature registration conneg e.2 wap uaprof e.3 tiff e.4 wave e.5 mpeg-4 e.6 mpeg-7 e.7 pwg e.8 salutation appendix f cc pp applications f.1 outline of request processing in http f.2 protocol assumptions for proxy behavior appendix g rdf compatibility g.1 implicit datatyping g.2 explicit datatyping appendix w revision history 1. introduction this document describes cc pp composite capabilities preference profiles structure and vocabularies. a cc pp profile is a description of device capabilities and user preferences that can be used to guide the adaptation of content presented to that device. here profile does not refer to a subset of a particular specification for example the css mobile profile but refers to the document s exchanged between devices that describe the capabilities of a device. as the number and variety of devices connected to the internet grows there is a corresponding increase in the need to deliver content that is tailored to the capabilities of different devices. some limited techniques such as http accept headers and html alt attributes already exist. as part of a framework for content adaptation and contextualization a general purpose profile format is required that can describe the capabilities of a user agent and preferences of its user. cc pp is designed to be such a format. cc pp is based on rdf the resource description framework which was designed by the w3c as a general purpose metadata description language. rdf provides the framework with the basic tools for both vocabulary extensibility via xml namespaces xmlnamespaces and interoperability. there is a specification that describes how to encode rdf using xml rdf and another that defines an rdf schema description language using rdf rdfschema rdf was designed to describe the metadata or machine understandable properties of the web. rdf is a natural choice for the cc pp framework since user agent profiles are metadata intended primarily for communication between user agents and resource data providers. for an introduction to rdf see rdfprimer note that the rdfprimer document describes a more recent revision of the rdf specifications than the ones on which this specification is based. a cc pp profile contains a number of cc pp attribute names and associated values that are used by a server to determine the most appropriate form of a resource to deliver to a client. it is structured to allow a client to describe its capabilities by reference to a standard profile accessible to an origin server or other sender of resource data and a smaller set of features that are in addition to or different than the standard profile. a set of cc pp attribute names permissible values and associated meanings constitute a cc pp vocabulary. some information contained in a profile may be sensitive and adequate trust and security mechanisms must be deployed to protect users privacy. as a part of a wider application cc pp cannot fully cover such issues but is intended to be used in conjunction with appropriate mechanisms. this topic is covered in appendix f cc pp applications it is anticipated that different applications will use different vocabularies indeed this is needed if application-specific properties are to be represented within the cc pp framework. but for different applications to work together some common vocabulary or a method to convert between different vocabularies is needed. xml namespaces can ensure that different applications names do not clash but does not provide a common basis for exchanging information between different applications. any vocabulary that relates to the structure of a cc pp profile must follow this specification. the appendices introduce a simple cc pp attribute vocabulary that may be used to improve cross-application exchange of capability information partly based on some earlier ietf work. cc pp is designed to be broadly compatible with the earlier uaprof specification uaprof from the wap forum. that is we have attempted to accomodate existing uaprof profiles. cc pp is compatible with ietf media feature sets conneg rfc2533 in the sense that all media feature tags and values can be expressed in cc pp. however not all cc pp profiles can be expressed as media feature tags and values and cc pp does not attempt to express relationships between attributes. although the examples and use to date have been focused on device capabilities cc pp can also convey information about user preferences that used sensibly should be allow web servers to improve the accessibility of web sites. a fuller discussion of web site accessibility can be found in the web content accessibility guidelines wai 1.1 scope and normative elements cc pp structure and vocabularies abbreviated to cc pp in the rest of this document defines a client profile data format and a framework for incorporating application- and operating environment-specific features. it does not define how the profile is transferred nor does it specify what cc pp attributes must be generated or recognized. cc pp is designed for use as part of a wider application framework. as such the specification of cc pp elements that must be supported and those which may be omitted is a matter for a specific application. there are few protocol assumptions built into the design of cc pp. although it is intended to be largely protocol independent particular consideration has been given to use of cc pp with http for retrieving web resources. appendix f contains some further discussion of cc pp applications. this document describes a number of features of cc pp. some features form part of the essential structure of cc pp for which conformance is required see section 5 others are features whose use is recommended or optional. there is also discussion of how new vocabularies should be introduced directed to cc pp application designers rather than implementers. the architecture section does not describe specific features but indicates general principles that underlie the design of cc pp. it is not normative but does contain information that should be understood for proper implementation of cc pp. the section on cc pp structure covers two main areas cc pp profile components support for these is required. cc pp profile defaults support for these is required. the section on cc pp attribute vocabularies describes some general features of cc pp attributes and their values. support for the described formats for simple attribute values is recommended the actual syntax for any simple cc pp value is defined by the corresponding attribute specification such specifications may reference the information provided here. support for the structured cc pp attribute formats described where relevant is required. support is not required for any specific vocabulary but application designers are strongly encouraged to re-use existing vocabularies where possible. cc pp applications are not required to support features described in the appendices but any new attribute vocabularies defined must be based on rdf classes and properties defined by the rdf schema in appendix b new cc pp attributes are instances of ccpp attribute new component classes are subclasses of ccpp component etc. note the reason for requiring new vocabularies to be based on the cc pp schema is so that schema-aware applications can include cc pp profile data along with other rdf data. having new vocabulary terms based on the cc pp schema means that they are clearly identifiable as part of a cc pp profile when rdf data from multiple sources is combined. this requirement does not affect stand-alone cc pp profile processors but the real value of using rdf here will be in the longer term allowing data from multiple sources e.g. document security and privacy related information to be combined and processed by more general purpose handlers. 1.2 structure of this document the remainder of this section covers terminology conventions and notations used in this document. section 2 cc pp architecture provides an overview of the cc pp profile structure and use of xml namespaces. section 3 cc pp structure describes the structure of a cc pp profile and introduces the rdf elements that are used to create the essential cc pp elements. section 4 attribute vocabularies describes how attributes are used in a cc pp profile and presents the recommended structure of cc pp elements used to describe specific features. the appendices contain additional supporting material that is not essential to construct a valid cc pp profile but which provides additional background information useful for understanding cc pp its relationship with rdf or defining attribute vocabularies for specific applications. 1.3 document conventions 1.3.1 terminology see cc pp terminology and abbreviations in appendix a of this document. the term cc pp attribute is used here to refer to a specific capability or characteristic of a client or other system that appears in a cc pp profile. the term feature refers to a client capability or characteristic that may or may not be the basis of a cc pp attribute. the term attribute name is used to indicate an rdf property name used to identify a cc pp attribute. the key words must must not should should not may may not required recommended and optional in this document are to be interpreted as described in rfc 2119 rfc2119 1.3.2 rdf graph notation the underlying structure of rdf is a directed labeled graph. for communication between computer systems rdf uses a serialization in xml to represent these graphs. this xml notation is rather bulky and difficult for human discourse so a more visual notation is used here for describing rdf graph structures figure 1-1 rdf graph notation subject-resource propertyname-- object-resource indicates a graph edge labeled propertyname from an rdf resource named subject-resource to another rdf resource named object-resource subject-resource propertyname-- property value indicates a graph edge labeled propertyname from an rdf resource named subject-resource to a literal string containing the indicated value. subject-resource propertyname-- val1 val2 this is a shorthand for a property whose value is an rdf bag resource containing the indicated values see section 4.1.2.1 subject-type propertyname-- object-type names in angle brackets are used to indicate an rdf resource of the indicated type i.e. having the indicated rdf type property value without indicating a specific name for the resource. this is useful for showing the rdf classes that may be linked by a property. subject-resource propertyname-- object-resource property1-- val1 property2-- val2 etc. property arcs can be chained and multiple arcs drawn from a subject resource. here are some xml examples of the rdf graph structures described above figure 1-2 rdf graph example in xml xml version 1.0 any rdf graph is an rdf element rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns http www.example.com schema# subject-resource propertyname- object-resource rdf description rdf about http www.example.com profile#subject-resource propertyname rdf description rdf about http www.example.com profile#object-resource propertyname rdf description subject-resource propertyname- object-resource alternative format rdf description rdf about http www.example.com profile#subject-resource propertyname rdf resource http www.example.com schema#object-resource rdf description subject-resource propertyname- property value rdf description rdf about http www.example.com profile#subject-resource propertyname property value propertyname rdf description subject-resource propertyname- val1 val2 rdf description rdf about http www.example.com profile#subject-resource propertyname rdf description rdf type rdf resource http www.w3.org 1999 02 22-rdf-syntax-ns#bag rdf li val1 rdf li rdf li val1 rdf li etc... rdf description propertyname rdf description subject-resource propertyname- val1 val2 alternative format rdf description rdf about http www.example.com profile#subject-resource propertyname rdf bag rdf li val1 rdf li rdf li val1 rdf li etc... rdf bag propertyname rdf description subject-type propertyname- object-type rdf description rdf type rdf resource http www.example.com schema#subject-type propertyname rdf description rdf type rdf resource http www.example.com schema#object-type rdf description propertyname rdf description subject-resource propertyname- object-resource property1- val1 property2- val2 rdf description rdf about http www.example.com profile#subject-resource propertyname rdf description rdf about http www.example.com profile#object-resource property1 val1 property1 property2 val2 property2 etc... rdf description propertyname rdf description rdf rdf 2. cc pp architecture this section is not normative but provides an overview of the features of cc pp. 2.1 cc pp profile structure a cc pp profile is broadly constructed as a 2-level hierarchy a profile having at least one or more components and each component having at least one or more attributes. 2.1.1 profile components the initial branches of the cc pp profile tree describe major components of the client. examples of major components are the hardware platform upon which software is executing the software platform upon which all applications are hosted or an individual application such as a browser. a simple graphical representation of the bottom of a cc pp tree based on three components terminalhardware terminalsoftware and terminalbrowser would be figure 2-1a cc pp profile components example myprofile ccpp component-- example terminalhardware ccpp component-- example terminalsoftware ccpp component-- example terminalbrowser the corresponding xml might look like this figure 2-1b cc pp profile components in xml xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns example http www.example.com schema# rdf description rdf about http www.example.com profile#myprofile ccpp component rdf description rdf about http www.example.com profile#terminalhardware terminalhardware properties here rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalsoftware terminalsoftware properties here rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalbrowser terminalbrowser properties here rdf description ccpp component rdf description rdf rdf 2.1.2 component attributes a cc pp profile describes client capabilities and preferences in terms of a number of cc pp attributes for each component. the description of each component is a sub-tree whose branches are the capabilities or preferences associated with that component. though rdf makes modeling a wide range of data structures possible including arbitrary graphs complex data models are usually best avoided for profile attribute values. a capability can often be described using a small number of cc pp attributes each having a simple atomic value. where more complex values are needed these can be constructed as rdf subgraphs. one useful case for complex attribute values is to represent alternative values e.g. a browser may support multiple versions of html. a hypothetical profile might look like this figure 2-2a complete cc pp profile example ex myprofile ccpp component-- ex terminalhardware rdf type---- ex hardwareplatform ex displaywidth-- 320 ex displayheight-- 200 ccpp component-- ex terminalsoftware rdf type---- ex softwareplatform ex name----- epoc ex version-- 2.0 ex vendor--- symbian ccpp component-- ex terminalbrowser rdf type---- ex browserua ex name----- mozilla ex version-- 5.0 ex vendor--- symbian ex htmlversionssupported-- rdf type--- rdf bag rdf 1----- 3.2 rdf 2----- 4.0 the corresponding xml might look like this figure 2-2b complete cc pp profile example in xml xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com profile#myprofile ccpp component rdf description rdf about http www.example.com profile#terminalhardware rdf type rdf resource http www.example.com schema#hardwareplatform ex displaywidth 320 ex displaywidth ex displayheight 200 ex displayheight rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalsoftware rdf type rdf resource http www.example.com schema#softwareplatform ex name epoc ex name ex version 2.0 ex version ex vendor symbian ex vendor rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalbrowser rdf type rdf resource http www.example.com schema#browserua ex name mozilla ex name ex version 5.0 ex version ex vendor symbian ex vendor ex htmlversionssupported rdf bag rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag ex htmlversionssupported rdf description ccpp component rdf description rdf rdf 2.1.3 defaults the attributes of a component can be included directly as in the previous example or may be specified by reference to a default profile which may be stored separately and accessed using its specified uri. this use of an externally defined default profile is somewhat similar to the idea of dynamic inheritance. it makes possible some important optimizations. as a separate document it can reside at a separate location and it can be separately cached. this is particularly useful in wireless environments such as cellular networks where the profiles may be large and the client link slow and expensive. using default values only a small part of the overall profile is sent over the wireless network. default values for a component of a cc pp profile are indicated by a ccpp defaults arc from the component concerned to a component that describes the default values. figure 2-3a cc pp profile using defaults ex myprofile ccpp component-- ex terminalhardware rdf type------- ex hardwareplatform ccpp defaults-- ex hwdefault ccpp component-- ex terminalsoftware rdf type------- ex softwareplatform ccpp defaults-- ex swdefault ccpp component-- ex terminalbrowser rdf type------- ex browserua ccpp defaults-- ex uadefault ex hwdefault rdf type---- ex hardwareplatform ex displaywidth-- 320 ex displayheight-- 200 ex swdefault rdf type---- ex softwareplatform ex name----- epoc ex version-- 2.0 ex vendor--- symbian ex uadefault rdf type---- ex browserua ex name----- mozilla ex version-- 5.0 ex vendor--- symbian ex htmlversionssupported-- rdf type--- rdf bag rdf 1----- 3.2 rdf 2----- 4.0 the corresponding xml might look like this figure 2-3b cc pp profile using defaults in xml device profile referencing defaults xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com profile#myprofile ccpp component rdf description rdf about http www.example.com profile#terminalhardware rdf type rdf resource http www.example.com schema#hardwareplatform ccpp defaults rdf resource http www.example.com hardwareprofile#hwdefault rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalsoftware rdf type rdf resource http www.example.com schema#softwareplatform ccpp defaults rdf resource http www.example.com softwareprofile#swdefault rdf description ccpp component ccpp component rdf description rdf about http www.example.com profile#terminalbrowser rdf type rdf resource http www.example.com schema#browserua ccpp defaults rdf resource http www.example.com terminalprofile#uadefault rdf description ccpp component rdf description rdf rdf defaults for hardwareplatform xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com hardwareprofile#hwdefault rdf type rdf resource http www.example.com schema#hardwareplatform ex displaywidth 320 ex displaywidth ex displayheight 200 ex displayheight rdf description rdf rdf defaults for softwareplatform xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com softwareprofile#swdefault rdf type rdf resource http www.example.com schema#softwareplatform ex name epoc ex name ex version 2.0 ex version ex vendor symbian ex vendor rdf description rdf rdf defaults for browserua xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com terminalprofile#uadefault rdf type rdf resource http www.example.com schema#browserua ex name mozilla ex name ex version 5.0 ex version ex vendor symbian ex vendor ex htmlversionssupported rdf bag rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag ex htmlversionssupported rdf description rdf rdf if a given attribute value is applied directly to a component resource and also appears on a resource referenced by the ccpp defaults property the directly applied value takes precedence figure 2-4a overriding a default value ex myprofile ccpp component-- ex terminalhardware rdf type-------- ex hardwareplatform ccpp defaults--- ex hwdefault ex memorymb------- 32 ex hwdefault rdf type---- ex hardwareplatform ex displaywidth-- 320 ex displayheight-- 200 ex memorymb--- 16 in this example the default component indicates 16 mb of memory but this value is overridden by the memorymb property applied directly to the profile component. thus in this profile the memorymb attribute has a value of 32. the corresponding xml might look like this figure 2-4b overriding a default value in xml device profile referencing defaults xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com profile#myprofile ccpp component rdf description rdf about http www.example.com profile#terminalhardware rdf type rdf resource http www.example.com schema#hardwareplatform ccpp defaults rdf resource http www.example.com hardwareprofile#hwdefault ex memorymb 32 ex memorymb rdf description ccpp component rdf description rdf rdf defaults for hardwareplatform xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ex http www.example.com schema# rdf description rdf about http www.example.com hardwareprofile#hwdefault rdf type rdf resource http www.example.com schema#hardwareplatform ex displaywidth 320 ex displaywidth ex displayheight 200 ex displayheight ex memorymb 16 ex memorymb rdf description rdf rdf a resource indicated by a default property may appear in a separate document in which case an absolute uri reference should be specified for the default resource. in such cases the uri part of the default resource identifier i.e. not including the fragment identifier part is used to retrieve an rdf document containing the default resource description. thus if the default resource is named http example.com deviceprofile#hardwareplatform the uri http example.com deviceprofile is used to retrieve an rdf document and a resource within that document having the local identifier hardwareplatform is taken as the default resource. such a resource might be defined within the target document using about http example.com deviceprofile#hardwareplatform or id hardwareplatform see also section 3.5. note individual applications may allow relative uris to be used. those that do should specify exactly how the corresponding rdf document is located. 2.2 extensibility and namespaces cc pp is extended primarily through the introduction of new attribute vocabularies. any application or operational environment that uses cc pp may define its own vocabulary but wider interoperability is enhanced if vocabularies are defined that can be used more generally e.g. a standard extension vocabulary for imaging devices or voice messaging devices or wireless access devices etc. accordingly this specification defines a small core vocabulary of features that are applicable to range of print and display agents whose use where appropriate is strongly recommended. this core vocabulary is based on ietf specification rfc2534 rfc2534 and serves as an example of how cc pp attribute vocabularies may be defined. another such example is the wap forum uaprof specification uaprof any cc pp expression can use terms drawn from an arbitrary number of different vocabularies so there is no restriction caused by re-using terms from an existing vocabulary rather then defining new names to identify the same information. each vocabulary is associated with an xml namespace as are the names that describe the underlying rdf and cc pp structures. xml namespaces xmlnamespaces define a notation for associating convenient name forms with arbitrary uris. the rdf graph syntax does not specifically employ namespaces but xml serializations of an rdf graph do. we also use namespace prefixes when presenting rdf in the graph notation described above. the cc pp framework uses the xml namespace mechanism to create identifying uris for rdf core elements cc pp structural elements and cc pp attribute vocabularies. consider the following namespace declaration example figure 2-7 example namespace declarations xml version 1.0 rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns prf http www.wapforum.org profiles uaprof ccppschema-20010430# the first namespace declaration is for rdf usage. the second declaration names the cc pp core structural vocabulary which includes component defaults and other properties that are intrinsic to the cc pp framework. the third namespace declaration names a component cc pp properties vocabulary. note remember that the namespace prefixes are quite arbitrary applications must not assume that the prefix rdf refers to the rdf vocabulary or that ccpp refers to the intrinsic cc pp vocabulary etc. it is the uri to which a namespace prefix is bound that matters. note although namespace names are identified by uri references there is no requirement that a schema be available at that uri. in the above example the uaprof namespace name is http www.wapforum.org uaprof ccppschema-20000405# yet there is no schema at that uri. it is generally preferred practice that a corresponding schema exists at the url used to identify a namespace but this is not a requirement and cc pp applications must not assume that such a schema will exist. the use of multiple component property vocabularies is allowed and encouraged. different user communities and application domains wap forum etsi mexe ietf conneg etc. may define their own property vocabularies. this is an important mechanism for providing support for the needs of those communities. the following namespaces are introduced by the cc pp framework http www.w3.org 2002 11 08-ccpp-schema# normative rdf schema defining class declarations for cc pp and core structural properties listed in appendix b.3 http www.w3.org 2002 11 08-ccpp-client# example but non-normative vocabulary for describing simple client capabilities with particular relevance to print and display clients listed in appendix c note to retrieve these schemas it is necessary for your browser to add the header accept text xml in the request. browsers that do not add this accept header or use the header accept or variants thereof will receive a html page that notes these are namespaces reserved for the cc pp schemas. 3. cc pp structure the general structure of a cc pp client profile is a two-level tree components and attributes with provision for each component to reference an externally defined set of default attribute values. 3.1 components a cc pp profile contains one or more components and each component contains one or more attributes. each component is represented by a resource of type ccpp component or some rdfs subclass thereof and related to the client profile resource by a ccpp component property. here the ccpp namespace is http www.w3.org 2002 11 08-ccpp-schema#. for compatibility with uaprof the namespace used to qualify component may be a uaprof namespace. the object of a ccpp component resource may have an rdf type property or equivalent rdf structure indicating what kind of client component it describes. the example in figure 2-2b is of a profile with an explicit indication of component subtype. however cc pp processors must be able to handle profiles that do not contain component type indicators. as long as the cc pp attributes used are all specific to a given component type a processor will have sufficient information to interpret them properly. no more than one instance of a component type should be present for any given profile resource. if a cc pp profile uses any attribute that can appear on different component types then the type of any component on which such an attribute appears must be indicated by an rdf type property or equivalent rdf. a cc pp processor must be able to use this type information to disambiguate application of any attribute used. 3.2 attributes cc pp profiles are constructed using rdf rdf the rdf data model represents cc pp attributes as named properties linking a subject resource to an associated object resource or rdf literal value. to describe client capabilities and preferences the client being described is a resource whose features are described by labeled graph edges from that resource to corresponding object values. the graph edge labels identify the client feature cc pp attribute being described and the corresponding object values are the feature values. figure 3-1 rdf statement describing a client attribute client component resource attributename-- attribute-value cc pp attribute labels are represented by xml name values per xml specification xml section 2.3 which may include a namespace prefix i.e. a qualified name per xml namespaces xmlnamespaces section 3 when combined with the corresponding namespace or default namespace declaration each label must be mapped to a uri. thus cc pp attribute names are uris with xml namespace syntax used to avoid some of the rdf expressions becoming too cumbersome. attribute values may be of simple or structured data types. simple data types are discussed in the section 4.1.1. each basic data type may support a range of tests that can be used in the process of determining the suitability of different resource variants for presentation by a client e.g. equality compatibility less-than greater-than etc. structured data types are supported through the use of specific rdf properties that join simple rdf literal values into composites. specific cc pp semantics for rdf properties used in this way are discussed in the section 4.1.2. 3.3 defaults each component of a client profile may indicate a single separate resource that in turn indicates a subordinate collection of default attribute values. this collection of default values can be a separate rdf document that is named via a uri or can appear in the same document as the client profile though in practice there is probably little value in defaults in the same document if an attribute in the collection of defaults is also present in the main part of the client profile the non-default value takes precedence. the intent is that a hardware vendor or system supplier may provide default values that are common to a number of systems in a place easily accessible to an origin server and then use the client profile to specify variations from the common profile. the owner of the product or system operator may be able to add or change options such as additional memory that add new capabilities or change the values of some original capabilities. default values are referenced by the property ccpp defaults. this name conforms to the name format recommendations of the rdf model and syntax specification rdf appendix c.1. however for compatibility with earlier versions of cc pp used with uaprof cc pp processors should recognize the property name ccpp defaults i.e. with capital d as equivalent. here the ccpp namespace is http www.w3.org 2002 11 08-ccpp-schema#. for compatibility with uaprof the namespace used to qualify defaults or defaults may be a uaprof namespace. defaults can be encoded inline or as separate documents referred to via uri. defaults can not be encoded both inline and as a separate document. it is the responsibility of any server interpreting a cc pp to combine profiles with any externally referenced defaults in such a way as to be able to correctly interpret the profile. a profile with defaults in the same document is logically equivalent to a profile with the same non-default data and referenced external document s containing the default values. here is a simple profile graph using default values figure 3-2a cc pp profile using defaults ex myprofile ccpp component-- ex terminalhardware rdf type------- ex hardwareplatform ccpp defaults-- ex hwdefault ex displaywidth-- 640 ex displayheight- 400 ccpp component-- ex terminalsoftware rdf type------- ex softwareplatform ccpp defaults-- ex swdefault ccpp component-- ex terminalbrowser rdf type------- ex browserua ccpp defaults-- ex uadefault ex htmlversionssupported-- 2.0 3.2 4.0 ex hwdefault rdf type---- ex hardwareplatform ex cpu------ ppc ex displaywidth-- 320 ex displayheight-- 200 ex swdefault rdf type---- ex softwareplatform ex name----- epoc ex version-- 2.0 ex vendor--- symbian ex uadefault rdf type---- ex browserua ex name----- mozilla ex version-- 5.0 ex vendor--- symbian ex htmlversionssupported-- 3.2 4.0 if a component referenced by ccpp defaults contains an attribute that is not present on the referencing profile component then the effect is as if the attribute value in the default component is applied directly to the profile component. for example the profile in figure 3-2a should be interpreted as describing the same capabilities as shown in figure 3-2b. figure 3-2b resolving a cc pp profile using defaults ex myprofile ccpp component-- ex terminalhardware rdf type------- ex hardwareplatform ex displaywidth-- 640 ex displayheight- 400 ex cpu------ ppc ccpp component-- ex terminalsoftware rdf type------- ex softwareplatform ex name----- epoc ex version-- 2.0 ex vendor--- symbian ccpp component-- ex terminalbrowser rdf type------- ex browserua ex htmlversionssupported-- 2.0 3.2 4.0 ex name----- mozilla ex version-- 5.0 ex vendor--- symbian and here is the corresponding xml serialization with the default resource descriptions coded inline in the client profile description. note that this example uses a default namespace for rdf elements but still must use explicit namespace prefixes for rdf attributes. figure 3-2c cc pp profile using inline defaults in xml xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns prf http example.com schema# rdf description rdf about http example.com myprofile ccpp component rdf description rdf about http example.com terminalhardware rdf type rdf resource http example.com schema#hardwareplatform ccpp defaults rdf description rdf about http example.com hwdefault rdf type rdf resource http example.com schema#hardwareplatform prf cpu ppc prf cpu prf displaywidth 320 prf displaywidth prf displayheight 200 prf displayheight rdf description ccpp defaults prf displayheight 640 prf displayheight prf displaywidth 400 prf displaywidth rdf description ccpp component ccpp component rdf description rdf about http example.com terminalsoftware rdf type rdf resource http example.com schema#softwareplatform ccpp defaults rdf description rdf about http example.com swdefault rdf type rdf resource http example.com schema#softwareplatform prf name epoc prf name prf vendor symbian prf vendor prf version 2.0 prf version rdf description ccpp defaults rdf description ccpp component ccpp component rdf description rdf about http example.com browser rdf type rdf resource http example.com schema#browserua ccpp defaults rdf description rdf about http example.com uadefault rdf type rdf resource http example.com schema#browserua prf name mozilla prf name prf vendor symbian prf vendor prf version 5.0 prf version prf htmlversionssupported rdf bag rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag prf htmlversionssupported rdf description ccpp defaults prf htmlversionssupported rdf bag rdf li 2.0 rdf li rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag prf htmlversionssupported rdf description ccpp component rdf description rdf rdf inline defaults are logically equivalent to defaults contained in an external referenced document and such external documents would be a normal way of providing default values. the following is the xml serialization of the same profile with references to externally defined defaults figure 3-3 cc pp profile referencing externally defined defaults in xml xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns prf http example.com schema# rdf description rdf about http example.com myprofile ccpp component rdf description rdf about http example.com terminalhardware rdf type rdf resource http example.com schema#hardwareplatform ccpp defaults rdf resource http example.com hwdefault prf displaywidth 640 prf displaywidth prf displayheight 400 prf displayheight rdf description ccpp component ccpp component rdf description rdf about http example.com terminalsoftware rdf type rdf resource http example.com schema#softwareplatform ccpp defaults rdf resource http example.com swdefault rdf description ccpp component ccpp component rdf description rdf about http example.com browser rdf type rdf resource http example.com schema#browserua ccpp defaults rdf resource http example.com uadefault prf htmlversionssupported rdf bag rdf li 2.0 rdf li rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag prf htmlversionssupported rdf description ccpp component rdf description rdf rdf each external defaults resource is a separate rdf document referenced by a uri. note a default document uses a rdf description element as its root node. the rdf description is named using an rdf about whose value is a uri. this uri must correspond to the value of the rdf resource xml attribute in the ccpp defaults element in the referencing document. the default component does not need to be identified when it occurs inline as in the first example above. in the examples of default documents below the urls of the external default values documents are used. however the default resource uri does not have to be the document url as long as the uri is uniquely identified the same uri is used in both the source document and the external default values document and there is some way for the processing software to locate and retrieve the document containing the default resource. examples of default documents referenced by the previous example are as follows figure 3-4 external hardwareplatform default values document http example.com hwdefault xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns prf http example.com schema# rdf description rdf about http example.com hwdefault rdf type rdf resource http example.com schema#hardwareplatform prf cpu ppc prf cpu prf displaywidth 320 prf displaywidth prf displayheight 200 prf displayheight rdf description rdf rdf figure 3-5 external softwareplatform default values document http example.com swdefault xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns prf http example.com schema# rdf description rdf about http example.com swdefault rdf type rdf resource http example.com schema#softwareplatform prf name epoc prf name prf vendor symbian prf vendor prf version 2.0 prf version rdf description rdf rdf figure 3-6 external browseua default values document http example.com uadefault xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns prf http example.com schema# rdf description rdf about http example.com uadefault rdf type rdf resource http example.com schema#browserua prf name mozilla prf name prf vendor symbian prf vendor prf version 5.0 prf version prf htmlversionssupported rdf bag rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag prf htmlversionssupported rdf description rdf rdf 3.4 distinguishing profile structure from attributes cc pp uses namespaces to distinguish the vocabulary associated with the structure e.g. ccpp component from vocabularies associated with applications e.g. terminalhardware display in this example we use the namespace http www.wapforum.org profiles uaprof ccppschema-20010430# associated with prefix prf to describe properties that are not defined in the cc pp or rdf namespaces figure 3-7 xml serialization of cc pp profile with namespaces xml version 1.0 rdf rdf xmlns rdf http www.w3.org 1999 02 22-rdf-syntax-ns# xmlns ccpp http www.w3.org 2002 11 08-ccpp-schema# xmlns prf http www.wapforum.org profiles uaprof ccppschema-20010430# rdf description rdf about http example.com myprofile ccpp component rdf description rdf about http example.com terminalhardware rdf type rdf resource http www.wapforum.org profiles uaprof ccppschema-20010430#hardwareplatform prf cpu ppc prf cpu prf screensize 320x200 prf screensize rdf description ccpp component ccpp component rdf description rdf about http example.com terminalsoftware rdf type rdf resource http www.wapforum.org profiles uaprof ccppschema-20010430#softwareplatform prf osname epoc prf osname prf osvendor symbian prf osvendor prf osversion 2.0 prf osversion rdf description ccpp component ccpp component rdf description rdf about http example.com browser rdf type rdf resource http www.wapforum.org profiles uaprof ccppschema-20010430#browserua prf browsername mozilla prf browsername prf browserversion 5.0 prf browserversion prf htmlversion rdf bag rdf li 3.2 rdf li rdf li 4.0 rdf li rdf bag prf htmlversion rdf description ccpp component rdf description rdf rdf all rdf resources that relate to the overall structure of cc pp are defined in the ccpp namespace and have associated schema properties that allow them to be distinguished from attribute vocabulary or other rdf statements by a schema-aware processor. 3.5 notes on rdf usage this specification uses rdf about to specify the uris of resources in examples. this was a deliberate choice to ensure that such uris are absolutely and unambiguously specified. this is also different to uaprof which uses both rdf about and rdf id cc pp allows rdf id attributes or rdf about attributes. however the values of rdf id attributes represent uris which are relative to the base uri of the document rdffragment when a document is moved to another location on the web the meaning of the value of an rdf id attribute changes. the meaning is undefined when the rdf is contained in a document with no base uri e.g. when encapsulated in a message. the rdfcore wg have a working draft rdfxml that proposes that rdf should support xml base attributes. if this addition to rdf achieves recommendation status then it would be appropriate to use rdf id attributes in conjunction with an xml base attribute instead of rdf about attributes. for now we recommend that cc pp profiles should use rdf about and that the uris of resources are fully specified. the component resources in a profile are instances of components identified in the corresponding schema which in turn must be subclasses of ccpp component. they may usefully be identified as such by means of the rdf type property whose value matches the name of the component type in the schema. sometimes this type indication must be present see section 3.1 components. 3.6 rdf graph composition the rdf statements that make up an rdf graph do not necessarily occur in a single document. for cc pp the profile delivered may contain references to rdf subgraphs that are transferred separately or are retrieved from designated web resources. when an external sub-graph is referenced in this way the effect is equivalent to taking the sets of rdf statement triples described by the referencing document and the referenced document and constructing a new document that describes the union of these sets. note implementations are not required to actually construct such a document just to interpret the rdf statements as they would from a single document. this composition of multiple rdf documents presumes that the content of the referenced document is trusted to accurately represent the capabilities that are presented to the sender of some resource data. accordingly such composition is restricted to documents describing resources referenced by properties whose intended interpretation embodies such a notion of trust viz. ccpp defaults. 4. attribute vocabularies 4.1 attribute data this section describes the basic data types and data structuring options that are available for the values associated with a ccpp attribute. all cc pp attributes should be defined with values that can be treated as one of the simple or complex data types discussed later. support for the described formats for attribute values is recommended this specification does not prohibit the use of other valid rdf forms but provides no guidance for their interpretation. see also section 1.1 and appendix f. 4.1.1 simple cc pp attribute data all simple cc pp attribute values are represented as rdf plain literal values. in rdf xml these may appear as character sequences either in xml elements or as xml attributes. the acceptable plain literal values for an attribute may be constrained to the lexical space associated with a specific application data type. this section introduces some specific data types that may be associated with simple cc pp attributes. base cc pp usage defined here leaves any further interpretation of the values used to the processing application. future versions of cc pp may introduce additional structures that provide for standardized matching of client profiles with other resource metadata. to allow such developments and to ease interworking with ietf media feature descriptions it is recommended that any simple attribute values should be defined in terms of one of the data types described below. all attribute values are ultimately sequences of ucs unicode characters. it is assumed that character coding issues in specific serializations of the rdf data are defined by the enclosing xml representation. note attribute comparison is beyond the scope of this document as are specific mechanisms for determining the simple type corresponding to a given attribute value. applications are presumed to know how to deal with any cc pp attribute that they handle. where given formal syntax expressions use the notation presented in section 6 of the xml specification xml 4.1.1.1 strings the data type of a cc pp attribute value may be defined to be a case sensitive text string. the rdf literal value is constrained to the lexical space defined in the string xml schema datatype xmlschema-2 any lang tag is ignored. in general such values may be compared for equality or inequality. when comparing text values every character must match exactly for equality to be declared. some examples browser name mozilla browser version 5.0 4.1.1.2 integer numbers the data type of a cc pp attribute value may be defined to be an integer number. the rdf literal value is constrained to the lexical space defined in the int xml schema datatype xmlschema-2 any lang tag is ignored. integer numbers may be positive zero or negative. they are represented by a string containing a sequence of decimal digits optionally preceded by a or sign. leading zeros are permitted and are ignored. the number value is always interpreted as decimal radix 10 it is recommended that implementations generate and support integer values in the range 2147483648 to 2147483647 or 2 31 to 2 31-1 i.e. integers whose absolute value can be expressed as a 31-bit unsigned binary number. figure 4-2 syntax for integer numbers signed-integer unsigned-integer unsigned-integer digit digit some examples 0 1 0768 256 note the choice of recommended number range support was based on support from java and other programming languages widely used for the web. 4.1.1.3 rational numbers the data type of a cc pp attribute value may be defined to be a rational number. in other words the rdf literal value is constrained to the lexical space defined below. any lang tag is ignored. a rational number is expressed as a ratio of two integer numbers. two positive integers are separated by a and optionally preceded by a or sign. it is recommended that implementations generate and support numerators of a rational number the first number before the in the range 0 to 2147483647 2 31-1 and denominators after the in the range 1 to 2147483647. figure 4-3 syntax for rational numbers rational-number signed-integer unsigned-integer if the denominator is omitted a value 1 is assumed i.e. treat value as an integer. some examples 1 2 768 1024 254 100 2000 65536 note the rational number schema described above may be defined in xml-schema xmlschema-0 as follows figure 4-4 possible xml-schema for rational numbers xs schema xmlns xs http www.w3.org 2001 xmlschema targetnamespace http www.w3.org tr 2003 wd-ccpp-struct-vocab-20030728 xs simpletype name rational xs annotation xs documentation the canonical lexical representation of any value will be the form of the value reduced to its lowest common denominator and with 1 in the denominator if applicable. xs documentation xs annotation xs restriction base xs string xs pattern value 0-9 0 1-9 0-9 xs restriction xs simpletype xs schema note that while the pattern above provides a lexical definition it does so imperfectly it strictly disallows any whitespace at all. further the simple type definition above does not define a numeric value space ordering equality and implied support for arithmetic operations are not defined as some users of the type might expect processors need only recognize the definition as a string. because of these deficiencies use of rational numbers as defined here may be harmful to interoperability. the xml-schema working group may define a workable rational data type in the future. 4.1.2 complex cc pp attribute data in addition to the simple values described above a cc pp attribute may have a complex value expressed in the form of a resource with its own collection of rdf properties and associated values. specific data types represented in this way are set of values sequence of values a profile must not have multiple occurrences of a single attribute within a single component. cc pp attributes that need to have multiple values should use sets or sequences. other complex cc pp attribute values may be represented by arbitrary rdf resources. a definition of the interpretation of such values is beyond the scope of this specification. 4.1.2.1 set of values a set consists of zero one or more values all different and whose order is not significant. set values are useful for representing certain types of device characteristics e.g. the range of typefaces that can be supported by a client or the html versions supported by a browser. a set is represented as an rdf bag with each member of the set corresponding to a property of that resource named rdf 1 rdf 2 etc. this construct is described in section 3 of the rdf model and syntax specification rdf figure 4-4 rdf representation of set values in cc pp client-resource attributename rdf bag rdf 1-- set-member-value-1 rdf 2-- set-member-value-2 rdf n-- set-member-value-n note the rdf bag construct does not require that every contained value be unique. a set cannot contain duplicate values so every property of an rdf bag used to represent a set must have a distinct value. there is a clear distinction drawn between an attribute that has a single value and an attribute whose value is a set with zero one or more elements figure 4-5 attribute with set value containing a single member client-resource attributename rdf bag rdf 1-- set-member-value compare the above attribute value which is a set containing one element with the following which is a simple value figure 4-6 attribute with a simple value client-resource attributename attribute-value 4.1.2.2 sequence of values a sequence consists of zero one or more values whose order is significant in some way. sequence values are useful for a range of client features that may be ordered or ranked in some way e.g. a list of preferences in some order of preference. this specification does not define the significance of the ordering of values. a vocabulary that defines a sequence-valued cc pp attribute should also define the significance of the ordering of within the sequence. a sequence is represented as an rdf seq with each member of the set corresponding to a property of that resource named rdf 1 rdf 2 etc. this construct is described in section 3 of the rdf model and syntax specification rdf figure 4-7 rdf representation of sequence values in cc pp client-resource attributename rdf seq rdf 1-- sequence-value-1 rdf 2-- sequence-value-2 rdf n-- sequence-value-n there is a clear distinction drawn between an attribute that has a single value and an attribute whose value is a sequence with zero one or more elements figure 4-8 attribute with sequence value containing a single member client-resource attributename rdf seq rdf 1-- sequence-value compare the above attribute value which is a sequence containing one element with the simple value as shown in figure 4-6 above. 4.2 attribute identifiers cc pp attribute names are in the form of a uri. any cc pp vocabulary is associated with an xml namespace which combines a base uri with a local xml element name or xml attribute name to yield a uri corresponding to an attribute name. e.g. the namespace uri http www.w3.org 2002 11 08-ccpp-client# and the core vocabulary name type are combined to yield the attribute name uri reference http www.w3.org 2002 11 08-ccpp-client#type anyone can define and publish a cc pp vocabulary extension assuming administrative control or allocation of a uri for an xml namespace for such a vocabulary to be useful it must be interpreted in the same way by communicating entities. thus use of an existing extension vocabulary is encouraged wherever possible failing this publication of a new vocabulary definition containing detailed descriptions of the new cc pp attributes. many extension vocabularies will be drawn from existing applications and protocols e.g. wap uaprof ietf media feature registrations etc. appendix e surveys some possible sources of additional cc pp vocabularies. 4.3 rdf vocabulary schema attribute names are defined and associated with an xml namespace using an rdf schema. appendix b to this document contains an rdf schema describing terms for use in cc pp profiles. appendix c contains an example schema describing a cc pp vocabulary. appendix d contains recommendations for creating a new vocabulary. a cc pp processor is not required to understand and process rdf schema definitions it merely needs to understand enough about the cc pp profile structure and vocabulary used to perform its job. a schema-aware processor may be able to handle cc pp profiles in other ways or in combination with other rdf information but such behavior is beyond the scope of this specification. 5. conformance this section explains how to make a valid claim that a product conforms to this specification. anyone may make a claim e.g. vendors about their own products third parties about those products journalists about products etc. claims may be published anywhere e.g. on the web or in product documentation claimants are solely responsible for their claims. if the subject of the claim e.g. the software changes after the date of the claim the claimant is responsible for updating the claim. claimants are expected to modify or retract a claim if it may be demonstrated that the claim is not valid. claimants are encouraged to conform to the most recent specification available. there are three classes of products of cc pp documents e.g. a web resource producers e.g. a web client consumers e.g. a web server 5.1 cc pp document conformance documents may exist as resources accessible via a url or may be transmitted as data in a message. a document is cc pp conformant when it meets the following criteria the document must be valid rdf serialized in xml and be based on one or more vocabularies derived from the rdf schema in appendix b. see section 1. the document must use valid syntax for namespace declarations. see section 2.2. the profile element must contain one or more components. see section 2.1. each component in the profile must contain one or more attributes. see section 2.1. the component names may be in rdf about or rdf id attributes. see section 3.1. components must be indicated using a ccpp component property where the namespace used to qualify component is the cc pp namespace or a uaprof namespace. see section 3.1. component names component types and attribute names must all refer to different uris within a profile. see section 3. if a component type is given as an element name and as an rdf type element they must refer to the same uri. see section 3.1. default references must be valid urls. see section 3.3. defaults may be written as ccpp defaults or ccpp defaults. see section 3.3. defaults must be indicated using a ccpp defaults or ccpp defaults property where the namespace used to qualify defaults or defaults is the cc pp namespace or a uaprof namespace. see section 3.3. component attributes may contain both a default value and a directly applied value with the directly applied value taking precedence. see section 3.3. components may contain inline defaults. see section 3.3. components must not contain both inline and referenced defaults. see section 3.3. components may reference a default document which does not have an rdf type. see section 3.3. attributes may have sets of values bags see section 4.1.2.1. attributes may have sequences of values seq see section 4.1.2.2. attributes may have string values. see section 4.1.1.2. attributes may have integer number values. see section 4.1.1.3. attributes may have rational number values. see section 4.1.1.4. a component must not contain more than one attribute with the same name. see section 3.2. attributes of the same name may be in different components. see section 3.1. profiles may use multiple namespaces for attributes. see section 2.2. 5.2 cc pp producer conformance a producer is cc pp conformant when any cc pp profile document generated by the producer is a cc pp conformant document. 5.3 cc pp consumer conformance a consumer is cc pp conformant when the consumer accepts any cc pp conformant document and extracts cc pp information. schema-aware processing is not required and therefore support for the rdf schema in appendix b by cc pp consumers is optional see section 4.3 there are two categories of conformance for cc pp consumers conformant a cc pp consumer can claim to be a cc pp 1.0 conformant consumer if it accepts any valid cc pp profile and extracts information from it. validating a cc pp consumer can claim to be a cc pp 1.0 conformant validating consumer if it is conformant and if it rejects all invalid cc pp profiles. note a consumer implementation may be configurable to act as either a conformant consumer or a conformant validating consumer at different times. 5.4 conformance claims 5.4.1 validity a conformance claim is valid if it is well formed and meets the appropriate conformance criteria for the applicable product class as given above. 5.4.2 well-formed a conformance claim is well-formed if it includes the following information the date of the claim the product class document producer or consumer the consumer category conformant or conformant validating if applicable the title and dated uri of this document the product name identity including a version date or other identifier that uniquely identifies the product 6. acknowledgments this document is a distillation of many discussions of the w3c cc pp working group with final amendments introduced by the w3c device independence working group. the following were cc pp working group members for some or most of the period of preparation of this specification and its predecessors mikael nilsson ericsson infotech ulrich kauschke t-mobil ann navarro html writers guild brad topol ibm franklin reynolds nokia graham klyne baltimore technologies noboru iwayama fujitsu laboratories ltd takashi nishigaya fujitsu laboratories ltd lalitha surayanrayana sbc technology resources hidetaka ohto w3c through march 2002 panasonic simon mcbride dstc pty ltd varuni witana dstc pty ltd chris woodrow information architects johan hjelm ericsson barry briggs interleaf gerd hoelzing sap ted hardie equinix serge rigori sun ted wugofski phone.com kynn bartlett html writers guild sandeep singhal ibm thorsten kassing t-mobil larry masinter adobe during the period when the cc pp wg was developing the specification useful revisions and clarifications were suggested by yuichi koike stuart williams sean palmer and toni penttinen. special thanks are due to aaron swartz for a very thorough and revealing review of the first last call draft. following the handing over of the work to the di wg special thanks are also due to david ezell xml schema wg brian mcbride rdf core wg masayasu ishikawa html wg and lynne rosenthal qa wg for their help in completing the specification. the following members of the di wg also provided assistance in completing the specification stephane boyera roger gimson kazuhiro kitagawa andreas schade. 7. references 7.1. normative references xml extensible markup language xml 1.0 second edition tim bray jean paoli c. m. sperberg-mcqueen eve maler world wide web consortium recommendation 6 october 2000 http www.w3.org tr 2000 rec-xml-20001006 as amended by xml 1.0 second edition specification errata http www.w3.org xml xml-v10-2e-errata specifically http www.w3.org xml xml-v10-2e-errata#e26. xmlnamespaces namespaces in xml tim bray dave hollander andrew layman world wide web consortium recommendation 14 january 1999 http www.w3.org tr 1999 rec-xml-names-19990114 rdf resource description framework rdf model and syntax specification ora lassila ralph swick world wide web consortium recommendation 22 february 1999 http www.w3.org tr 1999 rec-rdf-syntax-19990222 rdfschema resource description framework rdf schema specification dan brickley r. v. guha world wide web consortium candidate recommendation 27 march 2000 http www.w3.org tr 2000 cr-rdf-schema-20000327 rdfxml rdf xml syntax specification dave beckett world wide web consortium working draft http www.w3.org tr 2003 wd-rdf-syntax-grammar-20030123 7.2. informative references rfc2506 rfc 2506 media feature tag registration procedure k. holtman a. mutz t. hardie ietf request for comments ftp ftp.isi.edu in-notes rfc2506.txt rfc2533 rfc 2533 a syntax for describing media feature sets g. klyne ietf request for comments ftp ftp.isi.edu in-notes rfc2533.txt connegmatch a revised media feature set matching algorithm g. klyne internet-draft work in progress draft-klyne-conneg-feature-match-02.txt rfc2534 rfc 2534 media features for display print and fax l. masinter d. wing a. mutz k. holtman ietf request for comments ftp ftp.isi.edu in-notes rfc2534.txt uaprof wap-174 uaprof user agent profiling specification 1999 as amended by wap-174_100 user agent profiling specification information note 2001 wireless application protocol forum available at http www.wapforum.org what technical_1_2.htm also see wap-248-uaprof version 20-oct-2001 available at http www.wapforum.org what technical.htm datastructure notes on data structuring c. a. r. hoare in structured programming academic press 1972. isbn 0-12-2000556-2. xmlschema-0 xml schema. part 0 primer david c. fallside world wide web consortium recommendation 2 may 2001 http www.w3.org tr 2001 rec-xmlschema-0-20010502 xmlschema-1 xml schema. part 1 structures henry s. thompson david beech murray maloney noah mendelsohn world wide web consortium recommendation 2 may 2001 http www.w3.org tr 2001 rec-xmlschema-1-20010502 xmlschema-2 xml schema. part 2 datatypes paul v. biron ashok malhotra world wide web consortium recommendation 2 may 2001 http www.w3.org tr 2001 rec-xmlschema-2-20010502 semantictoolbox the semantic toolbox building semantics on top of xml-rdf tim berners-lee http www.w3.org designissues toolbox.html rfc2531 rfc 2531 content feature schema for internet fax g. klyne l. mcintyre ietf request for comments ftp ftp.isi.edu in-notes rfc2531.txt tiff tiff tagged image file format 6.0 specification adobe systems inc. http partners.adobe.com asn developer pdfs tn tiff6.pdf rfc2301 rfc 2301 file format for internet fax l. mcintyre s. zilles r. buckley d. venable g. parsons j. rafferty ietf request for comments ftp ftp.isi.edu in-notes rfc2301.txt multimedia multimedia programming interface and data specifications 1.0 contains wave file format ibm corporation and microsoft corporation riffspec.txt rfc2361 rfc 2361 wave and avi codec registries e. fleischman ietf request for comments ftp ftp.isi.edu in-notes rfc2361.txt mpeg mpeg-4 overview v.14 geneva version iso iec jtc1 sc29 wg11 n3444 rob koenen overview of the mpeg-4 standard pwg printer working group http www.pwg.org rfc2566 rfc 2566 internet printing protocol 1.0 model and semantics r. debry t. hastings r. herriot s. isaacson p. powell ietf request for comments ftp ftp.isi.edu in-notes rfc2566.txt salutation salutation consortium specification http www.salutation.org rfc2119 rfc 2119 key words for use in rfcs to indicate requirement levels s. bradner ietf request for comments ftp ftp.isi.edu in-notes rfc2119.txt. mpeg-7 mpeg-7 overview version 8.0 iso iec jtc1 sc29 wg11 n3445 jos 矍 mart 쭥 z upm-gti es overview of the mpeg-7 standard http mpeg.telecomitalialab.com standards mpeg-7 mpeg-7.htm rfc2277 rfc 2277 ietf policy on character sets and languages h. alvestrand ietf request for comments ftp ftp.isi.edu in-notes rfc2277.txt rfc2396 rfc 2396 uniform resource identifiers uri generic syntax t. berners-lee r. fielding l. masinter ietf request for comments ftp ftp.isi.edu in-notes rfc2396.txt rfc2278 rfc 2278 iana charset registration procedures n. freed j. postel ietf request for comments ftp ftp.isi.edu in-notes rfc2278.txt ccpparch composite capabilities preference profiles requirements and architecture mikael nilsson johan hjelm hidetaka ohto world wide web consortium working draft 21 july 2000 http www.w3.org tr 2000 wd-ccpp-ra-20000721 rfc2616 rfc 2616 hypertext transfer protocol http 1.1 r. fielding j. gettys j. mogul h. frystyk l. masinter p. leach t. berners-lee ietf request for comments ftp ftp.isi.edu in-notes rfc2616.txt conceptual conceptual structures information processing in mind and machine john f. sowa addison wesley reading ma 1984. knowledge knowledge representation john f. sowa brooks cole 2000. isbn 0-534-94965-7 rdffragment re how to address rdf fragment ralph r swick message to world wide web consortium rdf-comments mailing list http lists.w3.org archives public www-rdf-comments 2000aprjun 0014.html. ccppex cc pp exchange protocol hidetaka ohto johan hjelm world wide web consortium note 24 june 1999 http www.w3.org 1999 06 note-ccppexchange-19990624 wai web content accessibility guidelines 2.0 wendy chisholm jason white gregg vanderheiden world wide web consortium working draft 22 august 2002 http www.w3.org tr 2002 wd-wcag20-20020822 rdfprimer rdf primer frank manola eric miller world wide web consortium working draft 23 january 2003 http www.w3.org tr 2003 wd-rdf-primer-20030123 appendix a terminology and abbreviations a.1 terminology this appendix is informative. attribute or cc pp attribute a cc pp attribute refers to the data elements describing the profile and is denoted as an rdf property. each cc pp attribute is associated with a value or a list of values or am rdf resource. note this is quite distinct from an xml attribute except where the meaning obvious in context the term cc pp attribute is generally used to emphasize this usage. cc pp processor a cc pp processor transforms a cc pp document from its rdf format into some other format. a cc pp processor understands cc pp syntax and structure including defaults but it does not understand application semantics associated with cc pp attributes of cc pp components. cc pp repository a server that stores the user agent profile or profile segments persistently in a form that may be referenced by and incorporated into a profile. a cc pp repository is typically a web server that provides cc pp profiles or profile segments in response to http requests. cacheable a data resource is said to be cacheable if the data resource contains a property that allows a server to determine whether the cached resource matches a request for a similar resource. cache a storage area used by a server or proxy to store data resources that have been retrieved or created in response to a request. when a new request for a cached data resource is received the server or proxy can respond with the cached version instead of retrieving or creating a new copy. capability an attribute of a sender or receiver often the receiver which indicates an ability to generate or process a particular type of message content. see also cc pp attributes client an entity that is the original compositor of a cc pp profile. confidentiality protecting the content of a message from unauthorized disclosure. content generation for the purpose of this specification content generation refers to generating content appropriate to the user agent profile of the request by using the user agent profile as input to a dynamic content generation engine. the xsl and style sheets of the document are used to tailor the document to the user agent profile of the request. content negotiation the mechanism for selecting the appropriate representation when servicing a request. the representation of entities in any response can be negotiated including error responses content selection for the purpose of this specification content selection refers to selecting an appropriate document from a list of possible choices or variants by matching the document profile with the user agent profile of the request. content provider a server that originates content in response to a request. data resource a data object that can be transferred across a network. data resources may be available in multiple representations e.g. multiple languages data formats size resolutions or vary in other ways. document for the purpose of this specification document refers to content supplied in response to a request. using this definition a document may be a collection of smaller documents which in turn is a part of a greater document document profile document profiles offer a means to characterize the features appropriate to given categories of user agents. for instance one profile might include support for style sheets vector graphics and scripting while another might be restricted to the tags in html 3.2. document profiles can be used by servers to select between document variants developed for different user agent categories. they can be used to determine what transformations to apply when such variants are not available. content developers can use document profiles to ensure that their web sites will be rendered as intended. dynamic content content that is generated in response to a request. this may be used for content that depends on changing environmental factors such as time e.g. stock quotes or place e.g. nearby gas stations feature functional property of a device or entity. gateway software that is capable of bridging disparate network protocols. for the purposes of this specification gateway refers to protocol bridging functionality which may exist in a stand-alone gateway or may be co-located with a proxy or origin server. hint a suggestion or preference for a particular option. while this option is strongly recommended its use is not required. machine understandable data that is described with tags that associate a meaning to the data i.e. an author tag would describe the author of the document allowing data to be searched or combined and not just displayed. namespace a qualifier added to an xml tag to ensure uniqueness among xml elements. negotiate content message content that has been selected by content negotiation. negotiation metadata information which is exchanged between the sender and the receiver of a message by content negotiation in order to determine the variant which should be transferred. non-variant content when the form format of the content being sent does not depend on receiver s capabilities and or preferences origin server software that can respond to requests by delivering appropriate content or error messages. the origin server may receive requests via either wsp or http. application programs executing on the origin server deliver content that is tailored in accordance with the cc pp that can be found within the provided profile. for the purpose of this specification origin server refers to content generation capabilities which may physically exist in a stand-alone web server or may be co-located with a proxy or gateway. preference an attribute of a sender or receiver often the receiver which indicates a preference to generate or process one particular type of message content over another even if both are possible. privacy preventing the unintended or unauthorized disclosure of information about a person. such information may be contained within a message but may also be inferred from patterns of communication e.g. when communications happen the types of resource accessed the parties with whom communication occurs etc. profile an instance of the schema that describe capabilities for a specific device and network. a profile need not have all the attributes identified in the vocabulary schema. proxy software that receives http requests and forwards that request toward the origin server possibly by way of an upstream proxy using http. the proxy receives the response from the origin server and forwards it to the requesting client. in providing its forwarding functions the proxy may modify either the request or response or provide other value-added functions. for the purposes of this specification proxy refers to request response forwarding functionality which may exist in a stand-alone http proxy or may be co-located with a gateway or origin server. rdf resource an object or element being described by rdf expressions is a resource. an rdf resource is typically identified by a uri. receiver a system component device or program which receives a message. schema rdf schema an rdf schema denotes resources which constitute the particular unchanging versions of an rdf vocabulary at any point in time. it is used to provide information such as organization and relationship about the interpretation of the statements in an rdf data model. it does not include the values associated with the attributes. security describes a set of procedures applied to data communications to ensure that information is transferred exactly as the sender and receiver intend and in no other way. security generally breaks down into integrity authentication confidentiality and privacy. sender a system component device or program which transmits a message. user an individual or group of individuals acting as a single entity. the user is further qualified as an entity who uses a device to request content and or resource from a server. user agent a program such as a browser running on the device that acts on a user s behalf. users may use different user agents at different times. user agent profile capabilities and preference information pertaining to the capabilities of the device the operating and network environment and users personal preferences for receiving content and or resource. variant one of several possible representations of a data resource. variant content when the form format of the content being sent depends on receiver s capabilities and or preferences vocabulary a collection of attributes that adequately describe the cc pp. a vocabulary is associated with a schema. a.2 abbreviations cc pp composite capabilities preferences profile cc ppex cc pp exchange protocol conneg content negotiation working group in the ietf er entity-relationship html hypertext markup language http hypertext transfer protocol httpex http extension framework iana internet assigned numbers authority ietf internet engineering task force iotp internet open trading protocol ldap lightweight directory access protocol ota over the air i.e. in the radio network rdf resource description framework rfc request for comments tbd to be determined tcp ip transmission control protocol internet protocol uaprof wap user agent profile w3c world wide web consortium wap wireless application protocol wbxml wap binary xml wml wireless markup language wsp wireless session protocol xhtml extensible hypertext markup language xsl extensible stylesheet language xml extensible markup language appendix b rdf schema for structure this appendix is normative but support by cc pp processors is optional. b.1 summary of cc pp class hierarchy figure b-1 cc pp class hierarchy rdfs resource ccpp profile profile deliverable to origin server ccpp component rdfs literal ccpp string a text value of a cc pp attribute ccpp integer an integer value of a cc pp attribute ccpp rational a rational number cc pp attribute value rdf bag a set value for a cc pp attribute rdf seq a sequence value for a cc pp attribute rdf property ccpp property a property applied to a ccpp resource ccpp structure a structural property in a cc pp profile ccpp attribute a property denoting a cc pp attribute b.2 summary of cc pp properties structural properties instances of ccpp structure figure b-2 cc pp structural properties ccpp component domain ccpp profile range ccpp component ccpp defaults domain ccpp component range ccpp component b.3 rdf schema cc pp core and class structure schema uri http www.w3.org 2002 11 08-ccpp-schema figure b-3 rdf schema for cc pp classes and core properties xml version 1.0 doctype rdf rdf entity ns-rdf http www.w3.org 1999 02 22-rdf-syntax-ns# entity ns-rdfs http www.w3.org 2000 01 rdf-schema# entity ns-ccpp http www.w3.org 2002 11 08-ccpp-schema# rdf rdf xmlns rdf ns-rdf xmlns rdfs ns-rdfs xmlns ccpp ns-ccpp cc pp class definitions rdfs class rdf about ns-ccpp profile rdfs label xml lang en cc pp profile rdfs label rdfs subclassof rdf resource ns-rdfs resource rdfs comment xml lang en this class is any complete profile that can be delivered to an origin server or other system that generates content for a client. rdfs comment rdfs class rdfs class rdf about ns-ccpp component rdfs label xml lang en cc pp profile component rdfs label rdfs subclassof rdf resource ns-rdfs resource rdfs comment xml lang en a base class for any collection of cc pp attribute values. a cc pp client profile consists of one or more components typically using a derived class that indicates the use of the component e.g. prf hardwareplatform prf softwareplatform rdfs comment rdfs class rdfs class rdf about ns-ccpp string rdfs label xml lang en text value rdfs label rdfs subclassof rdf resource ns-rdfs literal rdfs comment xml lang en this is the class of rdf literals that represent cc pp attribute string values. rdfs comment rdfs seealso rdf resource http www.w3.org tr xmlschema-2 string rdfs class rdfs class rdf about ns-ccpp integer rdfs label xml lang en integer value rdfs label rdfs subclassof rdf resource ns-rdfs literal rdfs comment xml lang en this is the class of rdf literals that represent cc pp attribute integer number values. rdfs comment rdfs seealso rdf resource http www.w3.org tr xmlschema-2 integer rdfs class rdfs class rdf about ns-ccpp rational rdfs label xml lang en rational value rdfs label rdfs subclassof rdf resource ns-rdfs literal rdfs comment xml lang en this is the class of rdf literals that represent cc pp attribute rational number values. rdfs comment rdfs class rdfs class rdf about ns-ccpp property rdfs label xml lang en cc pp property rdfs label rdfs subclassof rdf resource ns-rdf property rdfs comment xml lang en ccpp property is the super-class for ccpp structure and ccpp attribute. therefore all property arcs that are not part of the core rdf namespace and constitute parts of a cc pp profile are defined as subclasses of ccpp property. this allows schema-validating environments with language mixing to isolate the cc pp elements of an rdf graph rooted in some given resource from other attributes of that resource. rdfs comment rdfs class rdfs class rdf about ns-ccpp structure rdfs label xml lang en cc pp structural property rdfs label rdfs subclassof rdf resource ns-ccpp property rdfs comment xml lang en all properties that are structural elements of a cc pp profile are defined as instances of ccpp structure. this allows structural combining elements of a profile to be distinguished from attributes in a schema-aware environment. rdfs comment rdfs class rdfs class rdf about ns-ccpp attribute rdfs label xml lang en cc pp attribute rdfs label rdfs subclassof rdf resource ns-ccpp property rdfs comment xml lang en all properties that describe client capabilities or preferences in a cc pp profile should be defined as instances of ccpp attribute. this allows structural combining elements of a profile to be distinguished from client features in a schema-validating environment. rdfs comment rdfs class cc pp structural property definitions basic client profile description ccpp structure rdf about ns-ccpp component rdfs label xml lang en cc pp component property rdfs label rdfs domain rdf resource ns-ccpp client-profile rdfs range rdf resource ns-ccpp component rdfs comment xml lang en indicates a component of a top-level client profile. rdfs comment ccpp structure ccpp structure rdf about ns-ccpp defaults rdfs label xml lang en cc pp default properties rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp component rdfs comment xml lang en this property indicates a component that contains default properties for some other component. that is any attributes that are not found in the subject resource but are present in the object resource may be incorporated from the object into the resulting cc pp profile. rdfs comment ccpp structure ccpp structure rdf about ns-ccpp defaults rdfs label xml lang en cc pp default properties rdfs label rdfs subpropertyof rdf resource ns-ccpp defaults rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp component rdfs comment xml lang en same as defaults defined as sub-property for backwards compatibility with uaprof use of this is deprecated use defaults instead. rdfs comment ccpp structure rdf rdf appendix c cc pp attribute vocabulary for print and display the appendix is optional and informative. designers of cc pp applications who need to describe such features are encouraged to use this vocabulary rather than define new terms. this vocabulary is based in part on work done in the ietf media feature registration conneg working group rfc2534 the client attribute names defined below may be used to identify some common features associated with client devices that print or display visual information such as text or graphics. they are described using xml namespace local parts which are further qualified by the xml namespace identifier http www.w3.org 2002 11 08-ccpp-client. these attributes apply to presented capabilities of the client rather than to a specific internal component or aspect of a client system. deviceidentifier value data type string a uri that serves as an identifier of the client device or user agent type. type value data type set of strings a mime content type that can be accepted and presented by a client. similar in principle to the http accept header but specifying a single mime content-type without associated content-type parameters. multiple accepted content-types can be described by a value that is a set of content-type string values. where needed content-type parameters can be expressed by additional cc pp attributes. schema value data type set of strings a uri that identifies a schema that is recognized by the client. the schema may be an xml dtd xml xml schema xmlschema-1 rdf schema rdfschema or any other applicable document structure that can be identified by a uri. a schema value refines any acceptable document type indicated by the type attribute but its meaning must not depend on the value of type. typically this will be used to indicate specific xml dtds or schema that are recognized within text xml or application xml document types. charwidth value data type integer for a text display device type text the width of the character display. for non-proportional font displays the number of display cells. for non-proportional font displays as typically used in east asia the number of half-width display cells ideographic characters and other full-width characters typically occupy two display cells for proportional font displays the width of the display in ens where an en is the typographical unit that is the width of an en-dash letter n charheight value data type integer for a text display device type text the number of lines of text that can be displayed i.e. the display height in characters charset value data type set of strings per rfc2278 for a text handling device a character encoding that can be processed values per mime charset parameter on content-type text note the term charset is a historical misnomer and does not necessarily indicate a repertoire of characters that can be displayed just an encoding. in some cases though the encoding may imply a repertoire. pix-x value data type integer for an image display device type image the number of horizontal pixels that can be displayed. pix-y value data type integer for an image display device type image the number of vertical pixels that can be displayed. color value data type string per rfc2534 for text and image display devices an indication of the color capabilities per rfc 2534 rfc2534 possible values are binary grey limited mapped and full note the color attribute provides a very coarse indication of color capabilities sufficient for a range of simple applications and may be refined by additional attributes where capabilities need to be described in greater detail. client attribute properties instances of ccpp attribute figure c-1 cc pp client vocabulary properties ccpp-client deviceidentifier domain ccpp component range ccpp string ccpp-client type domain ccpp component range rdf bag ccpp-client schema domain ccpp component range ccpp string ccpp-client charwidth domain ccpp component range ccpp integer ccpp-client charheight domain ccpp component range ccpp integer ccpp-client charset domain ccpp component range rdf bag ccpp-client pix-x domain ccpp component range ccpp integer ccpp-client pix-y domain ccpp component range ccpp integer ccpp-client color domain ccpp component range ccpp string schema for client vocabulary schema uri http www.w3.org 2002 11 08-ccpp-client figure c-2 rdf schema for client vocabulary xml version 1.0 doctype rdf rdf entity ns-rdf http www.w3.org 1999 02 22-rdf-syntax-ns# entity ns-rdfs http www.w3.org 2000 01 rdf-schema# entity ns-ccpp http www.w3.org 2002 11 08-ccpp-schema# entity ns-ccpp-client http www.w3.org 2002 11 08-ccpp-client# rdf rdf xmlns rdf ns-rdf xmlns rdfs ns-rdfs xmlns ccpp ns-ccpp xmlns ccpp-client ns-ccpp-client cc pp attribute property definitions these properties represent some common vocabulary that is available for use by applications that need to indicate the common features indicated by these attributes. they serve as an example of how a new attribute vocabulary can be defined for use in a cc pp profile. ccpp attribute rdf about ns-ccpp-client deviceidentifier rdfs label xml lang en client device identifier rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp string rdfs comment xml lang en a uri that identifies the type of client device or user agent. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client type rdfs label xml lang en mime content type rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-rdf bag rdfs comment xml lang en a string containing a mime content-type or a set of such strings indicating the mime content-types that can be handled. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client schema rdfs label xml lang en schema identifier rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp string rdfs comment xml lang en a uri that identifies a language or dtd that is recognized by the client or a set of such uris. specific values of this attribute may be applicable to certain mime content types. for example a uri that is associated with a resource containing an xml dtd will generally be applicable only with text xml or application xml content types. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client charwidth rdfs label xml lang en character display width rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp integer rdfs comment xml lang en for character displays the number of characters that can be rendered across the display. for displays using a proportional font this is the display width in typographical em s. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client charheight rdfs label xml lang en character display height rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp integer rdfs comment xml lang en for character displays the number of rows of characters that can be displayed. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client charset rdfs label xml lang en character set encoding rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-rdf bag rdfs comment xml lang en for character displays the mime charset values that can be handled. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client pix-x rdfs label xml lang en pixel display width rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp integer rdfs comment xml lang en for raster displays the width of the display in pixels. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client pix-y rdfs label xml lang en pixel display height rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp integer rdfs comment xml lang en for raster displays the height of the display in pixels. rdfs comment ccpp attribute ccpp attribute rdf about ns-ccpp-client color rdfs label xml lang en color display capabilities rdfs label rdfs domain rdf resource ns-ccpp component rdfs range rdf resource ns-ccpp string rdfs comment xml lang en for display or print devices an indication of the color rendering capabilities binary indicates bi-level color black-and-white or similar grey indicates gray scale capability capable of sufficient distinct levels for a monochrome photograph. limited indicates a limited number of distinct colors but not with sufficient control for displaying a color photograph e.g. a pen plotter high-light printer or limited display mapped indicates a palettized color display with enough levels and control for coarse display of color photographs. full indicates full color display capability. rdfs comment ccpp attribute rdf rdf appendix d recommendations for creating a vocabulary this appendix in informative. fundamental to the design of cc pp is the idea that new client attributes can be defined as needed through the introduction of new vocabularies. similarly new relationships can be introduced through new vocabulary items though the introduction of these needs a great deal of care to ensure their semantics are adequately and consistently defined. a general principle is that application-neutral cc pp processors should be able to understand and manipulate cc pp relationships without necessarily understanding the cc pp attributes to which they refer. it is recommended that rdf schema be used in conjunction with supporting documentation to define any new cc pp vocabulary. the rest of this section assumes that rdf schema is being used for defining any new vocabulary. the previous appendix is an example of this approach. new vocabularies are introduced through xml namespaces. their relationship to other cc pp vocabulary items can be defined by new rdf schema statements which must necessarily augment the core rdf schema for the cc pp vocabulary given in appendix c of this document d.1 basic format for all vocabulary items all vocabulary items used by cc pp are uris and optional fragment identifiers used as rdf property arc identifiers. relative uri forms should not be used. vocabulary items used for different purposes are generally associated with different xml namespaces. some common rdf base classes are defined so that a schema-aware rdf processor can perform improved uow.acc.tab.analysis of a cc pp profile and separate cc pp profile elements from other statements made about any resource that appear in the same rdf graph as a cc pp profile. all properties used as cc pp attributes must be instances of the class ccpp attribute which itself is a subclass of rdf property. that is the schema defining cc pp attribute properties should define them as instances of ccpp attribute. thus a schema-aware processor can distinguish between properties that are part of a cc pp profile and properties which may be part of an attribute value. each cc pp attribute is associated with a component of a profile e.g. hardwareplatform softwareplatform etc. and is used as a property of an instance of the appropriate component resource. all such component resource types are subclasses of ccpp component. new ccpp component based classes may be introduced for new types of attribute vocabulary but it is strongly recommended that an existing ccpp component type be used if one is applicable. note a simple cc pp parser is not required to be schema-aware and its implementation does not need to have knowledge of the rdf class of any attribute or resource nor is the profile required to carry rdf type information. the discussion of classes and schema-aware processing is in relation to possible future developments of generic rdf processors that may deal with cc pp and other rdf vocabularies and schemas possibly mixed in a single document. for such developments to be possible it is important to take account of class and schema issues in the design of cc pp even though simple cc pp processors need no such awareness. d.2 use of xml namespaces all cc pp attributes must be associated with a fully resolvable namespace identifier uri. relative uris or uris whose interpretation may depend on the context in which they are used should not be used. note it is anticipated that a namespace uri used for cc pp attributes may also be used to identify an rdf or other schema relating to those attributes. however such usage is beyond the scope of this specification. typically new cc pp attributes will be associated with a new namespace which serves among other things to distinguish between possible different uses of the same attribute name local parts. for example a foo and b foo name quite distinct attributes as long as the prefixes a and b are associated with different namespace uris. d.3 principles for defining new attributes d.3.1 if possible reuse existing vocabularies re-using existing vocabularies where applicable leverages work that has already been undertaken and reduces the opportunity for different attribute names that mean almost but not quite the same thing. note that names using different namespaces may be freely mixed in a profile so requiring one additional feature is not a good reason to define a complete new vocabulary. d.3.2 attribute value type and interpretation attribute definitions should indicate the type and interpretation of the associated value. ultimately it is a matter for agreement between generating and receiving applications how any particular attribute value is to be interpreted. where possible for ease of processing and compatibility with other frameworks attribute values should be based on one of the data types described in section 4.1 of this document. where attributes express a quantity associated with a client the units of that quantity should be clearly associated with the attribute definition. there is no separate mechanism for indicating the units in which an attribute value is expressed. d.3.3 interpretation not dependent on other attribute values the meaning of every attribute must be defined in isolation from other attributes no attribute may have a meaning that changes dependent on the value of some other attribute. e.g. an attribute called say page-width must always be expressed using the same units it is not acceptable for this attribute to be expressed in characters for some class of device millimeters for another and inches for another. note that it is still allowable to define an attribute that cannot be interpreted unless some other attribute is also defined the important principle here is that adding a new attribute should not invalidate any knowledge of a client that can be deduced from attributes previously defined. attributes may be defined in layers so that simple capabilities e.g. ability to handle color photographic images can be described by a simple attribute with additional attributes used to provide more detailed or arcane capabilities e.g. exact color matching capabilities d.3.4 attribute naming conventions attributes are rdf properties. the rdf model and syntax document rdf appendix c recommends the use of intercap name styles for rdf property names starting with a lowercase letter and having 2nd and subsequent words within a name started with a capital letter and no internal punctuation we recommend such style be used for cc pp attribute names except where some other form is preferred for compatibility with other systems such as some conneg-compatible print and display attributes described below rdf class names used in cc pp profiles preferably begin with an uppercase letter. d.3.5 attributes should have specific applicability if an attribute is defined with a broad range of applicability problems could arise if a user tries to apply a single attribute to different parts of a profile. an attribute defined very broadly might be subject to different privacy or security concerns when applied in different circumstances. for example having a text-to-voice capability on a mobile phone type of device might be a generally useful feature but a similar feature in a pc might be indicative of a personal disability. thus a combination of text-to-voice capability and using a pc-type platform might suggest private information not necessarily associated with any of the features in isolation. d.4 protocol interactions in some cases there may be overlaps between cc pp vocabularies and a particular protocol with which cc pp is used. e.g. the client vocabulary charset and the http accept-charset header. to some extent the protocol-independent nature of cc pp makes this inevitable to the extent that existing protocols may have limited content negotiation facilities. when designing vocabularies avoid defining features which would be expected to be part of a particular protocol behavior anything that describes or relates to a transfer mechanism rather than what is transferred should be avoided e.g. support for a feature like http persistent connections should not be indicated in a cc pp profile as a it is a protocol-specific feature and b it doesn t really help the origin server to select appropriate content for the client. similarly when defining protocol bindings for using cc pp interaction with existing negotiation mechanisms should be considered and specified. a detailed treatment of this topic is beyond the scope of this specification. appendix e review of applicable vocabularies this appendix is informative. this section introduces some possible sources of properties to be described by cc pp attribute vocabularies. it is not normative and is included to give an idea of some kinds of client feature that cc pp might be used to convey. e.1 ietf media feature registration conneg the ietf has defined an iana registry for media feature tags rfc2506 and a syntax rfc2533 for relational-style expressions using these to describe client and server media features. a small common vocabulary has been defined rfc2534 which has been used as a basis for the cc pp client common vocabulary. the ietf internet fax working group has also created additional registrations to describe the capabilities of fax machines rfc2531 rfc 2506 rfc2506 defines three kinds of media feature tags ietf tree registered feature tags that are simple names which are defined and assigned under the auspices of the ietf standards process. global tree registered feature tags that are simple names preceded by g. these are defined by groups other than the ietf but are registered with iana to ensure uniqueness of these names. unregistered feature tags that consist of u. followed by a slightly restricted form of uri. there is currently a proposal to create a urn namespace for iana registries. this would create a mechanism to allow iana-registered feature tags to be used directly as uris in cc pp expressions. unregistered feature tags may be used in cc pp expressions by stripping off the leading u. and taking the resulting uri. all media feature tags and values can be expressed in cc pp but not all cc pp profiles can be expressed as media feature tags and values. in particular cc pp text values are case sensitive whereas some media feature values are case insensitive. media feature values can be mapped to cc pp text values by applying a case-normalization convention e.g. convert to lowercase this version of cc pp does not have mechanisms matching those in the ietf media feature framework which can be used within cc pp to state capabilities in terms of comparisons with fixed values e.g. pix-x 640 and attribute values that appear in certain combinations e.g. pix-x 640 and pix-y 480 or pix-x 800 and pix-y 600 future work may define such mechanisms. e.2 wap uaprof uaprof uaprof is a wap forum specification that is designed to allow wireless mobile devices to declare their capabilities to data servers and other network components. the design of uaprof is already based on rdf. as such its vocabulary elements use the same basic format that is used for cc pp. the cc pp model follows uaprof in that each user agent property is defined as belonging to one of a small number of components each of which corresponds to an aspect of a user agent device e.g. hardware platform software platform wap characteristics browser user agent network characteristics although its rdf schema is more prescriptive regarding class and property usage than uaprof the design of cc pp is backwards compatible. the goal is that valid uaprof profiles are also valid cc pp profiles however not all cc pp profiles are necessarily valid uaprof profiles. e.3 tiff tiff is a raster image encapsulation file format developed and maintained by adobe systems tiff it is also the basis for the standard file format for internet fax rfc2301 as well as pixel-based image data in a variety of coding and compression formats tiff supports a wide range of options for different kinds of image-related information. these options might be candidate cc pp attributes. many of the tiff properties relating to image handling capabilities have already been defined as tags in the conneg space as part of the internet fax work rfc2531 these might best be referenced using uris based on their conneg tag names. e.4 wave wave is an encapsulation format for audio data developed and maintained by microsoft multimedia there is a registry of wave-supported audio codecs that might be used as cc pp attributes rfc2361 ietf work in progress for voice messaging vpim ivm could create ietf media feature registry tags that are usable by cc pp profiles through the same mechanisms described in section e.1 above. e.5 mpeg-4 mpeg-4 is an encapsulation format for video data possibly combined with audio data developed and maintained by the iso mpeg working group mpeg e.6 mpeg-7 mpeg-7 is a metadata format for information associated with image video audio and other data currently in development by the iso mpeg working group mpeg-7 e.7 pwg the printer working group defines attributes and capabilities applicable to printing devices pwg some of this work is incorporated into the ietf internet printing protocol ipp rfc2566 e.8 salutation salutation is a protocol and identification scheme for communicating devices mainly in a lan environment developed and maintained by the salutation consortium salutation the device capability identification mechanisms probably include many items that might be used as cc pp attributes. appendix f cc pp applications this appendix is informative. cc pp is a format framework designed to be used in the context of a wider application or operational environment. this specification does not define how to use cc pp with any particular protocol or application. this appendix highlights some other issues that application developers must consider in their designs. many of these issues may be covered by an applicable protocol specification used to convey cc pp profiles. to make effective use of the cc pp framework the operating rules for the wider environment must specify capability exchange protocol trust model vocabulary security mechanisms constraints on allowable attribute value types attribute value processing and or matching rules proxy vocabulary and processing rules for request profile identification additional information to be included with any transmitted resource data uri forms allowed for identifying referenced profile documents e.g. defaults mechanisms for locating and retrieving referenced profile documents interactions with any existing negotiation mechanisms in the host protocol there are a few protocol assumptions built into the design of cc pp. although it is intended to be largely protocol independent some consideration has been given to use of cc pp with http for retrieving web resources. f.1 outline of request processing in http cc pp is envisaged to be used with http in the following fashion. this is not a protocol specification just an indication of the kind of information flows envisaged. defining a protocol to convey cc pp information is a separate effort ccppex figure f-1 http request processing 5 4 client response proxy response origin resource ua request request server 3 data 1 2 v v client client profile request profile defaults local values v proxy proxy profile defaults local values the client sends an http request with an accompanying cc pp client profile. the client profile may contain references to default profiles describing a range of common capabilities for the client concerned e.g. a particular computer operating system browser combination or a particular model of mobile device and values that are variations from the default profile. the http request may pass through a firewall proxy that a imposes constraints on the kinds of content that can be accessed or b can adapt other forms of content to the capabilities of the requesting client. this proxy extends the cc pp profile with a description of these constraints and adaptations and sends this with the http request on to the origin server. the request may pass through several such proxies. the origin server receives the request and interprets the cc pp profile. it selects and or generates content that matches the combined proxy and client capabilities described in the profile. this is sent to the last proxy in the request chain in an http response. if required the proxy applies any content adaptations and any other functions it is designed to perform. the resulting response and content is passed back toward the requesting client. the client receives the http response and presents the content it contains. note there is some overlap between cc pp and the various http accept- headers. a protocol specification for using cc pp with http must indicate how http accept- headers may be used and how they interact with cc pp profiles. f.2 protocol assumptions for proxy behavior the framework for describing proxy behaviors makes some assumptions about the protocol used to convey a cc pp profile the cc pp profile is conveyed in one or more parts each containing a graph fragment which are combined to form a single rdf graph. in addition to the rdf graph the protocol must separately name the rdf resource corresponding to the root of the current request profile. the current operational model is that all cc pp profile interpretation is performed by the origin server and none by the proxies. it may be necessary for the protocol to allow the origin server to provide information with its response that allows proxies to decide whether or not to apply any conversions that they offer e.g. is xhtml-to-wml conversion required or does the client have native xhtml capability note the current operational model noted above does not prohibit proxies from interpreting cc pp profiles. rather it means that the framework for describing proxy behaviors does not require that proxies interpret them. appendix g rdf compatibility this appendix is informative. this cc pp specification is based on resource description framework rdf model and syntax specification rdf a w3c recommendation. that version of rdf does not have explicit datatyping of literals. the rdf specifications have been undergoing revision as this specification is being written. the revised rdf rdf xml syntax specification revised which at the time of writing has not reached recommendation status introduces support for specifying the xml schema datatype of a literal value. this appendix outlines the implications for implementors in making their cc pp implementations compatible with this proposed addition to rdf. it is hoped that a future version of the cc pp specification will propose how explicit datatyping should be used in defining cc pp profiles. g.1 implicit datatyping in this specification a cc pp attribute value contained in a cc pp profile is in rdf revised rdfprimer terminology an rdf plain literal. a cc pp vocabulary schema such as the example in appendix c that is defined in terms of the simple types introduced in the cc pp schema in appendix b can provide additional type information for these attributes. a cc pp profile consumer application may use the vocabulary schema either by directly interpreting the schema data or for known vocabularies by embedding the equivalent information in the application to check the validity of the data provided in a profile and to map the data into programming language data types. g.2 explicit datatyping the revised rdf working draft supports explicit xsd xml schema datatypes datatyping. when explicit datatyping is adopted the cc pp specification could be revised to permit an attribute value in a cc pp profile to be represented as an rdf typed literal. in the xml serialization of an rdf typed literal the type of the literal value is specified as an attribute of the element containing the literal value. in this case a cc pp profile consumer application could use this type information to interpret the cc pp attribute value without requiring access to additional vocabulary schema information. in the future it may be that for backward compatibility a cc pp profile consumer should be able to handle cc pp attributes that use either implicit or explicit datatyping. appendix w revision history 20001218 document created from merge of architecture structure and vocabulary documents. 20001219 move some vocabulary and proxy material from section to into sections 3 and 4. various small edits. 20010109 various editorial fixes. merge appendices dealing with print and display vocabulary. remove some vocabulary source references. add xml examples to many of the rdf graph examples. reorganize material in sections 2 and 3 moving some technical detail to section 3. move discussion of cc pp applications to a new appendix. assign figure numbers. 20010112 more group review editorial comments. fixed some schema errors. moved client schema summary to appendix c. updated uaprof reference and namespace uri. added working group members to acknowledgments. 20010116 more group review editorial comments. added citation of rfc2119. changed some instances of rdf bag to notation in graph descriptions. use ccpp defaults consistently in examples add note about allowing ccpp defaults for compatibility with uaprof. section 2.1.3 added some additional text about references to external defaults. added points for allowed uris and resolution mechanisms in appendix f. figure 3-12 notation change. section 4.1 attempt to further clarify what is required behavior. section 4.3 add paragraph about support of rdf schema. appendix d add text recommending use of rdf schema to define vocabularies. section 3.1.1 add text about use of rdf type properties for ccpp component resources. appendix b remove references to ccpp set and ccpp value. 20010118 validate rdf examples with sirpac w3c online facility and correct errors detected. fix up some internal links. 20010129 add hyperlinked toc courtesy of htmltoc by earl hood 20010223 published as first working draft. 20010315 added last-call section. changed some spelling. published as last-call working working draft. 20010425 fold in review comments for editorial matters. explain use of names for uris in examples. remove unused terms from glossary. 20010510 remove p3p from glossary p3p integration will be discussed in a separate security document. review all examples to use full uris rather than placeholder names and qualify all rdf attributes with namespace prefixes. added cross-reference from section 2.3 to 3.1.4 and 3.1.5 cc pp usage of rdf added note saying why proxy descriptions are not linked directly. added sequence value to data types. remove requirement for an attribute to be unique across all components of a profile. added restriction that a single proxy-behavior must reference a single type of component and that the component type should be specified section 3.2.2 clarify that charset feature really indicates a character encoding. appendix f re-worked to make it clearer that this document does not define an http binding for using cc pp. added xml lang attributes to schemas in appendices b and c. revise interpretation of charwidth to better cater for international characters. 20010511 reference xml schema data types and fix up some minor schema errors. introduce new class ccpp structure to clearly distinguish all cc pp structural properties from attribute properties. editorial fix in relationship to uaprof e.2 20010522 revise text relating to cc pp attributes that are represented by uri strings preferred treatment is as rdf resources rather than literal uri strings section 4.1.1.1 and various examples discussion of graph composition new section 3.1.6 deleted some gratuitous repetition sections 3.1.1 and 3.1.2 20010620 revise all examples to use explicit namespace prefixes for rdf elements and attributes. remove unused ccpp namespace declaration from some examples. 20010704 fix small errors in examples 2-3b and 3-2c. editorial fixes. 20010906 reword text in 3.1.5 describing use of rdf type on ccpp component instance. revise description of charwidth in appendix c to remove some errors with respect to international characters. section 4.1.1.1 added some text indicating that xml conventions must be used for encoding non-ascii characters in uri values per rdf spec section 4.1.2.2 added note that vocabularies that use sequence values should define the significance of the ordering. add text pointing about possible protocol interactions to appendices d f and f.1. checked example of empty description element with rdf validator. 20011102 revise the wording in section 4.1.1.1 about encoding of non-ascii characters in uri values to reference the xml specification errata http www.w3.org xml xml-v10-2e-errata#e26. updated reference xml to cite the errata document. revision to section 4.1.2 introduction text to clarify that arbitrary rdf resources may be used for attribute values though their meaning is not defined here. fix typo. 20020402 add hyperlinks to schema documents. 20020501 added the term xml attributes where necessary to distinguish between cc pp attributes and xml attributes. fixed the local about reference in figure 2-1b. added section hyperlinks where necessary. removed unnecessary angle brackets around namespace identifiers. removed extraneous space from date of working group meeting. removed the proxy hardware and software examples there is no need for a proxy to append its processor or operating system to a cc pp request and using this as an example will cause confusion. removed some remaining instances of the term uri string changed don t reuse existing vocabularies heading to reuse existing vocabularies removed an unnecessarily capitalized defaults from section 3.1.3. fixed the references so they work there was a problem with the square brackets. changed rdf schema to rdf schema where it is used to refer to the w3c specification. 20020502 fixed errors in rdf in figure 1-2 and figure 3-3 identified with w3c rdf validation service. 20020507 updated section 3.1.5 to resolve issue 16. updated section 2.2 to resolve issue 54. added a paragraph about wai to resolve issue 115. 20020520 updated cc pp schema to create datatypes for anyuri string and integer in the cc pp namespace that reference the datatypes in the xml schema. the previous version of the schema just referenced the xml schema datatypes. changed cc pp namespace to http www.w3.org 2002 05 20-ccpp#. 20020715 updated the reference section to distinguish between normative and informative references and use aaaa not nnnn reference label format as per w3c style guide to address issue 181. removed examples using composite literals i.e. changed all instances of display to displaywidth and displayheight to address issue 152. changed example profiles so that rdf about s point to a profile uri rather than a schema uri as this means the component applies to this particular profile instance rather than any device using this particular schema to address issue 153. added some text to section 3.1.1 to address issue 175. inserted figure 3.2b to explain default resolution to address issue 180. 20020717 updated the uaprof url specifically in section 2.2 and added text proposed by art barstow to resolve issue 54. also updated uaprof examples so they use legal uaprof property names. 20020719 removed a remaining instance of the sentence this is one of three properties to describe a proxy behavior. to address issue 37. 20020812 added a sentence to section 3.2 and three additional paragraphs to section 3.2.2 to address issue 182. 20020812 changed a paragraph in section 3.2 to address issue 182. 20020924 removed usage of ccpp resource to resolve issue 31. 20021105 altered text of abstract to indicate proxy vocabulary is optional. altered text of introduction to indicate proxy vocabulary is optional. added a preceding sentence in section 2.1.4 saying proxy support is optional. ditto for section 2.2. moved client-profile request-profile proxy-profile and proxy-behavior from ccpp schema to proxy schema. updated figures b.1 and b.2 and added two new figures b.3 and b.4 to reflect this. due to the data typing decision made by rdf-core concerning interpreting literals changed all instances of xml schema datatypes to cc pp data types. removed the sentence note that where available xml schema datatypes xsdt are used for literal values xmlschema-2 from section b.1. updated uris to 08 november 2002. changed definition of cc pp profile in section 2.1 to a cc pp profile is broadly constructed as a 2-level hierarchy a profile having a number of components and each component having at least one or more attributes. to resolve the concern expressed by the uaprof drafting committee that the cc pp definition of a component is incompatible with uaprof. 20021211 fixed problem with figure 2-3b described in issue 183. clarified meaning of cc pp profile for issue 185. clarified the status of appendices to address issue 189. removed the term cc pp expression from section 2.2 to address issue 191. updated the rdf schema reference to point at the march 2000 candidate recommendation version. fixed uaprof reference to address issue 198. fixed schema in b.3 to address issue 200. updated introductory paragraph to appendix c to address issue 201. added a definition of a cc pp processor to appendix b to address issue 202 and replaced instance of cc pp parser with cc pp processor. 20021213 checked usage of optional and recommended so that instances are capitalized where necessary to address issue 188. 20030203 fixed the use of both http www.w3.org 2002 12 13-ccpp-schema and http www.w3.org 2002 12 13-ccpp as cc pp namespaces. uniformly adopted the use of rdf about in the schemas. 20030212 fixed problem with section 2 in toc. fixed bold in cc pp namespace in section 2.2. fixed grammatical error in section 4.1.2.2. 20030320 added mention of rdf data typing and further diwg work to status section. added mention of compatibility with conneg to section 1. removed use of compound simple types in examples in section 2.1.3. removed section 2.1.4 introduction to proxies section 2.3 rdf primer section 3.2 proxies ensured the document references the rdf specs rdf m&s rdf xml syntax rdf primer rdf schema in appropriate places. promoted section 3.1 subsections to section 3 subsections. removed case-insensitive text from section 4.1.1.2. changed minimum recommended value for integer numbers and corrected the xml schema datatype in section 4.1.1.3. described difficulty of rational numbers in section 4.1.1.4. clarified expressive relationship with conneg in section e.1. 20030728 removed remnants mentioning proxy. added note about rdf primer referencing more recent versions of rdf specs in status section. changed schema url from http www.w3.org 2002 11 08-ccpp to http www.w3.org 2002 11 08-ccpp-schema in section 2.2. added uaprof namespace compatibility for component and defaults in section 3.1 and 3.3. changed html 3.0 to html 3.2 in various examples. removed tokens from section 4.1.1.2 and appendix c. fixed rational number schema in section 4.1.1.4. clarified that multiple occurences of a single attribute within a single component are not allowed in section 4.1.2. added section 5 conformance. changed references to point to dated copies in section 7. removed anyuri from schema in appendices b and c. changed rational datatype to rational in appendix b. added note about case normalization for conneg compatibility in section e.1. added appendix g rdf compatibility. 20030915 various editorial changes and clarifications. added delivery context term to section 1. removed redundant paragraph regarding namespace uris in section 2.2. removed section 4.1.1.1 values described by uris since it should have been removed when anyuri was removed. 