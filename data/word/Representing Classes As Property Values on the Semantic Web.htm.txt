representing classes as property values on the semantic web representing classes as property values on the semantic web w3c working group note 5 april 2005 this version http www.w3.org tr 2005 note-swbp-classes-as-values-20050405 latest version http www.w3.org tr swbp-classes-as-values previous version http www.w3.org tr 2004 wd-swbp-classes-as-values-20040721 editor natasha noy stanford university contributors michael uschold boeing chris welty ibm research also see acknowledgements. copyright 2005 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract this document addresses the issue of using classes as property values in owl and rdf schema. it is often convenient to put a class e.g. animal as a property value e.g. topic or book subject when building an ontology. while owl full and rdf schema do not put any restriction on using classes as property values in owl dl and owl lite most properties cannot have classes as their values. we illustrate the direct approach for representing classes as property values in owl-full and rdf schema. we present various alternative mechanisms for representing the required information in owl dl and owl lite. for each approach we discuss various considerations that the users should keep in mind when choosing the best approach for their purposes. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document is a working group note produced by the ontology engineering and patterns task force in the semantic web best practices and deployment working group part of the w3c semantic web activity. this document is one of a series of documents that is produced by the task force. comments on this document may be sent to public-swbp-wg@w3.org a mailing list with a public archive. publication as a working group note does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. general issue it is often convenient to put a class e.g. animal as a property value e.g. topic or book subject when building an ontology. while owl full owl overview and rdf schema rdfs do not put any restriction on using classes as property values in owl dl and owl lite most properties cannot have classes as their values. use case example suppose we have a set of books about animals and a catalog of these books. we want to annotate each catalog entry with its subject which is a particular species or class of animal that the book is about. further we want to be able to infer that a book about african lions is also a book about lions. for example when retrieving all books about lions from a repository we want books that are annotated as books about african lions to be included in the results. more specifically consider two book examples 1 lions life in the pride which is a book that presents an introduction to lions describing their physical characteristics habitat young food predators and relationship to people and 2 the african lion which describes the physical characteristics habitat and behavior of the african lions. we would like to specify that the first book describes the animal species of lion and the second describes a species of african lion. we also want to retrieve the second book when a query is about lions not just african lions. we consider species of animals to be subjects of the books and would like to use the dublin core property dc subject for this annotation. furthermore we would like to use as our subjects various species from an existing class hierarchy of different animal species. we examine representation of this information in owl and rdf schema and suggest different ways of capturing this information in owl dl and owl lite. one goal of the web publisher is to enable maximum reuse of published information. it will be common on the semantic web to import and reuse other published ontologies. any reuse of existing ontologies on the semantic web in our case a hierarchy of animal species should preserve the original intended semantics in the new context. if the semantics changes other applications already using the ontology may be adversely affected. interoperation with existing applications using this ontology will also be error-prone since there will be two different interpretations of the same ontology some of the patterns that we suggest below change the interpretation of the hierarchy of classes used for property values. we suggest that users take this approach only if they know that no one will be adversely affected by such re-interpretation. other use case scenarios this issue arises in general when we have a hierarchy of classes and would like to use it as a terminology to annotate other classes or individuals. consider using a hierarchy of different genres to annotate music cds or linking classes or individuals in an ontology to the corresponding terms in a standard reference terminology. for example umls is a standard reference terminology for many medical applications. one may want to have a hasdiagnosis relation from an instance of a patient to a class representing a disease indicating the patient was diagnosed with that disease. other use cases for using classes as property values include meta-modeling and semantic interoperability between systems. this note uses a particular example classes as the subjects of books to illustrate a more general representation issue using classes as property values. this note should not be interpreted as a general discussion of how to represent subject hierarchies or terminologies on the semantic web. notations in all the figures below ovals represent classes and rectangles represent individuals. the orange color signifies classes or individuals that are specific to a particular approach. green arrows with green labels are owl annotation properties. we use n3 syntax to represent the examples. approaches approach 1 use classes directly as property values in the first approach we can simply use classes from the subject hierarchy as values for properties in our example as values for the dc subject property we can define a class book to represent all books. for simplicity in the hierarchy of animals we omit classes for other animals such as mammals and felines figure 1 figure 1. using classes directly as property values. here is a definition of an individual a specific book that we are annotating with the corresponding subject for simplicity we assume that each book discusses only one species of animal lionslifeinthepridebook a book rdfs seealso http isbn.nu 0736809643 booktitle lions life in the pride dc subject lion the book the african lion will be represented as theafricanlionbook a book rdfs seealso http isbn.nu 089686328x booktitle the african lion dc subject africanlion and the class africanlion is a subclass of the class lion africanlion a owl class rdfs subclassof lion considerations when choosing approach 1 the resulting ontology is compatible with rdf schema and owl full but it is outside owl dl and owl lite. this approach is probably the most succinct and intuitive among all the approaches proposed here. applications using this representation can directly access the information needed to infer that lion the subject of the lionslifeinthepridebook individual is a subclass of animal and that africanlion the subject of the theafricanlionbook individual is a subclass of lion. if we need to restrict the range of values for the dc subject property then we need to create an additional class for such a restriction. for instance we may want to define a class of all books about animals bookaboutanimals that our animal books will be instances of and we want to restrict the range of values for the dc subject property for the bookaboutanimals class to the class animal and its subclasses. one way to define such restriction is as follows bookaboutanimals a owl class rdfs subclassof book rdfs subclassof a owl class owl unionof a owl restriction owl onproperty dc subject owl hasvalue animal a owl restriction owl onproperty dc subject owl somevaluesfrom a owl restriction owl onproperty rdfs subclassof owl hasvalue animal here we say that the class bookaboutanimals is a subclass of the class book. the class bookaboutanimals is also a subclass of the class of all things that must have either the class animal itself or any class that is a subclass of animal as one of the values of the dc subject property. owl code for approach 1 n3 rdf xml summary of approach 1 this approach is a good one to use if you care about simplicity do not have to be in owl dl and either do not need to limit the range of the dc subject values or do not care that you also need to use classes as subjects to implement this restriction. approach 2 create special instances of the class to be used as property values we can treat the hierarchy of animal species as a hierarchy of subjects create individuals corresponding to all the subjects and use these individuals as values for the dc subject property figure 2 figure 2. using a hierarchy of subjects and a parallel set of subject individuals. thus we will have for example an individual lionsubject that will be an instance of the lion class lionsubject a lion we can then use the lionsubject as the value of the property dc subject for the lionslifeinthepridebook individual lionslifeinthepridebook a book rdfs seealso http isbn.nu 0736809643 booktitle lions life in the pride dc subject lionsubject considerations when choosing approach 2 the resulting ontology is compatible with rdf schema and owl lite and hence owl dl the class lion has an instance that is the subject lion. creating an instance of the lion class to represent a specific lion at the zoo would be inconsistent with this interpretation. therefore we will need to have a different class to represent lions at the zoo. this change has important implications if the hierarchy of animals is not created by us but we imported it from somewhere else. applications will interpret the reference to imported classes according to their original definitions. other ontologies importing the same hierarchy of animals will in fact use the original definition. therefore there may be inconsistency not only in our own interpretation but also when our ontology is integrated with others importing the same resource. this consideration is not a problem when interoperability is not an issue. in this approach there is no explicit direct relation i.e. a relation that a general-purpose reasoner can readily identify between the lionsubject individual defined above and for example an africanlionsubject individual which is an instance of africanlion africanlionsubject a africanlion an application trying to utilize this relation for example to extract books about african lions when asked for books about lions will need to be aware of this specific approach and know to trace back to the corresponding classes their subclasses and respective instances. a general-purpose reasoner will not be able to use this information directly. note however that the individual africanlionsubject is also an instance of the lion class. therefore if we ask for all books where dc subject is an instance of the lion class we will get the books that are annotated with africanlionsubject. there is a maintenance penalty we need to maintain a set of instances for all subjects in addition to the hierarchy of subjects and ensure that the two sets classes representing subjects and corresponding individuals are consistent with each other e.g. that they have the same names etc. however developers can instrument tools that would maintain this consistency automatically. some may consider this approach to be too messy for the simple task at hand defining a range restriction for the dc subject property for the class bookaboutanimals is straightforward. we define a somevaluesfrom restriction that states that some values of the dc subject property are instances of the class animal bookaboutanimals a owl class rdfs subclassof a owl restriction owl somevaluesfrom animal owl onproperty dc subject owl code for approach 2 n3 rdf xml summary of approach 2 this approach results in an owl dl ontology and may be a good one to use if staying in owl dl is important. the approach has a potential disadvantage of having actual subject values be unrelated to one another and hence not allowing a general-purpose reasoner to relate books with a subject lion to books with a subject african lions for example. furthermore if the hierarchy of animals is imported and the source uses the hierarchy to describe actual animals using this approach is inconsistent with this interpretation. you need to maintain consistency between the set of classes representing subjects and the set of corresponding individuals. approach 3 create a parallel hierarchy of instances as property values we can create a single class subject and make all the subjects to be individuals that are instances of this class subject figure 3 lionsubject a subject rdfs seealso lion figure 3. using a property other than rdfs subclassof to organize the subject hierarchy we can use the annotation property rdfs seealso to link the lionsubject individual to the lion class. note that rdfs seealso is an annotation property and hence giving it a value that is a class does not take us out of owl dl. in this approach we are essentially using individuals as surrogates for classes. we can then create explicit relations between different subjects which will re-create the hierarchy for animals that we have in mind. parentsubject a owl transitiveproperty owl objectproperty rdfs domain subject rdfs range subject rdfs seealso http www.w3.org 2004 02 skos core#broader africanlionsubject a subject rdfs seealso africanlion parentsubject lionsubject while we create our own property parentsubject we can also use the corresponding properties from the skos-core 1.0 schema which is an rdf schema for representing thesauri and similar types of knowledge organization systems. so for example parentsubject is similar to skos broader. the skos schema provides a rich vocabulary for handling subject hierarchy with additional properties such as skos narrower skos related and so on. considerations when choosing approach 3 the resulting ontology is compatible with rdf schema and owl lite and hence owl dl however note that rdf schema does not have transitive properties thus we will not be able to express the transitivity of the parentsubject property in rdf schema. most dl reasoners will be able to infer transitive relations between subjects such as the fact that animalsubject is a parentsubject of africanlionsubject. however a dl reasoner will not be able to infer that a book that has lionsubject as the value for dc subject is also about animals. more specialized reasoners may be able to infer this information. the resulting hierarchy of subjects is not related to or dependent on the class hierarchy representing the same topics in this case animals except through an annotation property rdfs seealso. annotation properties however are usually ignored by inference engines. some may consider the approach of having two parallel hierarchies representing essentially the same information to be too complicated and difficult to maintain for the simple task at hand this approach explicitly separates the subject terminology from the corresponding ontology. many consider this separation a good modeling practice the semantics of a subject lion can be different from the semantics of the class of lions. having subjects in a separate hierarchy would allow us to define for example that the subject africa is a parent subject of the subject africanlion. the separation of the subject terminology from the corresponding ontology incurs a serious maintenance penalty we need to maintain a set of instances for all subjects in addition to the hierarchy of subjects. in many applications we may also need to ensure that the two sets classes representing subjects and corresponding individuals and values for the parentsubject property are consistent with each other. however developers can instrument tools that would maintain this consistency automatically. defining a range restriction for the dc subject property for the class bookaboutanimals is straightforward. we restrict the values of the dc subject property to the instances of the class subject bookaboutanimals a owl class rdfs subclassof a owl restriction owl somevaluesfrom subject owl onproperty dc subject owl code for approach 3 n3 rdf xml summary of approach 3 this approach may be a good one to use if staying within owl dl is important. it also allows you to use a dl reasoner to infer transitive relationships between subjects. it does carry the penalty of having two parallel hierarchies. approach 4 create a special restriction in lieu of using a specific value this approach enables us to use a dl reasoner to infer for example that a book that has lion as a subject also has animal as its subject. in this approach we create a new class to represent a class of all books with a particular subject. for example we create a class bookaboutlions to represent all books that have lion as one of their subjects. we then assign a subject to a specific book by making the book an instance of one of these classes instead of explicitly setting a property value for the instance. thus for example the individual lionslifeinthepridebook will be an instance of the class bookaboutlions figure 4 we create similar classes for any subject category of books that we are interested in such as bookaboutanimals bookaboutafricanlions figure 4. using members of a class as values for properties. the key in this pattern is the definition of the new book classes. because these classes represent all the books about a particular subject we include subject in the definition. the following for example is the definition of the class bookaboutlions bookaboutlions a owl class owl equivalentclass a owl class owl intersectionof a owl restriction owl onproperty dc subject owl somevaluesfrom lion book a specific instance of this class lionslifeinthepridebook would then be defined as follows lionslifeinthepridebook a bookaboutlions rdfs seealso http isbn.nu 0736809643 booktitle lions life in the pride the code above says literally that this book instance lionslifeinthepridebook is an instance of a class all of whose members have at least one instance of the class lion as the value for the dc subject property. in owl it is not necessary to create any explicit instances of these classes that we use in the somevaluesfrom restriction e.g. lion above in figure 4 we include these instances in the diagram as if they were explicit and use dotted lines to denote that they may not actually exist. this approach approximates the interpretation that we used in the previous approaches by using unspecified members of a class rather than the class itself as property values figure 4 we define the class bookaboutanimals as a class of books where the subject is some unidentified animal or animals. similarly a bookaboutlions class will be a class of books where a subject is some unidentified lion or lions. a dl reasoner will be able to classify lionslifeinthepridebook as an instance of the class bookaboutanimals. note that there a correspondence between the hierarchy of classes of books on specific subjects such as bookaboutanimals bookaboutlions and bookaboutafricanlions and the classes in the species hierarchy that we use as subjects animal lion africanlion the hierarchy of books essentially parallels the hierarchy of subjects although it does not have to have a book class corresponding to each subjects only the subjects that we are interested in. if the book classes are defined as above a dl reasoner will be able to infer automatically the hierarchy of book classes based on the hierarchy of subjects. there is a variant to this approach in which we merge the two steps into one. instead of creating an explicit named class bookaboutlions and then creating an instance of this class we create the instance and assign its type to be an anonymous class of type owl restriction. in this variant there is no explicitly named class corresponding to bookaboutlions. for example we can define lionslifeinthepridebook as follows lionslifeinthepridebook a book a owl restriction owl onproperty dc subject owl somevaluesfrom lion rdfs seealso http isbn.nu 0736809643 booktitle lions life in the pride considerations when choosing approach 4 the resulting ontology is compatible with owl dl. since this approach uses restrictions which do not have any semantics in rdf schema we cannot use this approach for rdf schema. the interpretation of this pattern is different from interpretations of the other patterns in this note the subject of the book is one or more specific lions individuals in the lion class rather than the lion class itself in this case a book about lions is a book about some lions even if that happens to be all lions. a description logic reasoner will be able to classify automatically the individual lionslifeinthepridebook that has an instance of a lion class as its subject as an instance of both the class bookaboutlions and bookaboutanimals. it will also be able to classify the class bookaboutlions defined above as a subclass of the class bookaboutanimals defined in a similar way this approach is likely to be the easiest approach to use if you would like to employ dl reasoning to classify books based on their subjects. many would consider it more cumbersome to express a simple fact that the subject of a book is lions by creating a new usually anonymous restriction class and making that class to be the type of the book. owl code for approach 4 n3 rdf xml summary of approach 4 this approach can make the most use of dl reasoners. it represents a different interpretation of the subject as being a prototypical instance of a class rather than a whole class of things or a specific subject corresponding to that class. with the understanding that you are using a different interpretation this approach may be a good one to use if using dl reasoners to classify individuals based on their subjects or another property used in its place is important. approach 5 use classes directly as annotation property values another way to stay in owl dl is to use classes as values for annotation properties figure 5 this approach is very similar to approach 1 but it treats dc subject as an annotation property dc subject a owl annotationproperty lionslifeinthepridebook a book rdfs seealso http isbn.nu 0736809643 booktitle lions life in the pride dc subject lion figure 5. using classes as values for annotation properties. considerations when choosing approach 5 in owl dl annotation properties cannot at the same time be defined either object properties or datatype properties. thus if dc subject or another property you want to use is defined elsewhere as an object property or a datatype property it cannot be used as an annotation property. in owl dl annotation properties cannot have any restrictions such as cardinality or domain range restrictions or subproperties. thus if you use this approach you cannot specify that each book should have at least one subject for example or that individuals that are instances of bookaboutanimals must all be subclasses of the animal class. even if the ontology is in owl dl i.e. the annotation properties are used consistent with owl dl restrictions dl reasoners will not use the information in annotation properties for reasoning. thus in order to extract a book about lions when queried for animal books one would need to use special-purpose reasoning that uses annotation properties and can perform reasoning with them. owl code for approach 5 n3 rdf xml summary of approach 5 this approach allows you to use classes directly as property values while staying in owl dl. however the properties that will have classes as values will have to be defined as annotations and therefore cannot have any additional restrictions defined on them and should not be declared as object or datatype properties elsewhere dl reasoners will not use values of annotation properties. references n3 primer getting into rdf and semantic web using n3 http www.w3.org 2000 10 swap primer owl overview owl web ontology language overview deborah l. mcguinness and frank van harmelen editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-features-20040210 latest version available at http www.w3.org tr owl-features owl guide owl web ontology language guide michael k. smith chris welty and deborah l. mcguinness editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-guide-20040210 latest version available at http www.w3.org tr owl-guide owl semantics and abstract syntax owl web ontology language semantics and abstract syntax peter f. patel-schneider patrick hayes and ian horrocks editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-semantics-20040210 latest version available at http www.w3.org tr owl-semantics rdf resource description framework rdf model and syntax specification ora lassila ralph r. swick editors. world wide web consortium recommendation 1999 http www.w3.org tr 1999 rec-rdf-syntax-19990222 latest version available at http www.w3.org tr rec-rdf-syntax rdfs rdf vocabulary description language 1.0 rdf schema dan brickley and r.v. guha editors. w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-schema-20040210 latest version available at http www.w3.org tr rdf-schema rdf semantics rdf semantics pat hayes editor w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-mt-20040210 latest version available at http www.w3.org tr rdf-mt rdf vocabulary rdf vocabulary description language 1.0 rdf schema dan brickley and r. v. guha editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-schema-20040210 latest version available at http www.w3.org tr rdf-schema acknowledgements the editor would like to thank the following working group members for their contributions to this document aldo gangemi pat hayes aditya kalyanpur brian mcbride alan rector bernard vatant. atanas kiryakov peter mika and york sure have also contributed to the document. this document is a product of the ontology engineering and patterns task force of the semantic web best practices and deployment working group. 