owl web ontology language overview owl web ontology language overview w3c recommendation 10 february 2004 new version available owl 2 document status update 12 november 2009 the owl working group has produced a w3c recommendation for a new version of owl which adds features to this 2004 version while remaining compatible. please see owl 2 document overview for an introduction to owl 2 and a guide to the owl 2 document set. this version http www.w3.org tr 2004 rec-owl-features-20040210 latest version http www.w3.org tr owl-features previous version http www.w3.org tr 2003 pr-owl-features-20031215 editors deborah l. mcguinness knowledge systems laboratory stanford university frank van harmelen vrije universiteit amsterdam frank.van.harmelen@cs.vu.nl please refer to the errata for this document which may include some normative corrections. see also translations. copyright 2004 w3c mit ercim keio all rights reserved. w3c liability trademark document use and software licensing rules apply. abstract the owl web ontology language is designed for use by applications that need to process the content of information instead of just presenting information to humans. owl facilitates greater machine interpretability of web content than that supported by xml rdf and rdf schema rdf-s by providing additional vocabulary along with a formal semantics. owl has three increasingly-expressive sublanguages owl lite owl dl and owl full. this document is written for readers who want a first impression of the capabilities of owl. it provides an introduction to owl by informally describing the features of each of the sublanguages of owl. some knowledge of rdf schema is useful for understanding this document but not essential. after this document interested readers may turn to the owl guide for more detailed descriptions and extensive examples on the features of owl. the normative formal definition of owl can be found in the owl semantics and abstract syntax. status of this document this document has been reviewed by w3c members and other interested parties and it has been endorsed by the director as a w3c recommendation. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this is one of six parts of the w3c recommendation for owl the web ontology language. it has been developed by the web ontology working group as part of the w3c semantic web activity activity statement group charter for publication on 10 february 2004. the design of owl expressed in earlier versions of these documents has been widely reviewed and satisfies the working group s technical requirements. the working group has addressed all comments received making changes as necessary. changes to this document since the proposed recommendation version are detailed in the change log. comments are welcome at public-webont-comments@w3.org archive and general discussion of related technology is welcome at www-rdf-logic@w3.org archive a list of implementations is available. the w3c maintains a list of any patent disclosures related to this work. this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr table of contents introduction document roadmap why owl the three sublanguages of owl the structure of this document language synopsis owl lite synopsis owl dl and owl full synopsis language description of owl lite owl lite rdf schema features owl lite equality and inequality owl lite property characteristics owl lite property restrictions owl lite restricted cardinality owl lite class intersection owl datatypes owl lite header information owl lite annotation properties owl lite versioning incremental language description of owl dl and owl full summary references acknowledgements change log 1. introduction this document describes the owl web ontology language. owl is intended to be used when the information contained in documents needs to be processed by applications as opposed to situations where the content only needs to be presented to humans. owl can be used to explicitly represent the meaning of terms in vocabularies and the relationships between those terms. this representation of terms and their interrelationships is called an ontology. owl has more facilities for expressing meaning and semantics than xml rdf and rdf-s and thus owl goes beyond these languages in its ability to represent machine interpretable content on the web. owl is a revision of the daml+oil web ontology language incorporating lessons learned from the design and application of daml+oil. 1.1 document roadmap the owl language is described by a set of documents each fulfilling a different purpose and catering to a different audience. the following provides a brief roadmap for navigating through this set of documents this owl overview gives a simple introduction to owl by providing a language feature listing with very brief feature descriptions the owl guide demonstrates the use of the owl language by providing an extended example. it also provides a glossary of the terminology used in these documents the owl reference gives a systematic and compact but still informally stated description of all the modelling primitives of owl the owl semantics and abstract syntax document is the final and formally stated normative definition of the language the owl web ontology language test cases document contains a large set of test cases for the language the owl use cases and requirements document contains a set of use cases for a web ontology language and compiles a set of requirements for owl. the suggested reading order of the first four documents is as given since they have been listed in increasing degree of technical content. the last two documents complete the documentation set. 1.2 why owl the semantic web is a vision for the future of the web in which information is given explicit meaning making it easier for machines to automatically process and integrate information available on the web. the semantic web will build on xml s ability to define customized tagging schemes and rdf s flexible approach to representing data. the first level above rdf required for the semantic web is an ontology language what can formally describe the meaning of terminology used in web documents. if machines are expected to perform useful reasoning tasks on these documents the language must go beyond the basic semantics of rdf schema. the owl use cases and requirements document provides more details on ontologies motivates the need for a web ontology language in terms of six use cases and formulates design goals requirements and objectives for owl. owl has been designed to meet this need for a web ontology language. owl is part of the growing stack of w3c recommendations related to the semantic web. xml provides a surface syntax for structured documents but imposes no semantic constraints on the meaning of these documents. xml schema is a language for restricting the structure of xml documents and also extends xml with datatypes. rdf is a datamodel for objects resources and relations between them provides a simple semantics for this datamodel and these datamodels can be represented in an xml syntax. rdf schema is a vocabulary for describing properties and classes of rdf resources with a semantics for generalization-hierarchies of such properties and classes. owl adds more vocabulary for describing properties and classes among others relations between classes e.g. disjointness cardinality e.g. exactly one equality richer typing of properties characteristics of properties e.g. symmetry and enumerated classes. 1.3 the three sublanguages of owl owl provides three increasingly expressive sublanguages designed for use by specific communities of implementers and users. owl lite supports those users primarily needing a classification hierarchy and simple constraints. for example while it supports cardinality constraints it only permits cardinality values of 0 or 1. it should be simpler to provide tool support for owl lite than its more expressive relatives and owl lite provides a quick migration path for thesauri and other taxonomies. owl lite also has a lower formal complexity than owl dl see the section on owl lite in the owl reference for further details. owl dl supports those users who want the maximum expressiveness while retaining computational completeness all conclusions are guaranteed to be computable and decidability all computations will finish in finite time owl dl includes all owl language constructs but they can be used only under certain restrictions for example while a class may be a subclass of many classes a class cannot be an instance of another class owl dl is so named due to its correspondence with description logics a field of research that has studied the logics that form the formal foundation of owl. owl full is meant for users who want maximum expressiveness and the syntactic freedom of rdf with no computational guarantees. for example in owl full a class can be treated simultaneously as a collection of individuals and as an individual in its own right. owl full allows an ontology to augment the meaning of the pre-defined rdf or owl vocabulary. it is unlikely that any reasoning software will be able to support complete reasoning for every feature of owl full. each of these sublanguages is an extension of its simpler predecessor both in what can be legally expressed and in what can be validly concluded. the following set of relations hold. their inverses do not. every legal owl lite ontology is a legal owl dl ontology. every legal owl dl ontology is a legal owl full ontology. every valid owl lite conclusion is a valid owl dl conclusion. every valid owl dl conclusion is a valid owl full conclusion. ontology developers adopting owl should consider which sublanguage best suits their needs. the choice between owl lite and owl dl depends on the extent to which users require the more-expressive constructs provided by owl dl. the choice between owl dl and owl full mainly depends on the extent to which users require the meta-modeling facilities of rdf schema e.g. defining classes of classes or attaching properties to classes when using owl full as compared to owl dl reasoning support is less predictable since complete owl full implementations do not currently exist. owl full can be viewed as an extension of rdf while owl lite and owl dl can be viewed as extensions of a restricted view of rdf. every owl lite dl full document is an rdf document and every rdf document is an owl full document but only some rdf documents will be a legal owl lite or owl dl document. because of this some care has to be taken when a user wants to migrate an rdf document to owl. when the expressiveness of owl dl or owl lite is deemed appropriate some precautions have to be taken to ensure that the original rdf document complies with the additional constraints imposed by owl dl and owl lite. among others every uri that is used as a class name must be explicitly asserted to be of type owl class and similarly for properties every individual must be asserted to belong to at least one class even if only owl thing the uri s used for classes properties and individuals must be mutually disjoint. the details of these and other constraints on owl dl and owl lite are explained in appendix e of the owl reference. 1.4 the structure of this document this document first describes the features in owl lite followed by a description of the features that are added in owl dl and owl full owl dl and owl full contain the same features but owl full is more liberal about how these features can be combined 2. language synopsis this section provides a quick index to all the language features for owl lite owl dl and owl full. in this document italicized terms are terms in owl. prefixes of rdf or rdfs are used when terms are already present in rdf or rdf schema. otherwise terms are introduced by owl. thus the term rdfs subpropertyof indicates that subpropertyof is already in the rdfs vocabulary technically the rdfs namespace also the term class is more precisely stated as owl class and is a term introduced by owl. 2.1 owl lite synopsis the list of owl lite language constructs is given below. rdf schema features class thing nothing rdfs subclassof rdf property rdfs subpropertyof rdfs domain rdfs range individual in equality equivalentclass equivalentproperty sameas differentfrom alldifferent distinctmembers property characteristics objectproperty datatypeproperty inverseof transitiveproperty symmetricproperty functionalproperty inversefunctionalproperty property restrictions restriction onproperty allvaluesfrom somevaluesfrom restricted cardinality mincardinality only 0 or 1 maxcardinality only 0 or 1 cardinality only 0 or 1 header information ontology imports class intersection intersectionof versioning versioninfo priorversion backwardcompatiblewith incompatiblewith deprecatedclass deprecatedproperty annotation properties rdfs label rdfs comment rdfs seealso rdfs isdefinedby annotationproperty ontologyproperty datatypes xsd datatypes 2.2 owl dl and full synopsis the list of owl dl and owl full language constructs that are in addition to or expand those of owl lite is given below. class axioms oneof datarange disjointwith equivalentclass applied to class expressions rdfs subclassof applied to class expressions boolean combinations of class expressions unionof complementof intersectionof arbitrary cardinality mincardinality maxcardinality cardinality filler information hasvalue 3. language description of owl lite this section provides an informal description of the owl lite language features. we do not discuss the specific syntax of these features see the owl reference for definitions each language feature is hyperlinked to the appropriate place in the owl guide for more examples and guidance on usage. owl lite uses only some of the owl language features and has more limitations on the use of the features than owl dl or owl full. for example in owl lite classes can only be defined in terms of named superclasses superclasses cannot be arbitrary expressions and only certain kinds of class restrictions can be used. equivalence between classes and subclass relationships between classes are also only allowed between named classes and not between arbitrary class expressions. similarly restrictions in owl lite use only named classes. owl lite also has a limited notion of cardinality the only cardinalities allowed to be explicitly stated are 0 or 1. 3.1 owl lite rdf schema features the following owl lite features related to rdf schema are included. class a class defines a group of individuals that belong together because they share some properties. for example deborah and frank are both members of the class person. classes can be organized in a specialization hierarchy using subclassof. there is a built-in most general class named thing that is the class of all individuals and is a superclass of all owl classes. there is also a built-in most specific class named nothing that is the class that has no instances and a subclass of all owl classes. rdfs subclassof class hierarchies may be created by making one or more statements that a class is a subclass of another class. for example the class person could be stated to be a subclass of the class mammal. from this a reasoner can deduce that if an individual is a person then it is also a mammal. rdf property properties can be used to state relationships between individuals or from individuals to data values. examples of properties include haschild hasrelative hassibling and hasage. the first three can be used to relate an instance of a class person to another instance of the class person and are thus occurences of objectproperty and the last hasage can be used to relate an instance of the class person to an instance of the datatype integer and is thus an occurence of datatypeproperty both owl objectproperty and owl datatypeproperty are subclasses of the rdf class rdf property. rdfs subpropertyof property hierarchies may be created by making one or more statements that a property is a subproperty of one or more other properties. for example hassibling may be stated to be a subproperty of hasrelative. from this a reasoner can deduce that if an individual is related to another by the hassibling property then it is also related to the other by the hasrelative property. rdfs domain a domain of a property limits the individuals to which the property can be applied. if a property relates an individual to another individual and the property has a class as one of its domains then the individual must belong to the class. for example the property haschild may be stated to have the domain of mammal. from this a reasoner can deduce that if frank haschild anna then frank must be a mammal. note that rdfs domain is called a global restriction since the restriction is stated on the property and not just on the property when it is associated with a particular class. see the discussion below on property restrictions for more information. rdfs range the range of a property limits the individuals that the property may have as its value. if a property relates an individual to another individual and the property has a class as its range then the other individual must belong to the range class. for example the property haschild may be stated to have the range of mammal. from this a reasoner can deduce that if louise is related to deborah by the haschild property i.e. deborah is the child of louise then deborah is a mammal. range is also a global restriction as is domain above. again see the discussion below on local restrictions e.g. allvaluesfrom for more information. individual individuals are instances of classes and properties may be used to relate one individual to another. for example an individual named deborah may be described as an instance of the class person and the property hasemployer may be used to relate the individual deborah to the individual stanforduniversity. 3.2 owl lite equality and inequality the following owl lite features are related to equality or inequality. equivalentclass two classes may be stated to be equivalent. equivalent classes have the same instances. equality can be used to create synonymous classes. for example car can be stated to be equivalentclass to automobile. from this a reasoner can deduce that any individual that is an instance of car is also an instance of automobile and vice versa. equivalentproperty two properties may be stated to be equivalent. equivalent properties relate one individual to the same set of other individuals. equality may be used to create synonymous properties. for example hasleader may be stated to be the equivalentproperty to hashead. from this a reasoner can deduce that if x is related to y by the property hasleader x is also related to y by the property hashead and vice versa. a reasoner can also deduce that hasleader is a subproperty of hashead and hashead is a subproperty of hasleader. sameas two individuals may be stated to be the same. these constructs may be used to create a number of different names that refer to the same individual. for example the individual deborah may be stated to be the same individual as deborahmcguinness. differentfrom an individual may be stated to be different from other individuals. for example the individual frank may be stated to be different from the individuals deborah and jim. thus if the individuals frank and deborah are both values for a property that is stated to be functional thus the property has at most one value then there is a contradiction. explicitly stating that individuals are different can be important in when using languages such as owl and rdf that do not assume that individuals have one and only one name. for example with no additional information a reasoner will not deduce that frank and deborah refer to distinct individuals. alldifferent a number of individuals may be stated to be mutually distinct in one alldifferent statement. for example frank deborah and jim could be stated to be mutually distinct using the alldifferent construct. unlike the differentfrom statement above this would also enforce that jim and deborah are distinct not just that frank is distinct from deborah and frank is distinct from jim the alldifferent construct is particularly useful when there are sets of distinct objects and when modelers are interested in enforcing the unique names assumption within those sets of objects. it is used in conjunction with distinctmembers to state that all members of a list are distinct and pairwise disjoint. 3.3 owl lite property characteristics there are special identifiers in owl lite that are used to provide information concerning properties and their values. the distinction between objectproperty and datatypeproperty is mentioned above in the property description. inverseof one property may be stated to be the inverse of another property. if the property p1 is stated to be the inverse of the property p2 then if x is related to y by the p2 property then y is related to x by the p1 property. for example if haschild is the inverse of hasparent and deborah hasparent louise then a reasoner can deduce that louise haschild deborah. transitiveproperty properties may be stated to be transitive. if a property is transitive then if the pair x y is an instance of the transitive property p and the pair y z is an instance of p then the pair x z is also an instance of p. for example if ancestor is stated to be transitive and if sara is an ancestor of louise i.e. sara louise is an instance of the property ancestor and louise is an ancestor of deborah i.e. louise deborah is an instance of the property ancestor then a reasoner can deduce that sara is an ancestor of deborah i.e. sara deborah is an instance of the property ancestor owl lite and owl dl impose the side condition that transitive properties and their superproperties cannot have a maxcardinality 1 restriction. without this side-condition owl lite and owl dl would become undecidable languages. see the property axiom section of the owl semantics and abstract syntax document for more information. symmetricproperty properties may be stated to be symmetric. if a property is symmetric then if the pair x y is an instance of the symmetric property p then the pair y x is also an instance of p. for example friend may be stated to be a symmetric property. then a reasoner that is given that frank is a friend of deborah can deduce that deborah is a friend of frank. functionalproperty properties may be stated to have a unique value. if a property is a functionalproperty then it has no more than one value for each individual it may have no values for an individual this characteristic has been referred to as having a unique property. functionalproperty is shorthand for stating that the property s minimum cardinality is zero and its maximum cardinality is 1. for example hasprimaryemployer may be stated to be a functionalproperty. from this a reasoner may deduce that no individual may have more than one primary employer. this does not imply that every person must have at least one primary employer however. inversefunctionalproperty properties may be stated to be inverse functional. if a property is inverse functional then the inverse of the property is functional. thus the inverse of the property has at most one value for each individual. this characteristic has also been referred to as an unambiguous property. for example hasussocialsecuritynumber a unique identifier for united states residents may be stated to be inverse functional or unambiguous the inverse of this property which may be referred to as isthesocialsecuritynumberfor has at most one value for any individual in the class of social security numbers. thus any one person s social security number is the only value for their isthesocialsecuritynumberfor property. from this a reasoner can deduce that no two different individual instances of person have the identical us social security number. also a reasoner can deduce that if two instances of person have the same social security number then those two instances refer to the same individual. 3.4 owl lite property restrictions owl lite allows restrictions to be placed on how properties can be used by instances of a class. these type and the cardinality restrictions in the next subsection are used within the context of an owl restriction. the owl onproperty element indicates the restricted property. the following two restrictions limit which values can be used while the next section s restrictions limit how many values can be used. allvaluesfrom the restriction allvaluesfrom is stated on a property with respect to a class. it means that this property on this particular class has a local range restriction associated with it. thus if an instance of the class is related by the property to a second individual then the second individual can be inferred to be an instance of the local range restriction class. for example the class person may have a property called hasdaughter restricted to have allvaluesfrom the class woman. this means that if an individual person louise is related by the property hasdaughter to the individual deborah then from this a reasoner can deduce that deborah is an instance of the class woman. this restriction allows the property hasdaughter to be used with other classes such as the class cat and have an appropriate value restriction associated with the use of the property on that class. in this case hasdaughter would have the local range restriction of cat when associated with the class cat and would have the local range restriction person when associated with the class person. note that a reasoner can not deduce from an allvaluesfrom restriction alone that there actually is at least one value for the property. somevaluesfrom the restriction somevaluesfrom is stated on a property with respect to a class. a particular class may have a restriction on a property that at least one value for that property is of a certain type. for example the class semanticwebpaper may have a somevaluesfrom restriction on the haskeyword property that states that some value for the haskeyword property should be an instance of the class semanticwebtopic. this allows for the option of having multiple keywords and as long as one or more is an instance of the class semanticwebtopic then the paper would be consistent with the somevaluesfrom restriction. unlike allvaluesfrom somevaluesfrom does not restrict all the values of the property to be instances of the same class. if mypaper is an instance of the semanticwebpaper class then mypaper is related by the haskeyword property to at least one instance of the semanticwebtopic class. note that a reasoner can not deduce as it could with allvaluesfrom restrictions that all values of haskeyword are instances of the semanticwebtopic class 3.5 owl lite restricted cardinality owl lite includes a limited form of cardinality restrictions. owl and owl lite cardinality restrictions are referred to as local restrictions since they are stated on properties with respect to a particular class. that is the restrictions constrain the cardinality of that property on instances of that class. owl lite cardinality restrictions are limited because they only allow statements concerning cardinalities of value 0 or 1 they do not allow arbitrary values for cardinality as is the case in owl dl and owl full mincardinality cardinality is stated on a property with respect to a particular class. if a mincardinality of 1 is stated on a property with respect to a class then any instance of that class will be related to at least one individual by that property. this restriction is another way of saying that the property is required to have a value for all instances of the class. for example the class person would not have any minimum cardinality restrictions stated on a hasoffspring property since not all persons have offspring. the class parent however would have a minimum cardinality of 1 on the hasoffspring property. if a reasoner knows that louise is a person then nothing can be deduced about a minimum cardinality for her hasoffspring property. once it is discovered that louise is an instance of parent then a reasoner can deduce that louise is related to at least one individual by the hasoffspring property. from this information alone a reasoner can not deduce any maximum number of offspring for individual instances of the class parent. in owl lite the only minimum cardinalities allowed are 0 or 1. a minimum cardinality of zero on a property just states in the absence of any more specific information that the property is optional with respect to a class. for example the property hasoffspring may have a minimum cardinality of zero on the class person while it is stated to have the more specific information of minimum cardinality of one on the class parent maxcardinality cardinality is stated on a property with respect to a particular class. if a maxcardinality of 1 is stated on a property with respect to a class then any instance of that class will be related to at most one individual by that property. a maxcardinality 1 restriction is sometimes called a functional or unique property. for example the property hasregisteredvotingstate on the class unitedstatescitizens may have a maximum cardinality of one because people are only allowed to vote in only one state from this a reasoner can deduce that individual instances of the class uscitizens may not be related to two or more distinct individuals through the hasregisteredvotingstate property. from a maximum cardinality one restriction alone a reasoner can not deduce a minimum cardinality of 1. it may be useful to state that certain classes have no values for a particular property. for example instances of the class unmarriedperson should not be related to any individuals by the property hasspouse. this situation is represented by a maximum cardinality of zero on the hasspouse property on the class unmarriedperson. cardinality cardinality is provided as a convenience when it is useful to state that a property on a class has both mincardinality 0 and maxcardinality 0 or both mincardinality 1 and maxcardinality 1. for example the class person has exactly one value for the property hasbirthmother. from this a reasoner can deduce that no two distinct individual instances of the class mother may be values for the hasbirthmother property of the same person. alternate namings for these restricted forms of cardinality were discussed. current recommendations are to include any such names in a front end system. more on this topic is available on the publicly available webont mail archives with the most relevant message at http lists.w3.org archives public www-webont-wg 2002oct 0063.html. 3.6 owl lite class intersection owl lite contains an intersection constructor but limits its usage. intersectionof owl lite allows intersections of named classes and restrictions. for example the class employedperson can be described as the intersectionof person and employedthings which could be defined as things that have a minimum cardinality of 1 on the hasemployer property from this a reasoner may deduce that any particular employedperson has at least one employer. 3.7 owl datatypes owl uses the rdf mechanisms for data values. see the owl guide section on datatypes for a more detailed description of the built-in owl datatypes taken largely from the xml schema datatypes. 3.8 owl lite header information owl lite supports notions of ontology inclusion and relationships and attaching information to ontologies. see the owl reference for details and the owl guide for examples. 3.9 owl lite annotation properties owl lite allows annotations on classes properties individuals and ontology headers. the use of these annotations is subject to certain restrictions. see the section on annotations in the owl reference for details. 3.10 owl lite versioning rdf already has a small vocabulary for describing versioning information. owl significantly extends this vocabulary. see the owl reference for further details. 4. incremental language description of owl dl and owl full both owl dl and owl full use the same vocabulary although owl dl is subject to some restrictions. roughly owl dl requires type separation a class can not also be an individual or property a property can not also be an individual or class this implies that restrictions cannot be applied to the language elements of owl itself something that is allowed in owl full furthermore owl dl requires that properties are either objectproperties or datatypeproperties datatypeproperties are relations between instances of classes and rdf literals and xml schema datatypes while objectproperties are relations between instances of two classes. the owl semantics and abstract syntax document explains the distinctions and limitations. we describe the owl dl and owl full vocabulary that extends the constructions of owl lite below. oneof enumerated classes classes can be described by enumeration of the individuals that make up the class. the members of the class are exactly the set of enumerated individuals no more no less. for example the class of daysoftheweek can be described by simply enumerating the individuals sunday monday tuesday wednesday thursday friday saturday. from this a reasoner can deduce the maximum cardinality 7 of any property that has daysoftheweek as its allvaluesfrom restriction. hasvalue property values a property can be required to have a certain individual as a value also sometimes referred to as property values for example instances of the class of dutchcitizens can be characterized as those people that have thenetherlands as a value of their nationality. the nationality value thenetherlands is an instance of the class of nationalities disjointwith classes may be stated to be disjoint from each other. for example man and woman can be stated to be disjoint classes. from this disjointwith statement a reasoner can deduce an inconsistency when an individual is stated to be an instance of both and similarly a reasoner can deduce that if a is an instance of man then a is not an instance of woman. unionof complementof intersectionof boolean combinations owl dl and owl full allow arbitrary boolean combinations of classes and restrictions unionof complementof and intersectionof. for example using unionof we can state that a class contains things that are either uscitizens or dutchcitizens. using complementof we could state that children are not seniorcitizens. i.e. the class children is a subclass of the complement of seniorcitizens citizenship of the european union could be described as the union of the citizenship of all member states. mincardinality maxcardinality cardinality full cardinality while in owl lite cardinalities are restricted to at least at most or exactly 1 or 0 full owl allows cardinality statements for arbitrary non-negative integers. for example the class of dinks dual income no kids would restrict the cardinality of the property hasincome to a minimum cardinality of two while the property haschild would have to be restricted to cardinality 0 complex classes in many constructs owl lite restricts the syntax to single class names e.g. in subclassof or equivalentclass statements owl full extends this restriction to allow arbitrarily complex class descriptions consisting of enumerated classes property restrictions and boolean combinations. also owl full allows classes to be used as instances and owl dl and owl lite do not for more on this topic see the design for use section of the guide document. 5. summary this document provides an overview of the web ontology language by providing a brief introduction to why one might need a web ontology language and how owl fits in with related w3c languages. it also provides a brief description of the three owl sublanguages owl lite owl dl and owl full along with a feature synopsis for each of the languages. this document is an update to the feature synopsis document. it provides simple descriptions of the constructs along with simple examples. it references the owl reference document the owl guide and the owl semantics and abstract syntax document for more details. previous versions december 15 2003 september 5 2003 august 18 2003 july 30 2003 may 1 2003 march 20 2003 january 2 2003 july 29 2002 july 8 2002 june 23 2002 may 26 2002 and may 15 2002 of this document provide the historical view of the evolution of owl lite and the issues discussed in its evolution. references owl guide owl web ontology language guide michael k. smith chris welty and deborah l. mcguinness editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-guide-20040210 latest version available at http www.w3.org tr owl-guide owl reference owl web ontology language reference mike dean and guus schreiber editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-ref-20040210 latest version available at http www.w3.org tr owl-ref owl abstract syntax and semantics owl web ontology language semantics and abstract syntax peter f. patel-schneider pat hayes and ian horrocks editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-semantics-20040210 latest version available at http www.w3.org tr owl-semantics owl test owl web ontology language test cases jeremy j. carroll and jos de roo editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-owl-test-20040210 latest version available at http www.w3.org tr owl-test owl requirements owl web ontology language use cases and requirements jeff heflin editor w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-webont-req-20040210 latest version available at http www.w3.org tr webont-req owl issues web ontology issue status. michael k. smith ed. 1 november 2003. daml+oil reference daml+oil reference description dan connolly frank van harmelen ian horrocks deborah l. mcguinness peter f. patel-schneider and lynn andrea stein. w3c note 18 december 2001. xml extensible markup language xml xml schema xml schema xml-schema2 xml schema part 2 datatypes w3c recommendation world wide web consortium 2 may 2001. rdf xml syntax rdf xml syntax specification revised dave beckett editor w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-syntax-grammar-20040210 latest version available at http www.w3.org tr rdf-syntax-grammar rdf concepts resource description framework rdf concepts and abstract syntax graham klyne and jeremy j. carroll editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-concepts-20040210 latest version available at http www.w3.org tr rdf-concepts rdf schema rdf vocabulary description language 1.0 rdf schema dan brickley and r. v. guha editors w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-schema-20040210 latest version available at http www.w3.org tr rdf-schema rdf semantics rdf semantics patrick hayes editor w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-mt-20040210 latest version available at http www.w3.org tr rdf-mt description logics the description logic handbook. franz baader diego calvanese deborah mcguinness daniele nardi peter patel-schneider editors. cambridge university press 2003 and description logics home page. acknowledgements this document is the result of extensive discussions within the web ontology working group as a whole. the participants in this working group included yasser alsafadi jean-fran ois baget james barnette sean bechhofer jonathan borden frederik brysse stephen buswell jeremy carroll dan connolly peter crowther jonathan dale jos de roo david de roure mike dean larry eshelman j r me euzenat tim finin nicholas gibbins sandro hawke patrick hayes jeff heflin ziv hellman james hendler bernard horan masahiro hori ian horrocks jane hunter francesco iannuzzelli r diger klein natasha kravtsova ora lassila massimo marchiori deborah mcguinness enrico motta leo obrst mehrdad omidvari martin pike marwan sabbouh guus schreiber noboru shimizu michael sintek michael k. smith john stanton lynn andrea stein herman ter horst david trastour frank van harmelen bernard vatant raphael volz evan wallace christopher welty charles white and john yanosy. change log since last call release added owl nothing to owl lite. added pointer to last call document under title changed all links to owl-absyn to owl-semantics incorporated lee lacy s grammatical comments from public-webont-comments dated april 21 2003. incorporated lee lacy s other comments annotation properties version properties and other missing tags in 2.2 which got reorganised as a result changed hasoffspring example to hasdaughter request of morten frederiksen incorporated all lasilla s comment including replacing machine readability by machine interpretability and various typo s. added sentence on lower complexity class of owl lite as proposed by jim hendler added first sentence to section 1 after sandro hawke s comment restored link to style file added link to test document and may 1 version added references section changed back to relative references to sections changed links to http www.w3.org tr xx from previous versions with updates later to tr 2003 cr-xx-20030818 change log since candidate recommendation added change log since candidate recommendation. deleted control ms at the end of all lines. incorporated jeff rafter s public webont comments. updated status document links date of publication etc. according to pr email from chair. change log since proposed recommendation two broken links fixed w3c icon was referenced by referring to local w3c expansion src owl web ontology language overview_files as was gif for author. added full expansion to w3c icon http www.w3.org icons w3c_home and email gif http www.w3.org 2001 sw webont guide-src email.deborah.mcguinness.gif removed control ms at the end of every line introduced with new version transfer. added links to previous version in december 2003. updated document taking lee lacy s comments dated january 12 2004. comments mostly small editorial changes cell spacing change of 30 to 27 in table included benjamin nowack s editorial comments. updated reference format. 