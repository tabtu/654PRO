offline web applications offline web applications w3c working group note 30 may 2008 this version http www.w3.org tr 2008 note-offline-webapps-20080530 latest version http www.w3.org tr offline-webapps editors anne van kesteren opera software asa annevk@opera.com ian hickson google inc. copyright 2008 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract html 5 contains several features that address the challenge of building web applications that work while offline. this document highlights these features sql offline application caching apis as well as online offline events status and the localstorage api from html 5 and provides brief tutorials on how these features might be used to create web applications that work offline. html5 status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr offline web applications is a working group note produced by the html working group part of the html activity. comments are welcome on the public-html-comments@w3.org mailing list which is publicly archived. publication as a working group note does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. the group does not expect this document to become a w3c recommendation. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 2. sql 3. offline application caching apis 4. related apis references acknowledgments 1. introduction users of typical online web applications are only able to use the applications while they have a connection to the internet. when they go offline they can no longer check their e-mail browse their calendar appointments or prepare presentations with their online tools. meanwhile native applications provide those features e-mail clients cache folders locally calendars store their events locally presentation packages store their data files locally. in addition while offline users are dependent on their http cache to obtain the application at all since they cannot contact the server to get the latest copy. the html 5 specification provides two solutions to this a sql-based database api for storing data locally and an offline application http cache for ensuring applications are available even when the user is not connected to their network. 2. sql the client-side sql database in html 5 enables structured data storage. this can be used to store e-mails locally for an e-mail application or for a cart in an online shopping site. the api to interact with this database is asynchronous which ensures that the user interface doesn t lock up. because database interaction can occur in multiple browser windows at the same time the api supports transactions. to create a database object you use the opendatabase method on the window object. it takes four arguments a database name a database version a display name and an estimated size in bytes of the data to be stored in the database. for instance var db opendatabase notes the example notes app 1048576 now on this database we can use the transaction method. the transaction method takes one to three arguments a transaction callback an error callback and a success callback. the transaction callback gets passed a sql transaction object on which you can use the executesql method. this method takes from one to four arguments a sql statement arguments a sql statement callback and a sql statement error callback. the sql statement callback gets passed the transaction object and a sql statement result object which gives access to the rows last inserted id et cetera. to complete the infrastructure for the notes application we d add the following code function rendernote row renders the note somewhere function reporterror source message report error function rendernotes db.transaction function tx tx.executesql create table if not exists notes title text body text tx.executesql select from notes function tx rs for var i 0 i rs.rows.length i++ rendernote rs.rows i function insertnote title text db.transaction function tx tx.executesql insert into notes values title text function tx rs function tx error reporterror sql error.message 3. offline application caching apis the mechanism for ensuring web applications are available even when the user is not connected to their network is the manifest attribute on the html element. the attribute takes a uri to a manifest which specifies which files are to be cached. the manifest has a text cache-manifest mime type. a typical file looks like this cache manifest index.html help.html style default.css images logo.png images backgound.png network server.cgi this file specifies several files to cache and then specifies that server.cgi should never be cached so that any attempt to access that file will bypass the cache. the manifest can then be linked to by declaring it in the html application like this doctype html html manifest cache-manifest the server.cgi file would be white-listed put in the network section so that it can be contacted to get updates from the server as in event-source src server.cgi the event-source element is a new feature in html 5 that allows servers to continuously stream updates to a web page. the application cache mechanism also supports a way to opportunistically cache from the server a group of files matching a common prefix with the ability to have a fallback page for rendering those pages when offline. it also provides a way for scripts to add and remove entries from the cache dynamically and a way for applications to atomically update their cache to new files optionally presenting custom ui during the update. 4. related apis in addition to those apis html 5 also defines an online attribute on the navigator object so you can determine whether you are currently online var online navigator.online changes to this attribute are indicated through the online and offline events that are both dispatched on the window object. for simple synchronous storage access html 5 introduces the localstorage attribute on the window object localstorage status idling. references html5 work in progress html 5 i. hickson editor. whatwg 2008. web forms 2.0 i. hickson editor. whatwg october 2006. html 5 i. hickson d. hyatt editors. w3c 2008. web forms 2.0 i. hickson editor. w3c october 2006. acknowledgments the editors would like to thank chris wilson dion almaer james graham julian reschke henri sivonen patrick d. f. ion and philip taylor for their contributions to this document. also thanks to dan connolly for talking us into writing it during the first html wg meeting in boston 