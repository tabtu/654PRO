xpath and xquery functions and operators 3.0 xpath and xquery functions and operators 3.0 w3c recommendation 08 april 2014 this version http www.w3.org tr 2014 rec-xpath-functions-30-20140408 latest version of xpath and xquery functions and operators 3.0 http www.w3.org tr xpath-functions-30 previous versions of xpath and xquery functions and operators 3.0 http www.w3.org tr 2013 pr-xpath-functions-30-20131022 http www.w3.org tr 2013 cr-xpath-functions-30-20130521 http www.w3.org tr 2013 cr-xpath-functions-30-20130108 http www.w3.org tr 2011 wd-xpath-functions-30-20111213 http www.w3.org tr 2011 wd-xpath-functions-30-20110614 http www.w3.org tr 2010 wd-xpath-functions-30-20101214 http www.w3.org tr 2009 wd-xpath-functions-11-20091215 most recent version of xpath and xquery functions and operators 3 http www.w3.org tr xpath-functions-3 most recent recommendation of xpath and xquery functions and operators http www.w3.org tr 2010 rec-xpath-functions-20101214 editor michael kay xsl wg saxonica http www.saxonica.com please check the errata for any errors or issues reported since publication. see also translations. this document is also available in these non-normative formats xml and change markings relative to previous edition. copyright 2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract change markings are relative to the recommendation of 23 january 2007. this document defines constructor functions operators and functions on the datatypes defined in xml schema part 2 datatypes second edition and the datatypes defined in xquery and xpath data model xdm 3.0 it also defines functions and operators on nodes and node sequences as defined in the xquery and xpath data model xdm 3.0 these functions and operators are defined for use in xml path language xpath 3.0 xquery 3.0 an xml query language and xsl transformations xslt version 3.0 and other related xml standards. the signatures and summaries of functions defined in this document are available at http www.w3.org 2005 xpath-functions this is the third version of the specification of this function library. the first version was included as an intrinsic part of the xml path language xpath version 1.0 specification published on 16 november 1999. the second version was published under the title xquery 1.0 and xpath 2.0 functions and operators on 23 january 2007 subsequently revised in a second edition published on 14 december 2010. this third version is the first to carry its own version number which has been set at 3.0 to align with the version numbering for xpath xquery and xslt. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this is one document in a set of six documents that have been progressed to recommendation together xquery 3.0 xqueryx 3.0 xpath 3.0 data model 3.0 functions and operators 3.0 and serialization 3.0 this is a recommendation of the w3c. it was jointly developed by the w3c xml query working group and the w3c xslt working group each of which is part of the xml activity. this recommendation of xpath and xquery functions and operators 3.0 represents the second version of a previous w3c recommendation. this specification is designed to be referenced normatively from other specifications defining a host language for it it is not intended to be implemented outside a host language. the implementability of this specification has been tested in the context of its normative inclusion in host languages defined by the xquery 3.0 and xslt 3.0 expected in 2014 specifications see the xquery 3.0 implementation report and in the future the wgs expect that there will also be a possibly member-only xslt 3.0 implementation report for details. this document incorporates minor changes made against the proposed recommendation of 22 october 2013. changes to this document since the proposed recommendation are detailed in e changes since previous recommendation. please report errors in this document using w3c s public bugzilla system instructions can be found at http www.w3.org xml 2005 04 qt-bugzilla if access to that system is not feasible you may send your comments to the w3c xslt xpath xquery public comments mailing list public-qt-comments@w3.org. it will be very helpful if you include the string fo30 in the subject line of your report whether made in bugzilla or in email. please use multiple bugzilla entries or if necessary multiple email messages if you have more than one comment to make. archives of the comments and responses are available at http lists.w3.org archives public public-qt-comments this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this document was produced by groups operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the xml query working group and also maintains a public list of any patent disclosures made in connection with the deliverables of the xsl working group those pages also include instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. quick contents abs acos add-daytimedurations add-daytimeduration-to-date add-daytimeduration-to-datetime add-daytimeduration-to-time add-yearmonthdurations add-yearmonthduration-to-date add-yearmonthduration-to-datetime adjust-datetime-to-timezone adjust-date-to-timezone adjust-time-to-timezone analyze-string asin atan atan2 available-environment-variables avg base64binary-equal base-uri boolean boolean-equal boolean-greater-than boolean-less-than ceiling codepoint-equal codepoints-to-string collection compare concat concatenate contains cos count current-date current-datetime current-time data date-equal date-greater-than date-less-than datetime datetime-equal datetime-greater-than datetime-less-than day-from-date day-from-datetime days-from-duration daytimeduration-greater-than daytimeduration-less-than deep-equal default-collation distinct-values divide-daytimeduration divide-daytimeduration-by-daytimeduration divide-yearmonthduration divide-yearmonthduration-by-yearmonthduration doc doc-available document-uri duration-equal element-with-id empty encode-for-uri ends-with environment-variable error escape-html-uri exactly-one except exists exp exp10 false filter floor fold-left fold-right for-each for-each-pair format-date format-datetime format-integer format-number format-time function-arity function-lookup function-name gday-equal generate-id gmonthday-equal gmonth-equal gyear-equal gyearmonth-equal has-children head hexbinary-equal hours-from-datetime hours-from-duration hours-from-time id idref implicit-timezone index-of innermost in-scope-prefixes insert-before intersect iri-to-uri is-same-node lang last local-name local-name-from-qname log log10 lower-case matches max min minutes-from-datetime minutes-from-duration minutes-from-time month-from-date month-from-datetime months-from-duration multiply-daytimeduration multiply-yearmonthduration name namespace-uri namespace-uri-for-prefix namespace-uri-from-qname nilled node-after node-before node-name normalize-space normalize-unicode not notation-equal number numeric-add numeric-divide numeric-equal numeric-greater-than numeric-integer-divide numeric-less-than numeric-mod numeric-multiply numeric-subtract numeric-unary-minus numeric-unary-plus one-or-more outermost parse-xml parse-xml-fragment path pi position pow prefix-from-qname qname qname-equal remove replace resolve-qname resolve-uri reverse root round round-half-to-even seconds-from-datetime seconds-from-duration seconds-from-time serialize sin sqrt starts-with static-base-uri string string-join string-length string-to-codepoints subsequence substring substring-after substring-before subtract-dates subtract-datetimes subtract-daytimeduration-from-date subtract-daytimeduration-from-datetime subtract-daytimeduration-from-time subtract-daytimedurations subtract-times subtract-yearmonthduration-from-date subtract-yearmonthduration-from-datetime subtract-yearmonthdurations sum tail tan time-equal time-greater-than time-less-than timezone-from-date timezone-from-datetime timezone-from-time to tokenize trace translate true union unordered unparsed-text unparsed-text-available unparsed-text-lines upper-case uri-collection year-from-date year-from-datetime yearmonthduration-greater-than yearmonthduration-less-than years-from-duration zero-or-one table of contents 1 introduction 1.1 conformance 1.2 namespaces and prefixes 1.3 function overloading 1.4 function signatures and descriptions 1.5 type system 1.6 terminology 1.6.1 strings characters and codepoints 1.6.2 namespaces and uris 1.6.3 conformance terminology 1.6.4 properties of functions 2 accessors 2.1 fn node-name 2.2 fn nilled 2.3 fn string 2.4 fn data 2.5 fn base-uri 2.6 fn document-uri 3 errors and diagnostics 3.1 raising errors 3.1.1 fn error 3.2 diagnostic tracing 3.2.1 fn trace 4 functions and operators on numerics 4.1 numeric types 4.2 arithmetic operators on numeric values 4.2.1 op numeric-add 4.2.2 op numeric-subtract 4.2.3 op numeric-multiply 4.2.4 op numeric-divide 4.2.5 op numeric-integer-divide 4.2.6 op numeric-mod 4.2.7 op numeric-unary-plus 4.2.8 op numeric-unary-minus 4.3 comparison operators on numeric values 4.3.1 op numeric-equal 4.3.2 op numeric-less-than 4.3.3 op numeric-greater-than 4.4 functions on numeric values 4.4.1 fn abs 4.4.2 fn ceiling 4.4.3 fn floor 4.4.4 fn round 4.4.5 fn round-half-to-even 4.5 parsing numbers 4.5.1 fn number 4.6 formatting integers 4.6.1 fn format-integer 4.7 formatting numbers 4.7.1 defining a decimal format 4.7.2 fn format-number 4.7.3 syntax of the picture string 4.7.4 analysing the picture string 4.7.5 formatting the number 4.8 trigonometric and exponential functions 4.8.1 math pi 4.8.2 math exp 4.8.3 math exp10 4.8.4 math log 4.8.5 math log10 4.8.6 math pow 4.8.7 math sqrt 4.8.8 math sin 4.8.9 math cos 4.8.10 math tan 4.8.11 math asin 4.8.12 math acos 4.8.13 math atan 4.8.14 math atan2 5 functions on strings 5.1 string types 5.2 functions to assemble and disassemble strings 5.2.1 fn codepoints-to-string 5.2.2 fn string-to-codepoints 5.3 comparison of strings 5.3.1 collations 5.3.2 the unicode codepoint collation 5.3.3 choosing a collation 5.3.4 fn compare 5.3.5 fn codepoint-equal 5.4 functions on string values 5.4.1 fn concat 5.4.2 fn string-join 5.4.3 fn substring 5.4.4 fn string-length 5.4.5 fn normalize-space 5.4.6 fn normalize-unicode 5.4.7 fn upper-case 5.4.8 fn lower-case 5.4.9 fn translate 5.5 functions based on substring matching 5.5.1 fn contains 5.5.2 fn starts-with 5.5.3 fn ends-with 5.5.4 fn substring-before 5.5.5 fn substring-after 5.6 string functions that use regular expressions 5.6.1 regular expression syntax 5.6.2 fn matches 5.6.3 fn replace 5.6.4 fn tokenize 5.6.5 fn analyze-string 6 functions that manipulate uris 6.1 fn resolve-uri 6.2 fn encode-for-uri 6.3 fn iri-to-uri 6.4 fn escape-html-uri 7 functions and operators on boolean values 7.1 boolean constant functions 7.1.1 fn true 7.1.2 fn false 7.2 operators on boolean values 7.2.1 op boolean-equal 7.2.2 op boolean-less-than 7.2.3 op boolean-greater-than 7.3 functions on boolean values 7.3.1 fn boolean 7.3.2 fn not 8 functions and operators on durations 8.1 two totally ordered subtypes of duration 8.1.1 xs yearmonthduration 8.1.2 xs daytimeduration 8.2 comparison operators on durations 8.2.1 op yearmonthduration-less-than 8.2.2 op yearmonthduration-greater-than 8.2.3 op daytimeduration-less-than 8.2.4 op daytimeduration-greater-than 8.2.5 op duration-equal 8.3 component extraction functions on durations 8.3.1 fn years-from-duration 8.3.2 fn months-from-duration 8.3.3 fn days-from-duration 8.3.4 fn hours-from-duration 8.3.5 fn minutes-from-duration 8.3.6 fn seconds-from-duration 8.4 arithmetic operators on durations 8.4.1 op add-yearmonthdurations 8.4.2 op subtract-yearmonthdurations 8.4.3 op multiply-yearmonthduration 8.4.4 op divide-yearmonthduration 8.4.5 op divide-yearmonthduration-by-yearmonthduration 8.4.6 op add-daytimedurations 8.4.7 op subtract-daytimedurations 8.4.8 op multiply-daytimeduration 8.4.9 op divide-daytimeduration 8.4.10 op divide-daytimeduration-by-daytimeduration 9 functions and operators on dates and times 9.1 date and time types 9.1.1 limits and precision 9.2 date time datatype values 9.2.1 examples 9.3 constructing a datetime 9.3.1 fn datetime 9.4 comparison operators on duration date and time values 9.4.1 op datetime-equal 9.4.2 op datetime-less-than 9.4.3 op datetime-greater-than 9.4.4 op date-equal 9.4.5 op date-less-than 9.4.6 op date-greater-than 9.4.7 op time-equal 9.4.8 op time-less-than 9.4.9 op time-greater-than 9.4.10 op gyearmonth-equal 9.4.11 op gyear-equal 9.4.12 op gmonthday-equal 9.4.13 op gmonth-equal 9.4.14 op gday-equal 9.5 component extraction functions on dates and times 9.5.1 fn year-from-datetime 9.5.2 fn month-from-datetime 9.5.3 fn day-from-datetime 9.5.4 fn hours-from-datetime 9.5.5 fn minutes-from-datetime 9.5.6 fn seconds-from-datetime 9.5.7 fn timezone-from-datetime 9.5.8 fn year-from-date 9.5.9 fn month-from-date 9.5.10 fn day-from-date 9.5.11 fn timezone-from-date 9.5.12 fn hours-from-time 9.5.13 fn minutes-from-time 9.5.14 fn seconds-from-time 9.5.15 fn timezone-from-time 9.6 timezone adjustment functions on dates and time values 9.6.1 fn adjust-datetime-to-timezone 9.6.2 fn adjust-date-to-timezone 9.6.3 fn adjust-time-to-timezone 9.7 arithmetic operators on durations dates and times 9.7.1 limits and precision 9.7.2 op subtract-datetimes 9.7.3 op subtract-dates 9.7.4 op subtract-times 9.7.5 op add-yearmonthduration-to-datetime 9.7.6 op add-daytimeduration-to-datetime 9.7.7 op subtract-yearmonthduration-from-datetime 9.7.8 op subtract-daytimeduration-from-datetime 9.7.9 op add-yearmonthduration-to-date 9.7.10 op add-daytimeduration-to-date 9.7.11 op subtract-yearmonthduration-from-date 9.7.12 op subtract-daytimeduration-from-date 9.7.13 op add-daytimeduration-to-time 9.7.14 op subtract-daytimeduration-from-time 9.8 formatting dates and times 9.8.1 fn format-datetime 9.8.2 fn format-date 9.8.3 fn format-time 9.8.4 the date time formatting functions 9.8.5 examples of date and time formatting 10 functions related to qnames 10.1 functions to create a qname 10.1.1 fn resolve-qname 10.1.2 fn qname 10.2 functions and operators related to qnames 10.2.1 op qname-equal 10.2.2 fn prefix-from-qname 10.2.3 fn local-name-from-qname 10.2.4 fn namespace-uri-from-qname 10.2.5 fn namespace-uri-for-prefix 10.2.6 fn in-scope-prefixes 11 operators on base64binary and hexbinary 11.1 comparisons of base64binary and hexbinary values 11.1.1 op hexbinary-equal 11.1.2 op base64binary-equal 12 operators on notation 12.1 op notation-equal 13 functions and operators on nodes 13.1 fn name 13.2 fn local-name 13.3 fn namespace-uri 13.4 fn lang 13.5 op is-same-node 13.6 op node-before 13.7 op node-after 13.8 fn root 13.9 fn path 13.10 fn has-children 13.11 fn innermost 13.12 fn outermost 14 functions and operators on sequences 14.1 general functions and operators on sequences 14.1.1 op concatenate 14.1.2 fn empty 14.1.3 fn exists 14.1.4 fn head 14.1.5 fn tail 14.1.6 fn insert-before 14.1.7 fn remove 14.1.8 fn reverse 14.1.9 fn subsequence 14.1.10 fn unordered 14.2 functions that compare values in sequences 14.2.1 fn distinct-values 14.2.2 fn index-of 14.2.3 fn deep-equal 14.3 functions that test the cardinality of sequences 14.3.1 fn zero-or-one 14.3.2 fn one-or-more 14.3.3 fn exactly-one 14.4 union intersection and difference 14.4.1 op union 14.4.2 op intersect 14.4.3 op except 14.5 aggregate functions 14.5.1 fn count 14.5.2 fn avg 14.5.3 fn max 14.5.4 fn min 14.5.5 fn sum 14.6 functions and operators that generate sequences 14.6.1 op to 14.7 functions on node identifiers 14.7.1 fn id 14.7.2 fn element-with-id 14.7.3 fn idref 14.7.4 fn generate-id 14.8 functions giving access to external information 14.8.1 fn doc 14.8.2 fn doc-available 14.8.3 fn collection 14.8.4 fn uri-collection 14.8.5 fn unparsed-text 14.8.6 fn unparsed-text-lines 14.8.7 fn unparsed-text-available 14.8.8 fn environment-variable 14.8.9 fn available-environment-variables 14.9 parsing and serializing 14.9.1 fn parse-xml 14.9.2 fn parse-xml-fragment 14.9.3 fn serialize 15 context functions 15.1 fn position 15.2 fn last 15.3 fn current-datetime 15.4 fn current-date 15.5 fn current-time 15.6 fn implicit-timezone 15.7 fn default-collation 15.8 fn static-base-uri 16 higher-order functions 16.1 functions on functions 16.1.1 fn function-lookup 16.1.2 fn function-name 16.1.3 fn function-arity 16.2 basic higher-order functions 16.2.1 fn for-each 16.2.2 fn filter 16.2.3 fn fold-left 16.2.4 fn fold-right 16.2.5 fn for-each-pair 17 constructor functions 17.1 constructor functions for xml schema built-in atomic types 17.2 constructor functions for xs qname and xs notation 17.3 constructor functions for xml schema built-in list types 17.4 constructor functions for xml schema built-in union types 17.5 constructor functions for user-defined types 18 casting 18.1 casting from primitive types to primitive types 18.1.1 casting to xs string and xs untypedatomic 18.1.2 casting to numeric types 18.1.3 casting to duration types 18.1.4 casting to date and time types 18.1.5 casting to xs boolean 18.1.6 casting to xs base64binary and xs hexbinary 18.1.7 casting to xs anyuri 18.1.8 casting to xs qname and xs notation 18.1.9 casting to xs entity 18.2 casting from xs string and xs untypedatomic 18.3 casting involving non-primitive types 18.3.1 casting to derived types 18.3.2 casting from derived types to parent types 18.3.3 casting within a branch of the type hierarchy 18.3.4 casting across the type hierarchy 18.3.5 casting to union types 18.3.6 casting to list types appendices a references a.1 normative references a.2 non-normative references b error summary c illustrative user-written functions non-normative c.1 eg if-empty and eg if-absent c.1.1 eg if-empty c.1.2 eg if-absent c.2 union intersection and difference on sequences of values c.2.1 eg value-union c.2.2 eg value-intersect c.2.3 eg value-except c.3 eg index-of-node c.4 eg string-pad c.5 eg distinct-nodes-stable c.6 finding minima and maxima c.6.1 eg highest c.6.2 eg lowest c.7 sorting d checklist of implementation-defined features non-normative e changes since previous recommendation non-normative e.1 substantive changes 15 december 2009 e.2 substantive changes 18 june 2012 e.3 substantive changes candidate recommendation e.4 substantive changes post candidate recommendation e.5 editorial changes e.6 changes since the proposed recommendation f compatibility with previous versions non-normative f.1 compatibility between xpath 2.0 and xpath 1.0 f.2 compatibility between xpath 3.0 and xpath 2.0 1 introduction the purpose of this document is to catalog the functions and operators required for xpath 3.0 xquery 3.0 and xslt 3.0. the exact syntax used to call these functions and operators is specified in xml path language xpath 3.0 xquery 3.0 an xml query language and xsl transformations xslt version 3.0 this document defines constructor functions and functions that take typed values as arguments. some of the functions specify the semantics of operators defined in xml path language xpath 3.0 and xquery 3.0 an xml query language xml schema part 2 datatypes second edition defines a number of primitive and derived datatypes collectively known as built-in datatypes. this document defines functions and operations on these datatypes as well as the datatypes defined in section 2.7 schema information dm30 of the xquery and xpath data model xdm 3.0 these functions and operations are defined for use in xml path language xpath 3.0 xquery 3.0 an xml query language and xsl transformations xslt version 3.0 and related xml standards. this document also defines functions and operators on nodes and node sequences as defined in the xquery and xpath data model xdm 3.0 for use in xml path language xpath 3.0 xquery 3.0 an xml query language and xsl transformations xslt version 3.0 and other related xml standards. schema 1.1 part 2 adds to the data types defined in xml schema part 2 datatypes second edition it introduces a new derived type xs datetimestamp and it incorporates as built-in types the two types xs yearmonthduration and xs daytimeduration which were previously xdm additions to the type system. in addition xsd 1.1 clarifies and updates many aspects of the definitions of the existing data types for example it extends the value space of xs double to allow both positive and negative zero and extends the lexical space to allow inf it modifies the value space of xs name to permit additional unicode characters it allows year zero and disallows leap seconds in xs datetime values and it allows any character string to appear as the value of an xs anyuri item. implementations of this specification may support either xsd 1.0 or xsd 1.1 or both. references to specific sections of some of the above documents are indicated by cross-document links in this document. each such link consists of a pointer to a specific section followed a superscript specifying the linked document. the superscripts have the following meanings xq xquery 3.0 an xml query language xt xsl transformations xslt version 3.0 xp xml path language xpath 3.0 and dm xquery and xpath data model xdm 3.0 1.1 conformance the functions and operators specification is intended primarily as a component that can be used by other specifications. therefore functions and operators relies on specifications that use it such as xml path language xpath 3.0 xsl transformations xslt version 3.0 and xquery 3.0 an xml query language to specify conformance criteria for their respective environments. authors of conformance criteria for the use of the functions and operators should pay particular attention to the following features it is implementation-defined which version of unicode is supported but it is recommended that the most recent version of unicode be used. it is implementation-defined whether the type system is based on xml schema 1.0 or xml schema 1.1. support for xml 1.0 and xml 1.1 by the datatypes used in functions and operators. note the xml schema 1.1 recommendation introduces one new concrete data type xs datetimestamp it also incorporates the types xs daytimeduration xs yearmonthduration and xs anyatomictype which were previously defined as part of xquery and xpath data model xdm 3.0 furthermore xsd 1.1 includes the option of supporting revised definitions of types such as xs ncname based on the rules in xml 1.1 rather than 1.0. in this document text labeled as an example or as a note is provided for explanatory purposes and is not normative. 1.2 namespaces and prefixes the functions and operators defined in this document are contained in one of several namespaces see namespaces in xml and referenced using an xs qname. this document uses conventional prefixes to refer to these namespaces. user-written applications can choose a different prefix to refer to the namespace so long as it is bound to the correct uri. the host language may also define a default namespace for function calls in which case function names in that namespace need not be prefixed at all. in many cases the default namespace will be http www.w3.org 2005 xpath-functions allowing a call on the fn name function for example to be written as name rather than fn name in this document however all example function calls are explicitly prefixed. the uris of the namespaces and the conventional prefixes associated with them are http www.w3.org 2001 xmlschema for constructors associated with xs. the section 17 constructor functions defines constructor functions for the built-in datatypes defined in xml schema part 2 datatypes second edition and in section 2.7 schema information dm30 of xquery and xpath data model xdm 3.0 these datatypes and the corresponding constructor functions are in the xml schema namespace http www.w3.org 2001 xmlschema and are named in this document using the xs prefix. http www.w3.org 2005 xpath-functions for functions associated with fn. the namespace prefix used in this document for most functions that are available to users is fn. http www.w3.org 2005 xpath-functions math for functions associated with math. this namespace is used for some mathematical functions. the namespace prefix used in this document for these functions is math. these functions are available to users in exactly the same way as those in the fn namespace. http www.w3.org 2005 xqt-errors associated with err. there are no functions in this namespace it is used for error codes. this document uses the prefix err to represent the namespace uri http www.w3.org 2005 xqt-errors which is the namespace for all xpath and xquery error codes and messages. this namespace prefix is not predeclared and its use in this document is not normative. note the namespace uri associated with the err prefix is not expected to change from one version of this document to another. the contents of this namespace may be extended to allow additional errors to be returned. http www.w3.org 2010 xslt-xquery-serialization associated with output. there are no functions in this namespace it is used for serialization parameters as described in xslt and xquery serialization 3.0 functions defined with the op prefix are described here to underpin the definitions of the operators in xml path language xpath 3.0 xquery 3.0 an xml query language and xsl transformations xslt version 3.0 these functions are not available directly to users and there is no requirement that implementations should actually provide these functions. for this reason no namespace is associated with the op prefix. for example multiplication is generally associated with the operator but it is described as a function in this document fn numeric-multiply arg1 as numeric arg2 as numeric as numeric 1.3 function overloading in general the specifications named above do not support function overloading in the sense that functions that have multiple signatures with the same name and the same number of parameters are not supported. consequently there are no such overloaded functions in this document except for legacy xml path language xpath version 1.0 functions such as fn string which accepts a single parameter of a variety of types. in addition it should be noted that the functions defined in 4 functions and operators on numerics that accept numeric parameters accept arguments of type xs integer xs decimal xs float or xs double. see 1.4 function signatures and descriptions. operators such as may be overloaded. this document does define some functions with more than one signature with the same name and different number of parameters. user-defined functions with more than one signature with the same name and different number of parameters are also supported. 1.4 function signatures and descriptions each function is defined by specifying its signature a description of the return type and each of the parameters and its semantics. for many functions examples are included to illustrate their use. each function s signature is presented in a form like this fn function-name parameter-name as parameter-type as return-type in this notation function-name in bold-face is the name of the function whose signature is being specified. if the function takes no parameters then the name is followed by an empty parameter list otherwise the name is followed by a parenthesized list of parameter declarations each declaration specifies the static type of the parameter in italics and a descriptive but non-normative name. if there are two or more parameter declarations they are separated by a comma. the return-type also in italics specifies the static type of the value returned by the function. the dynamic type of the value returned by the function is the same as its static type or derived from the static type. all parameter types and return types are specified using the sequencetype notation defined in section 2.5.4 sequencetype syntax xp30. one function fn concat has a variable number of arguments two or more more strictly there is an infinite set of functions having the name fn concat with arity ranging from 2 to infinity. for this special case a single function signature is given with an ellipsis indicating an indefinite number of arguments. in some cases the word numeric is used in function signatures as a shorthand to indicate the four numeric types xs integer xs decimal xs float and xs double. for example a function with the signature fn numeric-function arg as numeric as represents the following four function signatures fn numeric-function arg as xs integer as fn numeric-function arg as xs decimal as fn numeric-function arg as xs float as fn numeric-function arg as xs double as for most functions there is an initial paragraph describing what the function does followed by semantic rules. these rules are meant to be followed in the order that they appear in this document. the function name is a qname as defined in xml schema part 2 datatypes second edition and must adhere to its syntactic conventions. following the precedent set by xml path language xpath version 1.0 function names are generally composed of english words separated by hyphens if a function name contains a xml schema part 2 datatypes second edition datatype name it may have intercapitalized spelling and is used in the function name as such. for example fn timezone-from-datetime. rules for passing parameters to operators are described in the relevant sections of xquery 3.0 an xml query language and xml path language xpath 3.0 for example the rules for passing parameters to arithmetic operators are described in section 3.5 arithmetic expressions xp30. specifically rules for parameters of type xs untypedatomic and the empty sequence are specified in this section. as is customary the parameter type name indicates that the function or operator accepts arguments of that type or types derived from it in that position. this is called subtype substitution see section 2.5.5 sequencetype matching xp30 in addition numeric type instances and instances of type xs anyuri can be promoted to produce an argument of the required type. see section b.1 type promotion xp30 subtype substitution a derived type may substitute for its base type. in particular xs integer may be used where xs decimal is expected. numeric type promotion xs decimal may be promoted to xs float or xs double. promotion to xs double should be done directly not via xs float to avoid loss of precision. anyuri type promotion a value of type xs anyuri can be promoted to the type xs string. some functions accept a single value or the empty sequence as an argument and some may return a single value or the empty sequence. this is indicated in the function signature by following the parameter or return type name with a question mark indicating that either a single value or the empty sequence must appear. see below. fn function-name parameter-name as parameter-type as return-type note that this function signature is different from a signature in which the parameter is omitted. see for example the two signatures for fn string. in the first signature the parameter is omitted and the argument defaults to the context item referred to as in the second signature the argument must be present but may be the empty sequence written as some functions accept a sequence of zero or more values as an argument. this is indicated by following the name of the type of the items in the sequence with the sequence may contain zero or more items of the named type. for example the function below accepts a sequence of xs double and returns a xs double or the empty sequence. fn median arg as xs double as xs double 1.5 type system the diagrams below show how nodes function items primitive simple types and user defined types fit together into a type system. this type system comprises two distinct hierarchies that both include the primitive simple types. in the diagrams connecting lines represent relationships between derived types and the types from which they are derived the arrowheads point toward the type from which they are derived. the dashed line represents relationships not present in this diagram but that appear in one of the other diagrams. dotted lines represent additional relationships that follow an evident pattern. the information that appears in each diagram is recapitulated in tabular form. the xs idrefs xs nmtokens and xs entities types and the user-defined list and union types are special types in that these types are lists or unions rather than types derived by extension or restriction. the first diagram and its corresponding table illustrate the relationship of various item types. item types in the data model form a lattice rather than a hierarchy in the relationship defined by the derived-from a b function some types are derived from more than one other type. examples include functions function xs string as xs int is substitutable for function xs ncname as xs int and also for function xs string as xs decimal and union types a is substitutable for union a b and also for union a c in xdm item types include node types function types and built-in atomic types. the diagram which shows only hierarchic relationships is therefore a simplification of the full model. in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation. item xs anyatomictype function function item as item function item as item function item as item function item item as item node attribute user-defined attribute types comment document user-defined document types element user-defined element types namespace processing-instruction text the next diagram and table illustrate the any type type hierarchy in which all types are derived from distinguished type xs anytype. in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation. xs anytype user-defined complex types xs untyped xs anysimpletype user-defined list and union types xs idrefs xs nmtokens xs entities xs anyatomictype the final diagram and table show all of the atomic types including the primitive simple types and the built-in types derived from the primitive simple types. this includes all the built-in datatypes defined in xml schema part 2 datatypes second edition as well as the two totally ordered subtypes of duration defined in 8.1 two totally ordered subtypes of duration. in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation. xs untypedatomic xs datetime xs datetimestamp xs date xs time xs duration xs yearmonthduration xs daytimeduration xs float xs double xs decimal xs integer xs nonpositiveinteger xs negativeinteger xs long xs int xs short xs byte xs nonnegativeinteger xs unsignedlong xs unsignedint xs unsignedshort xs unsignedbyte xs positiveinteger xs gyearmonth xs gyear xs gmonthday xs gday xs gmonth xs string xs normalizedstring xs token xs language xs nmtoken xs name xs ncname xs id xs idref xs entity xs boolean xs base64binary xs hexbinary xs anyuri xs qname xs notation 1.6 terminology the terminology used to describe the functions and operators on xml schema part 2 datatypes second edition is defined in the body of this specification. the terms defined in this section are used in building those definitions 1.6.1 strings characters and codepoints this document uses the terms string character and codepoint with the following meanings definition a character is an instance of the charxml production of extensible markup language xml 1.0 fifth edition note this definition excludes unicode characters in the surrogate blocks as well as xfffe and xffff while including characters with codepoints greater than xffff which some programming languages treat as two characters. the valid characters are defined by their codepoints and include some whose codepoints have not been assigned by the unicode consortium to any character. definition a string is a sequence of zero or more characters or equivalently a value in the value space of the xs string data type. definition a codepoint is a non-negative integer assigned to a character by the unicode consortium or reserved for future assignment to a character. note the set of codepoints is thus wider than the set of characters. this specification spells codepoint as one word the unicode specification spells it as code point equivalent terms found in other specifications are character number or code position see character model for the world wide web 1.0 fundamentals because these terms appear so frequently they are hyperlinked to the definition only when there is a particular desire to draw the reader s attention to the definition the absence of a hyperlink does not mean that the term is being used in some other sense. it is implementation-defined which version of the unicode standard is supported but it is recommended that the most recent version of unicode be used. unless explicitly stated the xs string values returned by the functions in this document are not normalized in the sense of character model for the world wide web 1.0 fundamentals notes in functions that involve character counting such as fn substring fn string-length and fn translate what is counted is the number of xml characters in the string or equivalently the number of unicode codepoints some implementations may represent a codepoint above xffff using two 16-bit values known as a surrogate pair. a surrogate pair counts as one character not two. 1.6.2 namespaces and uris this document uses the phrase namespace uri to identify the concept identified in namespaces in xml as namespace name and the phrase local name to identify the concept identified in namespaces in xml as local part it also uses the term expanded-qname defined below. definition an expanded-qname is a pair of values consisting of a namespace uri and a local name. they belong to the value space of the xml schema part 2 datatypes second edition datatype xs qname. when this document refers to xs qname we always mean the value space i.e. a namespace uri local name pair and not the lexical space referring to constructs of the form prefix local-name the term uri is used as follows definition within this specification the term uri refers to universal resource identifiers as defined in rfc 3986 and extended in rfc 3987 with a new name iri. the term uri reference unless otherwise stated refers to a string in the lexical space of the xs anyuri datatype as defined in xml schema part 2 datatypes second edition note note that this means in practice that where this specification requires a uri reference an iri as defined in rfc 3987 will be accepted provided that other relevant specifications also permit an iri. the term uri has been retained in preference to iri to avoid introducing new names for concepts such as base uri that are defined or referenced across the whole family of xml specifications. note also that the definition of xs anyuri is a wider definition than the definition in rfc 3987 for example it does not require non-ascii characters to be escaped. 1.6.3 conformance terminology definition for compatibility a feature of this specification included to ensure that implementations that use this feature remain compatible with xml path language xpath version 1.0 definition may conforming documents and processors are permitted to but need not behave as described. definition must conforming documents and processors are required to behave as described otherwise they are either non-conformant or else in error. definition implementation-defined possibly differing between implementations but specified and documented by the implementor for each particular implementation. definition implementation-dependent possibly differing between implementations but not specified by this or other w3c specification and not required to be specified by the implementor for any particular implementation. 1.6.4 properties of functions this section is concerned with the question of whether two calls on a function with the same arguments may produce different results. definition two function calls are said to be within the same execution scope if the host environment defines them as such. in xslt any two calls executed during the same transformation are in the same execution scope. in xquery any two calls executed during the evaluation of a top-level expression are in the same execution scope. in other contexts the execution scope is specified by the host environment that invokes the function library. the following definition explains more precisely what it means for two function calls to return the same result definition two values are defined to be identical if they contain the same number of items and the items are pairwise identical. two items are identical if and only if one of the following conditions applies both items are atomic values of precisely the same type and the values are equal as defined using the eq operator using the unicode codepoint collation when comparing strings both items are nodes and represent the same node both items are function items and have the same name or absence of a name arity function signature and closure. note that there is no function or operator defined in the specification that tests whether two function items are identical. some functions produce results that depend not only on their explicit arguments but also on the static and dynamic context. definition a function may have the property of being context-dependent the result of such a function depends on the values of properties in the static and dynamic evaluation context as well as on the actual supplied arguments if any definition a function that is not context-dependent is called context-independent. a function that is context-dependent can be used as a named function reference can be partially applied and can be found using fn function-lookup. the principle in such cases is that the static context used for the function evaluation is taken from the static context of the named function reference partial function application or the call on fn function-lookup and the dynamic context for the function evaluation is taken from the dynamic context of the evaluation of the named function reference partial function application or the call of fn function-lookup. in effect the static and dynamic part of the context thus act as part of the closure of the function item. context-dependent functions fall into a number of categories the functions fn current-date fn current-datetime fn current-time fn implicit-timezone fn adjust-date-to-timezone fn adjust-datetime-to-timezone and fn adjust-time-to-timezone depend on properties of the dynamic context that are fixed within the execution scope the same applies to a number of functions in the op namespace that manipulate dates and times and that make use of the implicit timezone. these functions will return the same result if called repeatedly during a single execution scope a number of functions including fn base-uri#0 fn data#0 fn document-uri#0 fn position fn last fn id#1 fn idref#1 fn element-with-id#1 fn lang#1 fn local-name#0 fn name#0 fn namespace-uri#0 fn normalize-space#0 fn number#0 fn root#0 fn string#0 fn string-length#0 and fn path#0 depend on the focus. these functions will in general return different results on different calls if the focus is different. definition a function is focus-dependent if its result depends on the focus that is the context item position or size definition a function that is not focus-dependent is called focus-independent the function fn default-collation and many string-handling operators and functions depend on the default collation and the in-scope collations which are both properties of the static context. if a particular call of one of these functions is evaluated twice with the same arguments then it will return the same result each time because the static context by definition does not change at run time however two distinct calls that is two calls on the function appearing in different places in the source code may produce different results even if the explicit arguments are the same. functions such as fn static-base-uri fn doc and fn collection depend on other aspects of the static context. as with functions that depend on collations a single call will produce the same results on each call if the explicit arguments are the same but two calls appearing in different places in the source code may produce different results. the fn function-lookup function is a special case because it is potentially dependent on everything in the static and dynamic context. this is because the static and dynamic context of the call to fn function-lookup are used as the static and dynamic context of the function that fn function-lookup returns. definition for a context-dependent function the parts of the context on which it depends are referred to as implicit arguments. definition a function that is guaranteed to produce identical results from repeated calls within a single execution scope if the explicit and implicit arguments are identical is referred to as deterministic. definition a function that is not deterministic is referred to as nondeterministic. all functions defined in this specification are deterministic unless otherwise stated. exceptions include the following some functions such as fn distinct-values and fn unordered produce results in an implementation-defined or implementation-dependent order. in such cases there is no guarantee that the order of results from different calls will be the same. these functions are said to be non-deterministic with respect to ordering. the function fn analyze-string constructs an element node to represent its results. there is no guarantee that repeated calls with the same arguments will return the same identical node in the sense of the is operator however if non-identical nodes are returned their content will be the same in the sense of the fn deep-equal function. such a function is said to be non-deterministic with respect to node identity. some functions such as fn doc and fn collection create new nodes by reading external documents. such functions are guaranteed to be deterministic with the exception that an implementation is allowed to make them non-deterministic as a user option. where the results of a function are described as being to a greater or lesser extent implementation-defined or implementation-dependent this does not by itself remove the requirement that the results should be deterministic that is that repeated calls with the same explicit and implicit arguments must return identical results. 2 accessors accessors and their semantics are described in xquery and xpath data model xdm 3.0 some of these accessors are exposed to the user through the functions described below. function accessor accepts returns fn node-name node-name an optional node zero or one xs qname fn nilled nilled a node an optional xs boolean fn string string-value an optional item or no argument xs string fn data typed-value zero or more items a sequence of atomic values fn base-uri base-uri an optional node or no argument zero or one xs anyuri fn document-uri document-uri an optional node zero or one xs anyuri 2.1 fn node-name summary returns the name of a node as an xs qname. signatures fn node-name as xs qname fn node-name arg as node as xs qname properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if arg is the empty sequence the empty sequence is returned. otherwise the function returns the result of the dm node-name accessor as defined in xquery and xpath data model xdm 3.0 see section 5.11 node-name accessor dm30 error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes for element and attribute nodes the name of the node is returned as an xs qname retaining the prefix namespace uri and local part. for processing instructions the name of the node is returned as an xs qname in which the prefix and namespace uri are absentdm30. for a namespace node the function returns an empty sequence if the node represents the default namespace otherwise it returns an xs qname in which prefix and namespace uri are absentdm30 and the local part is the namespace prefix being bound for all other kinds of node the function returns the empty sequence. 2.2 fn nilled summary returns true for an element that is nilled. signatures fn nilled as xs boolean fn nilled arg as node as xs boolean properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if arg is the empty sequence the function returns the empty sequence. otherwise the function returns the result of the dm nilled accessor as defined in xquery and xpath data model xdm 3.0 see section 5.9 nilled accessor dm30 error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes if arg is not an element node the function returns the empty sequence. if arg is an untyped element node the function returns false. in practice the function returns true only for an element node that has the attribute xsi nil true and that is successfully validated against a schema that defines the element to be nillable the detailed rules however are defined in xquery and xpath data model xdm 3.0 2.3 fn string summary returns the value of arg represented as an xs string. signatures fn string as xs string fn string arg as item as xs string properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules in the zero-argument version of the function arg defaults to the context item. that is calling fn string is equivalent to calling fn string if arg is the empty sequence the function returns the zero-length string. if arg is a node the function returns the string-value of the node as obtained using the dm string-value accessor defined in xquery and xpath data model xdm 3.0 see section 5.13 string-value accessor dm30 if arg is an atomic value the function returns the result of the expression arg cast as xs string see 18 casting error conditions a dynamic error is raised err xpdy0002 xp30 by the zero-argument version of the function if the context item is absentdm30. a type error is raised err foty0014 if arg is a function item. examples the expression string 23 returns 23 the expression string false returns false the expression string paris returns paris the expression string abs#1 raises error foty0014. let para para in a hole in the ground there lived a term author tolkein hobbit term para the expression string para returns in a hole in the ground there lived a hobbit. 2.4 fn data summary returns the result of atomizing a sequence that is replacing all nodes in the sequence by their typed values. signatures fn data as xs anyatomictype fn data arg as item as xs anyatomictype properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. the result of fn data is the sequence of atomic values produced by applying the following rules to each item in arg if the item is an atomic value it is appended to the result sequence. if the item is a node the typed value of the node is appended to the result sequence. the typed value is a sequence of zero or more atomic values specifically the result of the dm typed-value accessor as defined in xquery and xpath data model xdm 3.0 see section 5.15 typed-value accessor dm30 error conditions a type error is raised err foty0012 if an item in the sequence arg is a node that does not have a typed value. a type error is raised err foty0013 if an item in the sequence arg is a function item. a dynamic error is raised if arg is omitted and the context item is absentdm30. notes the process of applying the fn data function to a sequence is referred to as atomization. in many cases an explicit call on fn data is not required because atomization is invoked implicitly when a node or sequence of nodes is supplied in a context where an atomic value or sequence of atomic values is required. examples the expression data 123 returns 123. let para para in a hole in the ground there lived a term author tolkein hobbit term para the expression data para returns xs untypedatomic in a hole in the ground there lived a hobbit. the expression data para term author returns xs untypedatomic tolkein the expression data abs#1 raises error foty0013. 2.5 fn base-uri summary returns the base uri of a node. signatures fn base-uri as xs anyuri fn base-uri arg as node as xs anyuri properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules the zero-argument version of the function returns the base uri of the context node it is equivalent to calling fn base-uri the single-argument version of the function behaves as follows if arg is the empty sequence the function returns the empty sequence. otherwise the function returns the value of the dm base-uri accessor applied to the node arg. this accessor is defined for each kind of node in the xdm specification see section 5.2 base-uri accessor dm30 note as explained in xdm document element and processing-instruction nodes have a base-uri property which may be empty. the base-uri property for all other node kinds is the empty sequence. the dm base-uri accessor returns the base-uri property of a node if it exists and is non-empty otherwise it returns the result of applying the dm base-uri accessor to its parent recursively. if the node does not have a parent or if the recursive ascent up the ancestor chain encounters a parentless node whose base-uri property is empty the empty sequence is returned. in the case of namespace nodes however the result is always an empty sequence it does not depend on the base uri of the parent element. see also fn static-base-uri. error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. 2.6 fn document-uri summary returns the uri of a resource where a document can be found if available. signatures fn document-uri as xs anyuri fn document-uri arg as node as xs anyuri properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if arg is the empty sequence the function returns the empty sequence. if arg is not a document node the function returns the empty sequence. otherwise the function returns the value of the document-uri accessor applied to arg as defined in xquery and xpath data model xdm 3.0 see section 6.1.2 accessors dm30 error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes in the case of a document node d returned by the fn doc function or a document node at the root of a tree containing a node returned by the fn collection function it will always be true that either fn document-uri d returns the empty sequence or that the following expression is true fn doc fn document-uri d is d. it is implementation-defined whether this guarantee also holds for document nodes obtained by other means for example a document node passed as the initial context node of a query or transformation. 3 errors and diagnostics 3.1 raising errors in this document as well as in xquery 3.0 an xml query language and xml path language xpath 3.0 the phrase an error is raised is used. raising an error is equivalent to calling the fn error function defined in this section with the provided error code. the above phrase is normally accompanied by specification of a specific error to wit an error is raised error code each error defined in this document is identified by an xs qname that is in the http www.w3.org 2005 xqt-errors namespace represented in this document by the err prefix. it is this xs qname that is actually passed as an argument to the fn error function. calling this function raises an error. for a more detailed treatment of error handing see section 2.3.3 handling dynamic errors xp30. the fn error function is a general function that may be called as above but may also be called from xquery 3.0 an xml query language or xml path language xpath 3.0 applications with for example an xs qname argument. 3.1.1 fn error summary calling the fn error function raises an application-defined error. signatures fn error as none fn error code as xs qname as none fn error code as xs qname description as xs string as none fn error code as xs qname description as xs string error-object as item as none properties this function is nondeterministic context-independent and focus-independent rules this function never returns a value. instead it always raises an error. the effect of the error is identical to the effect of dynamic errors raised implicitly for example when an incorrect argument is supplied to a function. the parameters to the fn error function supply information that is associated with the error condition and that is made available to a caller that asks for information about the error. the error may be caught either by the host language using a try catch construct in xslt or xquery for example or by the calling application or external processing environment. the way in which error information is returned to the external processing environment is implementation dependent if fn error is called with no arguments then its behavior is the same as the function call fn error fn qname http www.w3.org 2005 xqt-errors err foer0000 if code is the empty sequence then the effective value is the xs qname constructed by fn qname http www.w3.org 2005 xqt-errors err foer0000 there are three pieces of information that may be associated with an error the code is an error code that distinguishes this error from others. it is an xs qname the namespace uri conventionally identifies the component subsystem or authority responsible for defining the meaning of the error code while the local part identifies the specific error condition. the namespace uri http www.w3.org 2005 xqt-errors is used for errors defined in this specification other namespace uris may be used for errors defined by the application. if the external processing environment expects the error code to be returned as a uri or a string rather than as an xs qname then an error code with namespace uri ns and local part lp will be returned in the form ns#lp. the namespace uri part of the error code should therefore not include a fragment identifier. the description is a natural-language description of the error condition. the error-object is an arbitrary value used to convey additional information about the error and may be used in any way the application chooses. error conditions this function always raises a dynamic error. by default it raises err foer0000 notes the value of the description parameter may need to be localized. the type none is a special type defined in xquery 1.0 and xpath 2.0 formal semantics and is not available to the user. it indicates that the function never returns and ensures that it has the correct static type. any qname may be used as an error code there are no reserved names or namespaces. the error is always classified as a dynamic error even if the error code used is one that is normally used for static errors or type errors. examples the expression fn error raises error foer0000. this returns the uri http www.w3.org 2005 xqt-errors#foer0000 or the corresponding xs qname to the external processing environment unless the error is caught using a try catch construct in the host language. the expression fn error fn qname http www.example.com hr myerr toohighsal does not apply because salary is too high raises error myerr toohighsal. this returns http www.example.com hr#toohighsal and the xs string does not apply because salary is too high or the corresponding xs qname to the external processing environment unless the error is caught using a try catch construct in the host language. 3.2 diagnostic tracing 3.2.1 fn trace summary provides an execution trace intended to be used in debugging queries. signature fn trace value as item label as xs string as item properties this function is deterministic context-independent and focus-independent rules the function returns the value of value unchanged. in addition the values of value converted to an xs string and label may be directed to a trace data set. the destination of the trace output is implementation-defined the format of the trace output is implementation dependent the ordering of output from calls of the fn trace function is implementation dependent examples consider a situation in which a user wants to investigate the actual value passed to a function. assume that in a particular execution v is an xs decimal with value 124.84. writing fn trace v the value of v is will put the strings 124.84 and the value of v is in the trace data set in implementation dependent order. 4 functions and operators on numerics this section specifies arithmetic operators on the numeric datatypes defined in xml schema part 2 datatypes second edition it uses an approach that permits lightweight implementation whenever possible. 4.1 numeric types the operators described in this section are defined on the following numeric types. each type whose name is indented is derived from the type whose name appears nearest above with one less level of indentation. xs decimal xs integer xs float xs double they also apply to types derived by restriction from the above types. note this specification uses ieee 754-2008 arithmetic for xs float and xs double values. one consequence of this is that some operations result in the value nan not-a number which has the unusual property that it is not equal to itself. another consequence is that some operations return the value negative zero. this differs from xml schema part 2 datatypes second edition which defines nan as being equal to itself and defines only a single zero in the value space. the text accompanying several functions defines behavior for both positive and negative zero inputs and outputs in the interest of alignment with ieee 754-2008 a conformant implementation must respect these semantics. in consequence the expression 0.0e0 which is actually a unary minus operator applied to an xs double value will always return negative zero see 4.2.8 op numeric-unary-minus. as a concession to implementations that rely on implementations of xsd 1.0 however when casting from string to double the lexical form 0 may be converted to positive zero though negative zero is recommended. xml schema 1.1 introduces support for positive and negative zero as distinct values and also uses the ieee 754-2008 semantics for comparisons involving nan. 4.2 arithmetic operators on numeric values the following functions define the semantics of arithmetic operators defined in xquery 3.0 an xml query language and xml path language xpath 3.0 on these numeric types. operators meaning op numeric-add addition op numeric-subtract subtraction op numeric-multiply multiplication op numeric-divide division op numeric-integer-divide integer division op numeric-mod modulus op numeric-unary-plus unary plus op numeric-unary-minus unary minus negation the parameters and return types for the above operators are the basic numeric types xs integer xs decimal xs float and xs double and types derived from them. the word numeric in function signatures signifies these four types. for simplicity each operator is defined to operate on operands of the same type and return the same type. the exceptions are op numeric-divide which returns an xs decimal if called with two xs integer operands and op numeric-integer-divide which always returns an xs integer. if the two operands are not of the same type subtype substitution and numeric type promotion are used to obtain two operands of the same type. section b.1 type promotion xp30 and section b.2 operator mapping xp30 describe the semantics of these operations in detail. the result type of operations depends on their argument datatypes and is defined in the following table operator returns op operation xs integer xs integer xs integer except for op numeric-divide integer integer which returns xs decimal op operation xs decimal xs decimal xs decimal op operation xs float xs float xs float op operation xs double xs double xs double op operation xs integer xs integer op operation xs decimal xs decimal op operation xs float xs float op operation xs double xs double these rules define any operation on any pair of arithmetic types. consider the following example op operation xs int xs double op operation xs double xs double for this operation xs int must be converted to xs double. this can be done since by the rules above xs int can be substituted for xs integer xs integer can be substituted for xs decimal xs decimal can be promoted to xs double. as far as possible the promotions should be done in a single step. specifically when an xs decimal is promoted to an xs double it should not be converted to an xs float and then to xs double as this risks loss of precision. as another example a user may define height as a derived type of xs integer with a minimum value of 20 and a maximum value of 100. he may then derive fenceheight using an enumeration to restrict the permitted set of values to say 36 48 and 60. op operation fenceheight xs integer op operation xs integer xs integer fenceheight can be substituted for its base type height and height can be substituted for its base type xs integer. the basic rules for addition subtraction and multiplication of ordinary numbers are not set out in this specification they are taken as given. in the case of xs double and xs float the rules are as defined in ieee 754-2008 the rules for handling division and modulus operations as well as the rules for handling special values such as infinity and nan and exception conditions such as overflow and underflow are described more explicitly since they are not necessarily obvious. on overflow and underflow situations during arithmetic operations conforming implementations must behave as follows for xs float and xs double operations overflow behavior must be conformant with ieee 754-2008 this specification allows the following options raising a dynamic error err foar0002 via an overflow trap. returning inf or inf. returning the largest positive or negative non-infinite number. for xs float and xs double operations underflow behavior must be conformant with ieee 754-2008 this specification allows the following options raising a dynamic error err foar0002 via an underflow trap. returning 0.0e0 or 2 emin or a denormalized value where emin is the smallest possible xs float or xs double exponent. for xs decimal operations overflow behavior must raise a dynamic error err foar0002 on underflow 0.0 must be returned. for xs integer operations implementations that support limited-precision integer operations must select from the following options they may choose to always raise a dynamic error err foar0002 they may provide an implementation-defined mechanism that allows users to choose between raising an error and returning a result that is modulo the largest representable integer value. see iso 10967 the functions op numeric-add op numeric-subtract op numeric-multiply op numeric-divide op numeric-integer-divide and op numeric-mod are each defined for pairs of numeric operands each of which has the same type xs integer xs decimal xs float or xs double. the functions op numeric-unary-plus and op numeric-unary-minus are defined for a single operand whose type is one of those same numeric types. for xs float and xs double arguments if either argument is nan the result is nan. for xs decimal values the number of digits of precision returned by the numeric operators is implementation-defined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementation-defined manner. the ieee 754-2008 specification also describes handling of two exception conditions called dividebyzero and invalidoperation. the ieee dividebyzero exception is raised not only by a direct attempt to divide by zero but also by operations such as log 0 the ieee invalidoperation exception is raised by attempts to call a function with an argument that is outside the function s domain for example sqrt 1 or log 1 these ieee exceptions do not cause a dynamic error at the application level rather they result in the relevant function or operator returning nan. the underlying ieee exception may be notified to the application or to the user by some implementation-defined warning condition but the observable effect on an application using the functions and operators defined in this specification is simply to return nan with no error. the ieee 754-2008 specification distinguishes two nan values a quiet nan and a signaling nan. these two values are not distinguishable in the xdm model the value spaces of xs float and xs double each include only a single nan value. this does not prevent the implementation distinguishing them internally and triggering different implementation-defined warning conditions but such distinctions do not affect the observable behavior of an application using the functions and operators defined in this specification. 4.2.1 op numeric-add summary returns the arithmetic sum of its operands arg1 arg2 operator mapping defines the semantics of the operator when applied to two numeric values signature op numeric-add arg1 as numeric arg2 as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. notes for xs float or xs double values if one of the operands is a zero or a finite number and the other is inf or inf inf or inf is returned. if both operands are inf inf is returned. if both operands are inf inf is returned. if one of the operands is inf and the other is inf nan is returned. 4.2.2 op numeric-subtract summary returns the arithmetic difference of its operands arg1 arg2 operator mapping defines the semantics of the operator when applied to two numeric values. signature op numeric-subtract arg1 as numeric arg2 as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. notes for xs float or xs double values if one of the operands is a zero or a finite number and the other is inf or inf an infinity of the appropriate sign is returned. if both operands are inf or inf nan is returned. if one of the operands is inf and the other is inf an infinity of the appropriate sign is returned. 4.2.3 op numeric-multiply summary returns the arithmetic product of its operands arg1 arg2 operator mapping defines the semantics of the operator when applied to two numeric values. signature op numeric-multiply arg1 as numeric arg2 as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. notes for xs float or xs double values if one of the operands is a zero and the other is an infinity nan is returned. if one of the operands is a non-zero number and the other is an infinity an infinity with the appropriate sign is returned. 4.2.4 op numeric-divide summary returns the arithmetic quotient of its operands arg1 div arg2 operator mapping defines the semantics of the div operator when applied to two numeric values. signature op numeric-divide arg1 as numeric arg2 as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. as a special case if the types of both arg1 and arg2 are xs integer then the return type is xs decimal. error conditions a dynamic error is raised err foar0001 for xs decimal and xs integer operands if the divisor is positive or negative zero. notes for xs float and xs double operands floating point division is performed as specified in ieee 754-2008 a positive number divided by positive zero returns inf. a negative number divided by positive zero returns inf. division by negative zero returns inf and inf respectively. positive or negative zero divided by positive or negative zero returns nan. also inf or inf divided by inf or inf returns nan. 4.2.5 op numeric-integer-divide summary performs an integer division. operator mapping defines the semantics of the idiv operator when applied to two numeric values. signature op numeric-integer-divide arg1 as numeric arg2 as numeric as xs integer rules general rules see 4.2 arithmetic operators on numeric values. if arg2 is inf or inf and arg1 is not inf or inf then the result is zero. otherwise subject to limits of precision and overflow underflow conditions the result is the largest furthest from zero xs integer value n such that fn abs n arg2 le fn abs arg1 and fn compare n arg2 0 eq fn compare arg1 0 note the second term in this condition ensures that the result has the correct sign. the implementation may adopt a different algorithm provided that it is equivalent to this formulation in all cases where implementation-dependent or implementation-defined behavior does not affect the outcome for example the implementation-defined precision of the result of xs decimal division. error conditions a dynamic error is raised err foar0001 if the divisor is positive or negative zero. a dynamic error is raised err foar0002 if either operand is nan or if arg1 is inf or inf. notes except in situations involving errors loss of precision or overflow underflow the result of a idiv b is the same as a div b cast as xs integer. the semantics of this function are different from integer division as defined in programming languages such as java and c++. examples the expression op numeric-integer-divide 10,3 returns 3. the expression op numeric-integer-divide 3 2 returns 1. the expression op numeric-integer-divide 3,2 returns 1. the expression op numeric-integer-divide 3 2 returns 1. the expression op numeric-integer-divide 9.0,3 returns 3. the expression op numeric-integer-divide 3.5,3 returns 1. the expression op numeric-integer-divide 3.0,4 returns 0. the expression op numeric-integer-divide 3.1 e 1,6 returns 5. the expression op numeric-integer-divide 3.1 e 1,7 returns 4. 4.2.6 op numeric-mod summary returns the remainder resulting from dividing arg1 the dividend by arg2 the divisor. operator mapping defines the semantics of the mod operator when applied to two numeric values. signature op numeric-mod arg1 as numeric arg2 as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. the operation a mod b for operands that are xs integer or xs decimal or types derived from them produces a result such that a idiv b b+ a mod b is equal to a and the magnitude of the result is always less than the magnitude of b. this identity holds even in the special case that the dividend is the negative integer of largest possible magnitude for its type and the divisor is 1 the remainder is 0 it follows from this rule that the sign of the result is the sign of the dividend. for xs float and xs double operands the following rules apply if either operand is nan the result is nan. if the dividend is positive or negative infinity or the divisor is positive or negative zero 0 or both the result is nan. if the dividend is finite and the divisor is an infinity the result equals the dividend. if the dividend is positive or negative zero and the divisor is finite the result is the same as the dividend. in the remaining cases where neither positive or negative infinity nor positive or negative zero nor nan is involved the result obeys a idiv b b+ a mod b a. division is truncating division analogous to integer division not ieee 754-2008 rounding division i.e. additional digits are truncated not rounded to the required precision. error conditions a dynamic error is raised err foar0001 for xs integer and xs decimal operands if arg2 is zero. examples the expression op numeric-mod 10,3 returns 1. the expression op numeric-mod 6 2 returns 0. the expression op numeric-mod 4.5,1.2 returns 0.9. the expression op numeric-mod 1.23e2 0.6e1 returns 3.0e0. 4.2.7 op numeric-unary-plus summary returns its operand with the sign unchanged arg operator mapping defines the semantics of the unary operator applied to a numeric value. signature op numeric-unary-plus arg as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. the returned value is equal to arg and is an instance of xs integer xs decimal xs double or xs float depending on the type of arg. notes because function conversion rules are applied in the normal way the unary operator can be used to force conversion of an untyped node to a number the result of price is the same as xs double price if the type of price is xs untypedatomic. 4.2.8 op numeric-unary-minus summary returns its operand with the sign reversed arg operator mapping defines the semantics of the unary operator when applied to a numeric value. signature op numeric-unary-minus arg as numeric as numeric rules general rules see 4.2 arithmetic operators on numeric values. the returned value is an instance of xs integer xs decimal xs double or xs float depending on the type of arg. for xs integer and xs decimal arguments 0 and 0.0 return 0 and 0.0 respectively. for xs float and xs double arguments nan returns nan 0.0e0 returns 0.0e0 and vice versa. inf returns inf. inf returns inf. 4.3 comparison operators on numeric values this specification defines the following comparison operators on numeric values. comparisons take two arguments of the same type. if the arguments are of different types one argument is promoted to the type of the other as described above in 4.2 arithmetic operators on numeric values. each comparison operator returns a boolean value. if either or both operands are nan false is returned. function meaning op numeric-equal returns true if and only if the value of arg1 is equal to the value of arg2. op numeric-less-than returns true if and only if arg1 is numerically less than arg2. op numeric-greater-than returns true if and only if arg1 is numerically greater than arg2. 4.3.1 op numeric-equal summary returns true if and only if the value of arg1 is equal to the value of arg2. operator mapping defines the semantics of the eq operator when applied to two numeric values and is also used in defining the semantics of ne le and ge signature op numeric-equal arg1 as numeric arg2 as numeric as xs boolean rules general rules see 4.2 arithmetic operators on numeric values and 4.3 comparison operators on numeric values. for xs float and xs double values positive zero and negative zero compare equal. inf equals inf and inf equals inf. nan does not equal itself. 4.3.2 op numeric-less-than summary returns true if and only if arg1 is numerically less than arg2. operator mapping defines the semantics of the lt operator when applied to two numeric values and is also used in defining the semantics of le signature op numeric-less-than arg1 as numeric arg2 as numeric as xs boolean rules general rules see 4.2 arithmetic operators on numeric values and 4.3 comparison operators on numeric values. for xs float and xs double values positive infinity is greater than all other non-nan values negative infinity is less than all other non-nan values. if arg1 or arg2 is nan the function returns false. 4.3.3 op numeric-greater-than summary returns true if and only if arg1 is numerically greater than arg2. operator mapping defines the semantics of the gt operator when applied to two numeric values and is also used in defining the semantics of ge signature op numeric-greater-than arg1 as numeric arg2 as numeric as xs boolean rules the function call op numeric-greater-than a b is defined to return the same result as op numeric-less-than b a 4.4 functions on numeric values the following functions are defined on numeric types. each function returns a value of the same type as the type of its argument. if the argument is the empty sequence the empty sequence is returned. for xs float and xs double arguments if the argument is nan nan is returned. except for fn abs for xs float and xs double arguments if the argument is positive or negative infinity positive or negative infinity is returned. function meaning fn abs returns the absolute value of arg. fn ceiling rounds arg upwards to a whole number. fn floor rounds arg downwards to a whole number. fn round rounds a value to a specified number of decimal places rounding upwards if two such values are equally near. fn round-half-to-even rounds a value to a specified number of decimal places rounding to make the last digit even if two such values are equally near. note fn round and fn round-half-to-even produce the same result in all cases except when the argument is exactly midway between two values with the required precision. other ways of rounding midway values can be achieved as follows towards negative infinity fn round x away from zero fn round fn abs x fn compare x 0 towards zero fn abs fn round x fn compare x 0 4.4.1 fn abs summary returns the absolute value of arg. signature fn abs arg as numeric as numeric properties this function is deterministic context-independent and focus-independent rules general rules see 4.4 functions on numeric values. if arg is negative the function returns arg otherwise it returns arg. if the type of arg is one of the four numeric types xs float xs double xs decimal or xs integer the type of the result is the same as the type of arg. if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type. for xs float and xs double arguments if the argument is positive zero or negative zero then positive zero is returned. if the argument is positive or negative infinity positive infinity is returned. examples the expression fn abs 10.5 returns 10.5. the expression fn abs 10.5 returns 10.5. 4.4.2 fn ceiling summary rounds arg upwards to a whole number. signature fn ceiling arg as numeric as numeric properties this function is deterministic context-independent and focus-independent rules general rules see 4.4 functions on numeric values. the function returns the smallest closest to negative infinity number with no fractional part that is not less than the value of arg. if the type of arg is one of the four numeric types xs float xs double xs decimal or xs integer the type of the result is the same as the type of arg. if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type. for xs float and xs double arguments if the argument is positive zero then positive zero is returned. if the argument is negative zero then negative zero is returned. if the argument is less than zero and greater than 1 negative zero is returned. examples the expression fn ceiling 10.5 returns 11. the expression fn ceiling 10.5 returns 10. 4.4.3 fn floor summary rounds arg downwards to a whole number. signature fn floor arg as numeric as numeric properties this function is deterministic context-independent and focus-independent rules general rules see 4.4 functions on numeric values. the function returns the largest closest to positive infinity number with no fractional part that is not greater than the value of arg. if the type of arg is one of the four numeric types xs float xs double xs decimal or xs integer the type of the result is the same as the type of arg. if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type. for xs float and xs double arguments if the argument is positive zero then positive zero is returned. if the argument is negative zero then negative zero is returned. examples the expression fn floor 10.5 returns 10. the expression fn floor 10.5 returns 11. 4.4.4 fn round summary rounds a value to a specified number of decimal places rounding upwards if two such values are equally near. signatures fn round arg as numeric as numeric fn round arg as numeric precision as xs integer as numeric properties this function is deterministic context-independent and focus-independent rules general rules see 4.4 functions on numeric values. the function returns the nearest that is numerically closest value to arg that is a multiple of ten to the power of minus precision. if two such values are equally near for example if the fractional part in arg is exactly 5 the function returns the one that is closest to positive infinity. if the type of arg is one of the four numeric types xs float xs double xs decimal or xs integer the type of the result is the same as the type of arg. if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type. the single-argument version of this function produces the same result as the two-argument version with precision 0 that is it rounds to a whole number when arg is of type xs float and xs double if arg is nan positive or negative zero or positive or negative infinity then the result is the same as the argument. for other values the argument is cast to xs decimal using an implementation of xs decimal that imposes no limits on the number of digits that can be represented. the function is applied to this xs decimal value and the resulting xs decimal is cast back to xs float or xs double as appropriate to form the function result. if the resulting xs decimal value is zero then positive or negative zero is returned according to the sign of arg. notes this function is typically used with a non-zero precision in financial applications where the argument is of type xs decimal. for arguments of type xs float and xs double the results may be counter-intuitive. for example consider round 35.425e0 2 the result is not 35.43 as might be expected but 35.42. this is because the xs double written as 35.425e0 has an exact value equal to 35.42499999999... which is closer to 35.42 than to 35.43. examples the expression fn round 2.5 returns 3.0. the expression fn round 2.4999 returns 2.0. the expression fn round 2.5 returns 2.0. not the possible alternative 3 the expression fn round 1.125 2 returns 1.13. the expression fn round 8452 2 returns 8500. the expression fn round 3.1415e0 2 returns 3.14e0. 4.4.5 fn round-half-to-even summary rounds a value to a specified number of decimal places rounding to make the last digit even if two such values are equally near. signatures fn round-half-to-even arg as numeric as numeric fn round-half-to-even arg as numeric precision as xs integer as numeric properties this function is deterministic context-independent and focus-independent rules general rules see 4.4 functions on numeric values. the function returns the nearest that is numerically closest value to arg that is a multiple of ten to the power of minus precision. if two such values are equally near e.g. if the fractional part in arg is exactly 500... the function returns the one whose least significant digit is even. if the type of arg is one of the four numeric types xs float xs double xs decimal or xs integer the type of the result is the same as the type of arg. if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type. the first signature of this function produces the same result as the second signature with precision 0. for arguments of type xs float and xs double if the argument is nan positive or negative zero or positive or negative infinity then the result is the same as the argument. in all other cases the argument is cast to xs decimal using an implementation of xs decimal that imposes no limits on the number of digits that can be represented. the function is applied to this xs decimal value and the resulting xs decimal is cast back to xs float or xs double as appropriate to form the function result. if the resulting xs decimal value is zero then positive or negative zero is returned according to the sign of the original argument. notes this function is typically used in financial applications where the argument is of type xs decimal. for arguments of type xs float and xs double the results may be counter-intuitive. for example consider round-half-to-even xs float 150.015 2 the result is not 150.02 as might be expected but 150.01. this is because the conversion of the xs float value represented by the literal 150.015 to an xs decimal produces the xs decimal value 150.014999389... which is closer to 150.01 than to 150.02. examples the expression fn round-half-to-even 0.5 returns 0.0. the expression fn round-half-to-even 1.5 returns 2.0. the expression fn round-half-to-even 2.5 returns 2.0. the expression fn round-half-to-even 3.567812e+3 2 returns 3567.81e0. the expression fn round-half-to-even 4.7564e-3 2 returns 0.0e0. the expression fn round-half-to-even 35612.25 2 returns 35600. 4.5 parsing numbers it is possible to convert strings to values of type xs integer xs float xs decimal or xs double using the constructor functions described in 17 constructor functions or using cast expressions as described in 18 casting. in addition the fn number function is available to convert strings to values of type xs double. it differs from the xs double constructor function in that any value outside the lexical space of the xs double datatype is converted to the xs double value nan. 4.5.1 fn number summary returns the value indicated by arg or if arg is not specified the context item after atomization converted to an xs double. signatures fn number as xs double fn number arg as xs anyatomictype as xs double properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules calling the zero-argument version of the function is defined to give the same result as calling the single-argument version with the context item that is fn number is equivalent to fn number as defined by the rules that follow. if arg is the empty sequence or if arg cannot be converted to an xs double the xs double value nan is returned. otherwise arg is converted to an xs double following the rules of 18.1.2.2 casting to xs double. if the conversion to xs double fails the xs double value nan is returned. error conditions a dynamic error is raised err xpdy0002 xp30 if arg is omitted and the context item is absentdm30. as a consequence of the rules given above a type error occurs if the context item cannot be atomized or if the result of atomizing the context item is a sequence containing more than one atomic value. notes xsd 1.1 allows the string inf as a representation of positive infinity xsd 1.0 does not. it is implementation-defined whether xsd 1.1 is supported. generally fn number returns nan rather than raising a dynamic error if the argument cannot be converted to xs double. however a type error is raised in the usual way if the supplied argument cannot be atomized or if the result of atomization does not match the required argument type. examples the expression fn number item1 quantity returns 5.0e0. the expression fn number item2 description returns xs double nan assume that the context item is the xs string value 15 then fn number returns 1.5e1. 4.6 formatting integers 4.6.1 fn format-integer summary formats an integer according to a given picture string using the conventions of a given natural language if specified. signatures fn format-integer value as xs integer picture as xs string as xs string fn format-integer value as xs integer picture as xs string lang as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on default language. the three-argument form of this function is deterministic context-independent and focus-independent rules if value is an empty sequence the function returns a zero-length string. in all other cases the picture argument describes the format in which value is output. the rules that follow describe how non-negative numbers are output. if the value of value is negative the rules below are applied to the absolute value of value and a minus sign is prepended to the result. the value of picture consists of a primary format token optionally followed by a format modifier. the primary format token is always present and must not be zero-length. if the string contains one or more semicolons then everything that precedes the last semicolon is taken as the primary format token and everything that follows is taken as the format modifier if the string contains no semicolon then the entire picture is taken as the primary format token and the format modifier is taken to be absent which is equivalent to supplying a zero-length string the primary format token is classified as one of the following a decimal-digit-pattern made up of optional-digit-signs mandatory-digit-signs and grouping-separator-signs. the optional-digit-sign is the character a mandatory-digit-sign is a character in unicode category nd. all mandatory-digit-signs within the format token must be from the same digit family where a digit family is a sequence of ten consecutive characters in unicode category nd having digit values 0 through 9. within the format token these digits are interchangeable a three-digit number may thus be indicated equivalently by 000 001 or 999. a grouping-separator-sign is a non-alphanumeric character that is a character whose unicode category is other than nd nl no lu ll lt lm or lo. if the primary format token contains at least one unicode digit then it is taken as a decimal digit pattern and in this case it must match the regular expression p nd p n p l if it contains a digit but does not match this pattern a dynamic error is raised err fodf1310 note if a semicolon is to be used as a grouping separator then the primary format token as a whole must be followed by another semicolon to ensure that the grouping separator is not mistaken as a separator between the primary format token and the format modifier. there must be at least one mandatory-digit-sign. there may be zero or more optional-digit-signs and if present these must precede all mandatory-digit-signs. there may be zero or more grouping-separator-signs. a grouping-separator-sign must not appear at the start or end of the decimal-digit-pattern nor adjacent to another grouping-separator-sign. the corresponding output format is a decimal number using this digit family with at least as many digits as there are mandatory-digit-signs in the format token. thus a format token 1 generates the sequence 0 1 2 10 11 12 and a format token 01 or equivalently 00 or 99 generates the sequence 00 01 02 09 10 11 12 99 100 101. a format token of x661 arabic-indic digit one generates the sequence then then the grouping-separator-signs are handled as follows. the position of grouping separators within the format token counting backwards from the last digit indicates the position of grouping separators to appear within the formatted number and the character used as the grouping-separator-sign within the format token indicates the character to be used as the corresponding grouping separator in the formatted number. if grouping-separator-signs appear at regular intervals within the format token that is if the same grouping separator appears at positions forming a sequence n 2n 3n for some integer value n including the case where there is only one number in the list then the sequence is extrapolated to the left so grouping separators will be used in the formatted number at every multiple of n. for example if the format token is 0 000 then the number one million will be formatted as 1 000 000 while the number fifteen will be formatted as 0 015. the only purpose of optional-digit-signs is to mark the position of grouping-separator-signs. for example if the format token is 0 then the number one million will be formatted as 1 000 000 while the number fifteen will be formatted as 15. a grouping separator is included in the formatted number only if there is a digit to its left which will only be the case if either a the number is large enough to require that digit or b the number of mandatory-digit-signs in the format token requires insignificant leading zeros to be present. note numbers will never be truncated. given the decimal-digit-pattern 01 the number three hundred will be output as 300 despite the absence of any optional-digit-sign. the format token a which generates the sequence a b c z aa ab ac.... the format token a which generates the sequence a b c z aa ab ac.... the format token i which generates the sequence i ii iii iv v vi vii viii ix x the format token i which generates the sequence i ii iii iv v vi vii viii ix x the format token w which generates numbers written as lower-case words for example in english one two three four the format token w which generates numbers written as upper-case words for example in english one two three four the format token ww which generates numbers written as title-case words for example in english one two three four any other format token which indicates a numbering sequence in which that token represents the number 1 one but see the note below it is implementation-defined which numbering sequences additional to those listed above are supported. if an implementation does not support a numbering sequence represented by the given token it must use a format token of 1. note in some traditional numbering sequences additional signs are added to denote that the letters should be interpreted as numbers these are not included in the format token. an example see also the example below is classical greek where a dexia keraia x0374 and sometimes an aristeri keraia x0375 is added. for all format tokens other than the first kind above one that consists of decimal digits there may be implementation-defined lower and upper bounds on the range of numbers that can be formatted using this format token indeed for some numbering sequences there may be intrinsic limits. for example the format token x2460 circled digit one has a range imposed by the unicode character repertoire 1 to 20 in unicode versions prior to 4.0 increased in subsequent versions. for the numbering sequences described above any upper bound imposed by the implementation must not be less than 1000 one thousand and any lower bound must not be greater than 1. numbers that fall outside this range must be formatted using the format token 1. the above expansions of numbering sequences for format tokens such as a and i are indicative but not prescriptive. there are various conventions in use for how alphabetic sequences continue when the alphabet is exhausted and differing conventions for how roman numerals are written for example iv versus iiii as the representation of the number 4 sometimes alphabetic sequences are used that omit letters such as i and o. this specification does not prescribe the detail of any sequence other than those sequences consisting entirely of decimal digits. many numbering sequences are language-sensitive. this applies especially to the sequence selected by the tokens w w and ww. it also applies to other sequences for example different languages using the cyrillic alphabet use different sequences of characters each starting with the letter x410 cyrillic capital letter a in such cases the lang argument specifies which language s conventions are to be used. if the argument is specified the value should be either an empty sequence or a value that would be valid for the xml lang attribute see extensible markup language xml 1.0 fifth edition note that this permits the identification of sublanguages based on country codes from iso 3166-1 as well as identification of dialects and regions within a country.. the set of languages for which numbering is supported is implementation-defined if the lang argument is absent or is set to an empty sequence or is invalid or is not a language supported by the implementation then the number is formatted using the default language from the dynamic context. the format modifier must be a string that matches the regular expression co at that is if it is present it must consist of one or more of the following in order either c or o optionally followed by a sequence of characters enclosed between parentheses to indicate cardinal or ordinal numbering respectively the default being cardinal numbering either a or t to indicate alphabetic or traditional numbering respectively the default being implementation-defined if the o modifier is present this indicates a request to output ordinal numbers rather than cardinal numbers. for example in english when used with the format token 1 this outputs the sequence 1st 2nd 3rd 4th and when used with the format token w outputs the sequence first second third fourth the string of characters between the parentheses if present is used to select between other possible variations of cardinal or ordinal numbering sequences. the interpretation of this string is implementation-defined no error occurs if the implementation does not define any interpretation for the defined string. for example in some languages ordinal numbers vary depending on the grammatical context they may have different genders and may decline with the noun that they qualify. in such cases the string appearing in parentheses after the letter o may be used to indicate the variation of the ordinal number required. the way in which the variation is indicated will depend on the conventions of the language. for inflected languages that vary the ending of the word the recommended approach is to indicate the required ending preceded by a hyphen for example in german appropriate values are o e o er o es o en it is implementation-defined what combinations of values of the format token the language and the cardinal ordinal modifier are supported. if ordinal numbering is not supported for the combination of the format token the language and the string appearing in parentheses the request is ignored and cardinal numbers are generated instead. example ordinal numbering in italian the specification 1 o with lang equal to it if supported should produce the sequence 1 2 3 4 the specification ww o with lang equal to it if supported should produce the sequence primo secondo terzo quarto quinto the use of the a or t modifier disambiguates between numbering sequences that use letters. in many languages there are two commonly used numbering sequences that use letters. one numbering sequence assigns numeric values to letters in alphabetic sequence and the other assigns numeric values to each letter in some other manner traditional in that language. in english these would correspond to the numbering sequences specified by the format tokens a and i. in some languages the first member of each sequence is the same and so the format token alone would be ambiguous. in the absence of the a or t modifier the default is implementation-defined error conditions a dynamic error is raised err fodf1310 if the format token is invalid that is if it violates any mandatory rules indicated by an emphasized must or required keyword in the above rules for example the error is raised if the primary format token contains a digit but does not match the required regular expression. notes note the careful distinction between conditions that are errors and conditions where fallback occurs. the principle is that an error in the syntax of the format picture will be reported by all processors while a construct that is recognized by some implementations but not others will never result in an error but will instead cause a fallback representation of the integer to be used. examples the expression format-integer 123 0000 returns 0123 format-integer 123 w might return one hundred and twenty-three the expression format-integer 21 1 o en returns 21st format-integer 14 ww o e de might return vierzehnte the expression format-integer 7 a returns g the expression format-integer 57 i returns lvii the expression format-integer 1234 0 returns 1 234 4.7 formatting numbers this section defines a function for formatting decimal and floating point numbers. function meaning fn format-number returns a string containing a number formatted according to a given picture string taking account of decimal formats specified in the static context. note this function can be used to format any numeric quantity including an integer. for integers however the fn format-integer function offers additional possibilities. note also that the picture strings used by the two functions are not 100 compatible though they share some options in common. 4.7.1 defining a decimal format decimal formats are defined in the static context and the way they are defined is therefore outside the scope of this specification. xslt and xquery both provide custom syntax for creating a decimal format. the static context provides a set of decimal formats. one of the decimal formats is unnamed the others if any are identified by a qname. there is always an unnamed decimal format available but its contents are implementation-defined each decimal format provides a set of named properties described in the following table name type usage non-normative decimal-separator-sign a single character defines the character used to represent the decimal point typically both in the picture string and in the formatted number grouping-separator-sign a single character defines the character used to separate groups of digits typically both in the picture string and in the formatted number infinity a string defines the string used to represent the value positive or negative infinity in the formatted number typically infinity minus-sign a single character defines the character used as a minus sign in the formatted number if there is no subpicture for formatting negative numbers typically x2d nan a string defines the string used to represent the value nan in the formatted number percent-sign a single character defines the character used as a percent sign typically both in the picture string and in the formatted number per-mille-sign a single character defines the character used as a per-mille sign typically x2030 both in the picture string and in the formatted number mandatory-digit-sign a single character which must be a character in unicode category nd with decimal digit value 0 zero defines the characters used in the picture string to represent a mandatory digit for example if the mandatory-digit-sign is 0 then any of the digits 0 to 9 may be used interchangeably in the picture string to represent a mandatory digit and in the formatted number the characters 0 to 9 will be used to represent the digits one to nine. optional-digit-sign a single character defines the character used in the picture string to represent an optional digit typically pattern-separator-sign a single character defines the character used in the picture string to separate the positive and negative subpictures typically definition the decimal digit family of a decimal format is the sequence of ten digits with consecutive unicode codepoints starting with the mandatory-digit-sign. it is a constraint that for any named or unnamed decimal format the properties representing characters used in a picture string must have distinct values. these properties are decimal-separator-sign grouping-separator-sign percent-sign per-mille-sign optional-digit-sign and pattern-separator-sign. furthermore none of these properties may be equal to any character in the decimal digit family 4.7.2 fn format-number summary returns a string containing a number formatted according to a given picture string taking account of decimal formats specified in the static context. signatures fn format-number value as numeric picture as xs string as xs string fn format-number value as numeric picture as xs string decimal-format-name as xs string as xs string properties the two-argument form of this function is deterministic context-independent and focus-independent the three-argument form of this function is deterministic context-dependent and focus-independent it depends on decimal formats and namespaces. rules the effect of the two-argument form of the function is equivalent to calling the three-argument form with an empty sequence as the value of the third argument. the function formats value as a string using the picture string specified by the picture argument and the decimal-format named by the decimal-format-name argument or the default decimal-format if there is no decimal-format-name argument. the syntax of the picture string is described in 4.7.3 syntax of the picture string. the value argument may be of any numeric data type xs double xs float xs decimal or their subtypes including xs integer note that if an xs decimal is supplied it is not automatically promoted to an xs double as such promotion can involve a loss of precision. if the supplied value of the value argument is an empty sequence the function behaves as if the supplied value were the xs double value nan. the value of decimal-format-name if present and non-empty must be a string which after removal of leading and trailing whitespace is in the form of an an eqname as defined in the xpath 3.0 grammar that is one of the following a lexical qname which is expanded using the statically known namespaces. the default namespace is not used no prefix means no namespace a uriqualifiedname using the syntax q uri local where the uri can be zero-length to indicate a name in no namespace. the decimal format that is used is the decimal format in the static context whose name matches decimal-format-name if supplied or the default decimal format in the static context otherwise. the evaluation of the format-number function takes place in two phases an uow.acc.tab.analysis phase described in 4.7.4 analysing the picture string and a formatting phase described in 4.7.5 formatting the number. the uow.acc.tab.analysis phase takes as its inputs the picture string and the variables derived from the relevant decimal format in the static context and produces as its output a number of variables with defined values. the formatting phase takes as its inputs the number to be formatted and the variables produced by the uow.acc.tab.analysis phase and produces as its output a string containing a formatted representation of the number. the result of the function is the formatted string representation of the supplied number. error conditions a dynamic error is raised err fodf1280 if the name specified as the decimal-format-name argument is neither a valid lexical qname nor a valid uriqualifiedname or if it uses a prefix that is not found in the statically known namespaces or if the static context does not contain a declaration of a decimal-format with a matching expanded qname. if the processor is able to detect the error statically for example when the argument is supplied as a string literal then the processor may optionally signal this as a static error. notes numbers will always be formatted with the most significant digit on the left. examples the following examples assume a default decimal format in which the chosen digits are the ascii digits 0-9 the decimal separator is the grouping separator is the minus-sign is the percent-sign is and the exponent separator is e the expression format-number 12345.6 00 returns 12,345.60 the expression format-number 12345678.9 9,999.99 returns 12,345,678.90 the expression format-number 123.9 9999 returns 0124 the expression format-number 0.14 01 returns 14 the expression format-number 6 000 returns 006 the expression format-number 12.34 0.000e00 returns 1.234e01 the expression format-number 12.34 000e0 returns 0.123e2 the following example assumes the existence of a decimal format named ch in which the grouping separator is and the decimal separator is the expression format-number 1234.5678 0 00 ch returns 1 234 57 4.7.3 syntax of the picture string note this differs from the format-number function previously defined in xslt 2.0 in that any digit can be used in the picture string to represent a mandatory digit for example the picture strings 000 001 and 999 are equivalent. the digits used must all be from the same decimal digit family specifically the sequence of ten consecutive digits starting with the mandatory-digit-sign. this change is to align format-number which previously used 000 with format-datetime which used 001 definition the formatting of a number is controlled by a picture string. the picture string is a sequence of characters in which the characters assigned to the properties decimal-separator-sign grouping-sign decimal-digit-family optional-digit-sign and pattern-separator-sign are classified as active characters and all other characters including the percent-sign and per-mille-sign are classified as passive characters. the integer part of the sub-picture is defined as the part that appears to the left of the decimal-separator-sign if there is one or the entire sub-picture otherwise. the fractional part of the sub-picture is defined as the part that appears to the right of the decimal-separator-sign if there is one or the part that appears to the right of the rightmost active character otherwise. the fractional part may be zero-length. a dynamic error is raised err fodf1310 if the picture string does not conform to the following rules. note that in these rules the words preceded and followed refer to characters anywhere in the string they are not to be read as immediately preceded and immediately followed a picture-string consists either of a sub-picture or of two sub-pictures separated by a pattern-separator-sign. a picture-string must not contain more than one pattern-separator-sign. if the picture-string contains two sub-pictures the first is used for positive values and the second for negative values. a sub-picture must not contain more than one decimal-separator-sign. a sub-picture must not contain more than one percent-sign or per-mille-sign and it must not contain one of each. a sub-picture must contain at least one character that is an optional-digit-sign or a member of the decimal-digit-family. a sub-picture must not contain a passive character that is preceded by an active character and that is followed by another active character. a sub-picture must not contain a grouping-separator-sign adjacent to a decimal-separator-sign. the integer part of a sub-picture must not contain a member of the decimal-digit-family that is followed by an optional-digit-sign. the fractional part of a sub-picture must not contain an optional-digit-sign that is followed by a member of the decimal-digit-family. 4.7.4 analysing the picture string this phase of the algorithm analyses the picture string and the properties from the selected decimal format in the static context and it has the effect of setting the values of various variables which are used in the subsequent formatting phase. these variables are listed below. each is shown with its initial setting and its data type. several variables are associated with each sub-picture. if there are two sub-pictures then these rules are applied to one sub-picture to obtain the values that apply to positive numbers and to the other to obtain the values that apply to negative numbers. if there is only one sub-picture then the values for both cases are derived from this sub-picture. the variables are as follows the integer-part-grouping-positions is a sequence of integers representing the positions of grouping separators within the integer part of the sub-picture. for each grouping-separator-sign that appears within the integer part of the sub-picture this sequence contains an integer that is equal to the total number of optional-digit-sign and decimal-digit-family characters that appear within the integer part of the sub-picture and to the right of the grouping-separator-sign. in addition if these integer-part-grouping-positions are at regular intervals that is if they form a sequence n 2n 3n for some integer value n including the case where there is only one number in the list then the sequence contains all integer multiples of n as far as necessary to accommodate the largest possible number. the minimum-integer-part-size is an integer indicating the minimum number of digits that will appear to the left of the decimal-separator-sign. it is normally set to the number of decimal-digit-family characters found in the integer part of the sub-picture. but if the sub-picture contains no decimal-digit-family character and no decimal-separator-sign it is set to one. note there is no maximum integer part size. all significant digits in the integer part of the number will be displayed even if this exceeds the number of optional-digit-sign and decimal-digit-family characters in the subpicture. the prefix is set to contain all passive characters in the sub-picture to the left of the leftmost active character. if the picture string contains only one sub-picture the prefix for the negative sub-picture is set by concatenating the minus-sign character and the prefix for the positive sub-picture if any in that order. the fractional-part-grouping-positions is a sequence of integers representing the positions of grouping separators within the fractional part of the sub-picture. for each grouping-separator-sign that appears within the fractional part of the sub-picture this sequence contains an integer that is equal to the total number of optional-digit-sign and decimal-digit-family characters that appear within the fractional part of the sub-picture and to the left of the grouping-separator-sign. note there is no need to extrapolate grouping positions on the fractional side because the number of digits in the output will never exceed the number of optional-digit-sign and decimal-digit-family in the fractional part of the sub-picture. the minimum-fractional-part-size is set to the number of decimal-digit-family characters found in the fractional part of the sub-picture. the maximum-fractional-part-size is set to the total number of optional-digit-sign and decimal-digit-family characters found in the fractional part of the sub-picture. the suffix is set to contain all passive characters to the right of the rightmost active character in the sub-picture. note if there is only one sub-picture then all variables for positive numbers and negative numbers will be the same except for prefix the prefix for negative numbers will be preceded by the minus-sign character. 4.7.5 formatting the number this section describes the second phase of processing of the fn format-number function. this phase takes as input a number to be formatted referred to as the input number and the variables set up by analysing the decimal format in the static context and the picture string as described above. the result of this phase is a string which forms the return value of the fn format-number function. the algorithm for this second stage of processing is as follows if the input number is nan not a number the result is the specified nan-symbol with no prefix or suffix in the rules below the positive sub-picture and its associated variables are used if the input number is positive and the negative sub-picture and its associated variables are used otherwise. negative zero is taken as negative positive zero as positive. if the input number is positive or negative infinity the result is the concatenation of the appropriate prefix the infinity-symbol and the appropriate suffix. if the sub-picture contains a percent-sign the number is multiplied by 100. if the sub-picture contains a per-mille-sign the number is multiplied by 1000. the resulting number is referred to below as the adjusted number. the adjusted number is converted if necessary to an xs decimal value using an implementation of xs decimal that imposes no limits on the totaldigits or fractiondigits facets. if there are several such values that are numerically equal to the adjusted number bearing in mind that if the adjusted number is an xs double or xs float the comparison will be done by converting the decimal value back to an xs double or xs float the one that is chosen should be one with the smallest possible number of digits not counting leading or trailing zeroes whether significant or insignificant for example 1.0 is preferred to 0.9999999999 and 100000000 is preferred to 100000001. this value is then rounded so that it uses no more than maximum-fractional-part-size digits in its fractional part. the rounded number is defined to be the result of converting the adjusted number to an xs decimal value as described above and then calling the function fn round-half-to-even with this converted number as the first argument and the maximum-fractional-part-size as the second argument again with no limits on the totaldigits or fractiondigits in the result. the absolute value of the rounded number is converted to a string in decimal notation with no insignificant leading or trailing zeroes using the digits in the decimal-digit-family to represent the ten decimal digits and the decimal-separator-sign to separate the integer part and the fractional part. the value zero will at this stage be represented by a decimal-separator-sign on its own. if the number of digits to the left of the decimal-separator-sign is less than minimum-integer-part-size leading zero-digit-sign characters are added to pad out to that size. if the number of digits to the right of the decimal-separator-sign is less than minimum-fractional-part-size trailing zero-digit-sign characters are added to pad out to that size. for each integer n in the integer-part-grouping-positions list a grouping-separator-sign character is inserted into the string immediately after that digit that appears in the integer part of the number and has n digits between it and the decimal-separator-sign if there is such a digit. for each integer n in the fractional-part-grouping-positions list a grouping-separator-sign character is inserted into the string immediately before that digit that appears in the fractional part of the number and has n digits between it and the decimal-separator-sign if there is such a digit. if there is no decimal-separator-sign in the sub-picture or if there are no digits to the right of the decimal-separator-sign character in the string then the decimal-separator-sign character is removed from the string it will be the rightmost character in the string the result of the function is the concatenation of the appropriate prefix the string conversion of the number as obtained above and the appropriate suffix. 4.8 trigonometric and exponential functions the functions in this section perform trigonometric and other mathematical calculations on xs double values. they are provided primarily for use in applications performing geometrical computation for example when generating svg graphics. functions are provided to support the six most commonly used trigonometric calculations sine cosine and tangent and their inverses arc sine arc cosine and arc tangent. other functions such as secant cosecant and cotangent are not provided because they are easily computed in terms of these six. the functions in this section with the exception of math pi are specified by reference to ieee 754-2008 where they appear as recommended operations in section 9. ieee defines these functions for a variety of floating point formats this specification defines them only for xs double values. the ieee specification applies with the following caveats ieee states that the preferred quantum is language-defined. in this specification it is implementation-defined ieee states that certain functions should raise the inexact exception if the result is inexact. in this specification this exception if it occurs does not result in an error. any diagnostic information is outside the scope of this specification. ieee defines various rounding algorithms for inexact results and states that the choice of rounding direction and the mechanisms for influencing this choice are language-defined. in this specification the rounding direction and any mechanisms for influencing it are implementation-defined certain operations such as taking the square root of a negative number are defined in ieee to signal the invalid operation exception and return a quiet nan. in this specification such operations return nan and do not raise an error. the same policy applies to operations such as taking the logarithm of zero that raise a divide-by-zero exception. any diagnostic information is outside the scope of this specification. operations whose mathematical result is greater than the largest finite xs double value are defined in ieee to signal the overflow exception operations whose mathematical result is closer to zero than the smallest non-zero xs double value are similarly defined in ieee to signal the underflow exception. the treatment of these exceptions in this specification is defined in 4.2 arithmetic operators on numeric values. function meaning math pi returns an approximation to the mathematical constant math exp returns the value of ex. math exp10 returns the value of 10x. math log returns the natural logarithm of the argument. math log10 returns the base-ten logarithm of the argument. math pow returns the result of raising the first argument to the power of the second. math sqrt returns the non-negative square root of the argument. math sin returns the sine of the argument expressed in radians. math cos returns the cosine of the argument expressed in radians. math tan returns the tangent of the argument expressed in radians. math asin returns the arc sine of the argument the result being in the range 2 to 2 radians. math acos returns the arc cosine of the argument the result being in the range zero to radians. math atan returns the arc tangent of the argument the result being in the range 2 to 2 radians. math atan2 returns the angle in radians subtended at the origin by the point on a plane with coordinates x y and the positive x-axis the result being in the range to 4.8.1 math pi summary returns an approximation to the mathematical constant signature math pi as xs double properties this function is deterministic context-independent and focus-independent rules this function returns the xs double value whose lexical representation is 3.141592653589793e0 examples the expression 2 math pi returns 6.283185307179586e0. the expression 60 math pi div 180 converts an angle of 60 degrees to radians. 4.8.2 math exp summary returns the value of ex. signature math exp arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the mathematical constant e raised to the power of arg as defined in the ieee 754-2008 specification of the exp function applied to 64-bit binary floating point values. notes the treatment of overflow and underflow is defined in 4.2 arithmetic operators on numeric values. examples the expression math exp returns the expression math exp 0 returns 1.0e0. the expression math exp 1 returns 2.7182818284590455e0. the expression math exp 2 returns 7.38905609893065e0. the expression math exp 1 returns 0.36787944117144233e0. the expression math exp math pi returns 23.140692632779267e0. the expression math exp xs double nan returns xs double nan the expression math exp xs double inf returns xs double inf the expression math exp xs double inf returns 0.0e0. 4.8.3 math exp10 summary returns the value of 10x. signature math exp10 arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is ten raised to the power of arg as defined in the ieee 754-2008 specification of the exp10 function applied to 64-bit binary floating point values. notes the treatment of overflow and underflow is defined in 4.2 arithmetic operators on numeric values. examples the expression math exp10 returns the expression math exp10 0 returns 1.0e0. the expression math exp10 1 returns 1.0e1. the expression math exp10 0.5 returns 3.1622776601683795e0. the expression math exp10 1 returns 1.0e-1. the expression math exp10 xs double nan returns xs double nan the expression math exp10 xs double inf returns xs double inf the expression math exp10 xs double inf returns 0.0e0. 4.8.4 math log summary returns the natural logarithm of the argument. signature math log arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the natural logarithm of arg as defined in the ieee 754-2008 specification of the log function applied to 64-bit binary floating point values. notes the treatment of dividebyzero and invalidoperation exceptions is defined in 4.2 arithmetic operators on numeric values. the effect is that if the argument is less than or equal to zero the result is nan. examples the expression math log returns the expression math log 0 returns xs double inf the expression math log math exp 1 returns 1.0e0. the expression math log 1.0e-3 returns 6.907755278982137e0. the expression math log 2 returns 0.6931471805599453e0. the expression math log 1 returns xs double nan the expression math log xs double nan returns xs double nan the expression math log xs double inf returns xs double inf the expression math log xs double inf returns xs double nan 4.8.5 math log10 summary returns the base-ten logarithm of the argument. signature math log10 arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the base-10 logarithm of arg as defined in the ieee 754-2008 specification of the log10 function applied to 64-bit binary floating point values. notes the treatment of dividebyzero and invalidoperation exceptions is defined in 4.2 arithmetic operators on numeric values. the effect is that if the argument is less than or equal to zero the result is nan. examples the expression math log10 returns the expression math log10 0 returns xs double inf the expression math log10 1.0e3 returns 3.0e0. the expression math log10 1.0e-3 returns 3.0e0. the expression math log10 2 returns 0.3010299956639812e0. the expression math log10 1 returns xs double nan the expression math log10 xs double nan returns xs double nan the expression math log10 xs double inf returns xs double inf the expression math log10 xs double inf returns xs double nan 4.8.6 math pow summary returns the result of raising the first argument to the power of the second. signature math pow x as xs double y as numeric as xs double properties this function is deterministic context-independent and focus-independent rules if x is the empty sequence the function returns the empty sequence. if y is an instance of xs integer the result is x raised to the power of y as defined in the ieee 754-2008 specification of the pown function applied to a 64-bit binary floating point value and an integer. otherwise y is converted to an xs double by numeric promotion and the result is the value of x raised to the power of y as defined in the ieee 754-2008 specification of the pow function applied to two 64-bit binary floating point values. notes the treatment of the dividebyzero and invalidoperation exceptions is defined in 4.2 arithmetic operators on numeric values. some of the consequences are illustrated in the examples below. examples the expression math pow 93.7 returns the expression math pow 2 3 returns 8.0e0. the expression math pow 2 3 returns 8.0e0. the expression math pow 2 3 returns 0.125e0. the expression math pow 2 3 returns 0.125e0. the expression math pow 2 0 returns 1.0e0. the expression math pow 0 0 returns 1.0e0. the expression math pow xs double inf 0 returns 1.0e0. the expression math pow xs double nan 0 returns 1.0e0. the expression math pow math pi 0 returns 1.0e0. the expression math pow 0e0 3 returns 0.0e0. the expression math pow 0e0 4 returns 0.0e0. the expression math pow 0e0 3 returns 0.0e0. the expression math pow 0 4 returns 0.0e0. the expression math pow 0e0 3 returns xs double inf the expression math pow 0e0 4 returns xs double inf the expression math pow 0e0 3 returns xs double inf the expression math pow 0 4 returns xs double inf the expression math pow 16 0.5e0 returns 4.0e0. the expression math pow 16 0.25e0 returns 2.0e0. the expression math pow 0e0 3.0e0 returns xs double inf the expression math pow 0e0 3.0e0 returns xs double inf odd-valued whole numbers are treated specially the expression math pow 0e0 3.1e0 returns xs double inf the expression math pow 0e0 3.1e0 returns xs double inf the expression math pow 0e0 3.0e0 returns 0.0e0. the expression math pow 0e0 3.0e0 returns 0.0e0. odd-valued whole numbers are treated specially the expression math pow 0e0 3.1e0 returns 0.0e0. the expression math pow 0e0 3.1e0 returns 0.0e0. the expression math pow 1 xs double inf returns 1.0e0. the expression math pow 1 xs double inf returns 1.0e0. the expression math pow 1 xs double inf returns 1.0e0. the expression math pow 1 xs double inf returns 1.0e0. the expression math pow 1 xs double nan returns 1.0e0. the expression math pow 2.5e0 2.0e0 returns 6.25e0. the expression math pow 2.5e0 2.00000001e0 returns xs double nan 4.8.7 math sqrt summary returns the non-negative square root of the argument. signature math sqrt arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the mathematical non-negative square root of arg as defined in the ieee 754-2008 specification of the squareroot function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation exception is defined in 4.2 arithmetic operators on numeric values. the effect is that if the argument is less than zero the result is nan. if arg is positive or negative zero positive infinity or nan then the result is arg. negative zero is the only case where the result can have negative sign examples the expression math sqrt returns the expression math sqrt 0.0e0 returns 0.0e0. the expression math sqrt 0.0e0 returns 0.0e0. the expression math sqrt 1.0e6 returns 1.0e3. the expression math sqrt 2.0e0 returns 1.4142135623730951e0. the expression math sqrt 2.0e0 returns xs double nan the expression math sqrt xs double nan returns xs double nan the expression math sqrt xs double inf returns xs double inf the expression math sqrt xs double inf returns xs double nan 4.8.8 math sin summary returns the sine of the argument expressed in radians. signature math sin as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if is the empty sequence the function returns the empty sequence. otherwise the result is the sine of treated as an angle in radians as defined in the ieee 754-2008 specification of the sin function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation and underflow exceptions is defined in 4.2 arithmetic operators on numeric values. if is positive or negative zero the result is if is positive or negative infinity or nan then the result is nan. otherwise the result is always in the range 1.0e0 to 1.0e0 examples the expression math sin returns the expression math sin 0 returns 0.0e0. the expression math sin 0.0e0 returns 0.0e0. the expression math sin math pi div 2 returns 1.0e0. the expression math sin math pi div 2 returns 1.0e0. the expression math sin math pi returns 0.0e0 approximately the expression math sin xs double nan returns xs double nan the expression math sin xs double inf returns xs double nan the expression math sin xs double inf returns xs double nan 4.8.9 math cos summary returns the cosine of the argument expressed in radians. signature math cos as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if is the empty sequence the function returns the empty sequence. if is positive or negative infinity or nan then the result is nan. otherwise the result is the cosine of treated as an angle in radians as defined in the ieee 754-2008 specification of the cos function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation exception is defined in 4.2 arithmetic operators on numeric values. if is positive or negative zero the result is if is positive or negative infinity or nan then the result is nan. otherwise the result is always in the range 1.0e0 to 1.0e0 examples the expression math cos returns the expression math cos 0 returns 1.0e0. the expression math cos 0.0e0 returns 1.0e0. the expression math cos math pi div 2 returns 0.0e0 approximately the expression math cos math pi div 2 returns 0.0e0 approximately the expression math cos math pi returns 1.0e0. the expression math cos xs double nan returns xs double nan the expression math cos xs double inf returns xs double nan the expression math cos xs double inf returns xs double nan 4.8.10 math tan summary returns the tangent of the argument expressed in radians. signature math tan as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if is the empty sequence the function returns the empty sequence. otherwise the result is the tangent of treated as an angle in radians as defined in the ieee 754-2008 specification of the tan function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation and underflow exceptions is defined in 4.2 arithmetic operators on numeric values. if is positive or negative infinity or nan then the result is nan. examples the expression math tan returns the expression math tan 0 returns 0.0e0. the expression math tan 0.0e0 returns 0.0e0. the expression math tan math pi div 4 returns 1.0e0 approximately the expression math tan math pi div 4 returns 1.0e0 approximately the expression math tan math pi div 2 returns 1.633123935319537e16 approximately the expression math tan math pi div 2 returns 1.633123935319537e16 approximately the expression math tan math pi returns 0.0e0 approximately the expression math tan xs double nan returns xs double nan the expression math tan xs double inf returns xs double nan the expression math tan xs double inf returns xs double nan 4.8.11 math asin summary returns the arc sine of the argument the result being in the range 2 to 2 radians. signature math asin arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the arc sine of treated as an angle in radians as defined in the ieee 754-2008 specification of the asin function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation and underflow exceptions is defined in 4.2 arithmetic operators on numeric values. if arg is positive or negative zero the result is arg. if arg is nan or if its absolute value is greater than one then the result is nan. in other cases the result is an xs double value representing an angle in radians in the range 2 2. examples the expression math asin returns the expression math asin 0 returns 0.0e0. the expression math asin 0.0e0 returns 0.0e0. the expression math asin 1.0e0 returns 1.5707963267948966e0 approximately the expression math asin 1.0e0 returns 1.5707963267948966e0 approximately the expression math asin 2.0e0 returns xs double nan the expression math asin xs double nan returns xs double nan the expression math asin xs double inf returns xs double nan the expression math asin xs double inf returns xs double nan 4.8.12 math acos summary returns the arc cosine of the argument the result being in the range zero to radians. signature math acos arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the arc cosine of treated as an angle in radians as defined in the ieee 754-2008 specification of the acos function applied to 64-bit binary floating point values. notes the treatment of the invalidoperation exception is defined in 4.2 arithmetic operators on numeric values. if arg is nan or if its absolute value is greater than one then the result is nan. in other cases the result is an xs double value representing an angle in radians in the range 0 examples the expression math acos returns the expression math acos 0 returns 1.5707963267948966e0 approximately the expression math acos 0.0e0 returns 1.5707963267948966e0 approximately the expression math acos 1.0e0 returns 0.0e0. the expression math acos 1.0e0 returns 3.141592653589793e0 approximately the expression math acos 2.0e0 returns xs double nan the expression math acos xs double nan returns xs double nan the expression math acos xs double inf returns xs double nan the expression math acos xs double inf returns xs double nan 4.8.13 math atan summary returns the arc tangent of the argument the result being in the range 2 to 2 radians. signature math atan arg as xs double as xs double properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the result is the arc tangent of treated as an angle in radians as defined in the ieee 754-2008 specification of the atan function applied to 64-bit binary floating point values. notes the treatment of the underflow exception is defined in 4.2 arithmetic operators on numeric values. if arg is positive or negative zero the result is arg. if arg is nan then the result is nan. in other cases the result is an xs double value representing an angle in radians in the range 2 2. examples the expression math atan returns the expression math atan 0 returns 0.0e0. the expression math atan 0.0e0 returns 0.0e0. the expression math atan 1.0e0 returns 0.7853981633974483e0 approximately the expression math atan 1.0e0 returns 0.7853981633974483e0 approximately the expression math atan xs double nan returns xs double nan the expression math atan xs double inf returns 1.5707963267948966e0 approximately the expression math atan xs double inf returns 1.5707963267948966e0 approximately 4.8.14 math atan2 summary returns the angle in radians subtended at the origin by the point on a plane with coordinates x y and the positive x-axis the result being in the range to signature math atan2 y as xs double x as xs double as xs double properties this function is deterministic context-independent and focus-independent rules the result is the value of atan2 y x as defined in the ieee 754-2008 specification of the atan2 function applied to 64-bit binary floating point values. notes the treatment of the underflow exception is defined in 4.2 arithmetic operators on numeric values. if either argument is nan then the result is nan. if y is positive and x is positive and finite then subject to rules for overflow underflow and approximation the value of atan2 y x is atan y div x if y is positive and x is negative and finite then subject to the same caveats the value of atan2 y x is atan y div x some results for special values of the arguments are shown in the examples below. examples the expression math atan2 0.0e0 0.0e0 returns 0.0e0. the expression math atan2 0.0e0 0.0e0 returns 0.0e0. the expression math atan2 0.0e0 0.0e0 returns math pi the expression math atan2 0.0e0 0.0e0 returns math pi the expression math atan2 1 0.0e0 returns math pi div 2. the expression math atan2 1 0.0e0 returns math pi div 2. the expression math atan2 0.0e0 1 returns math pi the expression math atan2 0.0e0 1 returns math pi the expression math atan2 0.0e0 1 returns 0.0e0. the expression math atan2 0.0e0 1 returns 0.0e0. 5 functions on strings this section specifies functions and operators on the xml schema part 2 datatypes second edition xs string datatype and the datatypes derived from it. 5.1 string types the operators described in this section are defined on the following types. each type whose name is indented is derived from the type whose name appears nearest above with one less level of indentation. xs string xs normalizedstring xs token xs language xs nmtoken xs name xs ncname xs id xs idref xs entity they also apply to user-defined types derived by restriction from the above types. 5.2 functions to assemble and disassemble strings function meaning fn codepoints-to-string creates an xs string from a sequence of codepoints fn string-to-codepoints returns the sequence of codepoints that constitute an xs string value. 5.2.1 fn codepoints-to-string summary creates an xs string from a sequence of codepoints signature fn codepoints-to-string arg as xs integer as xs string properties this function is deterministic context-independent and focus-independent rules the function returns the string made up from the characters whose unicode codepoints are supplied in arg. this will be the zero-length string if arg is the empty sequence. error conditions a dynamic error is raised err foch0001 if any of the codepoints in arg is not a permitted xml character. examples the expression fn codepoints-to-string 66 65 67 72 returns bach the expression fn codepoints-to-string 2309 2358 2378 2325 returns the expression fn codepoints-to-string returns the expression fn codepoints-to-string 0 raises error foch0001. 5.2.2 fn string-to-codepoints summary returns the sequence of codepoints that constitute an xs string value. signature fn string-to-codepoints arg as xs string as xs integer properties this function is deterministic context-independent and focus-independent rules the function returns a sequence of integers each integer being the unicode codepoints of the corresponding character in arg. if arg is a zero-length string or the empty sequence the function returns the empty sequence. examples the expression fn string-to-codepoints th r se returns 84 104 233 114 232 115 101 5.3 comparison of strings function meaning fn compare returns 1 0 or 1 depending on whether comparand1 collates before equal to or after comparand2 according to the rules of a selected collation. fn codepoint-equal returns true if two strings are equal considered codepoint-by-codepoint. 5.3.1 collations a collation is a specification of the manner in which strings s are compared and by extension ordered. when values whose type is xs string or a type derived from xs string are compared or equivalently sorted the comparisons are inherently performed according to some collation even if that collation is defined entirely on codepoint values the character model for the world wide web 1.0 fundamentals observes that some applications may require different comparison and ordering behaviors than other applications. similarly some users having particular linguistic expectations may require different behaviors than other users. consequently the collation must be taken into account when comparing strings in any context. several functions in this and the following section make use of a collation. collations can indicate that two different codepoints are in fact equal for comparison purposes e.g. v and w are considered equivalent in some swedish collations strings can be compared codepoint-by-codepoint or in a linguistically appropriate manner as defined by the collation. some collations especially those based on the unicode collation algorithm can be tailored for various purposes. this document does not discuss such tailoring nor does it provide a mechanism to perform tailoring. instead it assumes that the collation argument to the various functions below is a tailored and named collation. the unicode codepoint collation is a collation available in every implementation which sorts based on codepoint values. for further details see 5.3.2 the unicode codepoint collation in the ideal case a collation should treat two strings as equal if the two strings are identical after unicode normalization. thus the character model for the world wide web 1.0 normalization recommends that all strings be subjected to early unicode normalization and some collations will raise runtime errors if they encounter strings that are not properly normalized. however it is not possible to guarantee that all strings in all xml documents are in fact normalized or that they are normalized in the same manner. in order to maximize interoperability of operations on xml documents in general there may be collations that operate on unnormalized strings and other collations that implicitly normalize strings before comparing them. applications may choose the kind of collation best suited for their needs. note that collations based on the unicode collation algorithm implicitly normalize strings before comparison and produce equivalent results regardless of a string s normalization. this specification assumes that collations are named and that the collation name may be provided as an argument to string functions. functions that allow specification of a collation do so with an argument whose type is xs string but whose lexical form must conform to an xs anyuri. if the collation is specified using a relative uri reference it is resolved relative to the value of the static base uri property from the static context. this specification also defines the manner in which a default collation is determined if the collation argument is not specified in calls of functions that use a collation but allow it to be omitted. this specification does not define whether or not the collation uri is dereferenced. the collation uri may be an abstract identifier or it may refer to an actual resource describing the collation. if it refers to a resource this specification does not define the nature of that resource. one possible candidate is that the resource is a locale description expressed using the locale data markup language see locale data markup language functions such as fn compare and fn max that compare xs string values use a single collation uri to identify all aspects of the collation rules. this means that any parameters such as the strength of the collation must be specified as part of the collation uri. for example suppose there is a collation http www.example.com collations french that refers to a french collation that compares on the basis of base characters. collations that use the same basic rules but with higher strengths for example base characters and accents or base characters accents and case would need to be given different names say http www.example.com collations french1 and http www.example.com collations french2 note that some specifications use the term collation to refer to an algorithm that can be parameterized but in this specification each possible parameterization is considered to be a distinct collation. the xquery xpath static context includes a provision for a default collation that can be used for string comparisons and ordering operations. see the description of the static context in section 2.1.1 static context xp30. if the default collation is not specified by the user or the system the default collation is the unicode codepoint collation note xml allows elements to specify the xml lang attribute to indicate the language associated with the content of such an element. this specification does not use xml lang to identify the default collation because using xml lang does not produce desired effects when the two strings to be compared have different xml lang values or when a string is multilingual. 5.3.2 the unicode codepoint collation definition the collation uri http www.w3.org 2005 xpath-functions collation codepoint identifies a collation which must be recognized by every implementation it is referred to as the unicode codepoint collation not to be confused with the unicode collation algorithm the unicode codepoint collation does not perform any normalization on the supplied strings. the collation is defined as follows. each of the two strings is converted to a sequence of integers using the fn string-to-codepoints function. these two sequences a and b are then compared as follows if both sequences are empty the strings are equal if one sequence is empty and the other is not then the string corresponding to the empty sequence is less than the other string. if the first integer in a is less than the first integer in b then the string corresponding to a is less than the string corresponding to b. if the first integer in a is greater than the first integer in b then the string corresponding to a is greater than the string corresponding to b. otherwise the first pair of integers are equal the result is obtained by applying the same rules recursively to fn subsequence a 2 and fn subsequence b 2 note while the unicode codepoint collation does not produce results suitable for quality publishing of printed indexes or directories it is adequate for many purposes where a restricted alphabet is used such as sorting of vehicle registrations. 5.3.3 choosing a collation many functions have two signatures where one signature includes a collation argument and the other omits this argument. the collation to use for these functions is determined by the following rules if the function specifies an explicit collation collationa e.g. if the optional collation argument is specified in a call of the fn compare function then if collationa is supported by the implementation then collationa is used. otherwise a dynamic error is raised err foch0002 if no collation is explicitly specified for the function and the default collation in the xquery xpath static context is collationb then if collationb is supported by the implementation then collationb is used. otherwise a dynamic error is raised err foch0002 note because the set of collations that are supported is implementation-defined an implementation has the option to support all collation uris in which case it will never raise this error. 5.3.4 fn compare summary returns 1 0 or 1 depending on whether comparand1 collates before equal to or after comparand2 according to the rules of a selected collation. signatures fn compare comparand1 as xs string comparand2 as xs string as xs integer fn compare comparand1 as xs string comparand2 as xs string collation as xs string as xs integer properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules returns 1 0 or 1 depending on whether the value of the comparand1 is respectively less than equal to or greater than the value of comparand2 according to the rules of the collation that is used. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. if either comparand1 or comparand2 is the empty sequence the function returns the empty sequence. this function called with the first signature defines the semantics of the eq ne gt lt le and ge operators on xs string values. examples the expression fn compare abc abc returns 0. the expression fn compare strasse stra e returns 0. assuming the default collation includes provisions that equate ss and the german character sharp-s otherwise the returned value depends on the semantics of the default collation. the expression fn compare strasse stra e http example.com deutsch returns 0. assuming the collation identified by the uri http example.com deutsch includes provisions that equate ss and the german character sharp-s otherwise the returned value depends on the semantics of that collation. the expression fn compare strassen stra e returns 1. assuming the default collation includes provisions that treat differences between ss and the german character sharp-s with less strength than the differences between the base characters such as the final n 5.3.5 fn codepoint-equal summary returns true if two strings are equal considered codepoint-by-codepoint. signature fn codepoint-equal comparand1 as xs string comparand2 as xs string as xs boolean properties this function is deterministic context-independent and focus-independent rules if either argument is the empty sequence the function returns the empty sequence. otherwise the function returns true or false depending on whether the value of comparand1 is equal to the value of comparand2 according to the unicode codepoint collation http www.w3.org 2005 xpath-functions collation codepoint notes this function allows xs anyuri values to be compared without having to specify the unicode codepoint collation. examples the expression fn codepoint-equal abcd abcd returns true the expression fn codepoint-equal abcd abcd returns false the expression fn codepoint-equal returns true the expression fn codepoint-equal returns the expression fn codepoint-equal returns 5.4 functions on string values the following functions are defined on values of type xs string and types derived from it. function meaning fn concat returns the concatenation of the string values of the arguments. fn string-join returns a string created by concatenating the items in a sequence with a defined separator between adjacent items. fn substring returns the portion of the value of sourcestring beginning at the position indicated by the value of start and continuing for the number of characters indicated by the value of length. fn string-length returns the number of characters in a string. fn normalize-space returns the value of arg with leading and trailing whitespace removed and sequences of internal whitespace reduced to a single space character. fn normalize-unicode returns the value of arg after applying unicode normalization. fn upper-case converts a string to upper case. fn lower-case converts a string to lower case. fn translate returns the value of arg modified by replacing or removing individual characters. notes when the above operators and functions are applied to datatypes derived from xs string they are guaranteed to return values that are instances of xs string but the value might or might not be an instance of the particular subtype of xs string to which they were applied. the strings returned by fn concat and fn string-join are not guaranteed to be normalized. but see note in fn concat. 5.4.1 fn concat summary returns the concatenation of the string values of the arguments. operator mapping the two-argument form of this function defines the semantics of the operator. signature fn concat arg1 as xs anyatomictype arg2 as xs anyatomictype as xs string properties this function is deterministic context-independent and focus-independent rules this function accepts two or more xs anyatomictype arguments and casts each one to xs string. the function returns the xs string that is the concatenation of the values of its arguments after conversion. if any argument is the empty sequence that argument is treated as the zero-length string. the fn concat function is specified to allow two or more arguments which are concatenated together. this is the only function specified in this document that allows a variable number of arguments. this capability is retained for compatibility with xml path language xpath version 1.0 notes as mentioned in 5.1 string types unicode normalization is not automatically applied to the result of fn concat. if a normalized result is required fn normalize-unicode can be applied to the xs string returned by fn concat. the following xquery let v1 i plan to go to mu let v2 nchen in september return concat v1 v2 where the represents either the actual unicode character combining diaresis unicode codepoint u+0308 or x0308 will return i plan to go to mu nchen in september where the represents either the actual unicode character combining diaresis unicode codepoint u+0308 or x0308 it is worth noting that the returned value is not normalized in nfc however it is normalized in nfd. however the following xquery let v1 i plan to go to mu let v2 nchen in september return normalize-unicode concat v1 v2 where the represents either the actual unicode character combining diaresis unicode codepoint u+0308 or x0308 will return i plan to go to m nchen in september this returned result is normalized in nfc. examples the expression fn concat un grateful returns ungrateful the expression fn concat thy old groans ring yet in my ancient ears. returns thy old groans ring yet in my ancient ears. the expression fn concat ciao returns ciao the expression fn concat ingratitude thou marble-hearted fiend returns ingratitude thou marble-hearted fiend the expression fn concat 01 02 03 04 true returns 1234true the expression 10 6 returns 10 6 5.4.2 fn string-join summary returns a string created by concatenating the items in a sequence with a defined separator between adjacent items. signatures fn string-join arg1 as xs string as xs string fn string-join arg1 as xs string arg2 as xs string as xs string properties this function is deterministic context-independent and focus-independent rules the effect of calling the single-argument version of this function is the same as calling the two-argument version with arg2 set to a zero-length string. the function returns an xs string created by concatenating the items in the sequence arg1 in order using the value of arg2 as a separator between adjacent items. if the value of arg2 is the zero-length string then the members of arg1 are concatenated without a separator. notes if the value of arg1 is the empty sequence the function returns the zero-length string. examples the expression fn string-join now is the time returns now is the time the expression fn string-join blow blow thou winter wind returns blow blow thou winter wind the expression fn string-join separator returns assume a document doc chap section chap doc with the section element as the context node the xml path language xpath 2.0 expression fn string-join ancestor-or-self name returns doc chap section 5.4.3 fn substring summary returns the portion of the value of sourcestring beginning at the position indicated by the value of start and continuing for the number of characters indicated by the value of length. signatures fn substring sourcestring as xs string start as xs double as xs string fn substring sourcestring as xs string start as xs double length as xs double as xs string properties this function is deterministic context-independent and focus-independent rules if the value of sourcestring is the empty sequence the function returns the zero-length string. otherwise the function returns a string comprising those characters of sourcestring whose index position counting from one is greater than or equal to the value of start rounded to an integer and if length is specified less than the sum of start and length both rounded to integers the characters returned do not extend beyond sourcestring. if start is zero or negative only those characters in positions greater than zero are returned. more specifically the three argument version of the function returns the characters in sourcestring whose position p satisfies fn round start p fn round start fn round length the two argument version of the function assumes that length is infinite and thus returns the characters in sourcestring whose position p satisfies fn round start p in the above computations the rules for op numeric-less-than and op numeric-greater-than apply. notes the first character of a string is located at position 1 not position 0. examples the expression fn substring motor car 6 returns car characters starting at position 6 to the end of sourcestring are selected. the expression fn substring metadata 4 3 returns ada characters at positions greater than or equal to 4 and less than 7 are selected. the expression fn substring 12345 1.5 2.6 returns 234 characters at positions greater than or equal to 2 and less than 5 are selected. the expression fn substring 12345 0 3 returns 12 characters at positions greater than or equal to 0 and less than 3 are selected. since the first position is 1 these are the characters at positions 1 and 2. the expression fn substring 12345 5 3 returns characters at positions greater than or equal to 5 and less than 2 are selected. the expression fn substring 12345 3 5 returns 1 characters at positions greater than or equal to 3 and less than 2 are selected. since the first position is 1 this is the character at position 1. the expression fn substring 12345 0 div 0e0 3 returns since 0 div 0e0 returns nan and nan compared to any other number returns false no characters are selected. the expression fn substring 12345 1 0 div 0e0 returns as above. the expression fn substring 1 3 returns the expression fn substring 12345 42 1 div 0e0 returns 12345 characters at positions greater than or equal to 42 and less than inf are selected. the expression fn substring 12345 1 div 0e0 1 div 0e0 returns since the value of inf inf is nan no characters are selected. 5.4.4 fn string-length summary returns the number of characters in a string. signatures fn string-length as xs integer fn string-length arg as xs string as xs integer properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules the function returns an xs integer equal to the length in characters of the value of arg. calling the zero-argument version of the function is equivalent to calling fn string-length fn string if the value of arg is the empty sequence the function returns the xs integer value zero 0 error conditions if arg is not specified and the context item is absentdm30 a dynamic error is raised err xpdy0002 xp30. notes unlike some programming languages a codepoint greater than 65535 counts as one character not two. examples the expression fn string-length harp not on that string madam that is past. returns 45. the expression fn string-length returns 0. 5.4.5 fn normalize-space summary returns the value of arg with leading and trailing whitespace removed and sequences of internal whitespace reduced to a single space character. signatures fn normalize-space as xs string fn normalize-space arg as xs string as xs string properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the function returns the zero-length string. the function returns a string constructed by stripping leading and trailing whitespace from the value of arg and replacing sequences of one or more adjacent whitespace characters with a single space x20. the whitespace characters are defined in the metasymbol s production 3 of extensible markup language xml 1.0 fifth edition if no argument is supplied then arg defaults to the string value calculated using fn string of the context item error conditions if no argument is supplied and the context item is absentdm30 then a dynamic error is raised err xpdy0002 xp30. notes the definition of whitespace is unchanged in extensible markup language xml 1.1 recommendation examples the expression fn normalize-space the wealthy curled darlings of our nation. returns the wealthy curled darlings of our nation. the expression fn normalize-space returns 5.4.6 fn normalize-unicode summary returns the value of arg after applying unicode normalization. signatures fn normalize-unicode arg as xs string as xs string fn normalize-unicode arg as xs string normalizationform as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the function returns the zero-length string. if the single-argument version of the function is used the result is the same as calling the two-argument version with normalizationform set to the string nfc otherwise the function returns the value of arg normalized according to the rules of the normalization form identified by the value of normalizationform. the effective value of normalizationform is the value of the expression fn upper-case fn normalize-space normalizationform if the effective value of normalizationform is nfc then the function returns the value of arg converted to unicode normalization form c nfc if the effective value of normalizationform is nfd then the function returns the value of arg converted to unicode normalization form d nfd if the effective value of normalizationform is nfkc then the function returns the value of arg in unicode normalization form kc nfkc if the effective value of normalizationform is nfkd then the function returns the value of arg converted to unicode normalization form kd nfkd if the effective value of normalizationform is fully-normalized then the function returns the value of arg converted to fully normalized form. if the effective value of normalizationform is the zero-length string no normalization is performed and arg is returned. normalization forms nfc nfd nfkc and nfkd and the algorithms to be used for converting a string to each of these forms are defined in unicode normalization forms the motivation for normalization form fully-normalized is explained in character model for the world wide web 1.0 normalization however as that specification did not progress beyond working draft status the normative specification is as follows a string is fully-normalized if a it is in normalization form nfc as defined in unicode normalization forms and b it does not start with a composing character. a composing character is a character that is one or both of the following the second character in the canonical decomposition mapping of some character that is not listed in the composition exclusion table defined in unicode normalization forms of non-zero canonical combining class as defined in the unicode standard a string is converted to fully-normalized form as follows if the first character in the string is a composing character prepend a single space x20 convert the resulting string to normalization form nfc. conforming implementations must support normalization form nfc and may support normalization forms nfd nfkc nfkd and fully-normalized they may also support other normalization forms with implementation-defined semantics. it is implementation-defined which version of unicode and therefore of the normalization algorithms and their underlying data is supported by the implementation. see unicode normalization forms for details of the stability policy regarding changes to the normalization rules in future versions of unicode. if the input string contains codepoints that are unassigned in the relevant version of unicode or for which no normalization rules are defined the fn normalize-unicode function leaves such codepoints unchanged. if the implementation supports the requested normalization form then it must be able to handle every input string without raising an error. error conditions a dynamic error is raised err foch0003 if the effective value of the normalizationform argument is not one of the values supported by the implementation. 5.4.7 fn upper-case summary converts a string to upper case. signature fn upper-case arg as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the zero-length string is returned. otherwise the function returns the value of arg after translating every character to its upper-case correspondent as defined in the appropriate case mappings section in the unicode standard the unicode standard for versions of unicode beginning with the 2.1.8 update only locale-insensitive case mappings should be applied. beginning with version 3.2.0 and likely future versions of unicode precise mappings are described in default case operations which are full case mappings in the absence of tailoring for particular languages and environments. every lower-case character that does not have an upper-case correspondent as well as every upper-case character is included in the returned value in its original form. notes case mappings may change the length of a string. in general the fn upper-case and fn lower-case functions are not inverses of each other fn lower-case fn upper-case arg is not guaranteed to return arg nor is fn upper-case fn lower-case arg the latin small letter dotless i as used in turkish is perhaps the most prominent lower-case letter which will not round-trip. the latin capital letter i with dot above is the most prominent upper-case letter which will not round trip there are others such as latin capital letter sharp s 1e9e which is introduced in unicode 5.1. these functions may not always be linguistically appropriate e.g. turkish i without dot or appropriate for the application e.g. titlecase in cases such as turkish a simple translation should be used first. because the function is not sensitive to locale results will not always match user expectations. in quebec for example the standard uppercase equivalent of is while in metropolitan france it is more commonly e only one of these is supported by the functions as defined. many characters of class ll lack uppercase equivalents in the unicode case mapping tables many characters of class lu lack lowercase equivalents. examples the expression fn upper-case abcd0 returns abcd0 5.4.8 fn lower-case summary converts a string to lower case. signature fn lower-case arg as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the zero-length string is returned. otherwise the function returns the value of arg after translating every character to its lower-case correspondent as defined in the appropriate case mappings section in the unicode standard the unicode standard for versions of unicode beginning with the 2.1.8 update only locale-insensitive case mappings should be applied. beginning with version 3.2.0 and likely future versions of unicode precise mappings are described in default case operations which are full case mappings in the absence of tailoring for particular languages and environments. every upper-case character that does not have a lower-case correspondent as well as every lower-case character is included in the returned value in its original form. notes case mappings may change the length of a string. in general the fn upper-case and fn lower-case functions are not inverses of each other fn lower-case fn upper-case arg is not guaranteed to return arg nor is fn upper-case fn lower-case arg the latin small letter dotless i as used in turkish is perhaps the most prominent lower-case letter which will not round-trip. the latin capital letter i with dot above is the most prominent upper-case letter which will not round trip there are others such as latin capital letter sharp s 1e9e which is introduced in unicode 5.1. these functions may not always be linguistically appropriate e.g. turkish i without dot or appropriate for the application e.g. titlecase in cases such as turkish a simple translation should be used first. because the function is not sensitive to locale results will not always match user expectations. in quebec for example the standard uppercase equivalent of is while in metropolitan france it is more commonly e only one of these is supported by the functions as defined. many characters of class ll lack uppercase equivalents in the unicode case mapping tables many characters of class lu lack lowercase equivalents. examples the expression fn lower-case abc d returns abc d 5.4.9 fn translate summary returns the value of arg modified by replacing or removing individual characters. signature fn translate arg as xs string mapstring as xs string transstring as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the function returns the zero-length string. otherwise the function returns a result string constructed by processing each character in the value of arg in order according to the following rules if the character does not appear in the value of mapstring then it is added to the result string unchanged. if the character first appears in the value of mapstring at some position m where the value of transstring is m or more characters in length then the character at position m in transstring is added to the result string. if the character first appears in the value of mapstring at some position m where the value of transstring is less than m characters in length then the character is omitted from the result string. notes if mapstring is the zero-length string then the function returns arg unchanged. if a character occurs more than once in mapstring then the first occurrence determines the action taken. if transstring is longer than mapstring the excess characters are ignored. examples the expression fn translate bar abc abc returns bar the expression fn translate aaa-- abc- abc returns aaa the expression fn translate abcdabc abc ab returns abdab 5.5 functions based on substring matching the functions described in the section examine a string arg1 to see whether it contains another string arg2 as a substring. the result depends on whether arg2 is a substring of arg1 and if so on the range of characters in arg1 which arg2 matches. when the unicode codepoint collation is used this simply involves determining whether arg1 contains a contiguous sequence of characters whose codepoints are the same one for one with the codepoints of the characters in arg2. when a collation is specified the rules are more complex. all collations support the capability of deciding whether two strings are considered equal and if not which of the strings should be regarded as preceding the other. for functions such as fn compare this is all that is required. for other functions such as fn contains the collation needs to support an additional property it must be able to decompose the string into a sequence of collation units each unit consisting of one or more characters such that two strings can be compared by pairwise comparison of these units. collation unit is equivalent to collation element as defined in unicode collation algorithm the string arg1 is then considered to contain arg2 as a substring if the sequence of collation units corresponding to arg2 is a subsequence of the sequence of the collation units corresponding to arg1. the characters in arg1 that match are the characters corresponding to these collation units. this rule may occasionally lead to surprises. for example consider a collation that treats jaeger and j ger as equal. it might do this by treating as representing two collation units in which case the expression fn contains j ger eg will return true. alternatively a collation might treat ae as a single collation unit in which case the expression fn contains jaeger eg will return false. the results of these functions thus depend strongly on the properties of the collation that is used. in addition collations may specify that some collation units should be ignored during matching. if hyphen is an ignored collation unit then fn contains code-point codepoint will be true and fn contains codepoint will also be true. in the definitions below we refer to the terms match and minimal match as defined in definitions ds2 and ds4 of unicode collation algorithm in applying these definitions c is the collation that is the value of the collation argument if specified otherwise the default collation. p is the candidate substring arg2 q is the candidate containing string arg1 the boundary condition b is satisfied at the start and end of a string and between any two characters that belong to different collation units collation elements in the language of unicode collation algorithm it is not satisfied between two characters that belong to the same collation unit. it is possible to define collations that do not have the ability to decompose a string into units suitable for substring matching. an argument to a function defined in this section may be a uri that identifies a collation that is able to compare two strings but that does not have the capability to split the string into collation units. such a collation may cause the function to fail or to give unexpected results or it may be rejected as an unsuitable argument. the ability to decompose strings into collation units is an implementation-defined property of the collation. function meaning fn contains returns true if the string arg1 contains arg2 as a substring taking collations into account. fn starts-with returns true if the string arg1 contains arg2 as a leading substring taking collations into account. fn ends-with returns true if the string arg1 contains arg2 as a trailing substring taking collations into account. fn substring-before returns the part of arg1 that precedes the first occurrence of arg2 taking collations into account. fn substring-after returns the part of arg1 that follows the first occurrence of arg2 taking collations into account. 5.5.1 fn contains summary returns true if the string arg1 contains arg2 as a substring taking collations into account. signatures fn contains arg1 as xs string arg2 as xs string as xs boolean fn contains arg1 as xs string arg2 as xs string collation as xs string as xs boolean properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules if the value of arg1 or arg2 is the empty sequence or contains only ignorable collation units it is interpreted as the zero-length string. if the value of arg2 is the zero-length string then the function returns true. if the value of arg1 is the zero-length string the function returns false. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns an xs boolean indicating whether or not the value of arg1 contains at the beginning at the end or anywhere within at least one sequence of collation units that provides a minimal match to the collation units in the value of arg2 according to the collation that is used. note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised err foch0004 if the specified collation does not support collation units. examples the collation used in these examples http example.com collationa is a collation in which both and are ignorable collation units. ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fn contains tattoo t returns true the expression fn contains tattoo ttt returns false the expression fn contains returns true the first rule is applied followed by the second rule. the expression fn contains abcdefghi d-e-f- http example.com collationa returns true the expression fn contains a b c d e f g h i d-ef- http example.com collationa returns true the expression fn contains abcd e---f ghi def http example.com collationa returns true the expression fn contains http example.com collationa returns true the second argument contains only ignorable collation units and is equivalent to the zero-length string. 5.5.2 fn starts-with summary returns true if the string arg1 contains arg2 as a leading substring taking collations into account. signatures fn starts-with arg1 as xs string arg2 as xs string as xs boolean fn starts-with arg1 as xs string arg2 as xs string collation as xs string as xs boolean properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules if the value of arg1 or arg2 is the empty sequence or contains only ignorable collation units it is interpreted as the zero-length string. if the value of arg2 is the zero-length string then the function returns true. if the value of arg1 is the zero-length string and the value of arg2 is not the zero-length string then the function returns false. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns an xs boolean indicating whether or not the value of arg1 starts with a sequence of collation units that provides a match to the collation units of arg2 according to the collation that is used. note match is defined in unicode collation algorithm error conditions a dynamic error may be raised err foch0004 if the specified collation does not support collation units. examples the collation used in these examples http example.com collationa is a collation in which both and are ignorable collation units. ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fn starts-with tattoo tat returns true the expression fn starts-with tattoo att returns false the expression fn starts-with returns true the expression fn starts-with abcdefghi a-b-c- http example.com collationa returns true the expression fn starts-with a b c d e f g h i a-bc- http example.com collationa returns true the expression fn starts-with abcd e---f ghi abcdef http example.com collationa returns true the expression fn starts-with http example.com collationa returns true the second argument contains only ignorable collation units and is equivalent to the zero-length string. the expression fn starts-with abcdefghi abc http example.com collationa returns true 5.5.3 fn ends-with summary returns true if the string arg1 contains arg2 as a trailing substring taking collations into account. signatures fn ends-with arg1 as xs string arg2 as xs string as xs boolean fn ends-with arg1 as xs string arg2 as xs string collation as xs string as xs boolean properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules if the value of arg1 or arg2 is the empty sequence or contains only ignorable collation units it is interpreted as the zero-length string. if the value of arg2 is the zero-length string then the function returns true. if the value of arg1 is the zero-length string and the value of arg2 is not the zero-length string then the function returns false. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns an xs boolean indicating whether or not the value of arg1 starts with a sequence of collation units that provides a match to the collation units of arg2 according to the collation that is used. note match is defined in unicode collation algorithm error conditions a dynamic error may be raised err foch0004 if the specified collation does not support collation units. examples the collation used in these examples http example.com collationa is a collation in which both and are ignorable collation units. ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fn ends-with tattoo tattoo returns true the expression fn ends-with tattoo atto returns false the expression fn ends-with returns true the expression fn ends-with abcdefghi g-h-i- http example.com collationa returns true the expression fn ends-with abcd e---f ghi defghi http example.com collationa returns true the expression fn ends-with abcd e---f ghi defghi http example.com collationa returns true the expression fn ends-with http example.com collationa returns true the second argument contains only ignorable collation units and is equivalent to the zero-length string. the expression fn ends-with abcdefghi ghi- http example.com collationa returns true 5.5.4 fn substring-before summary returns the part of arg1 that precedes the first occurrence of arg2 taking collations into account. signatures fn substring-before arg1 as xs string arg2 as xs string as xs string fn substring-before arg1 as xs string arg2 as xs string collation as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules if the value of arg1 or arg2 is the empty sequence or contains only ignorable collation units it is interpreted as the zero-length string. if the value of arg2 is the zero-length string then the function returns the zero-length string. if the value of arg1 does not contain a string that is equal to the value of arg2 then the function returns the zero-length string. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns the substring of the value of arg1 that precedes in the value of arg1 the first occurrence of a sequence of collation units that provides a minimal match to the collation units of arg2 according to the collation that is used. note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised err foch0004 if the specified collation does not support collation units. examples the collation used in these examples http example.com collationa is a collation in which both and are ignorable collation units. ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fn substring-before tattoo attoo returns t the expression fn substring-before tattoo tatto returns the expression fn substring-before returns the expression fn substring-before abcdefghi d-e- http example.com collationa returns abc the expression fn substring-before abc--d-e-fghi d-e- http example.com collationa returns abc-- the expression fn substring-before a b c d e f g h i cde http example.com collationa returns a b the expression fn substring-before eureka http example.com collationa returns the second argument contains only ignorable collation units and is equivalent to the zero-length string. 5.5.5 fn substring-after summary returns the part of arg1 that follows the first occurrence of arg2 taking collations into account. signatures fn substring-after arg1 as xs string arg2 as xs string as xs string fn substring-after arg1 as xs string arg2 as xs string collation as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri. rules if the value of arg1 or arg2 is the empty sequence or contains only ignorable collation units it is interpreted as the zero-length string. if the value of arg2 is the zero-length string then the function returns the value of arg1. if the value of arg1 does not contain a string that is equal to the value of arg2 then the function returns the zero-length string. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns the substring of the value of arg1 that follows in the value of arg1 the first occurrence of a sequence of collation units that provides a minimal match to the collation units of arg2 according to the collation that is used. note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised err foch0004 if the specified collation does not support collation units. examples the collation used in these examples http example.com collationa is a collation in which both and are ignorable collation units. ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fn substring-after tattoo tat returns too the expression fn substring-after tattoo tattoo returns the expression fn substring-after returns the expression fn substring-after abcdefghi d-e- http example.com collationa returns fghi the expression fn substring-after abc--d-e-fghi d-e- http example.com collationa returns fghi the expression fn substring-after a b c d e f g h i cde http example.com collationa returns f g h i the expression fn substring-after eureka http example.com collationa returns eureka the second argument contains only ignorable collation units and is equivalent to the zero-length string. 5.6 string functions that use regular expressions the three functions described in this section make use of a regular expression syntax for pattern matching. this is described below. function meaning fn matches returns true if the supplied string matches a given regular expression. fn replace returns a string produced from the input string by replacing any substrings that match a given regular expression with a supplied replacement string. fn tokenize returns a sequence of strings constructed by splitting the input wherever a separator is found the separator is any substring that matches a given regular expression. fn analyze-string analyzes a string using a regular expression returning an xml structure that identifies which parts of the input string matched or failed to match the regular expression and in the case of matched substrings which substrings matched each capturing group in the regular expression. 5.6.1 regular expression syntax the regular expression syntax used by these functions is defined in terms of the regular expression syntax specified in xml schema see xml schema part 2 datatypes second edition which in turn is based on the established conventions of languages such as perl. however because xml schema uses regular expressions only for validity checking it omits some facilities that are widely-used with languages such as perl. this section therefore describes extensions to the xml schema regular expressions syntax that reinstate these capabilities. note it is recommended that implementers consult unicode regular expressions for information on using regular expression processing on unicode characters. the regular expression syntax and semantics are identical to those defined in xml schema part 2 datatypes second edition with the following additions two meta-characters and are added. by default the meta-character matches the start of the entire string while matches the end of the entire string. in multi-line mode matches the start of any line that is the start of the entire string and the position immediately after a newline character while matches the end of any line that is the end of the entire string and the position immediately before a newline character newline here means the character x0a only. this means that the production in xml schema part 2 datatypes second edition 10 char x5b#x5d is modified to read 10 char x5b#x5d the xsd 1.1 grammar for regular expressions uses the same production rule but renumbered and renamed 73 normalchar it is affected in the same way. the characters x5b and x5d correspond to and respectively. note the definition of char production 10 in xml schema part 2 datatypes second edition has a known error in which it omits the left brace and right brace that error is corrected here. the following production 11 charclass charclassesc charclassexpr wildcardesc is modified to read 11 charclass charclassesc charclassexpr wildcardesc using xsd 1.1 as the baseline the equivalent is to change the production 74 charclass singlecharesc charclassesc charclassexpr wildcardesc to read 74 charclass singlecharesc charclassesc charclassexpr wildcardesc reluctant quantifiers are supported. they are indicated by a following a quantifier. specifically x matches x once or not at all x matches x zero or more times x+ matches x one or more times x n matches x exactly n times x n matches x at least n times x n m matches x at least n times but not more than m times the effect of these quantifiers is that the regular expression matches the shortest possible substring consistent with the match as a whole succeeding. without the the regular expression matches the longest possible substring. to achieve this the production in xml schema part 2 datatypes second edition 4 quantifier quantity is changed to 4 quantifier quantity in the xsd 1.1 version of the regular expression grammar this rule is unchanged but is renumbered 67 note reluctant quantifiers have no effect on the results of the boolean fn matches function since this function is only interested in discovering whether a match exists and not where it exists. sub-expressions groups within the regular expression are recognized. the regular expression syntax defined by xml schema part 2 datatypes second edition allows a regular expression to contain parenthesized sub-expressions but attaches no special significance to them. some operations associated with regular expressions for example back-references and the fn replace function allow access to the parts of the input string that matched a sub-expression called captured substrings the sub-expressions are numbered according to the position of the opening parenthesis in left-to-right order within the top-level regular expression the first opening parenthesis identifies captured substring 1 the second identifies captured substring 2 and so on. 0 identifies the substring captured by the entire regular expression. when parentheses are used in a part of the regular expression that is matched more than once because it is within a construct that allows repetition then only the last substring that it matched will be captured. note that this rule is not sufficient in all cases to ensure an unambiguous result especially in cases where a the regular expression contains nested repeating constructs and or b the repeating construct matches a zero-length string. in such cases it is implementation-dependent which substring is captured. for example given the regular expression a and the input string aaaa an implementation might legitimately capture either aaaa or a zero length string as the content of the captured subgroup. non-capturing groups are also recognized. these are indicated by the syntax xxxx the production rule for atom in xml schema part 2 datatypes second edition is changed to replace the alternative regexp with regexp for the new versions of the xsd 1.0 and xsd 1.1 production rules for atom see below. the presence of the optional has no effect on the set of strings that match the regular expression but causes the left parenthesis not to be counted by operations that number the groups within a regular expression for example the fn replace function. back-references are allowed outside a character class expression. a back-reference is an additional kind of atom. the construct n where n is a single digit is always recognized as a back-reference if this is followed by further digits these digits are taken to be part of the back-reference if and only if the resulting number nn is such that the back-reference is preceded by nn or more unescaped opening parentheses. the regular expression is invalid if a back-reference refers to a subexpression that does not exist or whose closing right parenthesis occurs after the back-reference. a back-reference matches the string that was matched by the nth capturing subexpression within the regular expression that is the parenthesized subexpression whose opening left parenthesis is the nth unescaped left parenthesis within the regular expression. for example the regular expression 1 matches a sequence of characters delimited either by an apostrophe at the start and end or by a quotation mark at the start and end. if no string is matched by the nth capturing subexpression the back-reference is interpreted as matching a zero-length string. combining this change with the introduction of non-capturing groups see above back-references change the following production 9 atom char charclass regexp to 9 atom char charclass regexp backreference 9a backreference 1-9 0-9 with respect to the xsd 1.1 version of the regular expression grammar the effect is to change 72 atom normalchar charclass regexp to 72 atom normalchar charclass regexp backreference 72a backreference 1-9 0-9 note within a character class expression followed by a digit is invalid. some other regular expression languages interpret this as an octal character reference. single character escapes are extended to allow the character to be escaped. the following production is changed 24 singlecharesc nrt x2d#x5b#x5d#x5e to 24 singlecharesc nrt x2d#x5b#x5d#x5e in the xsd 1.1 version of the regular expression grammar the production rule for singlecharesc is unchanged but is renumbered 84 a regular expression that uses a unicode block name that is not defined in the version s of unicode supported by the processor for example p isbadblockname is deemed to be invalid err forx0002 note xsd 1.0 does not say how this situation should be handled xsd 1.1 says that it should be handled by treating all characters as matching. note in schema 1.1 part 2 the rules for the interpretation of hyphens within square brackets in a regular expression have been clarified and the semantics of regular expressions are no longer tied to a specific version of unicode. 5.6.1.1 flags all these functions provide an optional parameter flags to set options for the interpretation of the regular expression. the parameter accepts a xs string in which individual letters are used to set options. the presence of a letter within the string indicates that the option is on its absence indicates that the option is off. letters may appear in any order and may be repeated. if there are characters present that are not defined here as flags then a dynamic error is raised err forx0001 the following options are defined s if present the match operates in dot-all mode. perl calls this the single-line mode. if the s flag is not specified the meta-character matches any character except a newline x0a or carriage return x0d character. in dot-all mode the meta-character matches any character whatsoever. suppose the input contains hello and world on two lines. this will not be matched by the regular expression hello. world unless dot-all mode is enabled. m if present the match operates in multi-line mode. by default the meta-character matches the start of the entire string while matches the end of the entire string. in multi-line mode matches the start of any line that is the start of the entire string and the position immediately after a newline character other than a newline that appears as the last character in the string while matches the end of any line that is the position immediately before a newline character and the end of the entire string if there is no newline character at the end of the string newline here means the character x0a only. i if present the match operates in case-insensitive mode. the detailed rules are as follows. in these rules a character c2 is considered to be a case-variant of another character c1 if the following xpath expression returns true when the two characters are considered as strings of length one and the unicode codepoint collation is used fn lower-case c1 eq fn lower-case c2 or fn upper-case c1 eq fn upper-case c2 note that the case-variants of a character under this definition are always single characters. when a normal character char is used as an atom it represents the set containing that character and all its case-variants. for example the regular expression z will match both z and z a character range production charrange in the xsd 1.0 grammar replaced by productions charrange and singlechar in xsd 1.1 represents the set containing all the characters that it would match in the absence of the i flag together with their case-variants. for example the regular expression a-z will match all the letters a-z and all the letters a-z. it will also match certain other characters such as x212a kelvin sign since fn lower-case x212a is k this rule applies also to a character range used in a character class subtraction charclasssub thus a-z- io will match characters such as a b a and b but will not match i o i or o the rule also applies to a character range used as part of a negative character group thus q will match every character except q and q these being the only case-variants of q in unicode a back-reference is compared using case-blind comparison that is each character must either be the same as the corresponding character of the previously matched string or must be a case-variant of that character. for example the strings mum mom dad and dud all match the regular expression md aeiou 1 when the i flag is used. all other constructs are unaffected by the i flag. for example p lu continues to match upper-case letters only. x if present whitespace characters x9 xa xd and x20 in the regular expression are removed prior to matching with one exception whitespace characters within character class expressions charclassexpr are not removed. this flag can be used for example to break up long regular expressions into readable lines. examples fn matches helloworld hello world x returns true fn matches helloworld hello world x returns false fn matches hello world hello sworld x returns true fn matches hello world hello world x returns false q if present all characters in the regular expression are treated as representing themselves not as metacharacters. in effect every character that would normally have a special meaning in a regular expression is implicitly escaped by preceding it with a backslash. furthermore when this flag is present the characters and have no special significance when used in the replacement string supplied to the fn replace function. this flag can be used in conjunction with the i flag. if it is used together with the m s or x flag that flag has no effect. examples fn tokenize 12.3.5.6 q returns 12 3 5 6 fn replace a b c q returns a b c fn replace a b c q returns a b c fn matches abcd q returns false fn matches mr. b. obama b. obama iq returns true 5.6.2 fn matches summary returns true if the supplied string matches a given regular expression. signatures fn matches input as xs string pattern as xs string as xs boolean fn matches input as xs string pattern as xs string flags as xs string as xs boolean properties this function is deterministic context-independent and focus-independent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zero-length string. flags are defined in 5.6.1.1 flags. if input is the empty sequence it is interpreted as the zero-length string. the function returns true if input or some substring of input matches the regular expression supplied as pattern. otherwise the function returns false. the matching rules are influenced by the value of flags if present. error conditions a dynamic error is raised err forx0002 if the value of pattern is invalid according to the rules described in 5.6.1 regular expression syntax. a dynamic error is raised err forx0001 if the value of flags is invalid according to the rules described in 5.6.1.1 flags. notes unless the metacharacters and are used as anchors the string is considered to match the pattern if any substring matches the pattern. but if anchors are used the anchors must match the start end of the string in string mode or the start end of a line in multi-line mode this is different from the behavior of patterns in xml schema part 2 datatypes second edition where regular expressions are implicitly anchored. regular expression matching is defined on the basis of unicode code points it takes no account of collations. examples the expression fn matches abracadabra bra returns true the expression fn matches abracadabra a. a returns true the expression fn matches abracadabra bra returns false given the source document let poem poem author wilhelm busch kaum hat dies der hahn gesehen f ngt er auch schon an zu kr hen kikeriki kikikerikih tak tak tak da kommen sie. poem the following function calls produce the following results with the poem element as the context node the expression fn matches poem kaum. kr hen returns false the expression fn matches poem kaum. kr hen s returns true the expression fn matches poem kaum. gesehen m returns true the expression fn matches poem kaum. gesehen returns false the expression fn matches poem kiki i returns true 5.6.3 fn replace summary returns a string produced from the input string by replacing any substrings that match a given regular expression with a supplied replacement string. signatures fn replace input as xs string pattern as xs string replacement as xs string as xs string fn replace input as xs string pattern as xs string replacement as xs string flags as xs string as xs string properties this function is deterministic context-independent and focus-independent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zero-length string. flags are defined in 5.6.1.1 flags. the flags argument is interpreted in the same manner as for the fn matches function. if input is the empty sequence it is interpreted as the zero-length string. the function returns the xs string that is obtained by replacing each non-overlapping substring of input that matches the given pattern with an occurrence of the replacement string. if two overlapping substrings of input both match the pattern then only the first one that is the one whose first character comes first in the input string is replaced. if the q flag is present the replacement string is used as is. otherwise within the replacement string a variable n may be used to refer to the substring captured by the nth parenthesized sub-expression in the regular expression. for each match of the pattern these variables are assigned the value of the content matched by the relevant sub-expression and the modified replacement string is then substituted for the characters in input that matched the pattern. 0 refers to the substring captured by the regular expression as a whole. more specifically the rules are as follows where s is the number of parenthesized sub-expressions in the regular expression and n is the decimal number formed by taking all the digits that consecutively follow the character if n 0 then the variable is replaced by the substring matched by the regular expression as a whole. if 1 n s then the variable is replaced by the substring captured by the nth parenthesized sub-expression. if the nth parenthesized sub-expression was not matched then the variable is replaced by the zero-length string. if s n 9 then the variable is replaced by the zero-length string. otherwise if n s and n 9 the last digit of n is taken to be a literal character to be included as is in the replacement string and the rules are reapplied using the number n formed by stripping off this last digit. for example if the replacement string is 23 and there are 5 substrings the result contains the value of the substring that matches the second sub-expression followed by the digit 3 unless the q flag is used a literal character within the replacement string must be written as and a literal character must be written as if two alternatives within the pattern both match at the same position in the input then the match that is chosen is the one matched by the first alternative. for example fn replace abcd ab a 1 1 2 2 returns 1 ab 2 cd error conditions a dynamic error is raised err forx0002 if the value of pattern is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0001 if the value of flags is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0003 if the pattern matches a zero-length string that is if the expression fn matches pattern flags returns true. it is not an error however if a captured substring is zero-length. a dynamic error is raised err forx0004 if the value of replacement contains a character that is not immediately followed by a digit 0-9 and not immediately preceded by a a dynamic error is raised err forx0004 if the value of replacement contains a character that is not part of a pair unless it is immediately followed by a character. notes if the input string contains no substring that matches the regular expression the result of the function is a single string identical to the input string. examples the expression replace abracadabra bra returns a cada the expression replace abracadabra a. a returns the expression replace abracadabra a. a returns c bra the expression replace abracadabra a returns brcdbr the expression replace abracadabra a a 1 1 returns abbraccaddabbra the expression replace abracadabra 1 raises an error because the pattern matches the zero-length string the expression replace aaaa a+ b returns b the expression replace aaaa a+ b returns bbbb the expression replace darted d 1c 2 returns carted the first d is replaced. 5.6.4 fn tokenize summary returns a sequence of strings constructed by splitting the input wherever a separator is found the separator is any substring that matches a given regular expression. signatures fn tokenize input as xs string pattern as xs string as xs string fn tokenize input as xs string pattern as xs string flags as xs string as xs string properties this function is deterministic context-independent and focus-independent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zero-length string. flags are defined in 5.6.1.1 flags. the flags argument is interpreted in the same way as for the fn matches function. if input is the empty sequence or if input is the zero-length string the function returns the empty sequence. the function returns a sequence of strings formed by breaking the input string into a sequence of strings treating any substring that matches pattern as a separator. the separators themselves are not returned. if a separator occurs at the start of the input string the result sequence will start with a zero-length string. zero-length strings will also occur in the result sequence if a separator occurs at the end of the input string or if two adjacent substrings match the supplied pattern. if two alternatives within the supplied pattern both match at the same position in the input string then the match that is chosen is the first. for example fn tokenize abracadabra ab a returns r c d r error conditions a dynamic error is raised err forx0002 if the value of pattern is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0001 if the value of flags is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0003 if the supplied pattern matches a zero-length string that is if fn matches pattern flags returns true. notes if the input string is not zero length and no separators are found in the input string the result of the function is a single string identical to the input string. examples the expression fn tokenize the cat sat on the mat s+ returns the cat sat on the mat the expression fn tokenize 1 15 24 50 s returns 1 15 24 50 the expression fn tokenize 1,15,,24,50 returns 1 15 24 50 fn tokenize abba raises the dynamic error err forx0003 the expression fn tokenize some unparsed br html br text s br s i returns some unparsed html text 5.6.5 fn analyze-string summary analyzes a string using a regular expression returning an xml structure that identifies which parts of the input string matched or failed to match the regular expression and in the case of matched substrings which substrings matched each capturing group in the regular expression. signatures fn analyze-string input as xs string pattern as xs string as element fn analyze-string-result fn analyze-string input as xs string pattern as xs string flags as xs string as element fn analyze-string-result properties this function is nondeterministic context-independent and focus-independent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zero-length string. flags are defined in 5.6.1.1 flags. the flags argument is interpreted in the same way as for the fn matches function. if input is the empty sequence the function behaves as if input were the zero-length string. in this situation the result will be an element node with no children. the function returns an element node whose local name is analyze-string-result. this element and all its descendant elements have the namespace uri http www.w3.org 2005 xpath-functions. the namespace prefix is implementation dependent the children of this element are a sequence of fn match and fn non-match elements. this sequence is formed by breaking the input string into a sequence of strings returning any substring that matches pattern as the content of a match element and any intervening substring as the content of a non-match element. more specifically the function starts at the beginning of the input string and attempts to find the first substring that matches the regular expression. if there are several matches the first match is defined to be the one whose starting position comes first in the string. if several alternatives within the regular expression both match at the same position in the input string then the match that is chosen is the first alternative that matches. for example if the input string is the quick brown fox jumps and the regular expression is jump jumps then the match that is chosen is jump. having found the first match the instruction proceeds to find the second and subsequent matches by repeating the search starting at the first character that was not included in the previous match. the input string is thus partitioned into a sequence of substrings some of which match the regular expression others which do not match it. each substring will contain at least one character. this sequence is represented in the result by the sequence of fn match and fn non-match children of the returned element node the string value of the fn match or fn non-match element will be the corresponding substring of input and the string value of the returned element node will therefore be the same as input. the content of an fn non-match element is always a single text node. the content of a fn match element however is in general a sequence of text nodes and fn group element children. an fn group element with a nr attribute having the integer value n identifies the substring captured by the nth parenthesized sub-expression in the regular expression. for each capturing subexpression there will be at most one corresponding fn group element in each fn match element in the result. if the function is called twice with the same arguments it is implementation dependent whether the two calls return the same element node or distinct but deep equal element nodes. in this respect it is nondeterministic the base uri of the element nodes in the result is implementation dependent a schema is defined for the structure of the returned element containing the definitions below. the returned element and its descendants will have type annotations obtained by validating the returned element against this schema unless the function is used in an environment where type annotations are not supported for example a basic xslt processor in which case the elements will all be annotated as xs untyped and the attributes as xs untypedatomic. note a free-standing copy of this schema can be found at analyze-string.xsd xml version 1.0 encoding utf-8 xs schema xmlns xs http www.w3.org 2001 xmlschema targetnamespace http www.w3.org 2005 xpath-functions xmlns fn http www.w3.org 2005 xpath-functions elementformdefault qualified xs element name analyze-string-result type fn analyze-string-result-type xs element name match type fn match-type xs element name non-match type xs string xs element name group type fn group-type xs complextype name analyze-string-result-type mixed true xs choice minoccurs 0 maxoccurs unbounded xs element ref fn match xs element ref fn non-match xs choice xs complextype xs complextype name match-type mixed true xs sequence xs element ref fn group minoccurs 0 maxoccurs unbounded xs sequence xs complextype xs complextype name group-type mixed true xs sequence xs element ref fn group minoccurs 0 maxoccurs unbounded xs sequence xs attribute name nr type xs positiveinteger xs complextype xs schema error conditions a dynamic error is raised err forx0002 if the value of pattern is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0001 if the value of flags is invalid according to the rules described in section 5.6.1 regular expression syntax. a dynamic error is raised err forx0003 if the supplied pattern matches a zero-length string that is if fn matches pattern flags returns true. notes the declarations and definitions in the above schema are not automatically available in the static context of the fn analyze-string call or of any other expression the contents of the static context are host-language defined and in some host languages are implementation-defined. examples in the following examples the result document is shown in serialized form with whitespace between the element nodes. this whitespace is not actually present in the result. the expression fn analyze-string the cat sat on the mat. w+ returns with whitespace added for legibility analyze-string-result xmlns http www.w3.org 2005 xpath-functions match the match non-match non-match match cat match non-match non-match match sat match non-match non-match match on match non-match non-match match the match non-match non-match match mat match non-match non-match analyze-string-result the expression fn analyze-string 2008-12-03 d+ d+ d+ returns with whitespace added for legibility analyze-string-result xmlns http www.w3.org 2005 xpath-functions match group nr 1 2008 group group nr 2 12 group group nr 3 03 group match analyze-string-result the expression fn analyze-string a1 c15 d24 x50 a-z 0-9 returns with whitespace added for legibility analyze-string-result xmlns http www.w3.org 2005 xpath-functions match group nr 1 a group group nr 2 1 group match non-match non-match match group nr 1 c group group nr 2 15 group match non-match non-match match group nr 1 d group group nr 2 24 group match non-match non-match match group nr 1 x group group nr 2 50 group match non-match non-match analyze-string-result 6 functions that manipulate uris this section specifies functions that manipulate uri values either as instances of xs anyuri or as strings. function meaning fn resolve-uri resolves a relative iri reference against an absolute iri. fn encode-for-uri encodes reserved characters in a string that is intended to be used in the path segment of a uri. fn iri-to-uri converts a string containing an iri into a uri according to the rules of rfc 3987 fn escape-html-uri escapes a uri in the same way that html user agents handle attribute values expected to contain uris. 6.1 fn resolve-uri summary resolves a relative iri reference against an absolute iri. signatures fn resolve-uri relative as xs string as xs anyuri fn resolve-uri relative as xs string base as xs string as xs anyuri properties the one-argument form of this function is deterministic context-dependent and focus-independent it depends on static base uri. the two-argument form of this function is deterministic context-independent and focus-independent rules if the second argument is absent the effect is the same as calling the two-argument function with the value of fn static-base-uri as the second argument. the function is defined to operate on iri references as defined in rfc 3987 and the implementation must permit all arguments that are valid according to that specification. in addition the implementation may accept some or all strings that conform to the rules for absolute or relative legacy extended iri references as defined in legacy extended iris for xml resource identification for the purposes of this section the terms iri and iri reference include these extensions insofar as the implementation chooses to support them. if relative is the empty sequence the function returns the empty sequence. if relative is an absolute iri as defined above then it is returned unchanged. otherwise the function resolves the relative iri reference relative against the base iri base using the algorithm defined in rfc 3986 adapted by treating any character that would not be valid in an rfc3986 uri or relative reference in the same way that rfc3986 treats unreserved characters. no percent-encoding takes place. error conditions the first form of this function resolves relative against the value of the base-uri property from the static context. a dynamic error is raised err fons0005 if the base-uri property is not initialized in the static context. a dynamic error is raised err forg0002 if relative is not a valid iri according to the rules of rfc3987 extended with an implementation-defined subset of the extensions permitted in leiri or if it is not a suitable relative reference to use as input to the rfc3986 resolution algorithm extended to handle additional unreserved characters. a dynamic error is raised err forg0002 if base is not a valid iri according to the rules of rfc3987 extended with an implementation-defined subset of the extensions permitted in leiri or if it is not a suitable iri to use as input to the chosen resolution algorithm for example if it is a relative iri reference if it is a non-hierarchic uri or if it contains a fragment identifier a dynamic error is raised err forg0009 if the chosen resolution algorithm fails for any other reason. notes resolving a uri does not dereference it. this is merely a syntactic operation on two strings the algorithms in the cited rfcs include some variations that are optional or recommended rather than mandatory they also describe some common practices that are not recommended but which are permitted for backwards compatibility. where the cited rfcs permit variations in behavior so does this specification. throughout this family of specifications the phrase resolving a relative uri or iri reference should be understood as using the rules of this function unless otherwise stated. 6.2 fn encode-for-uri summary encodes reserved characters in a string that is intended to be used in the path segment of a uri. signature fn encode-for-uri uri-part as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if uri-part is the empty sequence the function returns the zero-length string. this function applies the uri escaping rules defined in section 2 of rfc 3986 to the xs string supplied as uri-part. the effect of the function is to escape reserved characters. each such character in the string is replaced with its percent-encoded form as described in rfc 3986 since rfc 3986 recommends that for consistency uri producers and normalizers should use uppercase hexadecimal digits for all percent-encodings this function must always generate hexadecimal values using the upper-case letters a-f. notes all characters are escaped except those identified as unreserved by rfc 3986 that is the upper- and lower-case letters a-z the digits 0-9 hyphen-minus low line full stop and tilde this function escapes uri delimiters and therefore cannot be used indiscriminately to encode invalid characters in a path segment. this function is invertible but not idempotent. this is because a string containing a percent character will be modified by applying the function for example 100 becomes 100 25 while 100 25 becomes 100 2525. examples the expression fn encode-for-uri http www.example.com 00 weather ca los 20angeles#ocean returns http 3a 2f 2fwww.example.com 2f00 2fweather 2fca 2flos 2520angeles 23ocean this is probably not what the user intended because all of the delimiters have been encoded. the expression concat http www.example.com encode-for-uri b b returns http www.example.com b c3 a9b c3 a9 the expression concat http www.example.com encode-for-uri 100 organic returns http www.example.com 100 25 20organic 6.3 fn iri-to-uri summary converts a string containing an iri into a uri according to the rules of rfc 3987 signature fn iri-to-uri iri as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if iri is the empty sequence the function returns the zero-length string. otherwise the function converts the value of iri into a uri according to the rules given in section 3.1 of rfc 3987 by percent-encoding characters that are allowed in an iri but not in a uri. if iri contains a character that is invalid in an iri such as the space character see note below the invalid character is replaced by its percent-encoded form as described in rfc 3986 before the conversion is performed. since rfc 3986 recommends that for consistency uri producers and normalizers should use uppercase hexadecimal digits for all percent-encodings this function must always generate hexadecimal values using the upper-case letters a-f. notes the function is idempotent but not invertible. both the inputs my documents and my 20documents will be converted to the output my 20documents. this function does not check whether iri is a valid iri. it treats it as an string and operates on the characters in the string. the following printable ascii characters are invalid in an iri double quote space and since these characters should not appear in an iri if they do appear in iri they will be percent-encoded. in addition characters outside the range x20-x7e will be percent-encoded because they are invalid in a uri. since this function does not escape the percent sign and this character is not allowed in data within a uri users wishing to convert character strings such as file names that include to a uri should manually escape by replacing it with 25 examples the expression fn iri-to-uri http www.example.com 00 weather ca los 20angeles#ocean returns http www.example.com 00 weather ca los 20angeles#ocean the expression fn iri-to-uri http www.example.com b b returns http www.example.com b c3 a9b c3 a9 6.4 fn escape-html-uri summary escapes a uri in the same way that html user agents handle attribute values expected to contain uris. signature fn escape-html-uri uri as xs string as xs string properties this function is deterministic context-independent and focus-independent rules if uri is the empty sequence the function returns the zero-length string. otherwise the function escapes all characters except printable characters of the us-ascii coded character set specifically the codepoints between 32 and 126 decimal inclusive. each character in uri to be escaped is replaced by an escape sequence which is formed by encoding the character as a sequence of octets in utf-8 and then representing each of these octets in the form hh where hh is the hexadecimal representation of the octet. this function must always generate hexadecimal values using the upper-case letters a-f. notes the behavior of this function corresponds to the recommended handling of non-ascii characters in uri attribute values as described in html 4.0 appendix b.2.1. examples the expression fn escape-html-uri http www.example.com 00 weather ca los angeles#ocean returns http www.example.com 00 weather ca los angeles#ocean the expression fn escape-html-uri javascript if navigator.browserlanguage fr window.open http www.example.com b b returns javascript if navigator.browserlanguage fr window.open http www.example.com b c3 a9b c3 a9 7 functions and operators on boolean values this section defines functions and operators on the xs boolean datatype. 7.1 boolean constant functions since no literals are defined in xpath to reference the constant boolean values true and false two functions are provided for the purpose. function meaning fn true returns the xs boolean value true. fn false returns the xs boolean value false. 7.1.1 fn true summary returns the xs boolean value true. signature fn true as xs boolean properties this function is deterministic context-independent and focus-independent rules the result is equivalent to xs boolean 1 examples the expression fn true returns xs boolean 1 7.1.2 fn false summary returns the xs boolean value false. signature fn false as xs boolean properties this function is deterministic context-independent and focus-independent rules the result is equivalent to xs boolean 0 examples the expression fn false returns xs boolean 0 7.2 operators on boolean values the following functions define the semantics of operators on boolean values in xquery 3.0 an xml query language and xml path language xpath 3.0 function meaning op boolean-equal returns true if the two arguments are the same boolean value. op boolean-less-than returns true if the first argument is false and the second is true. op boolean-greater-than returns true if the first argument is true and the second is false. the ordering operators op boolean-less-than and op boolean-greater-than are provided for application purposes and for compatibility with xml path language xpath version 1.0 the xml schema part 2 datatypes second edition datatype xs boolean is not ordered. 7.2.1 op boolean-equal summary returns true if the two arguments are the same boolean value. operator mapping defines the semantics of the eq operator when applied to two xs boolean values. signature op boolean-equal value1 as xs boolean value2 as xs boolean as xs boolean rules the function returns true if both arguments are true or if both arguments are false. it returns false if one of the arguments is true and the other argument is false. 7.2.2 op boolean-less-than summary returns true if the first argument is false and the second is true. operator mapping defines the semantics of the lt operator when applied to two xs boolean values. also used in the definition of the ge operator. signature op boolean-less-than arg1 as xs boolean arg2 as xs boolean as xs boolean rules the function returns true if arg1 is false and arg2 is true. otherwise it returns false. 7.2.3 op boolean-greater-than summary returns true if the first argument is true and the second is false. operator mapping defines the semantics of the gt operator when applied to two xs boolean values. also used in the definition of the le operator. signature op boolean-greater-than arg1 as xs boolean arg2 as xs boolean as xs boolean rules the function call op boolean-greater-than a b is defined to return the same result as op boolean-less-than b a 7.3 functions on boolean values the following functions are defined on boolean values function meaning fn boolean computes the effective boolean value of the sequence arg. fn not returns true if the effective boolean value of arg is false or false if it is true. 7.3.1 fn boolean summary computes the effective boolean value of the sequence arg. signature fn boolean arg as item as xs boolean rules the function computes the effective boolean value of a sequence defined according to the following rules. see also section 2.4.3 effective boolean value xp30. if arg is the empty sequence fn boolean returns false. if arg is a sequence whose first item is a node fn boolean returns true. if arg is a singleton value of type xs boolean or a derived from xs boolean fn boolean returns arg. if arg is a singleton value of type xs string or a type derived from xs string xs anyuri or a type derived from xs anyuri or xs untypedatomic fn boolean returns false if the operand value has zero length otherwise it returns true. if arg is a singleton value of any numeric type or a type derived from a numeric type fn boolean returns false if the operand value is nan or is numerically equal to zero otherwise it returns true. in all other cases fn boolean raises a type error err forg0006 notes the result of this function is not necessarily the same as arg cast as xs boolean. for example fn boolean false returns the value true whereas false cast as xs boolean which can also be written xs boolean false returns false. examples let abc a b fn boolean abc raises a type error err forg0006 the expression fn boolean abc 1 returns true the expression fn boolean abc 0 returns false the expression fn boolean abc 3 returns false 7.3.2 fn not summary returns true if the effective boolean value of arg is false or false if it is true. signature fn not arg as item as xs boolean properties this function is deterministic context-independent and focus-independent rules the value of arg is first reduced to an effective boolean value by applying the fn boolean function. the function returns true if the effective boolean value is false or false if the effective boolean value is true. examples the expression fn not fn true returns false the expression fn not false returns false 8 functions and operators on durations operators are defined on the following type xs duration and on the two defined subtypes see 8.1 two totally ordered subtypes of duration xs yearmonthduration xs daytimeduration no ordering relation is defined on xs duration values. two xs duration values may however be compared for equality. operations on durations including equality comparison casting to string and extraction of components all treat the duration as normalized. this means that the seconds and minutes components will always be less than 60 the hours component less than 24 and the months component less than 12. thus for example a duration of 120 seconds always gives the same result as a duration of two minutes. conditions such as underflow and overflow may occur with arithmetic on durations see 9.7.1 limits and precision note this means that in practice the information content of an xs duration value can be reduced to an xs integer number of months and an xs decimal number of seconds. for the two defined subtypes this is further simplified so that one of these two components is fixed at zero. operations such as comparison of durations and arithmetic on durations can be expressed in terms of numeric operations applied to these two components. 8.1 two totally ordered subtypes of duration two totally ordered subtypes of xs duration are defined in section 2.7 schema information dm30 specification using the mechanisms described in xml schema part 2 datatypes second edition for defining user-defined types. additional details about these types is given below. note these types were not defined in xsd 1.0 but they are defined in the current draft of xsd 1.1. the description given here is believed to be equivalent to that in xsd 1.1 and will become non-normative when xsd 1.1 reaches recommendation status. 8.1.1 xs yearmonthduration definition xs yearmonthduration is derived from xs duration by restricting its lexical representation to contain only the year and month components. the value space of xs yearmonthduration is the set of xs integer month values. the year and month components of xs yearmonthduration correspond to the gregorian year and month components defined in section 5.5.3.2 of iso 8601 respectively. 8.1.1.1 lexical representation the lexical representation for xs yearmonthduration is the iso 8601 reduced format pnynm where ny represents the number of years and nm the number of months. the values of the years and months components are not restricted but allow an arbitrary unsigned xs integer. an optional preceding minus sign is allowed to indicate a negative duration. if the sign is omitted a positive duration is indicated. to indicate a xs yearmonthduration of 1 year 2 months one would write p1y2m. one could also indicate a xs yearmonthduration of minus 13 months as p13m. reduced precision and truncated representations of this format are allowed provided they conform to the following if the number of years or months in any expression equals zero 0 the number and its corresponding designator may be omitted. however at least one number and its designator must be present. for example p1347y and p1347m are allowed p-1347m is not allowed although p1347m is allowed. p1y2mt is not allowed. also p24ym is not allowed nor is py43m since y must have at least one preceding digit and m must have one preceding digit. 8.1.1.2 calculating the value from the lexical representation the value of a xs yearmonthduration lexical form is obtained by multiplying the value of the years component by 12 and adding the value of the months component. the value is positive or negative depending on the preceding sign. 8.1.1.3 canonical representation the canonical representation of xs yearmonthduration restricts the value of the months component to xs integer values between 0 and 11 both inclusive. to convert from a non-canonical representation to the canonical representation the lexical representation is first converted to a value in xs integer months as defined above. this value is then divided by 12 to obtain the value of the years component of the canonical representation. the remaining number of months is the value of the months component of the canonical representation. for negative durations the canonical form is calculated using the absolute value of the duration and a negative sign is prepended to it. if a component has the value zero 0 then the number and the designator for that component must be omitted. however if the value is zero 0 months the canonical form is p0m 8.1.1.4 order relation on xs yearmonthduration let the function that calculates the value of an xs yearmonthduration in the manner described above be called v d then for two xs yearmonthduration values x and y x y if and only if v x v y the order relation on yearmonthduration is a total order. 8.1.2 xs daytimeduration definition xs daytimeduration is derived from xs duration by restricting its lexical representation to contain only the days hours minutes and seconds components. the value space of xs daytimeduration is the set of fractional second values. the components of xs daytimeduration correspond to the day hour minute and second components defined in section 5.5.3.2 of iso 8601 respectively. 8.1.2.1 lexical representation the lexical representation for xs daytimeduration is the iso 8601 truncated format pndtnhnmns where nd represents the number of days t is the date time separator nh the number of hours nm the number of minutes and ns the number of seconds. the values of the days hours and minutes components are not restricted but allow an arbitrary unsigned xs integer. similarly the value of the seconds component allows an arbitrary unsigned xs decimal. an optional minus sign is allowed to precede the p indicating a negative duration. if the sign is omitted the duration is positive. see also iso 8601 date and time formats. for example to indicate a duration of 3 days 10 hours and 30 minutes one would write p3dt10h30m. one could also indicate a duration of minus 120 days as p120d. reduced precision and truncated representations of this format are allowed provided they conform to the following if the number of days hours minutes or seconds in any expression equals zero 0 the number and its corresponding designator may be omitted. however at least one number and its designator must be present. the seconds part may have a decimal fraction. the designator t must be absent if and only if all of the time items are absent. the designator p must always be present. for example p13d pt47h p3dt2h pt35.89s and p4dt251m are all allowed. p-134d is not allowed invalid location of minus sign although p134d is allowed. 8.1.2.2 calculating the value of a xs daytimeduration from the lexical representation the value of a xs daytimeduration lexical form in fractional seconds is obtained by converting the days hours minutes and seconds value to fractional seconds using the conversion rules 24 hours 1 day 60 minutes 1 hour and 60 seconds 1 minute. 8.1.2.3 canonical representation the canonical representation of xs daytimeduration restricts the value of the hours component to xs integer values between 0 and 23 both inclusive the value of the minutes component to xs integer values between 0 and 59 both inclusive and the value of the seconds component to xs decimal valued from 0.0 to 59.999... see xml schema part 2 datatypes second edition appendix d to convert from a non-canonical representation to the canonical representation the value of the lexical form in fractional seconds is first calculated in the manner described above. the value of the days component in the canonical form is then calculated by dividing the value by 86,400 24 60 60 the remainder is in fractional seconds. the value of the hours component in the canonical form is calculated by dividing this remainder by 3,600 60 60 the remainder is again in fractional seconds. the value of the minutes component in the canonical form is calculated by dividing this remainder by 60. the remainder in fractional seconds is the value of the seconds component in the canonical form. for negative durations the canonical form is calculated using the absolute value of the duration and a negative sign is prepended to it. if a component has the value zero 0 then the number and the designator for that component must be omitted. however if all the components of the lexical form are zero 0 the canonical form is pt0s 8.1.2.4 order relation on xs daytimeduration let the function that calculates the value of a xs daytimeduration in the manner described above be called v d then for two xs daytimeduration values x and y x y if and only if v x v y the order relation on xs daytimeduration is a total order. 8.2 comparison operators on durations function meaning op yearmonthduration-less-than returns true if arg1 is a shorter duration than arg2. op yearmonthduration-greater-than returns true if arg1 is a longer duration than arg2. op daytimeduration-less-than returns true if arg1 is a shorter duration than arg2. op daytimeduration-greater-than returns true if arg1 is a longer duration than arg2. op duration-equal returns true if arg1 and arg2 are durations of the same length. the following comparison operators are defined on the xml schema part 2 datatypes second edition duration datatypes. each operator takes two operands of the same type and returns an xs boolean result. as discussed in xml schema part 2 datatypes second edition the order relation on xs duration is a partial order rather than a total order. for this reason only equality is defined on xs duration. a full complement of comparison and arithmetic functions are defined on the two subtypes of duration described in 8.1 two totally ordered subtypes of duration which do have a total order. 8.2.1 op yearmonthduration-less-than summary returns true if arg1 is a shorter duration than arg2. operator mapping defines the semantics of the lt operator when applied to two xs yearmonthduration values. also used in the definition of the ge operator. signature op yearmonthduration-less-than arg1 as xs yearmonthduration arg2 as xs yearmonthduration as xs boolean rules if the number of months in the value of arg1 is numerically less than the number of months in the value of arg2 the function returns true. otherwise the function returns false. notes either or both durations may be negative 8.2.2 op yearmonthduration-greater-than summary returns true if arg1 is a longer duration than arg2. operator mapping defines the semantics of the gt operator when applied to two xs yearmonthduration values. also used in the definition of the le operator. signature op yearmonthduration-greater-than arg1 as xs yearmonthduration arg2 as xs yearmonthduration as xs boolean rules the function call op yearmonthduration-greater-than a b is defined to return the same result as op yearmonthduration-less-than b a 8.2.3 op daytimeduration-less-than summary returns true if arg1 is a shorter duration than arg2. operator mapping defines the semantics of the lt operator when applied to two xs daytimeduration values. also used in the definition of the ge operator. signature op daytimeduration-less-than arg1 as xs daytimeduration arg2 as xs daytimeduration as xs boolean rules if the number of seconds in the value of arg1 is numerically less than the number of seconds in the value of arg2 the function returns true. otherwise the function returns false. notes either or both durations may be negative 8.2.4 op daytimeduration-greater-than summary returns true if arg1 is a longer duration than arg2. operator mapping defines the semantics of the gt operator when applied to two xs daytimeduration values. also used in the definition of the le operator. signature op daytimeduration-greater-than arg1 as xs daytimeduration arg2 as xs daytimeduration as xs boolean rules the function call op daytimeduration-greater-than a b is defined to return the same result as op daytimeduration-less-than b a 8.2.5 op duration-equal summary returns true if arg1 and arg2 are durations of the same length. operator mapping defines the semantics of the eq operators when applied to two xs duration values. also used in the definition of the ne operator. signature op duration-equal arg1 as xs duration arg2 as xs duration as xs boolean rules if the xs yearmonthduration components of arg1 and arg2 are equal and the xs daytimeduration components of arg1 and arg2 are equal the function returns true. otherwise the function returns false. the semantics of this function are xs yearmonthduration arg1 div xs yearmonthduration p1m eq xs yearmonthduration arg2 div xs yearmonthduration p1m and xs daytimeduration arg1 div xs daytimeduration pt1s eq xs daytimeduration arg2 div xs daytimeduration pt1s that is the function returns true if the months and seconds values of the two durations are equal. notes note that this function like any other may be applied to arguments that are derived from the types given in the function signature including the two subtypes xs daytimeduration and xs yearmonthduration. with the exception of the zero-length duration no instance of xs daytimeduration can ever be equal to an instance of xs yearmonthduration. examples the expression op duration-equal xs duration p1y xs duration p12m returns true the expression op duration-equal xs duration pt24h xs duration p1d returns true the expression op duration-equal xs duration p1y xs duration p365d returns false the expression op duration-equal xs yearmonthduration p0y xs daytimeduration p0d returns true the expression op duration-equal xs yearmonthduration p1y xs daytimeduration p365d returns false the expression op duration-equal xs yearmonthduration p2y xs yearmonthduration p24m returns true the expression op duration-equal xs daytimeduration p10d xs daytimeduration pt240h returns true the expression op duration-equal xs duration p2y0m0dt0h0m0s xs yearmonthduration p24m returns true the expression op duration-equal xs duration p0y0m10d xs daytimeduration pt240h returns true 8.3 component extraction functions on durations the duration datatype may be considered to be a composite datatypes in that it contains distinct properties or components. the extraction functions specified below extract a single component from a duration value. for xs duration and its subtypes including the two subtypes xs yearmonthduration and xs daytimeduration the components are normalized this means that the seconds and minutes components will always be less than 60 the hours component less than 24 and the months component less than 12. function meaning fn years-from-duration returns the number of years in a duration. fn months-from-duration returns the number of months in a duration. fn days-from-duration returns the number of days in a duration. fn hours-from-duration returns the number of hours in a duration. fn minutes-from-duration returns the number of minutes in a duration. fn seconds-from-duration returns the number of seconds in a duration. 8.3.1 fn years-from-duration summary returns the number of years in a duration. signature fn years-from-duration arg as xs duration as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the years component in the value of arg. the result is obtained by casting arg to an xs yearmonthduration see 18.1.3 casting to duration types and then computing the years component as described in 8.1.1.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs daytimeduration the function returns 0. examples the expression fn years-from-duration xs yearmonthduration p20y15m returns 21. the expression fn years-from-duration xs yearmonthduration p15m returns 1. the expression fn years-from-duration xs daytimeduration p2dt15h returns 0. 8.3.2 fn months-from-duration summary returns the number of months in a duration. signature fn months-from-duration arg as xs duration as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the months component in the value of arg. the result is obtained by casting arg to an xs yearmonthduration see 18.1.3 casting to duration types and then computing the months component as described in 8.1.1.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs daytimeduration the function returns 0. examples the expression fn months-from-duration xs yearmonthduration p20y15m returns 3. the expression fn months-from-duration xs yearmonthduration p20y18m returns 6. the expression fn months-from-duration xs daytimeduration p2dt15h0m0s returns 0. 8.3.3 fn days-from-duration summary returns the number of days in a duration. signature fn days-from-duration arg as xs duration as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the days component in the value of arg. the result is obtained by casting arg to an xs daytimeduration see 18.1.3 casting to duration types and then computing the days component as described in 8.1.2.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs yearmonthduration the function returns 0. examples the expression fn days-from-duration xs daytimeduration p3dt10h returns 3. the expression fn days-from-duration xs daytimeduration p3dt55h returns 5. the expression fn days-from-duration xs yearmonthduration p3y5m returns 0. 8.3.4 fn hours-from-duration summary returns the number of hours in a duration. signature fn hours-from-duration arg as xs duration as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the hours component in the value of arg. the result is obtained by casting arg to an xs daytimeduration see 18.1.3 casting to duration types and then computing the hours component as described in 8.1.2.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs yearmonthduration the function returns 0. examples the expression fn hours-from-duration xs daytimeduration p3dt10h returns 10. the expression fn hours-from-duration xs daytimeduration p3dt12h32m12s returns 12. the expression fn hours-from-duration xs daytimeduration pt123h returns 3. the expression fn hours-from-duration xs daytimeduration p3dt10h returns 10. 8.3.5 fn minutes-from-duration summary returns the number of minutes in a duration. signature fn minutes-from-duration arg as xs duration as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the minutes component in the value of arg. the result is obtained by casting arg to an xs daytimeduration see 18.1.3 casting to duration types and then computing the minutes component as described in 8.1.2.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs yearmonthduration the function returns 0. examples the expression fn minutes-from-duration xs daytimeduration p3dt10h returns 0. the expression fn minutes-from-duration xs daytimeduration p5dt12h30m returns 30. 8.3.6 fn seconds-from-duration summary returns the number of seconds in a duration. signature fn seconds-from-duration arg as xs duration as xs decimal properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs decimal representing the seconds component in the value of arg. the result is obtained by casting arg to an xs daytimeduration see 18.1.3 casting to duration types and then computing the seconds component as described in 8.1.2.3 canonical representation. if arg is a negative duration then the result will be negative.. if arg is an xs yearmonthduration the function returns 0. examples the expression fn seconds-from-duration xs daytimeduration p3dt10h12.5s returns 12.5. the expression fn seconds-from-duration xs daytimeduration pt256s returns 16.0. 8.4 arithmetic operators on durations function meaning op add-yearmonthdurations returns the result of adding two xs yearmonthduration values. op subtract-yearmonthdurations returns the result of subtracting one xs yearmonthduration value from another. op multiply-yearmonthduration returns the result of multiplying the value of arg1 by arg2. the result is rounded to the nearest month. op divide-yearmonthduration returns the result of dividing the value of arg1 by arg2. the result is rounded to the nearest month. op divide-yearmonthduration-by-yearmonthduration returns the ratio of two xs yearmonthduration values. op add-daytimedurations returns the sum of two xs daytimeduration values. op subtract-daytimedurations returns the result of subtracting one xs daytimeduration from another. op multiply-daytimeduration returns the result of multiplying a xs daytimeduration by a number. op divide-daytimeduration returns the result of multiplying a xs daytimeduration by a number. op divide-daytimeduration-by-daytimeduration returns the ratio of two xs daytimeduration values as a decimal number. for operators that combine a duration and a date time value see 9.7 arithmetic operators on durations dates and times. 8.4.1 op add-yearmonthdurations summary returns the result of adding two xs yearmonthduration values. operator mapping defines the semantics of the operator when applied to two xs yearmonthduration values. signature op add-yearmonthdurations arg1 as xs yearmonthduration arg2 as xs yearmonthduration as xs yearmonthduration rules the function returns the result of adding the value of arg1 to the value of arg2. the result will be an xs yearmonthduration whose length in months is equal to the length in months of arg1 plus the length in months of arg2. for handling of overflow see 9.7.1 limits and precision. notes either duration and therefore the result may be negative. examples the expression op add-yearmonthdurations xs yearmonthduration p2y11m xs yearmonthduration p3y3m returns xs yearmonthduration p6y2m 8.4.2 op subtract-yearmonthdurations summary returns the result of subtracting one xs yearmonthduration value from another. operator mapping defines the semantics of the operator when applied to two xs yearmonthduration values. signature op subtract-yearmonthdurations arg1 as xs yearmonthduration arg2 as xs yearmonthduration as xs yearmonthduration rules the function returns the result of subtracting the value of arg2 from the value of arg1. the result will be an xs yearmonthduration whose length in months is equal to the length in months of arg1 minus the length in months of arg2. for handling of overflow see 9.7.1 limits and precision. notes either duration and therefore the result may be negative. examples the expression op subtract-yearmonthdurations xs yearmonthduration p2y11m xs yearmonthduration p3y3m returns xs yearmonthduration p4m 8.4.3 op multiply-yearmonthduration summary returns the result of multiplying the value of arg1 by arg2. the result is rounded to the nearest month. operator mapping defines the semantics of the operator when applied to an xs yearmonthduration and a numeric value. signature op multiply-yearmonthduration arg1 as xs yearmonthduration arg2 as xs double as xs yearmonthduration rules the result is the xs yearmonthduration whose length in months is equal to the result of applying the fn round function to the value obtained by multiplying the length in months of arg1 by the value of arg2. if arg2 is positive or negative zero the result is a zero-length duration. if arg2 is positive or negative infinity the result overflows and is handled as discussed in 9.7.1 limits and precision. for handling of overflow and underflow see 9.7.1 limits and precision. error conditions a dynamic error is raised err foca0005 if arg2 is nan. notes either duration and therefore the result may be negative. examples the expression op multiply-yearmonthduration xs yearmonthduration p2y11m 2.3 returns xs yearmonthduration p6y9m 8.4.4 op divide-yearmonthduration summary returns the result of dividing the value of arg1 by arg2. the result is rounded to the nearest month. operator mapping defines the semantics of the div operator when applied to an xs yearmonthduration and a numeric value. signature op divide-yearmonthduration arg1 as xs yearmonthduration arg2 as xs double as xs yearmonthduration rules the result is the xs yearmonthduration whose length in months is equal to the result of applying the fn round function to the value obtained by dividing the length in months of arg1 by the value of arg2. if arg2 is positive or negative infinity the result is a zero-length duration. if arg2 is positive or negative zero the result overflows and is handled as discussed in 9.7.1 limits and precision. for handling of overflow and underflow see 9.7.1 limits and precision. error conditions a dynamic error is raised err foca0005 if arg2 is nan. notes either operand and therefore the result may be negative. examples the expression op divide-yearmonthduration xs yearmonthduration p2y11m 1.5 returns xs yearmonthduration p1y11m 8.4.5 op divide-yearmonthduration-by-yearmonthduration summary returns the ratio of two xs yearmonthduration values. operator mapping defines the semantics of the div operator when applied to two xs yearmonthduration values. signature op divide-yearmonthduration-by-yearmonthduration arg1 as xs yearmonthduration arg2 as xs yearmonthduration as xs decimal rules the function returns the result of dividing the length in months of arg1 by the length in months of arg2 according to the rules of the op numeric-divide function for integer operands. for handling of overflow and underflow see 9.7.1 limits and precision. notes either duration and therefore the result may be negative. examples the expression op divide-yearmonthduration-by-yearmonthduration xs yearmonthduration p3y4m xs yearmonthduration p1y4m returns 2.5. the following example demonstrates how to calculate the length of an xs yearmonthduration value in months the expression op divide-yearmonthduration-by-yearmonthduration xs yearmonthduration p3y4m xs yearmonthduration p1m returns 40. 8.4.6 op add-daytimedurations summary returns the sum of two xs daytimeduration values. operator mapping defines the semantics of the operator when applied to two xs daytimeduration values. signature op add-daytimedurations arg1 as xs daytimeduration arg2 as xs daytimeduration as xs daytimeduration rules the function returns the result of adding the value of arg1 to the value of arg2. the result is the xs daytimeduration whose length in seconds is equal to the sum of the length in seconds of the two input durations. for handling of overflow see 9.7.1 limits and precision. notes either duration and therefore the result may be negative. examples the expression op add-daytimedurations xs daytimeduration p2dt12h5m xs daytimeduration p5dt12h returns xs daytimeduration p8dt5m 8.4.7 op subtract-daytimedurations summary returns the result of subtracting one xs daytimeduration from another. operator mapping defines the semantics of the operator when applied to two xs daytimeduration values. signature op subtract-daytimedurations arg1 as xs daytimeduration arg2 as xs daytimeduration as xs daytimeduration rules the function returns the result of subtracting the value of arg2 from the value of arg1. the result is the xs daytimeduration whose length in seconds is equal to the length in seconds of arg1 minus the length in seconds of arg2. for handling of overflow see 9.7.1 limits and precision. notes either duration and therefore the result may be negative. examples the expression op subtract-daytimedurations xs daytimeduration p2dt12h xs daytimeduration p1dt10h30m returns xs daytimeduration p1dt1h30m 8.4.8 op multiply-daytimeduration summary returns the result of multiplying a xs daytimeduration by a number. operator mapping defines the semantics of the operator when applied to an xs daytimeduration and a numeric value. signature op multiply-daytimeduration arg1 as xs daytimeduration arg2 as xs double as xs daytimeduration rules the function returns the result of multiplying the value of arg1 by arg2. the result is the xs daytimeduration whose length in seconds is equal to the length in seconds of arg1 multiplied by the numeric value arg2. if arg2 is positive or negative zero the result is a zero-length duration. if arg2 is positive or negative infinity the result overflows and is handled as discussed in 9.1.1 limits and precision. for handling of overflow and underflow see 9.7.1 limits and precision. error conditions a dynamic error is raised err foca0005 if arg2 is nan. notes either operand and therefore the result may be negative. examples the expression op multiply-daytimeduration xs daytimeduration pt2h10m 2.1 returns xs daytimeduration pt4h33m 8.4.9 op divide-daytimeduration summary returns the result of multiplying a xs daytimeduration by a number. operator mapping defines the semantics of the div operator when applied to two xs daytimeduration values. signature op divide-daytimeduration arg1 as xs daytimeduration arg2 as xs double as xs daytimeduration rules the function returns the result of dividing the value of arg1 by arg2. the result is the xs daytimeduration whose length in seconds is equal to the length in seconds of arg1 divided by the numeric value arg2. if arg2 is positive or negative infinity the result is a zero-length duration. if arg2 is positive or negative zero the result overflows and is handled as discussed in 9.1.1 limits and precision. for handling of overflow and underflow see 9.7.1 limits and precision. error conditions a dynamic error is raised err foca0005 if arg2 is nan. notes either operand and therefore the result may be negative. examples the expression op divide-daytimeduration xs daytimeduration p1dt2h30m10.5s 1.5 returns xs duration pt17h40m7s 8.4.10 op divide-daytimeduration-by-daytimeduration summary returns the ratio of two xs daytimeduration values as a decimal number. operator mapping defines the semantics of the div operator when applied to two xs daytimeduration values. signature op divide-daytimeduration-by-daytimeduration arg1 as xs daytimeduration arg2 as xs daytimeduration as xs decimal rules the function returns the result of dividing the value of arg1 by arg2. the result is the xs daytimeduration whose length in seconds is equal to the length in seconds of arg1 divided by the length in seconds of arg2. the calculation is performed by applying op numeric-divide to the two xs decimal operands. for handling of overflow and underflow see 9.7.1 limits and precision. notes either operand and therefore the result may be negative. examples the expression fn round-half-to-even op divide-daytimeduration-by-daytimeduration xs daytimeduration p2dt53m11s xs daytimeduration p1dt10h 4 returns 1.4378. this examples shows how to determine the number of seconds in a duration. the expression op divide-daytimeduration-by-daytimeduration xs daytimeduration p2dt53m11s xs daytimeduration pt1s returns 175991.0. 9 functions and operators on dates and times this section defines operations on the xml schema part 2 datatypes second edition date and time types. see working with timezones for a disquisition on working with date and time values with and without timezones. 9.1 date and time types the operators described in this section are defined on the following date and time types xs datetime xs date xs time xs gyearmonth xs gyear xs gmonthday xs gmonth xs gday the only operations defined on xs gyearmonth xs gyear xs gmonthday xs gmonth and xs gday values are equality comparison and component extraction. for other types further operations are provided including order comparisons arithmetic formatted display and timezone adjustment. 9.1.1 limits and precision for a number of the above datatypes xml schema part 2 datatypes second edition extends the basic iso 8601 lexical representations such as yyyy-mm-ddthh mm ss.s for datetime by allowing a preceding minus sign more than four digits to represent the year field no maximum is specified and an unlimited number of digits for fractional seconds. leap seconds are not supported. all minimally conforming processors must support positive year values with a minimum of 4 digits i.e. yyyy and a minimum fractional second precision of 1 millisecond or three digits i.e. s.sss however conforming processors may set larger implementation-defined limits on the maximum number of digits they support in these two situations. processors may also choose to support the year 0000 and years with negative values. the results of operations on dates that cross the year 0000 are implementation-defined a processor that limits the number of digits in date and time datatype representations may encounter overflow and underflow conditions when it tries to execute the functions in 9.7 arithmetic operators on durations dates and times. in these situations the processor must return 00 00 00 in case of time underflow. it must raise a dynamic error err fodt0001 in case of overflow. 9.2 date time datatype values as defined in section 3.3.2 dates and times dm30 xs datetime xs date xs time xs gyearmonth xs gyear xs gmonthday xs gmonth xs gday values referred to collectively as date time values are represented as seven components or properties year month day hour minute second and timezone. the first five components are xs integer values. the value of the second component is an xs decimal and the value of the timezone component is an xs daytimeduration. for all the primitive date time datatypes the timezone property is optional and may or may not be present. depending on the datatype some of the remaining six properties must be present and some must be absentdm30. absent or missing properties are represented by the empty sequence. this value is referred to as the local value in that the value retains its original timezone. before comparing or subtracting xs datetime values this local value must be translated or normalized to utc. for xs time 00 00 00 and 24 00 00 are alternate lexical forms for the same value whose canonical representation is 00 00 00. for xs datetime a time component 24 00 00 translates to 00 00 00 of the following day. 9.2.1 examples an xs datetime with lexical representation 1999-05-31t05 00 00 is represented in the datamodel by 1999 5 31 5 0 0.0 an xs datetime with lexical representation 1999-05-31t13 20 00-05 00 is represented by 1999 5 31 13 20 0.0 pt5h an xs datetime with lexical representation 1999-12-31t24 00 00 is represented by 2000 1 1 0 0 0.0 an xs date with lexical representation 2005-02-28+8 00 is represented by 2005 2 28 pt8h an xs time with lexical representation 24 00 00 is represented by 0 0 0 9.3 constructing a datetime a function is provided for constructing a xs datetime value from a xs date value and a xs time value. 9.3.1 fn datetime summary returns an xs datetime value created by combining an xs date and an xs time. signature fn datetime arg1 as xs date arg2 as xs time as xs datetime properties this function is deterministic context-independent and focus-independent rules if either arg1 or arg2 is the empty sequence the function returns the empty sequence. otherwise the function returns an xs datetime whose date component is equal to arg1 and whose time component is equal to arg2. the timezone of the result is computed as follows if neither argument has a timezone the result has no timezone. if exactly one of the arguments has a timezone or if both arguments have the same timezone the result has this timezone. error conditions a dynamic error is raised err forg0008 if the two arguments both have timezones and the timezones are different. examples the expression fn datetime xs date 1999-12-31 xs time 12 00 00 returns xs datetime 1999-12-31t12 00 00 the expression fn datetime xs date 1999-12-31 xs time 24 00 00 returns xs datetime 1999-12-31t00 00 00 this is because 24 00 00 is an alternate lexical form for 00 00 00 9.4 comparison operators on duration date and time values function meaning op datetime-equal returns true if the two supplied xs datetime values refer to the same instant in time. op datetime-less-than returns true if the first argument represents an earlier instant in time than the second argument. op datetime-greater-than returns true if the first argument represents a later instant in time than the second argument. op date-equal returns true if and only if the starting instants of the two supplied xs date values are the same. op date-less-than returns true if and only if the starting instant of arg1 is less than the starting instant of arg2. returns false otherwise. op date-greater-than returns true if and only if the starting instant of arg1 is greater than the starting instant of arg2. returns false otherwise. op time-equal returns true if the two xs time values represent the same instant in time when treated as being times on the same date before adjusting the timezone. op time-less-than returns true if the first xs time value represents an earlier instant in time than the second when both are treated as being times on the same date before adjusting the timezone. op time-greater-than returns true if the first xs time value represents a later instant in time than the second when both are treated as being times on the same date before adjusting the timezone. op gyearmonth-equal returns true if the two xs gyearmonth values have the same starting instant. op gyear-equal returns true if the two xs gyear values have the same starting instant. op gmonthday-equal returns true if the two xs gmonthday values have the same starting instant when considered as days in the same year. op gmonth-equal returns true if the two xs gmonth values have the same starting instant when considered as months in the same year. op gday-equal returns true if the two xs gday values have the same starting instant when considered as days in the same month of the same year. the following comparison operators are defined on the xml schema part 2 datatypes second edition date time datatypes. each operator takes two operands of the same type and returns an xs boolean result. xml schema part 2 datatypes second edition also states that the order relation on date and time datatypes is not a total order but a partial order because these datatypes may or may not have a timezone. this is handled as follows. if either operand to a comparison function on date or time values does not have an explicit timezone then for the purpose of the operation an implicit timezone provided by the dynamic context section c.2 dynamic context components xp30 is assumed to be present as part of the value. this creates a total order for all date and time values. an xs datetime can be considered to consist of seven components year month day hour minute second and timezone. for xs datetime six components year month day hour minute and second are required and timezone is optional. for other date time values of the first six components some are required and others must be absentdm30. timezone is always optional. for example for xs date the year month and day components are required and hour minute and second components must be absent for xs time the hour minute and second components are required and year month and day are missing for xs gday day is required and year month hour minute and second are missing. note in schema 1.1 part 2 a new explicittimezone facet is available with values optional required or prohibited to enable the timezone to be defined as mandatory or disallowed. values of the date time datatypes xs time xs gmonthday xs gmonth and xs gday can be considered to represent a sequence of recurring time instants or time periods. an xs time occurs every day. an xs gmonth occurs every year. comparison operators on these datatypes compare the starting instants of equivalent occurrences in the recurring series. these xs datetime values are calculated as described below. comparison operators on xs date xs gyearmonth and xs gyear compare their starting instants. these xs datetime values are calculated as described below. the starting instant of an occurrence of a date time value is an xs datetime calculated by filling in the missing components of the local value from a reference xs datetime. an example of a suitable reference xs datetime is 1972-01-01t00 00 00. then for example the starting instant corresponding to the xs date value 2009-03-12 is 2009-03-12t00 00 00 the starting instant corresponding to the xs time value 13 30 02 is 1972-01-01t13 30 02 and the starting instant corresponding to the gmonthday value 02-29 is 1972-02-29t00 00 00 which explains why a leap year was chosen for the reference note in the previous version of this specification the reference date time chosen was 1972-12-31t00 00 00. while this gives the same results it produces a starting instant for a gmonth or gmonthday that bears no relation to the ordinary meaning of the term and it also required special handling of short months. the original choice was made to allow for leap seconds but since leap seconds are not recognized in date time arithmetic this is not actually necessary. if the xs time value written as 24 00 00 is to be compared filling in the missing components gives 1972-01-01t00 00 00 because 24 00 00 is an alternative representation of 00 00 00 the lexical value 24 00 00 is converted to the time components 0,0,0 before the missing components are filled in this has the consequence that when ordering xs time values 24 00 00 is considered to be earlier than 23 59 59. however when ordering xs datetime values a time component of 24 00 00 is considered equivalent to 00 00 00 on the following day. note that the reference xs datetime does not have a timezone. the timezone component is never filled in from the reference xs datetime. in some cases if the date time value does not have a timezone the implicit timezone from the dynamic context is used as the timezone. note this specification uses the reference xs datetime 1972-01-01t00 00 00 in the description of the comparison operators. implementations may use other reference xs datetime values as long as they yield the same results. the reference xs datetime used must meet the following constraints when it is used to supply components into xs gmonthday values the year must allow for february 29 and so must be a leap year when it is used to supply missing components into xs gday values the month must allow for 31 days. different reference xs datetime values may be used for different operators. 9.4.1 op datetime-equal summary returns true if the two supplied xs datetime values refer to the same instant in time. operator mapping defines the semantics of the eq operator when applied to two xs datetime values. also used in the definition of the ne le and ge operators. signature op datetime-equal arg1 as xs datetime arg2 as xs datetime as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules if either arg1 or arg2 has no timezone component the effective value of the argument is obtained by substituting the implicit timezone from the dynamic evaluation context. the function then returns true if and only if the effective value of arg1 is equal to the effective value of arg2 according to the algorithm defined in section 3.2.7.4 of xml schema part 2 datatypes second edition order relation on datetime for xs datetime values with timezones. otherwise the function returns false. examples assume that the dynamic context provides an implicit timezone value of 05 00 the expression op datetime-equal xs datetime 2002-04-02t12 00 00-01 00 xs datetime 2002-04-02t17 00 00+04 00 returns true the expression op datetime-equal xs datetime 2002-04-02t12 00 00 xs datetime 2002-04-02t23 00 00+06 00 returns true the expression op datetime-equal xs datetime 2002-04-02t12 00 00 xs datetime 2002-04-02t17 00 00 returns false the expression op datetime-equal xs datetime 2002-04-02t12 00 00 xs datetime 2002-04-02t12 00 00 returns true the expression op datetime-equal xs datetime 2002-04-02t23 00 00-04 00 xs datetime 2002-04-03t02 00 00-01 00 returns true the expression op datetime-equal xs datetime 1999-12-31t24 00 00 xs datetime 2000-01-01t00 00 00 returns true the expression op datetime-equal xs datetime 2005-04-04t24 00 00 xs datetime 2005-04-04t00 00 00 returns false 9.4.2 op datetime-less-than summary returns true if the first argument represents an earlier instant in time than the second argument. operator mapping defines the semantics of the lt operator when applied to two xs datetime values. also used in the definition of the ge operator. signature op datetime-less-than arg1 as xs datetime arg2 as xs datetime as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules if either arg1 or arg2 has no timezone component the effective value of the argument is obtained by substituting the implicit timezone from the dynamic evaluation context. the function then returns true if and only if the effective value of arg1 is less than the effective value of arg2 according to the algorithm defined in section 3.2.7.4 of xml schema part 2 datatypes second edition order relation on datetime for xs datetime values with timezones. otherwise the function returns false. 9.4.3 op datetime-greater-than summary returns true if the first argument represents a later instant in time than the second argument. operator mapping defines the semantics of the gt operator when applied to two xs datetime values. also used in the definition of the le operator. signature op datetime-greater-than arg1 as xs datetime arg2 as xs datetime as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the function call op datetime-greater-than a b is defined to return the same result as op datetime-less-than b a 9.4.4 op date-equal summary returns true if and only if the starting instants of the two supplied xs date values are the same. operator mapping defines the semantics of the eq operator when applied to two xs date values. also used in the definition of the ne le and ge operators. signature op date-equal arg1 as xs date arg2 as xs date as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instant of an xs date is the xs datetime at time 00 00 00 on that date. the function returns the result of the expression op datetime-equal xs datetime arg1 xs datetime arg2 examples the expression op date-equal xs date 2004-12-25z xs date 2004-12-25+07 00 returns false the starting instants are xs datetime 2004-12-25t00 00 00z and xs datetime 2004-12-25t00 00 00+07 00 these are normalized to xs datetime 2004-12-25t00 00 00z and xs datetime 2004-12-24t17 00 00z the expression op date-equal xs date 2004-12-25-12 00 xs date 2004-12-26+12 00 returns true 9.4.5 op date-less-than summary returns true if and only if the starting instant of arg1 is less than the starting instant of arg2. returns false otherwise. operator mapping defines the semantics of the lt operator when applied to two xs date values. also used in the definition of the ge operator. signature op date-less-than arg1 as xs date arg2 as xs date as xs boolean rules the starting instant of an xs date is the xs datetime at time 00 00 00 on that date. the function returns the result of the expression op datetime-less-than xs datetime arg1 xs datetime arg2 examples the expression op date-less-than xs date 2004-12-25z xs date 2004-12-25-05 00 returns true the expression op date-less-than xs date 2004-12-25-12 00 xs date 2004-12-26+12 00 returns false 9.4.6 op date-greater-than summary returns true if and only if the starting instant of arg1 is greater than the starting instant of arg2. returns false otherwise. operator mapping defines the semantics of the gt operator when applied to two xs date values. also used in the definition of the le operator. signature op date-greater-than arg1 as xs date arg2 as xs date as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the function call op date-greater-than a b is defined to return the same result as op date-less-than b a examples the expression op date-greater-than xs date 2004-12-25z xs date 2004-12-25+07 00 returns true the expression op date-greater-than xs date 2004-12-25-12 00 xs date 2004-12-26+12 00 returns false 9.4.7 op time-equal summary returns true if the two xs time values represent the same instant in time when treated as being times on the same date before adjusting the timezone. operator mapping defines the semantics of the eq operator when applied to two xs time values. also used in the definition of the ne le and ge operators. signature op time-equal arg1 as xs time arg2 as xs time as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules each of the supplied xs time values is expanded to an xs datetime value by associating the time with an arbitrary date. the function returns the result of comparing these two xs datetime values using op datetime-equal. the result of the function is thus the same as the value of the expression op datetime-equal fn datetime xs date 1972-12-31 arg1 fn datetime xs date 1972-12-31 arg2 examples assume that the date components from the reference xs datetime correspond to 1972-12-31. the expression op time-equal xs time 08 00 00+09 00 xs time 17 00 00-06 00 returns false the xs datetimes calculated using the reference date components are 1972-12-31t08 00 00+09 00 and 1972-12-31t17 00 00-06 00. these normalize to 1972-12-30t23 00 00z and 1972-12-31t23 00 00z. the expression op time-equal xs time 21 30 00+10 30 xs time 06 00 00-05 00 returns true the expression op time-equal xs time 24 00 00+01 00 xs time 00 00 00+01 00 returns true this not the result one might expect. for xs datetime values a time of 24 00 00 is equivalent to 00 00 00 on the following day. for xs time the normalization from 24 00 00 to 00 00 00 happens before the xs time is converted into an xs datetime for the purpose of the equality comparison. for xs time any operation on 24 00 00 produces the same result as the same operation on 00 00 00 because these are two different lexical representations of the same value. 9.4.8 op time-less-than summary returns true if the first xs time value represents an earlier instant in time than the second when both are treated as being times on the same date before adjusting the timezone. operator mapping defines the semantics of the lt operator when applied to two xs time values. also used in the definition of the ge operator. signature op time-less-than arg1 as xs time arg2 as xs time as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules each of the supplied xs time values is expanded to an xs datetime value by associating the time with an arbitrary date. the function returns the result of comparing these two xs datetime values using op datetime-less-than. the result of the function is thus the same as the value of the expression op datetime-less-than fn datetime xs date 1972-12-31 arg1 fn datetime xs date 1972-12-31 arg2 examples assume that the dynamic context provides an implicit timezone value of 05 00. the expression op time-less-than xs time 12 00 00 xs time 23 00 00+06 00 returns false the expression op time-less-than xs time 11 00 00 xs time 17 00 00z returns true the expression op time-less-than xs time 23 59 59 xs time 24 00 00 returns false 9.4.9 op time-greater-than summary returns true if the first xs time value represents a later instant in time than the second when both are treated as being times on the same date before adjusting the timezone. operator mapping defines the semantics of the gt operator when applied to two xs time values. also used in the definition of the le operator. signature op time-greater-than arg1 as xs time arg2 as xs time as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the function call op time-greater-than a b is defined to return the same result as op time-less-than b a examples the expression op time-greater-than xs time 08 00 00+09 00 xs time 17 00 00-06 00 returns false 9.4.10 op gyearmonth-equal summary returns true if the two xs gyearmonth values have the same starting instant. operator mapping defines the semantics of the eq operator when applied to two xs gyearmonth values. also used in the definition of the ne operator. signature op gyearmonth-equal arg1 as xs gyearmonth arg2 as xs gyearmonth as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instants of arg1 and arg2 are calculated by supplying the missing components of arg1 and arg2 from the xs datetime template xxxx-xx-01t00 00 00. the function returns the result of comparing these two starting instants using op datetime-equal. examples assume that the dynamic context provides an implicit timezone value of 05 00. op gyearmonth-equal xs gyearmonth 1986-02 xs gyearmonth 1986-03 returns false the starting instants are 1986-02-01t00 00 00-05 00 and 1986-03-01t00 00 00 respectively. op gyearmonth-equal xs gyearmonth 1978-03 xs gyearmonth 1986-03z returns false the starting instants are 1978-03-01t00 00 00-05 00 and 1986-03-01t00 00 00z respectively. 9.4.11 op gyear-equal summary returns true if the two xs gyear values have the same starting instant. operator mapping defines the semantics of the eq operator when applied to two xs gyear values. also used in the definition of the ne operator. signature op gyear-equal arg1 as xs gyear arg2 as xs gyear as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instants of arg1 and arg2 are calculated by supplying the missing components of arg1 and arg2 from the xs datetime template xxxx-01-01t00 00 00. the function returns the result of comparing these two starting instants using op datetime-equal. examples assume that the dynamic context provides an implicit timezone value of 05 00. assume also that the xs datetime template is xxxx-01-01t00 00 00. op gyear-equal xs gyear 2005-12 00 xs gyear 2005+12 00 returns false the starting instants are 2005-01-01t00 00 00-12 00 and 2005-01-01t00 00 00+12 00 respectively and normalize to 2005-01-01t12 00 00z and 2004-12-31t12 00 00z. the expression op gyear-equal xs gyear 1976-05 00 xs gyear 1976 returns true 9.4.12 op gmonthday-equal summary returns true if the two xs gmonthday values have the same starting instant when considered as days in the same year. operator mapping defines the semantics of the eq operator when applied to two xs gmonthday values. also used in the definition of the ne operator. signature op gmonthday-equal arg1 as xs gmonthday arg2 as xs gmonthday as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instants of arg1 and arg2 are calculated by supplying the missing components of arg1 and arg2 from the xs datetime template 1972-xx-xxt00 00 00 or an equivalent. the function returns the result of comparing these two starting instants using op datetime-equal. examples assume that the dynamic context provides an implicit timezone value of 05 00. assume for the purposes of illustration that the xs datetime template used is 1972-xx-xxt00 00 00 this does not affect the result the expression op gmonthday-equal xs gmonthday 12-25-14 00 xs gmonthday 12-26+10 00 returns true the starting instants are 1972-12-25t00 00 00-14 00 and 1972-12-26t00 00 00+10 00 respectively and normalize to 1972-12-25t14 00 00z and 1972-12-25t14 00 00z. the expression op gmonthday-equal xs gmonthday 12-25 xs gmonthday 12-26z returns false 9.4.13 op gmonth-equal summary returns true if the two xs gmonth values have the same starting instant when considered as months in the same year. operator mapping defines the semantics of the eq operator when applied to two xs gmonth values. also used in the definition of the ne operator. signature op gmonth-equal arg1 as xs gmonth arg2 as xs gmonth as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instants of arg1 and arg2 are calculated by supplying the missing components of arg1 and arg2 from the xs datetime template 1972-xx-01t00 00 00 or an equivalent. the function returns the result of comparing these two starting instants using op datetime-equal. examples assume that the dynamic context provides an implicit timezone value of 05 00. assume also that the xs datetime template chosen is 1972-xx-01t00 00 00. the expression op gmonth-equal xs gmonth 12-14 00 xs gmonth 12+10 00 returns false the starting instants are 1972-12-01t00 00 00-14 00 and 1972-12-01t00 00 00+10 00 respectively and normalize to 1972-11-30t14 00 00z and 1972-12-01t14 00 00z. the expression op gmonth-equal xs gmonth 12 xs gmonth 12z returns false 9.4.14 op gday-equal summary returns true if the two xs gday values have the same starting instant when considered as days in the same month of the same year. operator mapping defines the semantics of the eq operator when applied to two xs gday values. also used in the definition of the ne operator. signature op gday-equal arg1 as xs gday arg2 as xs gday as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the starting instants of arg1 and arg2 are calculated by supplying the missing components of arg1 and arg2 from the xs datetime template 1972-12-xxt00 00 00 or an equivalent. the function returns the result of comparing these two starting instants using op datetime-equal. examples assume that the dynamic context provides an implicit timezone value of 05 00. assume also that the xs datetime template is 1972-12-xxt00 00 00. the expression op gday-equal xs gday 25-14 00 xs gday 25+10 00 returns false the starting instants are 1972-12-25t00 00 00-14 00 and 1972-12-25t00 00 00+10 00 respectively and normalize to 1972-12-25t14 00 00z and 1972-12-24t14 00 00z. the expression op gday-equal xs gday 12 xs gday 12z returns false 9.5 component extraction functions on dates and times the date and time datatypes may be considered to be composite datatypes in that they contain distinct properties or components. the extraction functions specified below extract a single component from a date or time value. in all cases the local value that is the original value as written without any timezone adjustment is used. note a time written as 24 00 00 is treated as 00 00 00 on the following day. function meaning fn year-from-datetime returns the year component of an xs datetime. fn month-from-datetime returns the month component of an xs datetime. fn day-from-datetime returns the day component of an xs datetime. fn hours-from-datetime returns the hours component of an xs datetime. fn minutes-from-datetime returns the minute component of an xs datetime. fn seconds-from-datetime returns the seconds component of an xs datetime. fn timezone-from-datetime returns the timezone component of an xs datetime. fn year-from-date returns the year component of an xs date. fn month-from-date returns the month component of an xs date. fn day-from-date returns the day component of an xs date. fn timezone-from-date returns the timezone component of an xs date. fn hours-from-time returns the hours component of an xs time. fn minutes-from-time returns the minutes component of an xs time. fn seconds-from-time returns the seconds component of an xs time. fn timezone-from-time returns the timezone component of an xs time. 9.5.1 fn year-from-datetime summary returns the year component of an xs datetime. signature fn year-from-datetime arg as xs datetime as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the year component in the local value of arg. the result may be negative. examples the expression fn year-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns 1999. the expression fn year-from-datetime xs datetime 1999-05-31t21 30 00-05 00 returns 1999. the expression fn year-from-datetime xs datetime 1999-12-31t19 20 00 returns 1999. the expression fn year-from-datetime xs datetime 1999-12-31t24 00 00 returns 2000. 9.5.2 fn month-from-datetime summary returns the month component of an xs datetime. signature fn month-from-datetime arg as xs datetime as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 1 and 12 both inclusive representing the month component in the local value of arg. examples the expression fn month-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns 5. the expression fn month-from-datetime xs datetime 1999-12-31t19 20 00-05 00 returns 12. the expression fn month-from-datetime fn adjust-datetime-to-timezone xs datetime 1999-12-31t19 20 00-05 00 xs daytimeduration pt0s returns 1. 9.5.3 fn day-from-datetime summary returns the day component of an xs datetime. signature fn day-from-datetime arg as xs datetime as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 1 and 31 both inclusive representing the day component in the local value of arg. examples the expression fn day-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns 31. the expression fn day-from-datetime xs datetime 1999-12-31t20 00 00-05 00 returns 31. the expression fn day-from-datetime fn adjust-datetime-to-timezone xs datetime 1999-12-31t19 20 00-05 00 xs daytimeduration pt0s returns 1. 9.5.4 fn hours-from-datetime summary returns the hours component of an xs datetime. signature fn hours-from-datetime arg as xs datetime as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 0 and 23 both inclusive representing the hours component in the local value of arg. examples the expression fn hours-from-datetime xs datetime 1999-05-31t08 20 00-05 00 returns 8. the expression fn hours-from-datetime xs datetime 1999-12-31t21 20 00-05 00 returns 21. the expression fn hours-from-datetime fn adjust-datetime-to-timezone xs datetime 1999-12-31t21 20 00-05 00 xs daytimeduration pt0s returns 2. the expression fn hours-from-datetime xs datetime 1999-12-31t12 00 00 returns 12. the expression fn hours-from-datetime xs datetime 1999-12-31t24 00 00 returns 0. 9.5.5 fn minutes-from-datetime summary returns the minute component of an xs datetime. signature fn minutes-from-datetime arg as xs datetime as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer value between 0 and 59 both inclusive representing the minute component in the local value of arg. examples the expression fn minutes-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns 20. the expression fn minutes-from-datetime xs datetime 1999-05-31t13 30 00+05 30 returns 30. 9.5.6 fn seconds-from-datetime summary returns the seconds component of an xs datetime. signature fn seconds-from-datetime arg as xs datetime as xs decimal properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs decimal value greater than or equal to zero and less than 60 representing the seconds and fractional seconds in the local value of arg. examples the expression fn seconds-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns 0. 9.5.7 fn timezone-from-datetime summary returns the timezone component of an xs datetime. signature fn timezone-from-datetime arg as xs datetime as xs daytimeduration properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns the timezone component of arg if any. if arg has a timezone component then the result is an xs daytimeduration that indicates deviation from utc its value may range from 14 00 to 14 00 hours both inclusive. if arg has no timezone component the result is the empty sequence. examples the expression fn timezone-from-datetime xs datetime 1999-05-31t13 20 00-05 00 returns xs daytimeduration pt5h the expression fn timezone-from-datetime xs datetime 2000-06-12t13 20 00z returns xs daytimeduration pt0s the expression fn timezone-from-datetime xs datetime 2004-08-27t00 00 00 returns 9.5.8 fn year-from-date summary returns the year component of an xs date. signature fn year-from-date arg as xs date as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer representing the year in the local value of arg. the value may be negative. examples the expression fn year-from-date xs date 1999-05-31 returns 1999. the expression fn year-from-date xs date 2000-01-01+05 00 returns 2000. 9.5.9 fn month-from-date summary returns the month component of an xs date. signature fn month-from-date arg as xs date as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 1 and 12 both inclusive representing the month component in the local value of arg. examples the expression fn month-from-date xs date 1999-05-31-05 00 returns 5. the expression fn month-from-date xs date 2000-01-01+05 00 returns 1. 9.5.10 fn day-from-date summary returns the day component of an xs date. signature fn day-from-date arg as xs date as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 1 and 31 both inclusive representing the day component in the localized value of arg. examples the expression fn day-from-date xs date 1999-05-31-05 00 returns 31. the expression fn day-from-date xs date 2000-01-01+05 00 returns 1. 9.5.11 fn timezone-from-date summary returns the timezone component of an xs date. signature fn timezone-from-date arg as xs date as xs daytimeduration properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns the timezone component of arg if any. if arg has a timezone component then the result is an xs daytimeduration that indicates deviation from utc its value may range from 14 00 to 14 00 hours both inclusive. if arg has no timezone component the result is the empty sequence. examples the expression fn timezone-from-date xs date 1999-05-31-05 00 returns xs daytimeduration pt5h the expression fn timezone-from-date xs date 2000-06-12z returns xs daytimeduration pt0s 9.5.12 fn hours-from-time summary returns the hours component of an xs time. signature fn hours-from-time arg as xs time as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer between 0 and 23 both inclusive representing the value of the hours component in the local value of arg. examples assume that the dynamic context provides an implicit timezone value of 05 00. the expression fn hours-from-time xs time 11 23 00 returns 11. the expression fn hours-from-time xs time 21 23 00 returns 21. the expression fn hours-from-time xs time 01 23 00+05 00 returns 1. the expression fn hours-from-time fn adjust-time-to-timezone xs time 01 23 00+05 00 xs daytimeduration pt0s returns 20. the expression fn hours-from-time xs time 24 00 00 returns 0. 9.5.13 fn minutes-from-time summary returns the minutes component of an xs time. signature fn minutes-from-time arg as xs time as xs integer properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs integer value between 0 and 59 both inclusive representing the value of the minutes component in the local value of arg. examples the expression fn minutes-from-time xs time 13 00 00z returns 0. 9.5.14 fn seconds-from-time summary returns the seconds component of an xs time. signature fn seconds-from-time arg as xs time as xs decimal properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs decimal value greater than or equal to zero and less than 60 representing the seconds and fractional seconds in the local value of arg. examples the expression fn seconds-from-time xs time 13 20 10.5 returns 10.5. 9.5.15 fn timezone-from-time summary returns the timezone component of an xs time. signature fn timezone-from-time arg as xs time as xs daytimeduration properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns the timezone component of arg if any. if arg has a timezone component then the result is an xs daytimeduration that indicates deviation from utc its value may range from 14 00 to 14 00 hours both inclusive. if arg has no timezone component the result is the empty sequence. examples the expression fn timezone-from-time xs time 13 20 00-05 00 returns xs daytimeduration pt5h the expression fn timezone-from-time xs time 13 20 00 returns 9.6 timezone adjustment functions on dates and time values function meaning fn adjust-datetime-to-timezone adjusts an xs datetime value to a specific timezone or to no timezone at all. fn adjust-date-to-timezone adjusts an xs date value to a specific timezone or to no timezone at all the result is the date in the target timezone that contains the starting instant of the supplied date. fn adjust-time-to-timezone adjusts an xs time value to a specific timezone or to no timezone at all. these functions adjust the timezone component of an xs datetime xs date or xs time value. the timezone argument to these functions is defined as an xs daytimeduration but must be a valid timezone value. 9.6.1 fn adjust-datetime-to-timezone summary adjusts an xs datetime value to a specific timezone or to no timezone at all. signatures fn adjust-datetime-to-timezone arg as xs datetime as xs datetime fn adjust-datetime-to-timezone arg as xs datetime timezone as xs daytimeduration as xs datetime properties the one-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone. the two-argument form of this function is deterministic context-independent and focus-independent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context. if arg is the empty sequence then the function returns the empty sequence. if arg does not have a timezone component and timezone is the empty sequence then the result is arg. if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component. if arg has a timezone component and timezone is the empty sequence then the result is the local value of arg without its timezone component. if arg has a timezone component and timezone is not the empty sequence then the result is the xs datetime value that is equal to arg and that has a timezone component equal to timezone. error conditions a dynamic error is raised err fodt0003 if timezone is less than pt14h or greater than pt14h or is not an integral number of minutes. examples assume the dynamic context provides an implicit timezone of 05 00 pt5h0m let tz-10 xs daytimeduration pt10h the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00 returns xs datetime 2002-03-07t10 00 00-05 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00-07 00 returns xs datetime 2002-03-07t12 00 00-05 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00 tz-10 returns xs datetime 2002-03-07t10 00 00-10 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00-07 00 tz-10 returns xs datetime 2002-03-07t07 00 00-10 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00-07 00 xs daytimeduration pt10h returns xs datetime 2002-03-08t03 00 00+10 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t00 00 00+01 00 xs daytimeduration pt8h returns xs datetime 2002-03-06t15 00 00-08 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00 returns xs datetime 2002-03-07t10 00 00 the expression fn adjust-datetime-to-timezone xs datetime 2002-03-07t10 00 00-07 00 returns xs datetime 2002-03-07t10 00 00 9.6.2 fn adjust-date-to-timezone summary adjusts an xs date value to a specific timezone or to no timezone at all the result is the date in the target timezone that contains the starting instant of the supplied date. signatures fn adjust-date-to-timezone arg as xs date as xs date fn adjust-date-to-timezone arg as xs date timezone as xs daytimeduration as xs date properties the one-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone. the two-argument form of this function is deterministic context-independent and focus-independent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context. if arg is the empty sequence then the function returns the empty sequence. if arg does not have a timezone component and timezone is the empty sequence then the result is the value of arg. if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component. if arg has a timezone component and timezone is the empty sequence then the result is the local value of arg without its timezone component. if arg has a timezone component and timezone is not the empty sequence then the function returns the value of the expression let dt be the value of fn datetime arg xs time 00 00 00 let adt be the value of fn adjust-datetime-to-timezone dt timezone the function returns the value of xs date adt error conditions a dynamic error is raised err fodt0003 if timezone is less than pt14h or greater than pt14h or is not an integral number of minutes. examples assume the dynamic context provides an implicit timezone of 05 00 pt5h0m let tz-10 xs daytimeduration pt10h the expression fn adjust-date-to-timezone xs date 2002-03-07 returns xs date 2002-03-07-05 00 the expression fn adjust-date-to-timezone xs date 2002-03-07-07 00 returns xs date 2002-03-07-05 00 arg is converted to xs datetime 2002-03-07t00 00 00-07 00 this is adjusted to the implicit timezone giving 2002-03-07t02 00 00-05 00 the expression fn adjust-date-to-timezone xs date 2002-03-07 tz-10 returns xs date 2002-03-07-10 00 the expression fn adjust-date-to-timezone xs date 2002-03-07-07 00 tz-10 returns xs date 2002-03-06-10 00 arg is converted to the xs datetime 2002-03-07t00 00 00-07 00 this is adjusted to the given timezone giving 2002-03-06t21 00 00-10 00 the expression fn adjust-date-to-timezone xs date 2002-03-07 returns xs date 2002-03-07 the expression fn adjust-date-to-timezone xs date 2002-03-07-07 00 returns xs date 2002-03-07 9.6.3 fn adjust-time-to-timezone summary adjusts an xs time value to a specific timezone or to no timezone at all. signatures fn adjust-time-to-timezone arg as xs time as xs time fn adjust-time-to-timezone arg as xs time timezone as xs daytimeduration as xs time properties the one-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone. the two-argument form of this function is deterministic context-independent and focus-independent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context. if arg is the empty sequence then the function returns the empty sequence. if arg does not have a timezone component and timezone is the empty sequence then the result is arg. if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component. if arg has a timezone component and timezone is the empty sequence then the result is the localized value of arg without its timezone component. if arg has a timezone component and timezone is not the empty sequence then let dt be the xs datetime value fn datetime xs date 1972-12-31 arg let adt be the value of fn adjust-datetime-to-timezone dt timezone the function returns the xs time value xs time adt error conditions a dynamic error is raised err fodt0003 if timezone is less than pt14h or greater than pt14h or if does not contain an integral number of minutes. examples assume the dynamic context provides an implicit timezone of 05 00 pt5h0m let tz-10 xs daytimeduration pt10h the expression fn adjust-time-to-timezone xs time 10 00 00 returns xs time 10 00 00-05 00 the expression fn adjust-time-to-timezone xs time 10 00 00-07 00 returns xs time 12 00 00-05 00 the expression fn adjust-time-to-timezone xs time 10 00 00 tz-10 returns xs time 10 00 00-10 00 the expression fn adjust-time-to-timezone xs time 10 00 00-07 00 tz-10 returns xs time 07 00 00-10 00 the expression fn adjust-time-to-timezone xs time 10 00 00 returns xs time 10 00 00 the expression fn adjust-time-to-timezone xs time 10 00 00-07 00 returns xs time 10 00 00 the expression fn adjust-time-to-timezone xs time 10 00 00-07 00 xs daytimeduration pt10h returns xs time 03 00 00+10 00 9.7 arithmetic operators on durations dates and times these functions support adding or subtracting a duration value to or from an xs datetime an xs date or an xs time value. appendix e of xml schema part 2 datatypes second edition describes an algorithm for performing such operations. function meaning op subtract-datetimes returns an xs daytimeduration representing the amount of elapsed time between the instants arg2 and arg1. op subtract-dates returns the xs daytimeduration that corresponds to the elapsed time between the starting instant of arg2 and the starting instant of arg2. op subtract-times returns the xs daytimeduration that corresponds to the elapsed time between the values of arg2 and arg1 treated as times on the same date. op add-yearmonthduration-to-datetime returns the xs datetime that is a given duration after a specified xs datetime or before if the duration is negative op add-daytimeduration-to-datetime returns the xs datetime that is a given duration after a specified xs datetime or before if the duration is negative op subtract-yearmonthduration-from-datetime returns the xs datetime that is a given duration before a specified xs datetime or after if the duration is negative op subtract-daytimeduration-from-datetime returns the xs datetime that is a given duration before a specified xs datetime or after if the duration is negative op add-yearmonthduration-to-date returns the xs date that is a given duration after a specified xs date or before if the duration is negative op add-daytimeduration-to-date returns the xs date that is a given duration after a specified xs date or before if the duration is negative op subtract-yearmonthduration-from-date returns the xs date that is a given duration before a specified xs date or after if the duration is negative op subtract-daytimeduration-from-date returns the xs date that is a given duration before a specified xs date or after if the duration is negative op add-daytimeduration-to-time returns the xs time value that is a given duration after a specified xs time or before if the duration is negative or causes wrap-around past midnight op subtract-daytimeduration-from-time returns the xs time value that is a given duration before a specified xs time or after if the duration is negative or causes wrap-around past midnight 9.7.1 limits and precision a processor that limits the number of digits in date and time datatype representations may encounter overflow and underflow conditions when it tries to execute the functions in this section. in these situations the processor must return p0m or pt0s in case of duration underflow and 00 00 00 in case of time underflow. it must raise a dynamic error err fodt0001 in case of overflow. the value spaces of the two totally ordered subtypes of xs duration described in 8.1 two totally ordered subtypes of duration are xs integer months for xs yearmonthduration and xs decimal seconds for xs daytimeduration. if a processor limits the number of digits allowed in the representation of xs integer and xs decimal then overflow and underflow situations can arise when it tries to execute the functions in 8.4 arithmetic operators on durations. in these situations the processor must return zero in case of numeric underflow and p0m or pt0s in case of duration underflow. it must raise a dynamic error err fodt0002 in case of overflow. 9.7.2 op subtract-datetimes summary returns an xs daytimeduration representing the amount of elapsed time between the instants arg2 and arg1. operator mapping defines the semantics of the operator when applied to two xs datetime values. signature op subtract-datetimes arg1 as xs datetime arg2 as xs datetime as xs daytimeduration properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules if either arg1 or arg2 do not contain an explicit timezone then for the purpose of the operation the implicit timezone provided by the dynamic context see section c.2 dynamic context components xp30. is assumed to be present as part of the value. the function returns the elapsed time between the date time instant arg2 and the date time instant arg1 computed according to the algorithm given in appendix e of xml schema part 2 datatypes second edition and expressed as a xs daytimeduration. if the normalized value of arg1 precedes in time the normalized value of arg2 then the returned value is a negative duration. examples assume that the dynamic context provides an implicit timezone value of 05 00. the expression op subtract-datetimes xs datetime 2000-10-30t06 12 00 xs datetime 1999-11-28t09 00 00z returns xs daytimeduration p337dt2h12m 9.7.3 op subtract-dates summary returns the xs daytimeduration that corresponds to the elapsed time between the starting instant of arg2 and the starting instant of arg2. operator mapping defines the semantics of the operator when applied to two xs date values. signature op subtract-dates arg1 as xs date arg2 as xs date as xs daytimeduration properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules if either arg1 or arg2 do not contain an explicit timezone then for the purpose of the operation the implicit timezone provided by the dynamic context see section c.2 dynamic context components xp30. is assumed to be present as part of the value. the starting instant of an xs date is the xs datetime at 00 00 00 on that date. the function returns the result of subtracting the two starting instants using op subtract-datetimes. if the starting instant of arg1 precedes in time the starting instant of arg2 then the returned value is a negative duration. examples assume that the dynamic context provides an implicit timezone value of z. the expression op subtract-dates xs date 2000-10-30 xs date 1999-11-28 returns xs daytimeduration p337d the normalized values of the two starting instants are 2000 10 30 0 0 0 pt0s and 1999 11 28 0 0 0 pt0s now assume that the dynamic context provides an implicit timezone value of 05 00. the expression op subtract-dates xs date 2000-10-30 xs date 1999-11-28z returns xs daytimeduration p336dt19h the normalized values of the two starting instants are 2000 10 29 19 0 0 pt0s and 1999 11 28 0 0 0 pt0s the expression op subtract-dates xs date 2000-10-15-05 00 xs date 2000-10-10+02 00 returns xs daytimeduration p5dt7h 9.7.4 op subtract-times summary returns the xs daytimeduration that corresponds to the elapsed time between the values of arg2 and arg1 treated as times on the same date. operator mapping defines the semantics of the operator when applied to two xs time values. signature op subtract-times arg1 as xs time arg2 as xs time as xs daytimeduration properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules the function returns the result of the expression op-subtract-datetimes fn datetime xs date 1972-12-31 arg1 fn datetime xs date 1972-12-31 arg2 notes any other reference date would work equally well. examples assume that the dynamic context provides an implicit timezone value of 05 00. assume also that the date components of the reference xs datetime correspond to 1972-12-31 the expression op subtract-times xs time 11 12 00z xs time 04 00 00 returns xs daytimeduration pt2h12m this is obtained by subtracting from the xs datetime value 1972 12 31 11 12 0 pt0s the xs datetime value 1972 12 31 9 0 0 pt0s the expression op subtract-times xs time 11 00 00-05 00 xs time 21 30 00+05 30 returns xs daytimeduration pt0s the two xs datetime values are 1972 12 31 11 0 0 pt5h and 1972 12 31 21 30 0 pt5h30m these normalize to 1972 12 31 16 0 0 pt0s and 1972 12 31 16 0 0 pt0s the expression op subtract-times xs time 17 00 00-06 00 xs time 08 00 00+09 00 returns xs daytimeduration p1d the two normalized xs datetime values are 1972 12 31 23 0 0 pt0s and 1972 12 30 23 0 0 pt0s the expression op subtract-times xs time 24 00 00 xs time 23 59 59 returns xs daytimeduration pt23h59m59s the two normalized xs datetime values are 1972 12 31 0 0 0 and 1972 12 31 23 59 59.0 9.7.5 op add-yearmonthduration-to-datetime summary returns the xs datetime that is a given duration after a specified xs datetime or before if the duration is negative operator mapping defines the semantics of the operator when applied to an xs datetime and an xs yearmonthduration value. signature op add-yearmonthduration-to-datetime arg1 as xs datetime arg2 as xs yearmonthduration as xs datetime properties this function is deterministic context-independent and focus-independent rules the function returns the result of adding arg2 to the value of arg1 using the algorithm described in appendix e of xml schema part 2 datatypes second edition disregarding the rule about leap seconds. if arg2 is negative then the result xs datetime precedes arg1. the result has the same timezone as arg1. if arg1 has no timezone the result has no timezone. examples the expression op add-yearmonthduration-to-datetime xs datetime 2000-10-30t11 12 00 xs yearmonthduration p1y2m returns xs datetime 2001-12-30t11 12 00 9.7.6 op add-daytimeduration-to-datetime summary returns the xs datetime that is a given duration after a specified xs datetime or before if the duration is negative operator mapping defines the semantics of the operator when applied to an xs datetime and an xs daytimeduration value. signature op add-daytimeduration-to-datetime arg1 as xs datetime arg2 as xs daytimeduration as xs datetime properties this function is deterministic context-independent and focus-independent rules the function returns the result of adding arg2 to the value of arg1 using the algorithm described in appendix e of xml schema part 2 datatypes second edition disregarding the rule about leap seconds. if arg2 is negative then the result xs datetime precedes arg1. the result has the same timezone as arg1. if arg1 has no timezone the result has no timezone. examples the expression op add-daytimeduration-to-datetime xs datetime 2000-10-30t11 12 00 xs daytimeduration p3dt1h15m returns xs datetime 2000-11-02t12 27 00 9.7.7 op subtract-yearmonthduration-from-datetime summary returns the xs datetime that is a given duration before a specified xs datetime or after if the duration is negative operator mapping defines the semantics of the operator when applied to an xs datetime and an xs yearmonthduration value. signature op subtract-yearmonthduration-from-datetime arg1 as xs datetime arg2 as xs yearmonthduration as xs datetime properties this function is deterministic context-independent and focus-independent rules the function returns the xs datetime computed by negating arg2 and adding the result to the value of arg1 using the function op add-yearmonthduration-to-datetime. examples the expression op subtract-yearmonthduration-from-datetime xs datetime 2000-10-30t11 12 00 xs yearmonthduration p1y2m returns xs datetime 1999-08-30t11 12 00 9.7.8 op subtract-daytimeduration-from-datetime summary returns the xs datetime that is a given duration before a specified xs datetime or after if the duration is negative operator mapping defines the semantics of the operator when applied to an xs datetime an and xs daytimeduration values signature op subtract-daytimeduration-from-datetime arg1 as xs datetime arg2 as xs daytimeduration as xs datetime rules the function returns the xs datetime computed by negating arg2 and adding the result to the value of arg1 using the function op add-daytimeduration-to-datetime. examples the expression op subtract-daytimeduration-from-datetime xs datetime 2000-10-30t11 12 00 xs daytimeduration p3dt1h15m returns xs datetime 2000-10-27t09 57 00 9.7.9 op add-yearmonthduration-to-date summary returns the xs date that is a given duration after a specified xs date or before if the duration is negative operator mapping defines the semantics of the operator when applied to an xs date and an xs yearmonthduration value. signature op add-yearmonthduration-to-date arg1 as xs date arg2 as xs yearmonthduration as xs date properties this function is deterministic context-independent and focus-independent rules the function returns the result of casting arg1 to an xs datetime adding arg2 using the function op add-yearmonthduration-to-datetime and casting the result back to an xs date. examples the expression op add-yearmonthduration-to-date xs date 2000-10-30 xs yearmonthduration p1y2m returns xs date 2001-12-30 9.7.10 op add-daytimeduration-to-date summary returns the xs date that is a given duration after a specified xs date or before if the duration is negative operator mapping defines the semantics of the operator when applied to an xs date and an xs daytimeduration value. signature op add-daytimeduration-to-date arg1 as xs date arg2 as xs daytimeduration as xs date properties this function is deterministic context-independent and focus-independent rules the function returns the result of casting arg1 to an xs datetime adding arg2 using the function op add-daytimeduration-to-datetime and casting the result back to an xs date. examples the expression op add-daytimeduration-to-date xs date 2004-10-30z xs daytimeduration p2dt2h30m0s returns xs date 2004-11-01z the starting instant of the first argument is the xs datetime value 2004 10 30 0 0 0 pt0s adding the second argument to this gives the xs datetime value 2004 11 1 2 30 0 pt0s the time components are then discarded. 9.7.11 op subtract-yearmonthduration-from-date summary returns the xs date that is a given duration before a specified xs date or after if the duration is negative operator mapping defines the semantics of the operator when applied to an xs date and an xs yearmonthduration value. signature op subtract-yearmonthduration-from-date arg1 as xs date arg2 as xs yearmonthduration as xs date properties this function is deterministic context-independent and focus-independent rules returns the xs date computed by negating arg2 and adding the result to arg1 using the function op add-yearmonthduration-to-date. examples the expression op subtract-yearmonthduration-from-date xs date 2000-10-30 xs yearmonthduration p1y2m returns xs date 1999-08-30 the expression op subtract-yearmonthduration-from-date xs date 2000-02-29z xs yearmonthduration p1y returns xs date 1999-02-28z the expression op subtract-yearmonthduration-from-date xs date 2000-10-31-05 00 xs yearmonthduration p1y1m returns xs date 1999-09-30-05 00 9.7.12 op subtract-daytimeduration-from-date summary returns the xs date that is a given duration before a specified xs date or after if the duration is negative operator mapping defines the semantics of the operator when applied to an xs date and an xs daytimeduration. signature op subtract-daytimeduration-from-date arg1 as xs date arg2 as xs daytimeduration as xs date properties this function is deterministic context-independent and focus-independent rules returns the xs date computed by negating arg2 and adding the result to arg1 using the function op add-daytimeduration-to-date. examples the expression op subtract-daytimeduration-from-date xs date 2000-10-30 xs daytimeduration p3dt1h15m returns xs date 2000-10-26 9.7.13 op add-daytimeduration-to-time summary returns the xs time value that is a given duration after a specified xs time or before if the duration is negative or causes wrap-around past midnight operator mapping defines the semantics of the operator when applied to an xs time and an xs daytimeduration value. signature op add-daytimeduration-to-time arg1 as xs time arg2 as xs daytimeduration as xs time rules first the days component in the canonical lexical representation of arg2 is set to zero 0 and the value of the resulting xs daytimeduration is calculated. alternatively the value of arg2 modulus 86,400 is used as the second argument. this value is added to the value of arg1 converted to an xs datetime using a reference date such as 1972-12-31 and the time component of the result is returned. note that the xs time returned may occur in a following or preceding day and may be less than arg1. the result has the same timezone as arg1. if arg1 has no timezone the result has no timezone. examples the expression op add-daytimeduration-to-time xs time 11 12 00 xs daytimeduration p3dt1h15m returns xs time 12 27 00 the expression op add-daytimeduration-to-time xs time 23 12 00+03 00 xs daytimeduration p1dt3h15m returns xs time 02 27 00+03 00 that is 0 0 0 2 27 0 pt3h 9.7.14 op subtract-daytimeduration-from-time summary returns the xs time value that is a given duration before a specified xs time or after if the duration is negative or causes wrap-around past midnight operator mapping defines the semantics of the operator when applied to an xs time and an xs daytimeduration value. signature op subtract-daytimeduration-from-time arg1 as xs time arg2 as xs daytimeduration as xs time properties this function is deterministic context-independent and focus-independent rules the function returns the result of negating arg2 and adding the result to arg1 using the function add-daytimeduration-to-time. examples the expression op subtract-daytimeduration-from-time xs time 11 12 00 xs daytimeduration p3dt1h15m returns xs time 09 57 00 the expression op subtract-daytimeduration-from-time xs time 08 20 00-05 00 xs daytimeduration p23dt10h10m returns xs time 22 10 00-05 00 9.8 formatting dates and times function meaning fn format-datetime returns a string containing an xs datetime value formatted for display. fn format-date returns a string containing an xs date value formatted for display. fn format-time returns a string containing an xs time value formatted for display. three functions are provided to represent dates and times as a string using the conventions of a selected calendar language and country. the signatures are presented first followed by the rules which apply to each of the functions. 9.8.1 fn format-datetime summary returns a string containing an xs datetime value formatted for display. signatures fn format-datetime value as xs datetime picture as xs string as xs string fn format-datetime value as xs datetime picture as xs string language as xs string calendar as xs string place as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on default calendar and default language and default place and implicit timezone. the five-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone and namespaces. rules see 9.8.4 the date time formatting functions. 9.8.2 fn format-date summary returns a string containing an xs date value formatted for display. signatures fn format-date value as xs date picture as xs string as xs string fn format-date value as xs date picture as xs string language as xs string calendar as xs string place as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on default calendar and default language and default place and implicit timezone. the five-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone and namespaces. rules see 9.8.4 the date time formatting functions. 9.8.3 fn format-time summary returns a string containing an xs time value formatted for display. signatures fn format-time value as xs time picture as xs string as xs string fn format-time value as xs time picture as xs string language as xs string calendar as xs string place as xs string as xs string properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on default calendar and default language and default place and implicit timezone. the five-argument form of this function is deterministic context-dependent and focus-independent it depends on implicit timezone and namespaces. rules see 9.8.4 the date time formatting functions. 9.8.4 the date time formatting functions the fn format-datetime fn format-date and fn format-time functions format value as a string using the picture string specified by the picture argument the calendar specified by the calendar argument the language specified by the language argument and the country or other place name specified by the place argument. the result of the function is the formatted string representation of the supplied xs datetime xs date or xs time value. definition the three functions fn format-datetime fn format-date and fn format-time are referred to collectively as the date formatting functions. if value is the empty sequence the function returns the empty sequence. calling the two-argument form of each of the three functions is equivalent to calling the five-argument form with each of the last three arguments set to an empty sequence. for details of the language calendar and place arguments see 9.8.4.3 the language calendar and place arguments. in general the use of an invalid picture language calendar or place argument results in a dynamic error err fofd1340 by contrast use of an option in any of these arguments that is valid but not supported by the implementation is not an error and in these cases the implementation is required to output the value in a fallback representation. more detailed rules are given below. 9.8.4.1 the picture string the picture consists of a sequence of variable markers and literal substrings. a substring enclosed in square brackets is interpreted as a variable marker substrings not enclosed in square brackets are taken as literal substrings. the literal substrings are optional and if present are rendered unchanged including any whitespace. if an opening or closing square bracket is required within a literal substring it must be doubled. the variable markers are replaced in the result by strings representing aspects of the date and or time to be formatted. these are described in detail below. a variable marker consists of a component specifier followed optionally by one or two presentation modifiers and or optionally by a width modifier. whitespace within a variable marker is ignored. the variable marker may be separated into its components by applying the following rules the component specifier is always present and is always a single letter. the width modifier may be recognized by the presence of a comma. the substring between the component specifier and the comma if present or the end of the string if there is no comma contains the first and second presentation modifiers both of which are optional. if this substring contains a single character this is interpreted as the first presentation modifier. if it contains more than one character the last character is examined if it is valid as a second presentation modifier then it is treated as such and the preceding part of the substring constitutes the first presentation modifier. otherwise the second presentation modifier is presumed absent and the whole substring is interpreted as the first presentation modifier. the component specifier indicates the component of the date or time that is required and takes the following values specifier meaning default presentation modifier y year absolute value 1 m month in year 1 d day in month 1 d day in year 1 f day of week n w week in year 1 w week in month 1 h hour in day 24 hours 1 h hour in half-day 12 hours 1 p am pm marker n m minute in hour 01 s second in minute 01 f fractional seconds 1 z timezone 01 01 z timezone same as z but modified where appropriate to include a prefix as a time offset using gmt for example gmt+1 or gmt-05 00. for this component there is a fixed prefix of gmt or a localized variation thereof for the chosen language and the remainder of the value is formatted as for specifier z. 01 01 c calendar the name or abbreviation of a calendar name n e era the name of a baseline for the numbering of years for example the reign of a monarch n a dynamic error is reported err fofd1340 if the syntax of the picture is incorrect. a dynamic error is reported err fofd1350 if a component specifier within the picture refers to components that are not available in the given type of value for example if the picture supplied to the fn format-time refers to the year month or day component. it is not an error to include a timezone component when the supplied value has no timezone. in these circumstances the timezone component will be ignored. the first presentation modifier indicates the style in which the value of a component is to be represented. its value may be either any format token permitted as a primary format token in the second argument of the fn format-integer function indicating that the value of the component is to be output numerically using the specified number format for example 1 01 i i w w or ww or the format token n n or nn indicating that the value of the component is to be output by name in lower-case upper-case or title-case respectively. components that can be output by name include but are not limited to months days of the week timezones and eras. if the processor cannot output these components by name for the chosen calendar and language then it must use an implementation-defined fallback representation. if a comma is to be used as a grouping separator within the format token then there must be a width specifier. more specifically if a variable marker contains one or more commas then the last comma is treated as introducing the width modifier and all others are treated as grouping separators. so y 9,999 will output the year as 2,008 if the implementation does not support the use of the requested format token it must use the default presentation modifier for that component. if the first presentation modifier is present then it may optionally be followed by a second presentation modifier as follows modifier meaning either a or t indicates alphabetic or traditional numbering respectively the default being implementation-defined this has the same meaning as in the second argument of fn format-integer. either c or o indicates cardinal or ordinal numbering respective for example 7 or seven for a cardinal number or 7th seventh or 7 for an ordinal number. this has the same meaning as in the second argument of fn format-integer. the actual representation of the ordinal form of a number may depend not only on the language but also on the grammatical context for example in some languages it must agree in gender note although the formatting rules are expressed in terms of the rules for format tokens in fn format-integer the formats actually used may be specialized to the numbering of date components where appropriate. for example in italian it is conventional to use an ordinal number primo for the first day of the month and cardinal numbers due tre quattro for the remaining days. a processor may therefore use this convention to number days of the month ignoring the presence or absence of the ordinal presentation modifier. whether or not a presentation modifier is included a width modifier may be supplied. this indicates the number of characters or digits to be included in the representation of the value. the width modifier if present is introduced by a comma or semicolon. it takes the form min-width max-width where min-width is either an unsigned integer indicating the minimum number of characters to be output or indicating that there is no explicit minimum and max-width is either an unsigned integer indicating the maximum number of characters to be output or indicating that there is no explicit maximum if max-width is omitted then is assumed. both integers if present must be greater than zero. a format token containing more than one digit such as 001 or 9999 sets the minimum and maximum width to the number of digits appearing in the format token if a width modifier is also present then the width modifier takes precedence. a numeric format token may contain optional-digit-signs and grouping-separators as described for fn format-integer. however the grouping separator cannot be a closing square bracket note a format token consisting of a single digit such as 1 does not constrain the number of digits in the output. in the case of fractional seconds in particular f001 requests three decimal digits f01 requests two digits but f1 will produce an implementation-defined number of digits. if exactly one digit is required this can be achieved using the component specifier f1 1-1 if the minimum and maximum width are unspecified then the output uses as many characters as are required to represent the value of the component without truncation and without padding this is referred to below as the full representation of the value. for a timezone offset component specifier z the full representation consists of a sign for the offset the number of hours of the offset and if the offset is not an integral number of hours a colon followed by the two digits of the minutes of the offset.. if the full representation of the value exceeds the specified maximum width then the processor should attempt to use an alternative shorter representation that fits within the maximum width. where the presentation modifier is n n or nn this is done by abbreviating the name using either conventional abbreviations if available or crude right-truncation if not. for example setting max-width to 4 indicates that four-letter abbreviations should be used though it would be acceptable to use a three-letter abbreviation if this is in conventional use. for example tuesday might be abbreviated to tues and friday to fri in the case of the year component setting max-width requests omission of high-order digits from the year for example if max-width is set to 2 then the year 2003 will be output as 03. in the case of the fractional seconds component the value is rounded to the specified size as if by applying the function round-half-to-even fractional-seconds max-width if no mechanism is available for fitting the value within the specified maximum width for example when roman numerals are used then the value should be output in its full representation. if the full representation of the value is shorter than the specified minimum width then the processor should pad the value to the specified width. for decimal representations of numbers this should be done by prepending zero digits from the appropriate set of digit characters or appending zero digits in the case of the fractional seconds component. for timezone offsets this should be done by first appending a colon followed by two zero digits from the appropriate set of digit characters if the full representation does not already include a minutes component and if the specified minimum width permits adding three characters and then if necessary prepending zero digits from the appropriate set of digit characters to the hour component. in other cases it should be done by appending spaces. 9.8.4.2 formatting timezones special rules apply to the formatting of timezones. when the component specifiers z or z are used the rules in this section override any rules given elsewhere in the case of discrepancies. if the date time value to be formatted does not include a timezone offset then the timezone component specifier is generally ignored results in no output the exception is where military timezones are used format zz in which case the string j is output indicating local time. when the component specifier is z the output is the same as for component specifier z except that it is prefixed by the characters gmt or some localized equivalent. the prefix is omitted however in cases where the timezone is identified by name rather than by a numeric offset from utc. if the first presentation modifier is numeric and comprises one or two digits with no grouping-separator for example 1 or 01 then the timezone is formatted as a displacement from utc in hours preceded by a plus or minus sign for example 5 or 03. if the actual timezone offset is not an integral number of hours then the minutes part of the offset is appended separated by a colon for example 10 30 or 1 15. if the first presentation modifier is numeric with a grouping-separator for example 1 01 or 01.01 then the timezone offset is output in hours and minutes separated by the grouping separator even if the number of minutes is zero for example 5 00 or 10.30. if the first presentation modifier is numeric and comprises three or four digits with no grouping-separator for example 001 or 0001 then the timezone offset is shown in hours and minutes with no separator for example 0500 or 1030. if the first presentation modifier is numeric in any of the above formats and the second presentation modifier is t then a zero timezone offset that is utc is output as z instead of a signed numeric value. in this presentation modifier is absent or if the timezone offset is non-zero then the displayed timezone offset is preceded by a sign for negative offsets or a sign for non-negative offsets. if the first presentation modifier is z then the timezone is formatted as a military timezone letter using the convention z 00 00 a 01 00 b 02 00 m 12 00 n 01 00 o 02 00 y 12 00. the letter j meaning local time is used in the case of a value that does not specify a timezone offset. timezone offsets that have no representation in this system for example indian standard time 05 30 are output as if the format 01 01 had been requested. if the first presentation modifier is n then the timezone is output where possible as a timezone name for example est or cet. the same timezone offset has different names in different places it is therefore recommended that this option should be used only if a country code or olson timezone name is supplied in the place argument. in the absence of this information the implementation may apply a default for example by using the timezone names that are conventional in north america. if no timezone name can be identified the timezone offset is output using the fallback format 01 01. the following examples illustrate options for timezone formatting. variable marker place timezone offsets with time 12 00 00 10 00 05 00 00 00 05 30 13 00 z 10 00 05 00 00 00 05 30 13 00 z0 10 5 0 5 30 13 z0 00 10 00 5 00 0 00 5 30 13 00 z00 00 10 00 05 00 00 00 05 30 13 00 z0000 1000 0500 0000 0530 1300 z00 00t 10 00 05 00 z 05 30 13 00 z gmt-10 00 gmt-05 00 gmt+00 00 gmt+05 30 gmt+13 00 zz w r z 05 30 13 00 zn us hst est gmt ist 13 00 h00 m00 zn america new_york 06 00 est 12 00 est 07 00 est 01 30 est 18 00 est 9.8.4.3 the language calendar and place arguments the set of languages calendars and places that are supported in the date formatting functions is implementation-defined when any of these arguments is omitted or is an empty sequence an implementation-defined default value is used. if the fallback representation uses a different calendar from that requested the output string must identify the calendar actually used for example by prefixing the string with calendar x where x is the calendar actually used localized as appropriate to the requested language. if the fallback representation uses a different language from that requested the output string must identify the language actually used for example by prefixing the string with language y where y is the language actually used localized in an implementation-dependent way. if a particular component of the value cannot be output in the requested format it should be output in the default format for that component. the language argument specifies the language to be used for the result string of the function. the value of the argument should be either the empty sequence or a value that would be valid for the xml lang attribute see xml note that this permits the identification of sublanguages based on country codes from iso 3166-1 as well as identification of dialects and of regions within a country. if the language argument is omitted or is set to an empty sequence or if it is set to an invalid value or a value that the implementation does not recognize then the processor uses the default language defined in the dynamic context. the language is used to select the appropriate language-dependent forms of names for example of months numbers expressed as words or as ordinals twenty 20th twentieth hour convention 0-23 vs 1-24 0-11 vs 1-12 first day of week first week of year where appropriate this choice may also take into account the value of the place argument though this should not be used to override the language or any sublanguage that is specified as part of the language argument. the choice of the names and abbreviations used in any given language is implementation-defined for example one implementation might abbreviate july as jul while another uses jly. in german one implementation might represent saturday as samstag while another uses sonnabend. implementations may provide mechanisms allowing users to control such choices. where ordinal numbers are used the selection of the correct representation of the ordinal for example the linguistic gender may depend on the component being formatted and on its textual context in the picture string. the calendar attribute specifies that the datetime date or time supplied in the value argument must be converted to a value in the specified calendar and then converted to a string using the conventions of that calendar. the calendar value if present must be a valid eqname dynamic error err fofd1340 if it is a lexical qname then it is expanded into an expanded qname using the statically known namespaces if it has no prefix then it represents an expanded-qname in no namespace. if the expanded qname is in no namespace then it must identify a calendar with a designator specified below dynamic error err fofd1340 if the expanded qname is in a namespace then it identifies the calendar in an implementation-defined way. if the calendar argument is omitted or is set to an empty sequence then the default calendar defined in the dynamic context is used. note the calendars listed below were known to be in use during the last hundred years. many other calendars have been used in the past. this specification does not define any of these calendars nor the way that they map to the value space of the xs date data type in xml schema part 2 datatypes second edition there may be ambiguities when dates are recorded using different calendars. for example the start of a new day is not simultaneous in different calendars and may also vary geographically for example based on the time of sunrise or sunset translation of dates is therefore more reliable when the time of day is also known and when the geographic location is known. when translating dates between one calendar and another the processor may take account of the values of the place and or language arguments with the place argument taking precedence. information about some of these calendars and algorithms for converting between them may be found in calendrical calculations designator calendar ad anno domini christian era ah anno hegirae muhammedan era ame mauludi era solar years since mohammed s birth am anno mundi jewish calendar ap anno persici as aji saka era java be buddhist era cb cooch behar era ce common era cl chinese lunar era cs chula sakarat era ee ethiopian era fe fasli era iso iso 8601 calendar je japanese calendar ke khalsa era sikh calendar ky kali yuga me malabar era ms monarchic solar era ns nepal samwat era os old style julian calendar rs rattanakosin bangkok era se saka era sh mohammedan solar era iran ss saka samvat te tripurabda era ve vikrama era vs vikrama samvat era at least one of the above calendars must be supported. it is implementation-defined which calendars are supported. the iso 8601 calendar iso 8601 which is included in the above list and designated iso is very similar to the gregorian calendar designated ad but it differs in several ways. the iso calendar is intended to ensure that date and time formats can be read easily by other software as well as being legible for human users. the iso calendar prescribes the use of particular numbering conventions as defined in iso 8601 rather than allowing these to be localized on a per-language basis. in particular it provides a numeric week date format which identifies dates by year week of the year and day in the week in the iso calendar the days of the week are numbered from 1 monday to 7 sunday and week 1 in any calendar year is the week from monday to sunday that includes the first thursday of that year. the numeric values of the components year month day hour minute and second are the same in the iso calendar as the values used in the lexical representation of the date and time as defined in xml schema part 2 datatypes second edition the era e component with this calendar is either a minus sign for negative years or a zero-length string for positive years for dates before 1 january ad 1 year numbers in the iso and ad calendars are off by one from each other iso year 0000 is 1 bc 0001 is 2 bc etc. iso 8601 does not define a numbering for weeks within a month. when the w component is used the convention to be adopted is that each monday-to-sunday week is considered to fall within a particular month if its thursday occurs in that month the weeks that fall in a particular month under this definition are numbered starting from 1. thus for example 29 january 2013 falls in week 5 because the thursday of the week 31 january 2013 is the fifth thursday in january and 1 february 2013 is also in week 5 for the same reason. note the value space of the date and time data types as defined in xml schema is based on absolute points in time. the lexical space of these data types defines a representation of these absolute points in time using the proleptic gregorian calendar that is the modern western calendar extrapolated into the past and the future but the value space is calendar-neutral. the date formatting functions produce a representation of this absolute point in time but denoted in a possibly different calendar. so for example the date whose lexical representation in xml schema is 1502-01-11 the day on which pope gregory xiii was born might be formatted using the old style julian calendar as 1 january 1502. this reflects the fact that there was at that time a ten-day difference between the two calendars. it would be incorrect and would produce incorrect results to represent this date in an element or attribute of type xs date as 1502-01-01 even though this might reflect the way the date was recorded in contemporary documents. when referring to years occurring in antiquity modern historians generally use a numbering system in which there is no year zero the year before 1 ce is thus 1 bce this is the convention that should be used when the requested calendar is os julian or ad gregorian when the requested calendar is iso however the conventions of iso 8601 should be followed here the year before 0001 is numbered zero. in xml schema part 2 datatypes second edition version 1.0 the value space for xs date and xs datetime does not include a year zero however xsd 1.1 endorses the iso 8601 convention. this means that the date on which julius caesar was assassinated has the iso 8601 lexical representation 0043-03-13 but will be formatted as 15 march 44 bce in the julian calendar or 13 march 44 bce in the gregorian calendar dependant on the chosen localization of the names of months and eras the intended use of the place argument is to identify the place where an event represented by the datetime date or time supplied in the value argument took place or will take place. if the place argument is omitted or is set to an empty sequence then the default place defined in the dynamic context is used. if the value is supplied and is not the empty sequence then it should either be a country code or an olson timezone name. if the value does not take this form or if its value is not recognized by the implementation then the default place defined in the dynamic context is used. country codes are defined in iso 3166-1 examples are de for germany and jp for japan. implementations may also allow the use of codes representing subdivisions of a country from iso 3166-2 or codes representing formerly used names of countries from iso 3166-3 olson timezone names are defined in the public-domain tz timezone database olson timezone database examples are america new_york and europe rome this argument is not intended to identify the location of the user for whom the date or time is being formatted that should be done by means of the language attribute. this information may be used to provide additional information when converting dates between calendars or when deciding how individual components of the date and time are to be formatted. for example different countries using the old style julian calendar started the new year on different days and some countries used variants of the calendar that were out of synchronization as a result of differences in calculating leap years. the geographical area identified by a country code is defined by the boundaries as they existed at the time of the date to be formatted or the present-day boundaries for dates in the future. if the place argument is supplied in the form of an olson timezone name that is recognized by the implementation then the date or time being formatted is adjusted to the timezone offset applicable in that timezone. for example if the xs datetime value 2010-02-15t12 00 00z is formatted with the place argument set to america new_york then the output will be as if the value 2010-02-15t07 00 00-05 00 had been supplied. this adjustment takes daylight savings time into account where possible if the date in question falls during daylight savings time in new york then it is adjusted to timezone offset pt4h rather than pt5h. adjustment using daylight savings time is only possible where the value includes a date and where the date is within the range covered by the timezone database. 9.8.5 examples of date and time formatting example gregorian calendar the following examples show a selection of dates and times and the way they might be formatted. these examples assume the use of the gregorian calendar as the default calendar. required output expression 2002-12-31 format-date d y0001 m01 d01 12-31-2002 format-date d m d y 31-12-2002 format-date d d m y 31 xii 2002 format-date d d1 mi y 31st december 2002 format-date d d1o mnn y en 31 dec 2002 format-date d d01 mn 3 y0001 en december 31 2002 format-date d mnn d y en 31 dezember 2002 format-date d d mnn y de tisdag 31 december 2002 format-date d fnn d mnn y sv 2002-12-31 format-date d y0001 m01 d01 two thousand and three format-date d yww en einunddrei igste dezember format-date d dwo mnn de 3 58 pm format-time t h m01 pn en 3 58 45 pm format-time t h m01 s01 pn en 3 58 45 pm pdt format-time t h m01 s01 pn zn 3 en 3 58 45 o clock pm pdt format-time t h m01 s01 o clock pn zn 3 en 15 58 format-time t h01 m01 15 58 45.762 format-time t h01 m01 s01 f001 15 58 45 gmt+02 00 format-time t h01 m01 s01 z 6-6 en 15.58 uhr gmt+2 format-time t h01 m01 uhr z de 3.58pm on tuesday 31st december format-datetime dt h m01 pn on fnn d1o mnn 12 31 2002 at 15 58 45 format-datetime dt m01 d01 y0001 at h01 m01 s01 example non-gregorian calendars the following examples use calendars other than the gregorian calendar. these examples use non-latin characters which might not display correctly in all browsers depending on the system configuration. description request result islamic format-date d d&#x0661 mn y&#x0661 ar ah jewish with western numbering format-date d d mn y he am 26 5763 jewish with traditional numbering format-date d d&#x05d0 t mn y&#x05d0 t he am julian old style format-date d d mnn y en os 18 december 2002 thai format-date d d&#x0e51 mn y&#x0e51 th be 10 functions related to qnames 10.1 functions to create a qname in addition to the xs qname constructor function qname values can be constructed by combining a namespace uri prefix and local name or by resolving a lexical qname against the in-scope namespaces of an element node. this section defines these functions. leading and trailing whitespace if present is stripped from string arguments before the result is constructed. function meaning fn resolve-qname returns an xs qname value that is an expanded-qname by taking an xs string that has the lexical form of an xs qname a string in the form prefix local-name or local-name and resolving it using the in-scope namespaces for a given element. fn qname constructs an xs qname value given a namespace uri and a lexical qname. 10.1.1 fn resolve-qname summary returns an xs qname value that is an expanded-qname by taking an xs string that has the lexical form of an xs qname a string in the form prefix local-name or local-name and resolving it using the in-scope namespaces for a given element. signature fn resolve-qname qname as xs string element as element as xs qname properties this function is deterministic context-independent and focus-independent rules if qname is the empty sequence returns the empty sequence. more specifically the function searches the namespace bindings of element for a binding whose name matches the prefix of qname or the zero-length string if it has no prefix and constructs an expanded-qname whose local name is taken from the supplied qname and whose namespace uri is taken from the string value of the namespace binding. if the qname has no prefix and there is no namespace binding for element corresponding to the default unnamed namespace then the resulting expanded-qname has no namespace part. the prefix or absence of a prefix in the supplied qname argument is retained in the returned expanded-qname as discussed in section 2.1 terminology dm30. error conditions a dynamic error is raised err foca0002 if qname does not have the correct lexical form for an instance of xs qname. a dynamic error is raised err fons0004 if qname has a prefix and there is no namespace binding for element that matches this prefix. notes sometimes the requirement is to construct an xs qname without using the default namespace. this can be achieved by writing if contains qname then fn resolve-qname qname element else fn qname qname if the requirement is to construct an xs qname using the namespaces in the static context then the xs qname constructor should be used. examples assume that the element bound to element has a single namespace binding bound to the prefix eg. fn resolve-qname hello element returns a qname with local name hello that is in no namespace. fn resolve-qname eg myfunc element returns an xs qname whose namespace uri is specified by the namespace binding corresponding to the prefix eg and whose local name is myfunc 10.1.2 fn qname summary constructs an xs qname value given a namespace uri and a lexical qname. signature fn qname paramuri as xs string paramqname as xs string as xs qname properties this function is deterministic context-independent and focus-independent rules the namespace uri in the returned qname is taken from paramuri. if paramuri is the zero-length string or the empty sequence it represents no namespace the prefix or absence of a prefix in paramqname is retained in the returned xs qname value. the local name in the result is taken from the local part of paramqname. error conditions a dynamic error is raised err foca0002 if paramqname does not have the correct lexical form for an instance of xs qname. a dynamic error is raised err foca0002 if paramuri is the zero-length string or the empty sequence and the value of paramqname contains a colon a dynamic error may be raised err foca0002 if paramuri is not a valid uri xml namespaces 1.0 or iri xml namespaces 1.1 notes examples fn qname http www.example.com example person returns an xs qname with namespace uri http www.example.com example local name person and prefix fn qname http www.example.com example ht person returns an xs qname with namespace uri http www.example.com example local name person and prefix ht 10.2 functions and operators related to qnames this section specifies functions on qnames as defined in xml schema part 2 datatypes second edition function meaning op qname-equal returns true if two supplied qnames have the same namespace uri and the same local part. fn prefix-from-qname returns the prefix component of the supplied qname. fn local-name-from-qname returns the local part of the supplied qname. fn namespace-uri-from-qname returns the namespace uri part of the supplied qname. fn namespace-uri-for-prefix returns the namespace uri of one of the in-scope namespaces for element identified by its namespace prefix. fn in-scope-prefixes returns the prefixes of the in-scope namespaces for an element node. 10.2.1 op qname-equal summary returns true if two supplied qnames have the same namespace uri and the same local part. operator mapping defines the semantics of the eq and ne operators when applied to two values of type xs qname. signature op qname-equal arg1 as xs qname arg2 as xs qname as xs boolean properties this function is deterministic context-independent and focus-independent rules the function returns true if the namespace uris of arg1 and arg2 are equal and the local names of arg1 and arg2 are equal. otherwise the function returns false. the namespace uri parts are considered equal if they are both absentdm30 or if they are both present and equal under the rules of the fn codepoint-equal function. the local parts are also compared under the rules of the fn codepoint-equal function. notes the prefix parts of arg1 and arg2 if any are ignored. 10.2.2 fn prefix-from-qname summary returns the prefix component of the supplied qname. signature fn prefix-from-qname arg as xs qname as xs ncname properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. if arg has no prefix component the function returns the empty sequence. otherwise the function returns an xs ncname representing the prefix component of arg. 10.2.3 fn local-name-from-qname summary returns the local part of the supplied qname. signature fn local-name-from-qname arg as xs qname as xs ncname properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs ncname representing the local part of arg. examples the expression fn local-name-from-qname fn qname http www.example.com example person returns person 10.2.4 fn namespace-uri-from-qname summary returns the namespace uri part of the supplied qname. signature fn namespace-uri-from-qname arg as xs qname as xs anyuri properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the function returns the empty sequence. otherwise the function returns an xs anyuri representing the namespace uri part of arg. if arg is in no namespace the function returns the zero-length xs anyuri. examples the expression fn namespace-uri-from-qname fn qname http www.example.com example person returns xs anyuri http www.example.com example 10.2.5 fn namespace-uri-for-prefix summary returns the namespace uri of one of the in-scope namespaces for element identified by its namespace prefix. signature fn namespace-uri-for-prefix prefix as xs string element as element as xs anyuri properties this function is deterministic context-independent and focus-independent rules if element has an in-scope namespace whose namespace prefix is equal to prefix the function returns the namespace uri of that namespace. if element has no in-scope namespace whose namespace prefix is equal to prefix the function returns the empty sequence. if prefix is the zero-length string or the empty sequence then if element has a default namespace that is a namespace node with no name the function returns the namespace uri of the default namespace. if element has no default namespace the function returns the empty sequence. prefixes are equal only if their unicode codepoints match exactly. examples let e z a xmlns http example.org one xmlns z http example.org two b xmlns z a the expression fn namespace-uri-for-prefix z e returns http example.org two the expression fn namespace-uri-for-prefix e returns http example.org one the expression fn namespace-uri-for-prefix e returns http example.org one the expression fn namespace-uri-for-prefix xml e returns http www.w3.org xml 1998 namespace the expression fn namespace-uri-for-prefix xml e returns http www.w3.org xml 1998 namespace 10.2.6 fn in-scope-prefixes summary returns the prefixes of the in-scope namespaces for an element node. signature fn in-scope-prefixes element as element as xs string properties this function is deterministic context-independent and focus-independent rules the function returns a sequence of strings representing the prefixes of the in-scope namespaces for element. for namespace bindings that have a prefix the function returns the prefix as an xs ncname. for the default namespace which has no prefix it returns the zero-length string. the result sequence contains no duplicates. the ordering of the result sequence is implementation-dependent 11 operators on base64binary and hexbinary 11.1 comparisons of base64binary and hexbinary values the following comparison operators on xs base64binary and xs hexbinary values are defined. comparisons take two operands of the same type that is both operands must be xs base64binary or both operands may be xs hexbinary. each returns a boolean value. a value of type xs hexbinary can be compared with a value of type xs base64binary by casting one value to the other type. see 18.1.6 casting to xs base64binary and xs hexbinary. function meaning op hexbinary-equal returns true if two xs hexbinary values contain the same octet sequence. op base64binary-equal returns true if two xs base64binary values contain the same octet sequence. 11.1.1 op hexbinary-equal summary returns true if two xs hexbinary values contain the same octet sequence. operator mapping defines the semantics of the eq and ne operators when applied to two xs hexbinary values. signature op hexbinary-equal value1 as xs hexbinary value2 as xs hexbinary as xs boolean rules the function returns true if value1 and value2 are of the same length measured in binary octets and contain the same octets in the same order. otherwise it returns false. 11.1.2 op base64binary-equal summary returns true if two xs base64binary values contain the same octet sequence. operator mapping defines the semantics of the eq and ne operators when applied to two xs base64binary values. signature op base64binary-equal value1 as xs base64binary value2 as xs base64binary as xs boolean rules the function returns true if value1 and value2 are of the same length measured in binary octets and contain the same octets in the same order. otherwise it returns false. 12 operators on notation this section specifies operators that take xs notation values as arguments. function meaning op notation-equal returns true if the two xs notation values have the same namespace uri and the same local part. 12.1 op notation-equal summary returns true if the two xs notation values have the same namespace uri and the same local part. operator mapping defines the semantics of the eq and ne operators when applied to two values of type xs notation. signature op notation-equal arg1 as xs notation arg2 as xs notation as xs boolean rules the function returns true if the namespace uris of arg1 and arg2 are equal and the local names of arg1 and arg2 are equal. otherwise the function returns false. the namespace uri parts are considered equal if they are both absentdm30 or if they are both present and equal under the rules of the fn codepoint-equal function. the local parts are also compared under the rules of the fn codepoint-equal function. notes the prefix parts of arg1 and arg2 if any are ignored. 13 functions and operators on nodes this section specifies functions and operators on nodes. nodes are formally defined in section 6 nodes dm30. function meaning fn name returns the name of a node as an xs string that is either the zero-length string or has the lexical form of an xs qname. fn local-name returns the local part of the name of arg as an xs string that is either the zero-length string or has the lexical form of an xs ncname. fn namespace-uri returns the namespace uri part of the name of arg as an xs anyuri value. fn lang this function tests whether the language of node or the context item if the second argument is omitted as specified by xml lang attributes is the same as or is a sublanguage of the language specified by testlang. op is-same-node returns true if the two arguments refer to the same node. op node-before returns true if the node identified by the first argument precedes the node identified by the second argument in document order. op node-after returns true if the node identified by the first argument follows the node identified by the second argument in document order. fn root returns the root of the tree to which arg belongs. this will usually but not necessarily be a document node. fn path returns a path expression that can be used to select the supplied node relative to the root of its containing document. fn has-children returns true if the supplied node has one or more child nodes of any kind fn innermost returns every node within the input sequence that is not an ancestor of another member of the input sequence the nodes are returned in document order with duplicates eliminated. fn outermost returns every node within the input sequence that has no ancestor that is itself a member of the input sequence the nodes are returned in document order with duplicates eliminated. for the illustrative examples below assume an xquery or transformation operating on a purchaseorder document containing a number of line-item elements. each line-item has child elements called description price quantity etc. whose content is different for each line-item. quantity has simple content of type xs decimal. further assume that variables item1 item2 etc. are each bound to single line-item element nodes in the document in sequence and that the value of the quantity child of the first line-item is 5.0. let po purchaseorder line-item description large widget description price 8.95 price quantity 5.0 quantity line-item line-item description small widget description price 3.99 price quantity 2.0 quantity line-item line-item description tiny widget description price 1.49 price quantity 805 quantity line-item purchaseorder let item1 po line-item 1 let item2 po line-item 2 let item3 po line-item 3 13.1 fn name summary returns the name of a node as an xs string that is either the zero-length string or has the lexical form of an xs qname. signatures fn name as xs string fn name arg as node as xs string properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if the argument is supplied and is the empty sequence the function returns the zero-length string. if the node identified by arg has no name that is if it is a document node a comment a text node or a namespace node having no name the function returns the zero-length string. otherwise the function returns the value of the expression fn string fn node-name arg error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. 13.2 fn local-name summary returns the local part of the name of arg as an xs string that is either the zero-length string or has the lexical form of an xs ncname. signatures fn local-name as xs string fn local-name arg as node as xs string properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if the argument is supplied and is the empty sequence the function returns the zero-length string. if the node identified by arg has no name that is if it is a document node a comment a text node or a namespace node having no name the function returns the zero-length string. otherwise the function returns the local part of the expanded-qname of the node identified by arg as determined by the dm node-name accessor defined in section 5.11 node-name accessor dm30 this will be an xs string whose lexical form is an xs ncname. error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. 13.3 fn namespace-uri summary returns the namespace uri part of the name of arg as an xs anyuri value. signatures fn namespace-uri as xs anyuri fn namespace-uri arg as node as xs anyuri properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context node the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if the node identified by arg is neither an element nor an attribute node or if it is an element or attribute node whose expanded-qname as determined by the dm node-name accessor in the section 5.11 node-name accessor dm30 is in no namespace then the function returns the zero-length xs anyuri value. otherwise the result will be the namespace uri part of the expanded-qname of the node identified by arg as determined by the dm node-name accessor defined in section 5.11 node-name accessor dm30 returned as an xs anyuri value. error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. 13.4 fn lang summary this function tests whether the language of node or the context item if the second argument is omitted as specified by xml lang attributes is the same as or is a sublanguage of the language specified by testlang. signatures fn lang testlang as xs string as xs boolean fn lang testlang as xs string node as node as xs boolean properties the one-argument form of this function is deterministic context-dependent and focus-dependent the two-argument form of this function is deterministic context-independent and focus-independent rules the behavior of the function if the second argument is omitted is exactly the same as if the context item had been passed as the second argument. the language of the argument node or the context item if the second argument is omitted is determined by the value of the xml lang attribute on the node or if the node has no such attribute by the value of the xml lang attribute on the nearest ancestor of the node that has an xml lang attribute. if there is no such ancestor then the function returns false. if testlang is the empty sequence it is interpreted as the zero-length string. the relevant xml lang attribute is determined by the value of the xpath expression ancestor-or-self xml lang last if this expression returns an empty sequence the function returns false. otherwise the function returns true if and only if based on a caseless default match as specified in section 3.13 of the unicode standard either testlang is equal to the string-value of the relevant xml lang attribute or testlang is equal to some substring of the string-value of the relevant xml lang attribute that starts at the start of the string-value and ends immediately before a hyphen the character is hyphen-minus x002d error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. examples the expression fn lang en would return true if the context node were any of the following four elements para xml lang en div xml lang en para and now and forever para div para xml lang en para xml lang en-us the expression fn lang fr would return false if the context node were para xml lang en 13.5 op is-same-node summary returns true if the two arguments refer to the same node. operator mapping defines the semantics of the is operator when applied to two nodes. signature op is-same-node arg1 as node arg2 as node as xs boolean rules if the node identified by the value of arg1 is the same node as the node identified by the value of arg2 that is the two nodes have the same identity then the function returns true otherwise the function returns false. examples the expression op is-same-node item1 item1 returns true the expression op is-same-node item1 item2 returns false 13.6 op node-before summary returns true if the node identified by the first argument precedes the node identified by the second argument in document order. operator mapping defines the semantics of the operator when applied to two nodes. signature op node-before arg1 as node arg2 as node as xs boolean rules if the node identified by the value of arg1 occurs in document order before the node identified by the value of arg2 then the function returns true otherwise it returns false. the rules determining the order of nodes within a single document and in different documents can be found in section 2.4 document order dm30. examples the expression op node-before item1 item2 returns true the expression op node-before item1 item1 returns false 13.7 op node-after summary returns true if the node identified by the first argument follows the node identified by the second argument in document order. operator mapping defines the semantics of the operator when applied to two nodes. signature op node-after arg1 as node arg2 as node as xs boolean rules if the node identified by the value of arg1 occurs in document order after the node identified by the value of arg2 the function returns true otherwise it returns false. the rules determining the order of nodes within a single document and in different documents can be found in section 2.4 document order dm30. examples the expression op node-after item1 item2 returns false the expression op node-after item1 item1 returns false the expression op node-after item2 item1 returns true 13.8 fn root summary returns the root of the tree to which arg belongs. this will usually but not necessarily be a document node. signatures fn root as node fn root arg as node as node properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the function is called without an argument the context item is used as the default argument. the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. the function returns the value of the expression arg ancestor-or-self node 1 error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. examples these examples use some variables which could be defined in xquery 1.0 an xml query language as let i tool wrench tool let o order i quantity 5 quantity order let odoc document o let newi o tool or they could be defined in xsl transformations xslt version 2.0 as xsl variable name i as element tool wrench tool xsl variable xsl variable name o as element order xsl copy-of select i quantity 5 quantity order xsl variable xsl variable name odoc xsl copy-of select o xsl variable xsl variable name newi select o tool fn root i returns the element node i fn root o quantity returns the element node o fn root odoc quantity returns the document node odoc fn root newi returns the element node o the final three examples could be made type-safe by wrapping their operands with fn exactly-one 13.9 fn path summary returns a path expression that can be used to select the supplied node relative to the root of its containing document. signatures fn path as xs string fn path arg as node as xs string properties the one-argument form of this function is deterministic context-dependent and focus-dependent the two-argument form of this function is deterministic context-independent and focus-independent rules the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if arg is the empty sequence the function returns the empty sequence. if arg is a document node the function returns the string otherwise the function constructs a string that consists of a sequence of steps one for each ancestor-or-self of arg other than the root node. this string is prefixed by q http www.w3.org 2005 xpath-functions root if the root node is not a document node. each step consists of the character followed by a string whose form depends on the kind of node selected by that step as follows for an element node q uri local position where uri is the namespace uri of the node name or the empty string if the node is in no namespace local is the local part of the node name and position is an integer representing the position of the selected node among its like-named siblings. for an attribute node if the node is in no namespace local where local is the local part of the node name otherwise q uri local where uri is the namespace uri of the node name and local is the local part of the node name for a text node text position where position is an integer representing the position of the selected node among its text node siblings for a comment node comment position where position is an integer representing the position of the selected node among its comment node siblings for a processing-instruction node processing-instruction local position where local is the name of the processing instruction node and position is an integer representing the position of the selected node among its like-named processing-instruction node siblings for a namespace node if the namespace node has a name namespace prefix where prefix is the local part of the name of the namespace node which represents the namespace prefix if the namespace node has no name that is it represents the default namespace namespace q http www.w3.org 2005 xpath-functions local-name examples let e fn parse-xml xml version 1.0 p xmlns http example.com one xml lang de author friedrich von schiller freude sch ner g tterfunken br tochter aus elysium br wir betreten feuertrunken br himmlische dein heiligtum. p the expression fn path e returns the expression fn path e p returns q http example.com one p 1 the expression fn path e p xml lang returns q http example.com one p 1 q http www.w3.org xml 1998 namespace lang the expression fn path e p author returns q http example.com one p 1 author the expression fn path e p br 2 returns q http example.com one p 1 q http example.com one br 2 the expression fn path e text starts-with normalize-space tochter returns q http example.com one p 1 text 2 let emp employee xml id id21256 empnr e21256 empnr first john first last brown last employee the expression fn path emp returns q http www.w3.org 2005 xpath-functions root the expression fn path emp xml id returns q http www.w3.org 2005 xpath-functions root q http www.w3.org xml 1998 namespace id the expression fn path emp empnr returns q http www.w3.org 2005 xpath-functions root q empnr 1 13.10 fn has-children summary returns true if the supplied node has one or more child nodes of any kind signatures fn has-children as xs boolean fn has-children node as node as xs boolean properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. provided that the supplied argument node matches the expected type node the result of the function call fn has-children node is defined to be the same as the result of the expression fn exists node child node error conditions the following errors may be raised when node is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes if node is an empty sequence the result is false. the motivation for this function is to support streamed evaluation. according to the streaming rules in xsl transformations xslt version 3.0 the following construct is not streamable xsl if test exists row ul xsl for-each select row li xsl value-of select li xsl for-each ul xsl if this is because it makes two downward selections to read the child row elements. the use of fn has-children in the xsl if conditional is intended to circumvent this restriction. although the function was introduced to support streaming use cases it has general utility as a convenience function. 13.11 fn innermost summary returns every node within the input sequence that is not an ancestor of another member of the input sequence the nodes are returned in document order with duplicates eliminated. signature fn innermost nodes as node as node properties this function is deterministic context-independent and focus-independent rules the effect of the function call fn innermost nodes is defined to be equivalent to the result of the expression nodes except nodes ancestor node that is the function takes as input a sequence of nodes and returns every node within the sequence that is not an ancestor of another node within the sequence the nodes are returned in document order with duplicates eliminated. examples if the source document contains nested sections represented by div elements the expression innermost div returns those div elements that do not contain further div elements. 13.12 fn outermost summary returns every node within the input sequence that has no ancestor that is itself a member of the input sequence the nodes are returned in document order with duplicates eliminated. signature fn outermost nodes as node as node properties this function is deterministic context-independent and focus-independent rules the effect of the function call fn outermost nodes is defined to be equivalent to the result of the expression nodes not ancestor node intersect nodes that is the function takes as input a sequence of nodes and returns every node within the sequence that does not have another node within the sequence as an ancestor the nodes are returned in document order with duplicates eliminated. notes the formulation nodes except nodes descendant node might appear to be simpler but does not correctly account for attribute nodes as these are not descendants of their parent element. the motivation for the function was based on xslt streaming use cases. there are cases where the xsl transformations xslt version 3.0 streaming rules allow the construct outermost section but do not allow section the function can therefore be useful in cases where it is known that sections will not be nested as well as cases where the application actually wishes to process all sections except those that are nested within another. examples if the source document contains nested sections represented by div elements the expression outermost div returns those div elements that are not contained within further div elements. 14 functions and operators on sequences a sequence is an ordered collection of zero or more items. an item is either a node or an atomic value. the terms sequence and item are defined formally in xquery 3.0 an xml query language and xml path language xpath 3.0 14.1 general functions and operators on sequences the following functions are defined on sequences. these functions work on any sequence without performing any operations that are sensitive to the individual items in the sequence. function meaning op concatenate returns the concatenation of two sequences. fn empty returns true if the argument is the empty sequence. fn exists returns true if the argument is a non-empty sequence. fn head returns the first item in a sequence. fn tail returns all but the first item in a sequence. fn insert-before returns a sequence constructed by inserting an item or a sequence of items at a given position within an existing sequence. fn remove returns a new sequence containing all the items of target except the item at position position. fn reverse reverses the order of items in a sequence. fn subsequence returns the contiguous sequence of items in the value of sourceseq beginning at the position indicated by the value of startingloc and continuing for the number of items indicated by the value of length. fn unordered returns the items of sourceseq in an implementation dependent order. as in the previous section for the illustrative examples below assume an xquery or transformation operating on a non-empty purchase order document containing a number of line-item elements. the variable seq is bound to the sequence of line-item nodes in document order. the variables item1 item2 etc. are bound to separate individual line-item nodes in the sequence. 14.1.1 op concatenate summary returns the concatenation of two sequences. operator mapping defines the semantics of the infix operator when applied to any two sequences. signature op concatenate seq1 as item seq2 as item as item properties this function is deterministic context-independent and focus-independent rules the function returns a sequence consisting of all the items in seq1 followed by all the items in seq2. notes if either sequence is the empty sequence the other operand is returned. examples the expression op concatenate 1 2 3 4 5 returns 1 2 3 4 5 the expression op concatenate 1 2 3 returns 1 2 3 the expression op concatenate returns 14.1.2 fn empty summary returns true if the argument is the empty sequence. signature fn empty arg as item as xs boolean properties this function is deterministic context-independent and focus-independent rules if the value of arg is the empty sequence the function returns true otherwise the function returns false. examples the expression fn empty 1,2,3 10 returns true the expression fn empty fn remove hello world 1 returns false 14.1.3 fn exists summary returns true if the argument is a non-empty sequence. signature fn exists arg as item as xs boolean properties this function is deterministic context-independent and focus-independent rules if the value of arg is a non-empty sequence the function returns true otherwise the function returns false. examples the expression fn exists fn remove hello 1 returns false the expression fn exists fn remove hello world 1 returns true 14.1.4 fn head summary returns the first item in a sequence. signature fn head arg as item as item properties this function is deterministic context-independent and focus-independent rules the function returns the value of the expression arg 1 notes if arg is the empty sequence the empty sequence is returned. otherwise the first item in the sequence is returned. examples the expression fn head 1 to 5 returns 1. the expression fn head a b c returns a the expression fn head returns 14.1.5 fn tail summary returns all but the first item in a sequence. signature fn tail arg as item as item properties this function is deterministic context-independent and focus-independent rules the function returns the value of the expression subsequence arg 2 notes if arg is the empty sequence or a sequence containing a single item then the empty sequence is returned. examples the expression fn tail 1 to 5 returns 2 3 4 5 the expression fn tail a b c returns b c the expression fn tail a returns the expression fn tail returns 14.1.6 fn insert-before summary returns a sequence constructed by inserting an item or a sequence of items at a given position within an existing sequence. signature fn insert-before target as item position as xs integer inserts as item as item properties this function is deterministic context-independent and focus-independent rules the value returned by the function consists of all items of target whose index is less than position followed by all items of inserts followed by the remaining elements of target in that order. notes if target is the empty sequence inserts is returned. if inserts is the empty sequence target is returned. if position is less than one 1 the first position the effective value of position is one 1 if position is greater than the number of items in target then the effective value of position is equal to the number of items in target plus 1. the value of target is not affected by the sequence construction. examples let abc a b c the expression fn insert-before abc 0 z returns z a b c the expression fn insert-before abc 1 z returns z a b c the expression fn insert-before abc 2 z returns a z b c the expression fn insert-before abc 3 z returns a b z c the expression fn insert-before abc 4 z returns a b c z 14.1.7 fn remove summary returns a new sequence containing all the items of target except the item at position position. signature fn remove target as item position as xs integer as item properties this function is deterministic context-independent and focus-independent rules the function returns a sequence consisting of all items of target whose index is less than position followed by all items of target whose index is greater than position. notes if position is less than 1 or greater than the number of items in target target is returned. if target is the empty sequence the empty sequence is returned. examples let abc a b c the expression fn remove abc 0 returns a b c the expression fn remove abc 1 returns b c the expression fn remove abc 6 returns a b c the expression fn remove 3 returns 14.1.8 fn reverse summary reverses the order of items in a sequence. signature fn reverse arg as item as item properties this function is deterministic context-independent and focus-independent rules the function returns a sequence containing the items in arg in reverse order. notes if arg is the empty sequence the empty sequence is returned. examples let abc a b c the expression fn reverse abc returns c b a the expression fn reverse hello returns hello the expression fn reverse returns 14.1.9 fn subsequence summary returns the contiguous sequence of items in the value of sourceseq beginning at the position indicated by the value of startingloc and continuing for the number of items indicated by the value of length. signatures fn subsequence sourceseq as item startingloc as xs double as item fn subsequence sourceseq as item startingloc as xs double length as xs double as item properties this function is deterministic context-independent and focus-independent rules in the two-argument case returns sourceseq fn round startingloc le position in the three-argument case returns sourceseq fn round startingloc le position and position lt fn round startingloc fn round length notes the first item of a sequence is located at position 1 not position 0. if sourceseq is the empty sequence the empty sequence is returned. if startingloc is zero or negative the subsequence includes items from the beginning of the sourceseq. if length is not specified the subsequence includes items to the end of sourceseq. if length is greater than the number of items in the value of sourceseq following startingloc the subsequence includes items to the end of sourceseq. as an exception to the previous two notes if startingloc is inf and length is inf then fn round startingloc fn round length is nan since position lt nan is always false the result is an empty sequence. the reason the function accepts arguments of type xs double is that many computations on untyped data return an xs double result and the reason for the rounding rules is to compensate for any imprecision in these floating-point computations. examples let seq item1 item2 item3 item4 item5 the expression fn subsequence seq 4 returns item4 item5 the expression fn subsequence seq 3 2 returns item3 item4 14.1.10 fn unordered summary returns the items of sourceseq in an implementation dependent order. signature fn unordered sourceseq as item as item properties this function is deterministic context-independent and focus-independent rules the function returns the items of sourceseq in an implementation dependent order. notes query optimizers may be able to do a better job if the order of the output sequence is not specified. for example when retrieving prices from a purchase order if an index exists on prices it may be more efficient to return the prices in index order rather than in document order. examples the expression fn unordered 1 2 3 4 5 returns some permutation of 1 2 3 4 5 14.2 functions that compare values in sequences the functions in this section rely on comparisons between the items in one or more sequences. function meaning fn distinct-values returns the values that appear in a sequence with duplicates eliminated. fn index-of returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search. fn deep-equal this function assesses whether two sequences are deep-equal to each other. to be deep-equal they must contain items that are pairwise deep-equal and for two items to be deep-equal they must either be atomic values that compare equal or nodes of the same kind with the same name whose children are deep-equal. 14.2.1 fn distinct-values summary returns the values that appear in a sequence with duplicates eliminated. signatures fn distinct-values arg as xs anyatomictype as xs anyatomictype fn distinct-values arg as xs anyatomictype collation as xs string as xs anyatomictype properties the one-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and implicit timezone. the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri and implicit timezone. rules the function returns the sequence that results from removing from arg all but one of a set of values that are equal to one another. values are compared using the eq operator subject to the caveats defined below. values of type xs untypedatomic are compared as if they were of type xs string. values that cannot be compared because the eq operator is not defined for their types are considered to be distinct. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. this collation is used when string comparison is required. for xs float and xs double values positive zero is equal to negative zero and although nan does not equal itself if arg contains multiple nan values a single nan is returned. if xs datetime xs date or xs time values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison. note that xs datetime xs date or xs time values can compare equal even if their timezones are different. the order in which the sequence of values is returned is implementation dependent which value of a set of values that compare equal is returned is implementation dependent if the input sequence contains values of different numeric types that differ from each other by small amounts then the eq operator is not transitive because of rounding effects occurring during type promotion. in the situation where the input contains three values a b and c such that a eq b b eq c but a ne c then the number of items in the result of the function as well as the choice of which items are returned is implementation dependent subject only to the constraints that a no two items in the result sequence compare equal to each other and b every input item that does not appear in the result sequence compares equal to some item that does appear in the result sequence. for example this arises when computing distinct-values xs float 1.0 xs decimal 1.0000000000100000000001 xs double 1.00000000001 because the values of type xs float and xs double both compare equal to the value of type xs decimal but not equal to each other. notes if arg is the empty sequence the function returns the empty sequence. examples the expression fn distinct-values 1 2.0 3 2 returns some permutation of 1 3 2.0 the expression fn distinct-values xs untypedatomic cherry xs untypedatomic plum xs untypedatomic plum returns some permutation of xs untypedatomic cherry xs untypedatomic plum 14.2.2 fn index-of summary returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search. signatures fn index-of seq as xs anyatomictype search as xs anyatomictype as xs integer fn index-of seq as xs anyatomictype search as xs anyatomictype collation as xs string as xs integer properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and implicit timezone. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri and implicit timezone. rules the function returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. this collation is used when string comparison is required. the items in the sequence seq are compared with search under the rules for the eq operator. values of type xs untypedatomic are compared as if they were of type xs string. values that cannot be compared because the eq operator is not defined for their types are considered to be distinct. if an item compares equal then the position of that item in the sequence seq is included in the result. the first item in a sequence is at position 1 not position 0. the result sequence is in ascending numeric order. notes if the value of seq is the empty sequence or if no item in seq matches search then the function returns the empty sequence. no error occurs if non-comparable values are encountered. so when comparing two atomic values the effective boolean value of fn index-of a b is true if a and b are equal false if they are not equal or not comparable. examples the expression fn index-of 10 20 30 40 35 returns the expression fn index-of 10 20 30 30 20 10 20 returns 2 5 the expression fn index-of a sport and a pastime a returns 1 4 the expression fn index-of current-date 23 returns if a is an attribute of type xs nmtokens whose string value is red green blue and whose typed value is therefore red green blue then fn index-of a blue returns 3. this is because the function calling mechanism atomizes the attribute node to produce a sequence of three xs nmtoken values. 14.2.3 fn deep-equal summary this function assesses whether two sequences are deep-equal to each other. to be deep-equal they must contain items that are pairwise deep-equal and for two items to be deep-equal they must either be atomic values that compare equal or nodes of the same kind with the same name whose children are deep-equal. signatures fn deep-equal parameter1 as item parameter2 as item as xs boolean fn deep-equal parameter1 as item parameter2 as item collation as xs string as xs boolean properties the two-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and implicit timezone. the three-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri and implicit timezone. rules the collation argument identifies a collation which is used at all levels of recursion when strings are compared but not when names are compared according to the rules in 5.3.3 choosing a collation. if the two sequences are both empty the function returns true. if the two sequences are of different lengths the function returns false. if the two sequences are of the same length the function returns true if and only if every item in the sequence parameter1 is deep-equal to the item at the same position in the sequence parameter2. the rules for deciding whether two items are deep-equal follow. call the two items i1 and i2 respectively. if i1 and i2 are both atomic values they are deep-equal if and only if i1 eq i2 is true or if both values are nan. if the eq operator is not defined for i1 and i2 the function returns false. if one of the pair i1 or i2 is an atomic value and the other is not the function returns false. if i1 and i2 are both nodes they are compared as described below if the two nodes are of different kinds the result is false. if the two nodes are both document nodes then they are deep-equal if and only if the sequence i1 text is deep-equal to the sequence i2 text if the two nodes are both element nodes then they are deep-equal if and only if all of the following conditions are satisfied the two nodes have the same name that is node-name i1 eq node-name i2 either both nodes are both annotated as having simple content or both nodes are annotated as having complex content. for this purpose simple content means either a simple type or a complex type with simple content complex content means a complex type whose variety is mixed element-only or empty. note it is a consequence of this rule that validating a document d against a schema will usually but not necessarily result in a document that is not deep-equal to d. the exception is when the schema allows all elements to have mixed content. the two nodes have the same number of attributes and for every attribute a1 in i1 there exists an attribute a2 in i2 such that a1 and a2 are deep-equal. one of the following conditions holds both element nodes are annotated as having simple content as defined in 3 b above and the typed value of i1 is deep-equal to the typed value of i2. both element nodes have a type annotation that is a complex type with variety element-only and the sequence i1 is deep-equal to the sequence i2 both element nodes have a type annotation that is a complex type with variety mixed and the sequence i1 text is deep-equal to the sequence i2 text both element nodes have a type annotation that is a complex type with variety empty. if the two nodes are both attribute nodes then they are deep-equal if and only if both the following conditions are satisfied the two nodes have the same name that is node-name i1 eq node-name i2 the typed value of i1 is deep-equal to the typed value of i2. if the two nodes are both processing instruction nodes then they are deep-equal if and only if both the following conditions are satisfied the two nodes have the same name that is node-name i1 eq node-name i2 the string value of i1 is equal to the string value of i2. if the two nodes are both namespace nodes then they are deep-equal if and only if both the following conditions are satisfied the two nodes either have the same name or are both nameless that is fn deep-equal node-name i1 node-name i2 the string value of i1 is equal to the string value of i2 when compared using the unicode codepoint collation. if the two nodes are both text nodes or comment nodes then they are deep-equal if and only if their string-values are equal. error conditions a type error is raised err foty0015 if either input sequence contains a function item. notes the two nodes are not required to have the same type annotation and they are not required to have the same in-scope namespaces. they may also differ in their parent their base uri and the values returned by the is-id and is-idrefs accessors see section 5.5 is-id accessor dm30 and section 5.6 is-idrefs accessor dm30 the order of children is significant but the order of attributes is insignificant. the contents of comments and processing instructions are significant only if these nodes appear directly as items in the two sequences being compared. the content of a comment or processing instruction that appears as a descendant of an item in one of the sequences being compared does not affect the result. however the presence of a comment or processing instruction if it causes a text node to be split into two text nodes may affect the result. the result of fn deep-equal 1 current-datetime is false it does not raise an error. examples let at attendees name last parker first peter name last barker first bob name last parker first peter attendees the expression fn deep-equal at at returns false the expression fn deep-equal at name 1 at name 2 returns false the expression fn deep-equal at name 1 at name 3 returns true the expression fn deep-equal at name 1 peter parker returns false 14.3 functions that test the cardinality of sequences the following functions test the cardinality of their sequence arguments. function meaning fn zero-or-one returns arg if it contains zero or one items. otherwise raises an error. fn one-or-more returns arg if it contains one or more items. otherwise raises an error. fn exactly-one returns arg if it contains exactly one item. otherwise raises an error. the functions fn zero-or-one fn one-or-more and fn exactly-one defined in this section check that the cardinality of a sequence is in the expected range. they are particularly useful with regard to static typing. for example the function call fn remove seq fn index-of seq2 abc requires the result of the call on fn index-of to be a singleton integer but the static type system cannot infer this writing the expression as fn remove seq fn exactly-one fn index-of seq2 abc will provide a suitable static type at query uow.acc.tab.analysis time and ensures that the length of the sequence is correct with a dynamic check at query execution time. the type signatures for these functions deliberately declare the argument type as item permitting a sequence of any length. a more restrictive signature would defeat the purpose of the function which is to defer cardinality checking until query execution time. 14.3.1 fn zero-or-one summary returns arg if it contains zero or one items. otherwise raises an error. signature fn zero-or-one arg as item as item properties this function is deterministic context-independent and focus-independent rules except in error cases the function returns arg unchanged. error conditions a dynamic error is raised err forg0003 if arg contains more than one item. 14.3.2 fn one-or-more summary returns arg if it contains one or more items. otherwise raises an error. signature fn one-or-more arg as item as item properties this function is deterministic context-independent and focus-independent rules except in error cases the function returns arg unchanged. error conditions a dynamic error is raised err forg0004 if arg is an empty sequence. 14.3.3 fn exactly-one summary returns arg if it contains exactly one item. otherwise raises an error. signature fn exactly-one arg as item as item properties this function is deterministic context-independent and focus-independent rules except in error cases the function returns arg unchanged. error conditions a dynamic error is raised err forg0005 if arg is an empty sequence or a sequence containing more than one item. 14.4 union intersection and difference function meaning op union constructs a sequence containing every node that occurs in the values of either arg1 or arg2 eliminating duplicates and sorting the result in document order. op intersect constructs a sequence containing every node that occurs in the values of both arg1 and arg2 eliminating duplicates and sorting the result in document order. op except constructs a sequence containing every node that occurs in the value of arg1 but not in the value of arg2 eliminating duplicates and sorting the result in document order. as in the previous sections for the illustrative examples below assume an xquery or transformation operating on a purchase order document containing a number of line-item elements. the variables item1 item2 etc. are bound to individual line-item nodes in the sequence. we use sequences of these nodes in some of the examples below. 14.4.1 op union summary constructs a sequence containing every node that occurs in the values of either arg1 or arg2 eliminating duplicates and sorting the result in document order. operator mapping defines the semantics of the union or operator when applied to two sequences of nodes. signature op union arg1 as node arg2 as node as node rules the function returns a sequence containing every node that occurs in the values of either arg1 or arg2 eliminating duplicate nodes. nodes are returned in document order. two nodes n1 and n2 are duplicates if they satisfy op is-same-node n1 n2 notes if either operand is the empty sequence the result is a sequence containing the nodes in the other operand in document order after eliminating duplicates. examples let seq1 item1 item2 let seq2 item2 item2 item1 let seq3 item2 item3 the expression op union seq1 seq1 returns item1 item2 the expression op union seq2 seq3 returns item1 item2 item3 the expression op union seq2 returns item1 item2 14.4.2 op intersect summary constructs a sequence containing every node that occurs in the values of both arg1 and arg2 eliminating duplicates and sorting the result in document order. operator mapping defines the semantics of the intersect operator when applied to two sequences of nodes. signature op intersect arg1 as node arg2 as node as node rules the function returns a sequence containing every node that occurs in the values of both arg1 and arg2 eliminating duplicate nodes. nodes are returned in document order. two nodes n1 and n2 are duplicates if they satisfy op is-same-node n1 n2 notes if either operand is the empty sequence the function returns the empty sequence. examples let seq1 item1 item2 let seq2 item2 item2 item1 let seq3 item2 item3 the expression op intersect seq1 seq1 returns item1 item2 the expression op intersect seq2 seq3 returns item2 the expression op intersect seq2 returns the expression op intersect item1 item3 returns 14.4.3 op except summary constructs a sequence containing every node that occurs in the value of arg1 but not in the value of arg2 eliminating duplicates and sorting the result in document order. operator mapping defines the semantics of the except operator when applied to two sequences of nodes. signature op except arg1 as node arg2 as node as node rules the function returns a sequence containing every node that occurs in the value of arg1 provided that it does not occur in the value of arg2. duplicate nodes are eliminated and nodes are returned in document order. two nodes n1 and n2 are duplicates if they satisfy op is-same-node n1 n2 notes if arg1 is the empty sequence the empty sequence is returned. if arg2 is the empty sequence a sequence is returned containing the nodes in arg1 in document order after eliminating duplicates. examples let seq1 item1 item2 let seq2 item2 item2 item1 let seq3 item2 item3 the expression op except seq1 seq1 returns the expression op except seq2 seq1 returns the expression op except seq2 seq3 returns item1 the expression op except seq2 returns item1 item2 the expression op except seq3 seq2 returns item3 14.5 aggregate functions aggregate functions take a sequence as argument and return a single value computed from values in the sequence. except for fn count the sequence must consist of values of a single type or one if its subtypes or they must be numeric. xs untypedatomic values are permitted in the input sequence and handled by special conversion rules. the type of the items in the sequence must also support certain operations. function meaning fn count returns the number of items in a sequence. fn avg returns the average of the values in the input sequence arg that is the sum of the values divided by the number of values. fn max returns a value that is equal to the highest value appearing in the input sequence. fn min returns a value that is equal to the lowest value appearing in the input sequence. fn sum returns a value obtained by adding together the values in arg. 14.5.1 fn count summary returns the number of items in a sequence. signature fn count arg as item as xs integer properties this function is deterministic context-independent and focus-independent rules the function returns the number of items in the value of arg. notes returns 0 if arg is the empty sequence. examples let seq1 item1 item2 let seq2 98.5 98.3 98.9 let seq3 the expression fn count seq1 returns 2. the expression fn count seq3 returns 0. the expression fn count seq2 returns 3. the expression fn count seq2 100 returns 0. 14.5.2 fn avg summary returns the average of the values in the input sequence arg that is the sum of the values divided by the number of values. signature fn avg arg as xs anyatomictype as xs anyatomictype properties this function is deterministic context-independent and focus-independent rules if arg is the empty sequence the empty sequence is returned. if arg contains values of type xs untypedatomic they are cast to xs double. duration values must either all be xs yearmonthduration values or must all be xs daytimeduration values. for numeric values the numeric promotion rules defined in 4.2 arithmetic operators on numeric values are used to promote all values to a single common type. after these operations arg must contain items of a single type which must be one of the four numeric types xs yearmonthduration or xs daytimeduration or one if its subtypes. the function returns the average of the values as sum arg div count arg but the implementation may use an otherwise equivalent algorithm that avoids arithmetic overflow. error conditions a type error is raised err forg0006 if the input sequence contains items of incompatible types as described above. examples let d1 xs yearmonthduration p20y let d2 xs yearmonthduration p10m let seq3 3 4 5 the expression fn avg seq3 returns 4.0. the result is of type xs decimal. the expression fn avg d1 d2 returns xs yearmonthduration p10y5m fn avg d1 seq3 raises a type error err forg0006 the expression fn avg returns the expression fn avg xs float inf xs float inf returns xs float nan the expression fn avg seq3 xs float nan returns xs float nan 14.5.3 fn max summary returns a value that is equal to the highest value appearing in the input sequence. signatures fn max arg as xs anyatomictype as xs anyatomictype fn max arg as xs anyatomictype collation as xs string as xs anyatomictype properties the zero-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and implicit timezone. the one-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri and implicit timezone. rules the following rules are applied to the input sequence arg values of type xs untypedatomic in arg are cast to xs double. numeric and xs anyuri values are converted to the least common type reachable by a combination of type promotion and subtype substitution. see section b.1 type promotion xp30 and section b.2 operator mapping xp30. the items in the resulting sequence may be reordered in an arbitrary order. the resulting sequence is referred to below as the converted sequence. the function returns an item from the converted sequence rather than the input sequence. if the converted sequence is empty the function returns the empty sequence. all items in the converted sequence must be derived from a single base type for which the le operator is defined. in addition the values in the sequence must have a total order. if date time values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison. duration values must either all be xs yearmonthduration values or must all be xs daytimeduration values. if the converted sequence contains the value nan the value nan is returned. if the items in the converted sequence are of type xs string or types derived by restriction from xs string then the determination of the item with the smallest value is made according to the collation that is used. if the type of the items in the converted sequence is not xs string and collation is specified the collation is ignored. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns the result of the expression if every v in c satisfies c 1 ge v then c 1 else fn max fn subsequence c 2 evaluated with collation as the default collation if specified and with c as the converted sequence. error conditions a type error is raised err forg0006 if the input sequence contains items of incompatible types as described above. notes because the rules allow the sequence to be reordered if there are two or items that are equal highest the specific item whose value is returned is implementation dependent this can arise for example if two different strings compare equal under the selected collation or if two different xs datetime values compare equal despite being in different timezones. if the converted sequence contains exactly one value then that value is returned. the default type when the fn max function is applied to xs untypedatomic values is xs double. this differs from the default type for operators such as gt and for sorting in xquery and xslt which is xs string. examples the expression fn max 3,4,5 returns 5. the expression fn max xs integer 5 xs float 5.0 xs double 0 returns xs double 5.0e0 fn max 3,4 zero raises a type error err forg0006 the expression fn max fn current-date xs date 2100-01-01 returns xs date 2100-01-01 assuming that the current date is during the 21st century. the expression fn max a b c returns c assuming a typical default collation. 14.5.4 fn min summary returns a value that is equal to the lowest value appearing in the input sequence. signatures fn min arg as xs anyatomictype as xs anyatomictype fn min arg as xs anyatomictype collation as xs string as xs anyatomictype properties the zero-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and implicit timezone. the one-argument form of this function is deterministic context-dependent and focus-independent it depends on collations and static base uri and implicit timezone. rules the following rules are applied to the input sequence values of type xs untypedatomic in arg are cast to xs double. numeric and xs anyuri values are converted to the least common type reachable by a combination of type promotion and subtype substitution. see section b.1 type promotion xp30 and section b.2 operator mapping xp30. the items in the resulting sequence may be reordered in an arbitrary order. the resulting sequence is referred to below as the converted sequence. the function returns an item from the converted sequence rather than the input sequence. if the converted sequence is empty the empty sequence is returned. all items in the converted sequence must be derived from a single base type for which the le operator is defined. in addition the values in the sequence must have a total order. if date time values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison. duration values must either all be xs yearmonthduration values or must all be xs daytimeduration values. if the converted sequence contains the value nan the value nan is returned. if the items in the converted sequence are of type xs string or types derived by restriction from xs string then the determination of the item with the smallest value is made according to the collation that is used. if the type of the items in the converted sequence is not xs string and collation is specified the collation is ignored. the collation used by this function is determined according to the rules in 5.3.3 choosing a collation. the function returns the result of the expression if every v in c satisfies c 1 le v then c 1 else fn min fn subsequence c 2 evaluated with collation as the default collation if specified and with c as the converted sequence. error conditions a type error is raised err forg0006 if the input sequence contains items of incompatible types as described above. notes because the rules allow the sequence to be reordered if there are two or items that are equal lowest the specific item whose value is returned is implementation dependent this can arise for example if two different strings compare equal under the selected collation or if two different xs datetime values compare equal despite being in different timezones. if the converted sequence contains exactly one value then that value is returned. the default type when the fn min function is applied to xs untypedatomic values is xs double. this differs from the default type for operators such as lt and for sorting in xquery and xslt which is xs string. examples the expression fn min 3,4,5 returns 3. the expression fn min xs integer 5 xs float 5 xs double 10 returns xs double 5.0e0 fn min 3,4 zero raises a type error err forg0006 fn min xs float 0.0e0 xs float 0.0e0 can return either positive or negative zero. the two items are equal so it is implementation dependent which is returned. the expression fn min fn current-date xs date 1900-01-01 returns xs date 1900-01-01 assuming that the current date is set to a reasonable value. the expression fn min a b c returns a assuming a typical default collation. 14.5.5 fn sum summary returns a value obtained by adding together the values in arg. signatures fn sum arg as xs anyatomictype as xs anyatomictype fn sum arg as xs anyatomictype zero as xs anyatomictype as xs anyatomictype properties this function is deterministic context-independent and focus-independent rules any values of type xs untypedatomic in arg are cast to xs double. the items in the resulting sequence may be reordered in an arbitrary order. the resulting sequence is referred to below as the converted sequence. if the converted sequence is empty then the single-argument form of the function returns the xs integer value 0 the two-argument form returns the value of the argument zero. if the converted sequence contains the value nan nan is returned. all items in arg must be numeric or derived from a single base type. in addition the type must support addition. duration values must either all be xs yearmonthduration values or must all be xs daytimeduration values. for numeric values the numeric promotion rules defined in 4.2 arithmetic operators on numeric values are used to promote all values to a single common type. the sum of a sequence of integers will therefore be an integer while the sum of a numeric sequence that includes at least one xs double will be an xs double. the result of the function using the second signature is the result of the expression if fn count c eq 0 then zero else if fn count c eq 1 then c 1 else c 1 fn sum subsequence c 2 where c is the converted sequence. the result of the function using the first signature is the result of the expression fn sum arg 0 error conditions a type error is raised err forg0006 if the input sequence contains items of incompatible types as described above. notes the second argument allows an appropriate value to be defined to represent the sum of an empty sequence. for example when summing a sequence of durations it would be appropriate to return a zero-length duration of the appropriate type. this argument is necessary because a system that does dynamic typing cannot distinguish an empty sequence of integers for example from an empty sequence of durations if the converted sequence contains exactly one value then that value is returned. examples let d1 xs yearmonthduration p20y let d2 xs yearmonthduration p10m let seq1 d1 d2 let seq3 3 4 5 the expression fn sum d1 d2 returns xs yearmonthduration p20y10m the expression fn sum seq1 lt xs yearmonthduration p3m xs yearmonthduration p0m returns xs yearmonthduration p0m the expression fn sum seq3 returns 12. the expression fn sum returns 0. the expression fn sum returns the expression fn sum 1 to 100 lt 0 0 returns 0. fn sum d1 9e1 raises a type error err forg0006 the expression fn sum d1 d2 ein augenblick returns xs yearmonthduration p20y10m there is no requirement that the zero value should be the same type as the items in arg or even that it should belong to a type that supports addition. 14.6 functions and operators that generate sequences function meaning op to returns a sequence of consecutive integers in a given range. 14.6.1 op to summary returns a sequence of consecutive integers in a given range. operator mapping defines the semantics of the to operator when applied to two integer arguments. signature op to firstval as xs integer lastval as xs integer as xs integer rules the function returns the sequence containing every xs integer whose value is between the value of firstval inclusive and the value of lastval inclusive in monotonic increasing order. if the value of the first operand is greater than the value of the second the function returns the empty sequence. if the values of the two operands are equal the function returns a sequence containing a single xs integer equal to that value. examples the expression 1 to 3 returns 1 2 3 the expression 3 to 1 returns the expression 5 to 5 returns 5. 14.7 functions on node identifiers 14.7.1 fn id summary returns the sequence of element nodes that have an id value matching the value of one or more of the idref values supplied in arg. signatures fn id arg as xs string as element fn id arg as xs string node as node as element properties the one-argument form of this function is deterministic context-dependent and focus-dependent the two-argument form of this function is deterministic context-independent and focus-independent rules the function returns a sequence in document order with duplicates eliminated containing every element node e that satisfies all the following conditions e is in the target document. the target document is the document containing node or the document containing the context item if the second argument is omitted. the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node. e has an id value equal to one of the candidate idref values where an element has an id value equal to v if either or both of the following conditions are true the is-id property see section 5.5 is-id accessor dm30. of the element node is true and the typed value of the element node is equal to v under the rules of the eq operator using the unicode codepoint collation http www.w3.org 2005 xpath-functions collation codepoint the element has an attribute node whose is-id property see section 5.5 is-id accessor dm30. is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation http www.w3.org 2005 xpath-functions collation codepoint each xs string in arg is parsed as if it were of type idrefs that is each xs string in arg is treated as a whitespace-separated sequence of tokens each acting as an idref. these tokens are then included in the list of candidate idrefs. if any of the tokens is not a lexically valid idref that is if it is not lexically an xs ncname it is ignored. formally the candidate idref values are the strings in the sequence given by the expression for s in arg return fn tokenize fn normalize-space s castable as xs idref if several elements have the same id value then e is the one that is first in document order. error conditions a dynamic error is raised err fodc0001 if node or the context item if the second argument is absent is a node in a tree whose root is not a document node. the following errors may be raised when node is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes the effect of this function is anomalous in respect of element nodes with the is-id property. for legacy reasons this function returns the element that has the is-id property whereas it would be more appropriate to return its parent that being the element that is uniquely identified by the id. a new function element-with-id is being introduced with the desired behavior. if the data model is constructed from an infoset an attribute will have the is-id property if the corresponding attribute in the infoset had an attribute type of id typically this means the attribute was declared as an id in a dtd. if the data model is constructed from a psvi an element or attribute will have the is-id property if its typed value is a single atomic value of type xs id or a type derived by restriction from xs id. no error is raised in respect of a candidate idref value that does not match the id of any element in the document. if no candidate idref value matches the id value of any element the function returns the empty sequence. it is not necessary that the supplied argument should have type xs idref or xs idrefs or that it should be derived from a node with the is-idrefs property. an element may have more than one id value. this can occur with synthetic data models or with data models constructed from a psvi where the element and one of its attributes are both typed as xs id. if the source document is well-formed but not valid it is possible for two or more elements to have the same id value. in this situation the function will select the first such element. it is also possible in a well-formed but invalid document to have an element or attribute that has the is-id property but whose value does not conform to the lexical rules for the xs id type. such a node will never be selected by this function. examples let emp employee xml id id21256 empnr e21256 empnr first john first last brown last employee the expression id id21256 name returns employee. the xml id attribute has the is-id property so the employee element is selected. the expression id e21256 name returns empnr. assuming the empnr element is given the type xs id as a result of schema validation the element will have the is-id property and is therefore selected. note the difference from the behavior of fn element-with-id. 14.7.2 fn element-with-id summary returns the sequence of element nodes that have an id value matching the value of one or more of the idref values supplied in arg. signatures fn element-with-id arg as xs string as element fn element-with-id arg as xs string node as node as element properties the one-argument form of this function is deterministic context-dependent and focus-dependent the two-argument form of this function is deterministic context-independent and focus-independent rules note the effect of this function is identical to fn id in respect of elements that have an attribute with the is-id property. however it behaves differently in respect of element nodes with the is-id property. whereas the fn id for legacy reasons returns the element that has the is-id property this parent returns the element identified by the id which is the parent of the element having the is-id property. the function returns a sequence in document order with duplicates eliminated containing every element node e that satisfies all the following conditions e is in the target document. the target document is the document containing node or the document containing the context item if the second argument is omitted. the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node. e has an id value equal to one of the candidate idref values where an element has an id value equal to v if either or both of the following conditions are true the element has an child element node whose is-id property see section 5.5 is-id accessor dm30. is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation http www.w3.org 2005 xpath-functions collation codepoint the element has an attribute node whose is-id property see section 5.5 is-id accessor dm30. is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation http www.w3.org 2005 xpath-functions collation codepoint each xs string in arg is parsed as if it were of type idrefs that is each xs string in arg is treated as a whitespace-separated sequence of tokens each acting as an idref. these tokens are then included in the list of candidate idrefs. if any of the tokens is not a lexically valid idref that is if it is not lexically an xs ncname it is ignored. formally the candidate idref values are the strings in the sequence given by the expression for s in arg return fn tokenize fn normalize-space s castable as xs idref if several elements have the same id value then e is the one that is first in document order. error conditions a dynamic error is raised err fodc0001 if node or the context item if the second argument is omitted is a node in a tree whose root is not a document node. the following errors may be raised when node is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes this function is equivalent to the fn id function except when dealing with id-valued element nodes. whereas the fn id function selects the element containing the identifier this function selects its parent. if the data model is constructed from an infoset an attribute will have the is-id property if the corresponding attribute in the infoset had an attribute type of id typically this means the attribute was declared as an id in a dtd. if the data model is constructed from a psvi an element or attribute will have the is-id property if its typed value is a single atomic value of type xs id or a type derived by restriction from xs id. no error is raised in respect of a candidate idref value that does not match the id of any element in the document. if no candidate idref value matches the id value of any element the function returns the empty sequence. it is not necessary that the supplied argument should have type xs idref or xs idrefs or that it should be derived from a node with the is-idrefs property. an element may have more than one id value. this can occur with synthetic data models or with data models constructed from a psvi where the element and one of its attributes are both typed as xs id. if the source document is well-formed but not valid it is possible for two or more elements to have the same id value. in this situation the function will select the first such element. it is also possible in a well-formed but invalid document to have an element or attribute that has the is-id property but whose value does not conform to the lexical rules for the xs id type. such a node will never be selected by this function. examples let emp employee xml id id21256 empnr e21256 empnr first john first last brown last employee the expression id id21256 name returns employee the xml id attribute has the is-id property so the employee element is selected. the expression id e21256 name returns employee assuming the empnr element is given the type xs id as a result of schema validation the element will have the is-id property and is therefore its parent is selected. note the difference from the behavior of fn id. 14.7.3 fn idref summary returns the sequence of element or attribute nodes with an idref value matching the value of one or more of the id values supplied in arg. signatures fn idref arg as xs string as node fn idref arg as xs string node as node as node properties the one-argument form of this function is deterministic context-dependent and focus-dependent the two-argument form of this function is deterministic context-independent and focus-independent rules the function returns a sequence in document order with duplicates eliminated containing every element or attribute node n that satisfies all the following conditions n is in the target document. the target document is the document containing node or the document containing the context item if the second argument is omitted. the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node. n has an idref value equal to one of the candidate id values where a node n has an idref value equal to v if both of the following conditions are true the is-idrefs property see section 5.6 is-idrefs accessor dm30 of n is true. the sequence fn tokenize fn normalize-space fn string n contains a string that is equal to v under the rules of the eq operator using the unicode code point collation http www.w3.org 2005 xpath-functions collation codepoint each xs string in arg is parsed as if it were of lexically of type xs id. these xs strings are then included in the list of candidate xs ids. if any of the strings in arg is not a lexically valid xs id that is if it is not lexically an xs ncname it is ignored. more formally the candidate id values are the strings in the sequence arg castable as xs ncname error conditions a dynamic error is raised err fodc0001 if node or the context item if the second argument is omitted is a node in a tree whose root is not a document node. the following errors may be raised when node is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes an element or attribute typically acquires the is-idrefs property by being validated against the schema type xs idref or xs idrefs or for attributes only by being described as of type idref or idrefs in a dtd. no error is raised in respect of a candidate id value that does not match the idref value of any element or attribute in the document. if no candidate id value matches the idref value of any element or attribute the function returns the empty sequence. it is possible for two or more nodes to have an idref value that matches a given candidate id value. in this situation the function will return all such nodes. however each matching node will be returned at most once regardless how many candidate id values it matches. it is possible in a well-formed but invalid document to have a node whose is-idrefs property is true but that does not conform to the lexical rules for the xs idref type. the effect of the above rules is that ill-formed candidate id values and ill-formed idref values are ignored. if the data model is constructed from a psvi the typed value of a node that has the is-idrefs property will contain at least one atomic value of type xs idref or a type derived by restriction from xs idref it may also contain atomic values of other types. these atomic values are treated as candidate id values if their lexical form is valid as an xs ncname and they are ignored otherwise. 14.7.4 fn generate-id summary this function returns a string that uniquely identifies a given node. signatures fn generate-id as xs string fn generate-id arg as node as xs string properties the zero-argument form of this function is deterministic context-dependent and focus-dependent the one-argument form of this function is deterministic context-independent and focus-independent rules if the argument is omitted it defaults to the context item the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument. if the argument is the empty sequence the result is the zero-length string. in other cases the function returns a string that uniquely identifies a given node. the returned identifier must consist of ascii alphanumeric characters and must start with an alphabetic character. thus the string is syntactically an xml name. an implementation is free to generate an identifier in any convenient way provided that it always generates the same identifier for the same node and that different identifiers are always generated from different nodes. an implementation is under no obligation to generate the same identifiers each time a document is transformed or queried. error conditions the following errors may be raised when arg is omitted if the context item is absentdm30 dynamic error err xpdy0002 xp30 if the context item is not a node type error err xpty0004 xp30. notes there is no guarantee that a generated unique identifier will be distinct from any unique ids specified in the source document. there is no inverse to this function it is not directly possible to find the node with a given generated id. of course it is possible to search a given sequence of nodes using an expression such as nodes generate-id id it is advisable but not required for implementations to generate ids that are distinct even when compared using a case-blind collation. examples the primary use case for this function is to generate hyperlinks. for example when generating html an anchor for a given section sect can be generated by writing in either xslt or xquery a name generate-id sect and a link to that section can then be produced with code such as see a href generate-id sect here a note that anchors generated in this way will not necessarily be the same each time a document is republished. 14.8 functions giving access to external information 14.8.1 fn doc summary retrieves a document using a uri supplied as an xs string and returns the corresponding document node. signature fn doc uri as xs string as document-node properties this function is deterministic context-dependent and focus-independent it depends on available documents and static base uri. rules if uri is the empty sequence the result is an empty sequence. if uri is a relative uri reference it is resolved relative to the value of the static base uri property from the static context. the resulting absolute uri is promoted to an xs string. if the available documents described in section 2.1.2 dynamic context xp30 provides a mapping from this string to a document node the function returns that document node. the uri may include a fragment identifier. by default this function is deterministic two calls on this function return the same document node if the same uri reference after resolution to an absolute uri reference is supplied to both calls. thus the following expression if it does not raise an error will always be true doc foo.xml is doc foo.xml however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism. the manner in which any such option is provided is implementation-defined. if the user has not selected such an option a call of the function must either return a deterministic result or must raise a dynamic error err fodc0003 note if uri is read from a source document it is generally appropriate to resolve it relative to the base uri property of the relevant node in the source document. this can be achieved by calling the fn resolve-uri function and passing the resulting absolute uri as an argument to the fn doc function. if two calls to this function supply different absolute uri references as arguments the same document node may be returned if the implementation can determine that the two arguments refer to the same resource. by defining the semantics of this function in terms of a string-to-document-node mapping in the dynamic context the specification is acknowledging that the results of this function are outside the purview of the language specification itself and depend entirely on the run-time environment in which the expression is evaluated. this run-time environment includes not only an unpredictable collection of resources the web but configurable machinery for locating resources and turning their contents into document nodes within the xpath data model. both the set of resources that are reachable and the mechanisms by which those resources are parsed and validated are implementation dependent one possible processing model for this function is as follows. the resource identified by the uri reference is retrieved. if the resource cannot be retrieved a dynamic error is raised err fodc0002 the data resulting from the retrieval action is then parsed as an xml document and a tree is constructed in accordance with the xquery and xpath data model xdm 3.0 if the top-level media type is known and is text the content is parsed in the same way as if the media type were text xml otherwise it is parsed in the same way as if the media type were application xml. if the contents cannot be parsed successfully a dynamic error is raised err fodc0002 otherwise the result of the function is the document node at the root of the resulting tree. this tree is then optionally validated against a schema. various aspects of this processing are implementation-defined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user. in particular the set of uri schemes that the implementation recognizes is implementation-defined. implementations may allow the mapping of uris to resources to be configured by the user using mechanisms such as catalogs or user-written uri handlers. the handling of non-xml media types is implementation-defined. implementations may allow instances of the data model to be constructed from non-xml resources under user control. it is implementation-defined whether dtd validation and or schema validation is applied to the source document. implementations may provide user-defined error handling options that allow processing to continue following an error in retrieving a resource or in parsing and validating its content. when errors have been handled in this way the function may return either an empty sequence or a fallback document provided by the error handler. implementations may provide user options that relax the requirement for the function to return deterministic results. error conditions a dynamic error may be raised err fodc0005 if uri is not a valid uri. a dynamic error is raised err fodc0002 if the available documents provides no mapping for the absolutized uri. a dynamic error is raised err fodc0002 if the resource cannot be retrieved or cannot be parsed successfully as xml. a dynamic error is raised err fodc0003 if the implementation is not able to guarantee that the result of the function will be deterministic and the user has not indicated that an unstable result is acceptable. 14.8.2 fn doc-available summary the function returns true if and only if the function call fn doc uri would return a document node. signature fn doc-available uri as xs string as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on available documents and static base uri. rules if uri is an empty sequence this function returns false. if a call on fn doc uri would return a document node this function returns true. a dynamic error is raised err fodc0005 if uri is not a valid uri according to the rules applied by the implementation of fn doc. otherwise this function returns false. if this function returns true then calling fn doc uri within the same execution scope must return a document node. however if nondeterministic processing has been selected for the fn doc function this guarantee is lost. 14.8.3 fn collection summary returns a sequence of nodes representing a collection of documents indentified by a collection uri or a default collection if no uri is supplied. signatures fn collection as node fn collection arg as xs string as node properties this function is deterministic context-dependent and focus-independent it depends on available node collections and static base uri. rules this function takes an xs string as argument and returns a sequence of nodes obtained by interpreting arg as an xs anyuri and resolving it according to the mapping specified in available node collections described in section c.2 dynamic context components xp30. if available node collections provides a mapping from this string to a sequence of nodes the function returns that sequence. if available node collections maps the string to an empty sequence then the function returns an empty sequence. if arg is not specified the function returns the sequence of the nodes in the default node collection in the dynamic context. see section c.2 dynamic context components xp30. if the value of arg is a relative xs anyuri it is resolved against the value of the base-uri property from the static context. if arg is the empty sequence the function behaves as if it had been called without an argument. see above. by default this function is deterministic this means that repeated calls on the function with the same argument will return the same result. however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism. the manner in which any such option is provided is implementation-defined if the user has not selected such an option a call to this function must either return a deterministic result or must raise a dynamic error err fodc0003 there is no requirement that the returned nodes should be in document order nor is there a requirement that the result should contain no duplicates. error conditions a dynamic error is raised err fodc0002 if no uri is supplied and the value of the default collection is absentdm30. a dynamic error is raised err fodc0002 if available node collections provides no mapping for the absolutized uri. a dynamic error is raised err fodc0004 if arg is not a valid xs anyuri. notes this function provides a facility for users to work with a collection of documents which may be contained in a directory or in the rows of a relational table or in some other implementation-specific construct. an implementation may also use external variables to identify external resources but fn collection provides functionality not provided by external variables. specifying resources using uris is useful because uris are dynamic can be parameterized and do not rely on an external environment. 14.8.4 fn uri-collection summary returns a sequence of xs anyuri values representing the uris in a resource collection. signatures fn uri-collection as xs anyuri fn uri-collection arg as xs string as xs anyuri properties this function is deterministic context-dependent and focus-independent it depends on available resource collections and static base uri. rules the zero-argument form of the function returns the uris in the default resource collection described in section c.2 dynamic context components xp30. if the value of arg is a relative xs anyuri it is resolved against the value of the base-uri property from the static context. if arg is the empty sequence the function behaves as if it had been called without an argument. see above. the single-argument form of the function returns the sequence of uris corresponding to the supplied uri in the available resource collections described in section c.2 dynamic context components xp30. error conditions a dynamic error is raised err fodc0002 if no uri is supplied that is if the the function is called with no arguments or with a single argument that evaluates to an empty sequence and the value of the default resource collection is absentdm30. a dynamic error is raised err fodc0002 if available resource collections provides no mapping for the absolutized uri. a dynamic error is raised err fodc0004 if arg is not a valid xs anyuri. notes there are several reasons why it might be appropriate to use this function in preference to the fn collection function it allows resources to be retrieved that are not well-formed xml documents for example the returned uris might be referenced using the fn unparsed-text function rather than the fn doc function. in xslt 3.0 it allows the documents to be processed in streaming mode using the xsl stream instruction. it allows recovery from failures to read parse or validate individual documents by calling the fn doc function within the scope of try catch. it allows selection of which documents to read based on their uri for example they can be filtered to select those whose uris end in xml or those that use the https scheme. an application might choose to limit the number of uris processed in a single run for example it might process only the first 50 uris in the collection or it might present the uris to the user and allow the user to select which of them need to be further processed. it allows the uris to be modified before they are dereferenced for example by adding or removing query parameters or by redirecting the request to a local cache or to a mirror site. for some of these use cases this assumes that the cost of calling fn collection might be significant for example it might involving retrieving all the documents in the collection over the network and parsing them this will not necessarily be true of all implementations. some implementations might ensure that calling fn uri-collection and then applying fn doc to each of the returned uris delivers the same result as calling fn collection with the same argument however this is not guaranteed. there is no requirement that the uris returned by this function should all be distinct and no assumptions can be made about the order of uris in the sequence unless the implementation defines otherwise. 14.8.5 fn unparsed-text summary the fn unparsed-text function reads an external resource for example a file and returns a string representation of the resource. signatures fn unparsed-text href as xs string as xs string fn unparsed-text href as xs string encoding as xs string as xs string properties this function is deterministic context-dependent and focus-independent it depends on static base uri. rules the href argument must be a string in the form of a uri reference which must contain no fragment identifier and must identify a resource for which a string representation is available. if the uri is a relative uri reference then it is resolved relative to the static base uri property from the static context. the mapping of uris to the string representation of a resource is the mapping defined in the available text resourcesxp30 component of the dynamic context. if the value of the href argument is an empty sequence the function returns an empty sequence. the encoding argument if present is the name of an encoding. the values for this attribute follow the same rules as for the encoding attribute in an xml declaration. the only values which every implementation is required to recognize are utf-8 and utf-16. the encoding of the external resource is determined as follows external encoding information is used if available otherwise if the media type of the resource is text xml or application xml see rfc 2376 or if it matches the conventions text xml or application xml see rfc 3023 and or its successors then the encoding is recognized as specified in extensible markup language xml 1.0 fifth edition otherwise the value of the encoding argument is used if present otherwise the processor may use implementation-defined heuristics to determine the likely encoding otherwise utf-8 is assumed. the result of the function is a string containing the string representation of the resource retrieved using the uri. error conditions a dynamic error is raised err fout1170 if href contains a fragment identifier or if it cannot be used to retrieve the string representation of a resource. a dynamic error is raised err fout1190 if the value of the encoding argument is not a valid encoding name if the processor does not support the specified encoding if the string representation of the retrieved resource contains octets that cannot be decoded into unicode characters using the specified encoding or if the resulting characters are not permitted xml characters. a dynamic error is raised err fout1200 if encoding is absent and the processor cannot infer the encoding using external information and the encoding is not utf-8. notes if it is appropriate to use a base uri other than the dynamic base uri for example when resolving a relative uri reference read from a source document then it is advisable to resolve the relative uri reference using the fn resolve-uri function before passing it to the fn unparsed-text function. there is no essential relationship between the sets of uris accepted by the two functions fn unparsed-text and fn doc a uri accepted by one may or may not be accepted by the other and if a uri is accepted by both there is no essential relationship between the results different resource representations are permitted by the architecture of the web there are no constraints on the mime type of the resource. the fact that the resolution of uris is defined by a mapping in the dynamic context means that in effect various aspects of the behavior of this function are implementation-defined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user. in particular the set of uri schemes that the implementation recognizes is implementation-defined. implementations may allow the mapping of uris to resources to be configured by the user using mechanisms such as catalogs or user-written uri handlers. the handling of media types is implementation-defined. implementations may provide user-defined error handling options that allow processing to continue following an error in retrieving a resource or in reading its content. when errors have been handled in this way the function may return a fallback document provided by the error handler. implementations may provide user options that relax the requirement for the function to return deterministic results. the rules for determining the encoding are chosen for consistency with xml inclusions xinclude version 1.0 second edition files with an xml media type are treated specially because there are use cases for this function where the retrieved text is to be included as unparsed xml within a cdata section of a containing document and because processors are likely to be able to reuse the code that performs encoding detection for xml external entities. if the text file contains characters such as and these will typically be output as lt and amp if the string is serialized as xml or html. if these characters actually represent markup for example if the text file contains html then an xslt stylesheet can attempt to write them as markup to the output file using the disable-output-escaping attribute of the xsl value-of instruction. note however that xslt implementations are not required to support this feature. examples this xslt example attempts to read a file containing boilerplate html and copy it directly to the serialized output file xsl output method html xsl template match xsl value-of select unparsed-text header.html iso-8859-1 disable-output-escaping yes xsl apply-templates xsl value-of select unparsed-text footer.html iso-8859-1 disable-output-escaping yes xsl template 14.8.6 fn unparsed-text-lines summary the fn unparsed-text-lines function reads an external resource for example a file and returns its contents as a sequence of strings one for each line of text in the string representation of the resource. signatures fn unparsed-text-lines href as xs string as xs string fn unparsed-text-lines href as xs string encoding as xs string as xs string properties this function is deterministic context-dependent and focus-independent it depends on static base uri. rules the unparsed-text-lines function reads an external resource for example a file and returns its string representation as a sequence of strings separated at newline boundaries. the result of the single-argument function is the same as the result of the expression fn tokenize fn unparsed-text href r n r n not position last and the result of the two-argument function is the same as the result of the expression fn tokenize fn unparsed-text href encoding r n r n not position last and the result is thus a sequence of strings containing the text of the resource retrieved using the uri each string representing one line of text. lines are separated by one of the sequences x0a x0d or x0dx0a. the characters representing the newline are not included in the returned strings. if there are two adjacent newline sequences a zero-length string will be returned to represent the empty line but if the external resource ends with the sequence x0a x0d or x0dx0a the result will be as if this final line ending were not present. error conditions error conditions are the same as for the fn unparsed-text function. notes see the notes for fn unparsed-text. 14.8.7 fn unparsed-text-available summary because errors in evaluating the fn unparsed-text function are non-recoverable these two functions are provided to allow an application to determine whether a call with particular arguments would succeed. signatures fn unparsed-text-available href as xs string as xs boolean fn unparsed-text-available href as xs string encoding as xs string as xs boolean properties this function is deterministic context-dependent and focus-independent it depends on static base uri. rules the fn unparsed-text-available function determines whether a call on the fn unparsed-text function with identical arguments would return a string. if the first argument is an empty sequence the function returns false. in other cases the function returns true if a call on fn unparsed-text with the same arguments would succeed and false if a call on fn unparsed-text with the same arguments would fail with a non-recoverable dynamic error. the functions fn unparsed-text and fn unparsed-text-available have the same requirement for determinism as the functions fn doc and fn doc-available. this means that unless the user has explicitly stated a requirement for a reduced level of determinism either of these functions if called twice with the same arguments during the course of a transformation must return the same results each time moreover the results of a call on fn unparsed-text-available must be consistent with the results of a subsequent call on unparsed-text with the same arguments. notes this requires that the unparsed-text-available function should actually attempt to read the resource identified by the uri and check that it is correctly encoded and contains no characters that are invalid in xml. implementations may avoid the cost of repeating these checks for example by caching the validated contents of the resource to anticipate a subsequent call on the unparsed-text or unparsed-text-lines function. alternatively implementations may be able to rewrite an expression such as if unparsed-text-available a then unparsed-text a else to generate a single call internally. since the function unparsed-text-lines succeeds or fails under exactly the same circumstances as unparsed-text the unparsed-text-availabl function may equally be used to test whether a call on unparsed-text-lines would succeed. 14.8.8 fn environment-variable summary returns the value of a system environment variable if it exists. signature fn environment-variable name as xs string as xs string properties this function is deterministic context-dependent and focus-independent it depends on environment variables. rules the set of available environment variablesxp30 is a set of name value pairs forming part of the dynamic context in which the name is unique within the set of pairs. the name and value are arbitrary strings. if the name argument matches the name of one of these pairs the function returns the corresponding value. if there is no environment variable with a matching name the function returns the empty sequence. the collation used for matching names is implementation-defined but must be the same as the collation used to ensure that the names of all environment variables are unique. the function is deterministic which means that if it is called several times within the same execution scope with the same arguments it must return the same result. notes on many platforms the term environment variable has a natural meaning in terms of facilities provided by the operating system. this interpretation of the concept does not exclude other interpretations such as a mapping to a set of configuration parameters in a database system. environment variable names are usually case sensitive. names are usually of the form letter letter digit but this varies by platform. on some platforms there may sometimes be multiple environment variables with the same name in this case it is implementation-dependent as to which is returned see for example posix.1-2008 chapter 8 environment variables implementations may use prefixes or other naming conventions to disambiguate the names. the requirement to ensure that the function is deterministic means in practice that the implementation must make a snapshot of the environment variables at some time during execution and return values obtained from this snapshot rather than using live values that are subject to change at any time. operating system environment variables may be associated with a particular process while queries and stylesheets may execute across multiple processes or multiple machines in such circumstances implementations may choose to provide access to the environment variables associated with the process in which the query or stylesheet processing was initiated. security advice queries from untrusted sources should not be permitted unrestricted access to environment variables. for example the name of the account under which the query is running may be useful information to a would-be intruder. an implementation may therefore choose to restrict access to the environment or may provide a facility to make fn environment-variable always return the empty sequence. 14.8.9 fn available-environment-variables summary returns a list of environment variable names that are suitable for passing to fn environment-variable as a possibly empty sequence of strings. signature fn available-environment-variables as xs string properties this function is deterministic context-dependent and focus-independent it depends on environment variables. rules the function returns a sequence of strings being the names of the environment variables in the dynamic context in some implementation-dependent order. the function is deterministic that is the set of available environment variables does not vary during evaluation. notes the function returns a list of strings containing no duplicates. it is intended that the strings in this list should be suitable for passing to fn environment-variable. see also the note on security under the definition of the fn environment-variable function. if access to environment variables has been disabled fn available-environment-variables always returns the empty sequence. 14.9 parsing and serializing 14.9.1 fn parse-xml summary this function takes as input an xml document represented as a string and returns the document node at the root of an xdm tree representing the parsed document. signature fn parse-xml arg as xs string as document-node element properties this function is nondeterministic context-dependent and focus-independent it depends on static base uri. rules if arg is the empty sequence the function returns the empty sequence. the precise process used to construct the xdm instance is implementation-defined in particular it is implementation-defined whether dtd and or schema validation is invoked and it is implementation-defined whether an xml 1.0 or xml 1.1 parser is used. the static base uri property from the static context of the fn parse-xml function call is used both as the base uri used by the xml parser to resolve relative entity references within the document and as the base uri of the document node that is returned. the document uri of the returned node is absent the function is not deterministic that is if the function is called twice with the same arguments it is implementation-dependent whether the same node is returned on both occasions. error conditions a dynamic error is raised err fodc0006 if the content of arg is not a well-formed and namespace-well-formed xml document. a dynamic error is raised err fodc0006 if dtd-based validation is carried out and the content of arg is not valid against its dtd. notes since the xml document is presented to the parser as a string rather than as a sequence of octets the encoding specified within the xml declaration has no meaning. if the xml parser accepts input only in the form of a sequence of octets then the processor must ensure that the string is encoded as octets in a way that is consistent with rules used by the xml parser to detect the encoding. the primary use case for this function is to handle input documents that contain nested xml documents embedded within cdata sections. since the content of the cdata section are exposed as text the receiving query or stylesheet may pass this text to the fn parse-xml function to create a tree representation of the nested document. similarly nested xml within comments is sometimes encountered and lexical xml is sometimes returned by extension functions for example functions that access web services or read from databases. a use case arises in xslt where there is a need to preprocess an input document before parsing. for example an application might wish to edit the document to remove its doctype declaration. this can be done by reading the raw text using the fn unparsed-text function editing the resulting string and then passing it to the fn parse-xml function. examples the expression fn parse-xml alpha abcd alpha returns a newly created document node having an alpha element as its only child the alpha element in turn is the parent of a text node whose string value is abcd 14.9.2 fn parse-xml-fragment summary this function takes as input an xml external entity represented as a string and returns the document node at the root of an xdm tree representing the parsed document fragment. signature fn parse-xml-fragment arg as xs string as document-node properties this function is nondeterministic context-dependent and focus-independent it depends on static base uri. rules if arg is the empty sequence the function returns the empty sequence. the input must be a namespace-well-formed external general parsed entity. more specifically it must be a string conforming to the production rule extparsedentxml in extensible markup language xml 1.0 fifth edition it must contain no entity references other than references to predefined entities and it must satisfy all the rules of namespaces in xml for namespace-well-formed documents with the exception that the rule requiring it to be a well-formed document is replaced by the rule requiring it to be a well-formed external general parsed entity. the string is parsed to form a sequence of nodes which become children of the new document node in the same way as the content of any element is converted into a sequence of children for the resulting element node. schema validation is not invoked which means that the nodes in the returned document will all be untyped. the precise process used to construct the xdm instance is implementation-defined in particular it is implementation-defined whether an xml 1.0 or xml 1.1 parser is used. the static base uri from the static context of the fn parse-xml-fragment function call is used as the base uri of the document node that is returned. the document uri of the returned node is absent the function is not deterministic that is if the function is called twice with the same arguments it is implementation-dependent whether the same node is returned on both occasions. error conditions a dynamic error is raised err fodc0006 if the content of arg is not a well-formed external general parsed entity if it contains entity references other than references to predefined entities or if a document that incorporates this well-formed parsed entity would not be namespace-well-formed. notes see also the notes for the fn parse-xml function. the main differences between fn parse-xml and fn parse-xml-fragment are that for fn parse-xml the children of the resulting document node must contain exactly one element node and no text nodes wheras for fn parse-xml-fragment the resulting document node can have any number including zero of element and text nodes among its children. an additional difference is that the text declaration at the start of an external entity has slightly different syntax from the xml declaration at the start of a well-formed document. note that all whitespace outside the text declaration is significant including whitespace that precedes the first element node. one use case for this function is to handle xml fragments stored in databases which frequently allow zero-or-more top level element nodes. another use case is to parse the contents of a cdata section embedded within another xml document. examples the expression fn parse-xml-fragment alpha abcd alpha beta abcd beta returns a newly created document node having two elements named alpha and beta as its children each of these elements in turn is the parent of a text node. the expression fn parse-xml-fragment he was i so i kind returns a newly created document node having three children a text node whose string value is he was an element node named i having a child text node with string value so and a text node whose string value is kind the expression fn parse-xml-fragment returns a document node having no children. the expression fn parse-xml-fragment returns a document node whose children comprise a single text node whose string value is a single space. the expression fn parse-xml-fragment xml version 1.0 encoding utf8 standalone yes a results in a dynamic error err fodc0006 because the standalone keyword is not permitted in the text declaration that appears at the start of an external general parsed entity. thus it is not the case that any input accepted by the fn parse-xml function will also be accepted by fn parse-xml-fragment. 14.9.3 fn serialize summary this function serializes the supplied input sequence arg as described in xslt and xquery serialization 3.0 returning the serialized representation of the sequence as a string. signatures fn serialize arg as item as xs string fn serialize arg as item params as element output serialization-parameters as xs string properties this function is deterministic context-independent and focus-independent rules the value of arg acts as the input sequence to the serialization process which starts with sequence normalization. the single-argument version of this function has the same effect as the two-argument version called with params set to an empty sequence. this in turn is the same as the effect of passing an output serialization-parameters element with no child elements. the params argument is used to identify a set of serialization parameters. these are supplied in the form of an output serialization-parameters element having the format described in section 3.1 setting serialization parameters by means of a data model instance ser30. the final stage of serialization that is encoding is skipped. if the serializer does not allow this phase to be skipped then the sequence of octets returned by the serializer is decoded into a string by reversing the character encoding performed in the final stage. error conditions if the host language makes serialization an optional feature and the implementation does not support serialization then a dynamic error err fodc0010 is raised. the serialization process will raise an error if arg is an attribute or namespace node. if any serialization error occurs including the detection of an invalid value for a serialization parameter this results in the fn serialize call failing with a dynamic error. notes one use case for this function arises when there is a need to construct an xml document containing nested xml documents within a cdata section or on occasions within a comment see fn parse-xml for further details. another use case arises when there is a need to call an extension function that expects a lexical xml document as input. there are also use cases where the application wants to post-process the output of a query or transformation for example by adding an internal dtd subset or by inserting proprietary markup delimiters such as the used by some templating languages. examples given the output parameters let params output serialization-parameters xmlns output http www.w3.org 2010 xslt-xquery-serialization output omit-xml-declaration value yes output serialization-parameters let data a b 3 the following call might produce the output shown the expression fn serialize data params returns a b 3 15 context functions the following functions are defined to obtain information from the static or dynamic context. function meaning fn position returns the context position from the dynamic context. fn last returns the context size from the dynamic context. fn current-datetime returns the current date and time with timezone fn current-date returns the current date. fn current-time returns the current time. fn implicit-timezone returns the value of the implicit timezone property from the dynamic context. fn default-collation returns the value of the default collation property from the static context. fn static-base-uri this function returns the value of the static base uri property from the static context. 15.1 fn position summary returns the context position from the dynamic context. signature fn position as xs integer properties this function is deterministic context-dependent and focus-dependent rules returns the context position from the dynamic context. see section c.2 dynamic context components xp30. error conditions a dynamic error is raised err xpdy0002 xp30 if the context item is absentdm30. 15.2 fn last summary returns the context size from the dynamic context. signature fn last as xs integer properties this function is deterministic context-dependent and focus-dependent rules returns the context size from the dynamic context. see section c.2 dynamic context components xp30. error conditions a dynamic error is raised err xpdy0002 xp30 if the context item is absentdm30. examples the expression 1 to 20 fn last 1 returns 19. 15.3 fn current-datetime summary returns the current date and time with timezone signature fn current-datetime as xs datetimestamp properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules returns the current datetime with timezone from the dynamic context. see section c.2 dynamic context components xp30. this is an xs datetime that is current at some time during the evaluation of a query or transformation in which fn current-datetime is executed. this function is deterministic the precise instant during the query or transformation represented by the value of fn current-datetime is implementation dependent if the implementation supports data types from xsd 1.1 then the returned value will be an instance of xs datetimestamp. otherwise the only guarantees are that it will be an instance of xs datetime and will have a timezone component. notes the returned xs datetime will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fn current-datetime returns an xs datetimestamp corresponding to the current date and time. for example a call of fn current-datetime might return 2004-05-12t18 17 15.125z corresponding to the current time on may 12 2004 in timezone z. 15.4 fn current-date summary returns the current date. signature fn current-date as xs date properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules returns xs date fn current-datetime this is an xs date with timezone that is current at some time during the evaluation of a query or transformation in which fn current-date is executed. this function is deterministic the precise instant during the query or transformation represented by the value of fn current-date is implementation dependent notes the returned date will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fn current-date returns an xs date corresponding to the current date. for example a call of fn current-date might return 2004-05-12+01 00. 15.5 fn current-time summary returns the current time. signature fn current-time as xs time properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules returns xs time fn current-datetime this is an xs time with timezone that is current at some time during the evaluation of a query or transformation in which fn current-time is executed. this function is deterministic the precise instant during the query or transformation represented by the value of fn current-time is implementation dependent notes the returned time will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fn current-time returns an xs time corresponding to the current time. for example a call of fn current-time might return 23 17 00.000-05 00. 15.6 fn implicit-timezone summary returns the value of the implicit timezone property from the dynamic context. signature fn implicit-timezone as xs daytimeduration properties this function is deterministic context-dependent and focus-independent it depends on implicit timezone. rules returns the value of the implicit timezone property from the dynamic context. components of the dynamic context are discussed in section c.2 dynamic context components xp30. 15.7 fn default-collation summary returns the value of the default collation property from the static context. signature fn default-collation as xs string properties this function is deterministic context-dependent and focus-independent it depends on collations. rules returns the value of the default collation property from the static context. components of the static context are discussed in section c.1 static context components xp30. notes the default collation property can never be absent. if it is not explicitly defined a system defined default can be invoked. if this is not provided the unicode codepoint collation http www.w3.org 2005 xpath-functions collation codepoint is used. 15.8 fn static-base-uri summary this function returns the value of the static base uri property from the static context. signature fn static-base-uri as xs anyuri properties this function is deterministic context-dependent and focus-independent it depends on static base uri. rules the function returns the value of the static base uri property from the static context. if the property is absent the empty sequence is returned. components of the static context are discussed in section 2.1.1 static context xp30 notes xquery 3.0 and xslt 3.0 give an implementation freedom to use different base uris during the static uow.acc.tab.analysis phase and the dynamic evaluation phase that is for compile-time and run-time resources respectively. in this situation the fn static-base-uri function should return a uri suitable for locating resources needed during dynamic evaluation. 16 higher-order functions 16.1 functions on functions the following functions operate on function items that is values referring to a function. function meaning fn function-lookup returns the function having a given name and arity if there is one. fn function-name returns the name of the function identified by a function item. fn function-arity returns the arity of the function identified by a function item. 16.1.1 fn function-lookup summary returns the function having a given name and arity if there is one. signature fn function-lookup name as xs qname arity as xs integer as function properties this function is deterministic context-dependent and focus-dependent rules a call to fn function-lookup returns the function obtained by looking up the expanded qname supplied as name and the arity supplied as arity in the named functions component of the dynamic context specifically the dynamic context of the call to fn function-lookup furthermore if that function has an implementation-dependent implementation see note below then the implementation of the function returned by fn function-lookup is associated with the static and dynamic context of the call to fn function-lookup. note the above rule deliberately uses the same wording as the corresponding rule for named function references. the term a function with an implementation-dependent implementation essentially means a function whose implementation is provided by the language processor rather than by the stylesheet or query author. this rule is therefore relevant to built-in functions and vendor-supplied extension functions whose result depends on the context of the function call. otherwise if no known function can be identified by name and arity an empty sequence is returned. if the arguments to fn function-lookup identify a function that is present in the static context of the function call the function will always return the same function that a static reference to this function would bind to. if there is no such function in the static context then the results depend on what is present in the dynamic context which is implementation-defined notes this function can be useful where there is a need to make a dynamic decision on which of several statically-known functions to call. it can thus be used as a substitute for polymorphism in the case where the application has been designed so several functions implement the same interface. the function can also be useful in cases where a query or stylesheet module is written to work with alternative versions of a library module. in such cases the author of the main module might wish to test whether an imported library module contains or does not contain a particular function and to call a function in that module only if it is available in the version that was imported. a static call would cause a static error if the function is not available whereas getting the function using fn function-lookup allows the caller to take fallback action in this situation. if the function that is retrieved by fn function-lookup is context-dependent that is if it has dependencies on the static or dynamic context of its caller the context that applies is the static and or dynamic context of the call to the fn function-lookup function itself. the context thus effectively forms part of the closure of the returned function. in practice this applies only where the target of fn function-lookup is a built-in function because user-defined functions never depend on the static or dynamic context of the function call. the rule applies recursively since fn function-lookup is itself a context-dependent built-in function. these specifications do not define any circumstances in which the dynamic context will contain functions that are not present in the static context but neither do they rule this out. for example an api may provide the ability to add functions to the dynamic context. equally these specifications do not define any mechanism for creating context-dependent functions other than the built-in context-depedendent functions but neither do they rule out the existence of such functions. examples the expression fn function-lookup xs qname fn substring 2 abcd 2 returns bcd the expression fn function-lookup xs qname xs datetimestamp 1 xs datetime#1 1 2011-11-11t11 11 11z returns an xs datetime value set to the specified date time and timezone if the implementation supports xsd 1.1 then the result will be an instance of the derived type xs datetimestamp. the query is written to ensure that no failure occurs when the implementation does not recognize the type xs datetimestamp. the expression let f fn function-lookup xs qname zip binary-entry 2 return if exists f then f href entry else returns the result of calling zip binary-entry href entry if the function is available or an empty sequence otherwise. 16.1.2 fn function-name summary returns the name of the function identified by a function item. signature fn function-name func as function as xs qname properties this function is deterministic context-independent and focus-independent rules if func refers to a named function fn function-name func returns the name of that function. otherwise func refers to an anonymous function fn function-name func returns an empty sequence. the prefix part of the returned qname is implementation dependent examples the expression fn function-name fn substring#2 returns fn qname http www.w3.org 2005 xpath-functions fn substring the namespace prefix of the returned qname is not predictable. the expression fn function-name function node count node returns 16.1.3 fn function-arity summary returns the arity of the function identified by a function item. signature fn function-arity func as function as xs integer properties this function is deterministic context-independent and focus-independent rules the fn function-arity function returns the arity number of arguments of the function identified by func. examples the expression fn function-arity fn substring#2 returns 2. the expression fn function-arity function node name node returns 1. the expression let initial fn substring 1 1 return fn function-arity initial returns 1. 16.2 basic higher-order functions the following functions take function items as an argument. function meaning fn for-each applies the function item f to every item from the sequence seq in turn returning the concatenation of the resulting sequences in order. fn filter returns those items from the sequence seq for which the supplied function f returns true. fn fold-left processes the supplied sequence from left to right applying the supplied function repeatedly to each item in turn together with an accumulated result value. fn fold-right processes the supplied sequence from right to left applying the supplied function repeatedly to each item in turn together with an accumulated result value. fn for-each-pair applies the function item f to successive pairs of items taken one from seq1 and one from seq2 returning the concatenation of the resulting sequences in order. 16.2.1 fn for-each summary applies the function item f to every item from the sequence seq in turn returning the concatenation of the resulting sequences in order. signature fn for-each seq as item f as function item as item as item properties this function is deterministic context-independent and focus-independent rules the effect of the function is equivalent to the following implementation in xquery declare function fn for-each seq f if fn empty seq then else f fn head seq fn for-each fn tail seq f or its equivalent in xslt xsl function name fn for-each xsl param name seq xsl param name f xsl if test fn exists seq xsl sequence select f fn head seq fn for-each fn tail seq f xsl if xsl function notes the function call fn for-each seq f is equivalent to the expression for i in seq return f i assuming that ordering mode is ordered. examples the expression fn for-each 1 to 5 function a a a returns 1 4 9 16 25 the expression fn for-each john jane fn string-to-codepoints#1 returns 106 111 104 110 106 97 110 101 the expression fn for-each 23 29 xs int#1 returns 23 29 16.2.2 fn filter summary returns those items from the sequence seq for which the supplied function f returns true. signature fn filter seq as item f as function item as xs boolean as item properties this function is deterministic context-independent and focus-independent rules the effect of the function is equivalent to the following implementation in xquery declare function fn filter seq as item f as function item as xs boolean as item if fn empty seq then else fn head seq f eq fn true fn filter fn tail seq f or its equivalent in xslt xsl function name fn filter as item xsl param name seq as item xsl param name f as function item as xs boolean xsl if test fn exists seq xsl sequence select fn head seq f eq fn true fn filter fn tail seq f xsl if xsl function error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f returns anything other than a single xs boolean item there is no conversion to an effective boolean value. notes the function call fn filter seq f has a very similar effect to the expression seq f there are some differences however. in the case of fn filter the function f is required to return a boolean there is no special treatment for numeric predicate values and no conversion to an effective boolean value. also with a filter expression seq f the focus within the predicate is different from that outside this means that the use of a context-sensitive function such as fn lang#1 will give different results in the two cases. examples the expression fn filter 1 to 10 function a a mod 2 0 returns 2 4 6 8 10 16.2.3 fn fold-left summary processes the supplied sequence from left to right applying the supplied function repeatedly to each item in turn together with an accumulated result value. signature fn fold-left seq as item zero as item f as function item item as item as item properties this function is deterministic context-independent and focus-independent rules the effect of the function is equivalent to the following implementation in xquery declare function fn fold-left seq as item zero as item f as function item item as item as item if fn empty seq then zero else fn fold-left fn tail seq f zero fn head seq f or its equivalent in xslt xsl function name fn fold-left as item xsl param name seq as item xsl param name zero as item xsl param name f as function item item as item xsl choose xsl when test fn empty seq xsl sequence select zero xsl when xsl otherwise xsl sequence select fn fold-left fn tail seq f zero fn head seq f xsl otherwise xsl choose xsl function error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f cannot be applied to two arguments where the first argument is either the value of zero or the result of a previous application of f and the second is seq or any trailing subsequence of seq. notes this operation is often referred to in the functional programming literature as folding or reducing a sequence. it takes a function that operates on a pair of values and applies it repeatedly with an accumulated result as the first argument and the next item in the sequence as the second argument. the accumulated result is initially set to the value of the zero argument which is conventionally a value such as zero in the case of addition one in the case of multiplication or a zero-length string in the case of string concatenation that causes the function to return the value of the other argument unchanged. examples the expression fn fold-left 1 to 5 0 function a b a b returns 15. this returns the sum of the items in the sequence the expression fn fold-left 2,3,5,7 1 function a b a b returns 210. this returns the product of the items in the sequence the expression fn fold-left true false false false function a b a or b returns true this returns true if any item in the sequence has an effective boolean value of true the expression fn fold-left true false false false function a b a and b returns false this returns true only if every item in the sequence has an effective boolean value of true the expression fn fold-left 1 to 5 function a b b a returns 5,4,3,2,1 this reverses the order of the items in a sequence the expression fn fold-left 1 to 5 fn concat returns 1.2.3.4.5 the expression fn fold-left 1 to 5 zero fn concat f returns f f f f f zero 1 2 3 4 5 16.2.4 fn fold-right summary processes the supplied sequence from right to left applying the supplied function repeatedly to each item in turn together with an accumulated result value. signature fn fold-right seq as item zero as item f as function item item as item as item properties this function is deterministic context-independent and focus-independent rules the effect of the function is equivalent to the following implementation in xquery declare function fn fold-right seq as item zero as item f as function item item as item as item if fn empty seq then zero else f fn head seq fn fold-right fn tail seq zero f or its equivalent in xslt xsl function name fn fold-right as item xsl param name seq as item xsl param name zero as item xsl param name f as function item item as item xsl choose xsl when test fn empty seq xsl sequence select zero xsl when xsl otherwise xsl sequence select f fn head seq fn fold-right fn tail seq zero f xsl otherwise xsl choose xsl function error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f cannot be applied to two arguments where the first argument is any item in the sequence seq and the second is either the value of zero or the result of a previous application of f. notes this operation is often referred to in the functional programming literature as folding or reducing a sequence. it takes a function that operates on a pair of values and applies it repeatedly with the next item in the sequence as the first argument and the result of processing the remainder of the sequence as the second argument. the accumulated result is initially set to the value of the zero argument which is conventionally a value such as zero in the case of addition one in the case of multiplication or a zero-length string in the case of string concatenation that causes the function to return the value of the other argument unchanged. in cases where the function performs an associative operation on its two arguments such as addition or multiplication fn fold-right produces the same result as fn fold-left. examples the expression fn fold-right 1 to 5 0 function a b a b returns 15. this returns the sum of the items in the sequence the expression fn fold-right 1 to 5 fn concat returns 1.2.3.4.5. the expression fn fold-right 1 to 5 zero concat f returns f 1 f 2 f 3 f 4 f 5 zero 16.2.5 fn for-each-pair summary applies the function item f to successive pairs of items taken one from seq1 and one from seq2 returning the concatenation of the resulting sequences in order. signature fn for-each-pair seq1 as item seq2 as item f as function item item as item as item properties this function is deterministic context-independent and focus-independent rules the effect of the function is equivalent to the following implementation in xquery declare function fn for-each-pair seq1 seq2 f if fn exists seq1 and fn exists seq2 then f fn head seq1 fn head seq2 fn for-each-pair fn tail seq1 fn tail seq2 f else or its equivalent in xslt xsl function name fn for-each-pair xsl param name seq1 xsl param name seq2 xsl param name f xsl if test fn exists seq1 and fn exists seq2 xsl sequence select f fn head seq1 fn head seq2 xsl sequence select fn for-each-pair fn tail seq1 fn tail seq2 f xsl if xsl function examples the expression fn for-each-pair a b c x y z concat#2 returns ax by cz the expression fn for-each-pair 1 to 5 1 to 5 function a b 10 a b returns 11 22 33 44 55 17 constructor functions 17.1 constructor functions for xml schema built-in atomic types every built-in atomic type that is defined in xml schema part 2 datatypes second edition except xs anyatomictype and xs notation has an associated constructor function. the type xs untypedatomic defined in section 2.7 schema information dm30 and the two derived types xs yearmonthduration and xs daytimeduration defined in section 2.7 schema information dm30 also have associated constructor functions. implementations may additionally provide a constructor functions for the new data type xs datetimestamp introduced in schema 1.1 part 2 a constructor function is not defined for xs anyatomictype as there are no atomic values with type annotation xs anyatomictype at runtime although this can be a statically inferred type. a constructor function is not defined for xs notation since it is defined as an abstract type in xml schema part 2 datatypes second edition if the static context see section 2.1.1 static context xp30 contains a type derived from xs notation then a constructor function is defined for it. see 17.5 constructor functions for user-defined types. the form of the constructor function for an atomic type eg type is eg type arg as xs anyatomictype as eg type if arg is the empty sequence the empty sequence is returned. for example the signature of the constructor function corresponding to the xs unsignedint type defined in xml schema part 2 datatypes second edition is xs unsignedint arg as xs anyatomictype as xs unsignedint calling the constructor function xs unsignedint 12 returns the xs unsignedint value 12. another call of that constructor function that returns the same xs unsignedint value is xs unsignedint 12 the same result would also be returned if the constructor function were to be called with a node that had a typed value equal to the xs unsignedint 12. the standard features described in section 2.4.2 atomization xp30 would atomize the node to extract its typed value and then call the constructor with that value. if the value passed to a constructor is not in the lexical space of the datatype to be constructed and cannot be converted to a value in the value space of the datatype under the rules in this specification then an dynamic error is raised err forg0001 the semantics of the constructor function xs type arg are identical to the semantics of arg cast as xs type see 18 casting. if the argument to a constructor function is a literal the result of the function may be evaluated statically if an error is found during such evaluation it may be reported as a static error. special rules apply to constructor functions for xs qname and types derived from xs qname and xs notation. see 17.2 constructor functions for xs qname and xs notation. the following constructor functions for the built-in atomic types are supported xs string arg as xs anyatomictype as xs string xs boolean arg as xs anyatomictype as xs boolean xs decimal arg as xs anyatomictype as xs decimal xs float arg as xs anyatomictype as xs float implementations should return negative zero for xs float 0.0e0 but because xml schema part 2 datatypes second edition does not distinguish between the values positive zero and negative zero. implementations may return positive zero in this case. xs double arg as xs anyatomictype as xs double implementations should return negative zero for xs double 0.0e0 but because xml schema part 2 datatypes second edition does not distinguish between the values positive zero and negative zero. implementations may return positive zero in this case. xs duration arg as xs anyatomictype as xs duration xs datetime arg as xs anyatomictype as xs datetime xs time arg as xs anyatomictype as xs time xs date arg as xs anyatomictype as xs date xs gyearmonth arg as xs anyatomictype as xs gyearmonth xs gyear arg as xs anyatomictype as xs gyear xs gmonthday arg as xs anyatomictype as xs gmonthday xs gday arg as xs anyatomictype as xs gday xs gmonth arg as xs anyatomictype as xs gmonth xs hexbinary arg as xs anyatomictype as xs hexbinary xs base64binary arg as xs anyatomictype as xs base64binary xs anyuri arg as xs anyatomictype as xs anyuri xs qname arg as xs anyatomictype as xs qname see 17.2 constructor functions for xs qname and xs notation for special rules. xs normalizedstring arg as xs anyatomictype as xs normalizedstring xs token arg as xs anyatomictype as xs token xs language arg as xs anyatomictype as xs language xs nmtoken arg as xs anyatomictype as xs nmtoken xs name arg as xs anyatomictype as xs name xs ncname arg as xs anyatomictype as xs ncname xs id arg as xs anyatomictype as xs id xs idref arg as xs anyatomictype as xs idref xs entity arg as xs anyatomictype as xs entity see 18.1.9 casting to xs entity for rules related to constructing values of type xs entity and types derived from it. xs integer arg as xs anyatomictype as xs integer xs nonpositiveinteger arg as xs anyatomictype as xs nonpositiveinteger xs negativeinteger arg as xs anyatomictype as xs negativeinteger xs long arg as xs anyatomictype as xs long xs int arg as xs anyatomictype as xs int xs short arg as xs anyatomictype as xs short xs byte arg as xs anyatomictype as xs byte xs nonnegativeinteger arg as xs anyatomictype as xs nonnegativeinteger xs unsignedlong arg as xs anyatomictype as xs unsignedlong xs unsignedint arg as xs anyatomictype as xs unsignedint xs unsignedshort arg as xs anyatomictype as xs unsignedshort xs unsignedbyte arg as xs anyatomictype as xs unsignedbyte xs positiveinteger arg as xs anyatomictype as xs positiveinteger xs yearmonthduration arg as xs anyatomictype as xs yearmonthduration xs daytimeduration arg as xs anyatomictype as xs daytimeduration xs untypedatomic arg as xs anyatomictype as xs untypedatomic xs datetimestamp arg as xs anyatomictype as xs datetimestamp available only if the implementation supports xsd 1.1. 17.2 constructor functions for xs qname and xs notation special rules apply to constructor functions for the types xs qname and xs notation for two reasons values cannot belong directly to the type xs notation only to its subtypes. the lexical representation of these types uses namespace prefixes whose meaning is context-dependent. these constraints result in the following rules there is no constructor function for xs notation. constructors are defined however for xs qname for types derived or constructed from xs qname and for types derived or constructed from xs notation. when converting from an xs string the prefix within the lexical xs qname supplied as the argument is resolved to a namespace uri using the statically known namespaces from the static context. if the lexical xs qname has no prefix the namespace uri of the resulting expanded-qname is the default element type namespace from the static context. components of the static context are defined in section 2.1.1 static context xp30. a dynamic error is raised err fons0004 if the prefix is not bound in the static context. as described in section 2.1 terminology dm30 the supplied prefix is retained as part of the expanded-qname value. when a constructor function for a namespace-sensitive type is used as a literal function item or in a partial function application for example fn qname#1 or fn qname the namespace bindings that are relevant are those from the static context of the literal function item or partial function application. when a constructor function for a namespace-sensitive type is obtained by means of the fn function-lookup function the relevant namespace bindings are those from the static context of the call on fn function-lookup. note when the supplied argument to the xs qname constructor function is a node the node is atomized in the usual way and if the result is xs untypedatomic it is then converted as if a string had been supplied. the effect might not be what is desired. for example given the attribute xsi type my type the expression xs qname xsi type might fail on the grounds that the prefix my is undeclared. this is because the namespace bindings are taken from the static context that is from the query or stylesheet and not from the source document containing the xsi type attribute. the solution to this problem is to use the function call resolve-qname xsi type instead. 17.3 constructor functions for xml schema built-in list types each of the three built-in list types defined in xml schema part 2 datatypes second edition namely xs nmtokens xs entities and xs idrefs has an associated constructor function. the function signatures are as follows xs nmtokens arg as xs anyatomictype as xs nmtoken xs entities arg as xs anyatomictype as xs entity xs idrefs arg as xs anyatomictype as xs idref the semantics are equivalent to casting to the corresponding types from xs string. all three of these types have the facet minlength 1 meaning that there must always be at least one item in the list. the return type however allows for the fact that when the argument to the function is an empty sequence the result is an empty sequence. note in the case of atomic types it is possible to use an expression such as xs date date-of-birth to convert an attribute value to an instance of xs date knowing that this will work both in the case where the attribute is already annotated as xs date and also in the case where it is xs untypedatomic. this approach does not work with list types because it is not permitted to use a value of type xs nmtoken as input to the constructor function xs nmtokens. instead it is necessary to use conditional logic that performs the conversion only in the case where the input is untyped if x instance of attribute xs untypedatomic then xs nmtokens x else data x 17.4 constructor functions for xml schema built-in union types in the case of an implementation that supports xsd 1.1 there is a constructor function associated with the built-in union type xs error. the function signature is as follows xs error arg as xs anyatomictype as xs error the semantics are equivalent to casting to the corresponding union type see 18.3.5 casting to union types note because xs error has no member types and therefore has an empty value space casting will always fail with a dynamic error except in the case where the supplied argument is an empty sequence in which case the result is also an empty sequence. 17.5 constructor functions for user-defined types for every user-defined simple type in the static context see section 2.1.1 static context xp30 there is a constructor function whose name is the same as the name of the type and whose effect is to create a value of that type from the supplied argument. the rules for constructing user-defined types are defined in the same way as the rules for constructing built-in derived types defined in 17.1 constructor functions for xml schema built-in atomic types. special rules apply to constructor functions for namespace-sensitive types that is atomic types derived from xs qname and xs notation list types that have a namespace-sensitive item type and union types that have a namespace-sensitive member type. see 17.2 constructor functions for xs qname and xs notation. consider a situation where the static context contains an atomic type called hatsize defined in a schema whose target namespace is bound to the prefix eg. in such a case the following constructor function is available to users eg hatsize arg as xs anyatomictype as my hatsize in the case of an atomic type a the return type of the function is a reflecting the fact that the result will be an empty sequence if the input is an empty sequence. for a union or list type the return type of the function is specified only as xs anyatomictype implementations performing static type checking will often be able to compute a more specific result type. for example if the target type is a list type whose item type is the atomic type a the result will always be an instance of a if the target type is a pure union type u then the result will always be an instance of u in general however applications needing interoperable behavior on implementations that do strict static type checking will need to use a treat as expression to assert the specific type of the result. to construct an instance of a user-defined type that is not in a namespace it is necessary to use a cast expression or undeclare the default function namespace. for example if the user-defined type apple is derived from xs integer but is not in a namespace an instance of this type can be constructed as follows using a cast expression this requires that the default element type namespace is no namespace 17 cast as apple the following shows the use of the constructor function declare default function namespace apple 17 18 casting constructor functions and cast expressions accept an expression and return a value of a given type. they both convert a source value sv of a source type st to a target value tv of the given target type tt with identical semantics and different syntax. the name of the constructor function is the same as the name of the built-in xml schema part 2 datatypes second edition datatype or the datatype defined in section 2.7 schema information dm30 of xquery and xpath data model xdm 3.0 see 17.1 constructor functions for xml schema built-in atomic types or the user-derived datatype see 17.5 constructor functions for user-defined types that is the target for the conversion and the semantics are exactly the same as for a cast expression for example xs date 2003-01-01 means exactly the same as 2003-01-01 cast as xs date the cast expression takes a type name to indicate the target type of the conversion. see section 3.13.2 cast xp30. if the type name allows the empty sequence and the expression to be cast is the empty sequence the empty sequence is returned. if the type name does not allow the empty sequence and the expression to be cast is the empty sequence a type error is raised err xpty0004 xp30. where the argument to a cast is a literal the result of the function may be evaluated statically if an error is encountered during such evaluation it may be reported as a static error. the general rules for casting from primitive types to primitive types are defined in 18.1 casting from primitive types to primitive types and subsections describe the rules for specific target types. the general rules for casting from xs string and xs untypedatomic follow in 18.2 casting from xs string and xs untypedatomic. casting to non-primitive types including atomic types derived by resctriction union types and list types is described in 18.3 casting involving non-primitive types. casting from derived types is defined in 18.3.2 casting from derived types to parent types 18.3.3 casting within a branch of the type hierarchy and 18.3.4 casting across the type hierarchy. when casting from xs string or xs untypedatomic the semantics in 18.2 casting from xs string and xs untypedatomic apply regardless of target type. 18.1 casting from primitive types to primitive types this section defines casting between the 19 primitive types defined in xml schema part 2 datatypes second edition as well as xs untypedatomic xs integer and the two derived types of xs duration xs yearmonthduration and xs daytimeduration these four types are not primitive types but they are treated as primitive types in this section. the type conversions that are supported between primitive atomic types are indicated in the table below casts between other non-primitive types are defined in terms of these primitives. in this table there is a row for each primitive type acting as the source of the conversion and there is a column for each primitive type acting as the target of the conversion. the intersections of rows and columns contain one of three characters y indicates that a conversion from values of the type to which the row applies to the type to which the column applies is supported n indicates that there are no supported conversions from values of the type to which the row applies to the type to which the column applies and m indicates that a conversion from values of the type to which the row applies to the type to which the column applies may succeed for some values in the value space and fail for others. xml schema part 2 datatypes second edition defines xs notation as an abstract type. thus casting to xs notation from any other type including xs notation is not permitted and raises a static error err xpst0080 xp30. however casting from one subtype of xs notation to another subtype of xs notation is permitted. casting is not supported to or from xs anysimpletype. thus there is no row or column for this type in the table below. for any node that has not been validated or has been validated as xs anysimpletype the typed value of the node is an atomic value of type xs untypedatomic. there are no atomic values with the type annotation xs anysimpletype at runtime. casting to xs anysimpletype is not permitted and raises a static error err xpst0080 xp30. similarly casting is not supported to or from xs anyatomictype and will raise a static error err xpst0080 xp30. there are no atomic values with the type annotation xs anyatomictype at runtime although this can be a statically inferred type. if casting is attempted from an st to a tt for which casting is not supported as defined in the table below a type error is raised err xpty0004 xp30. in the following table the columns and rows are identified by short codes that identify simple types as follows ua xs untypedatomic auri xs anyuri b64 xs base64binary bool xs boolean dat xs date gday xs gday dbl xs double dec xs decimal dt xs datetime dtd xs daytimeduration dur xs duration flt xs float hxb xs hexbinary gmd xs gmonthday gmon xs gmonth int xs integer not xs notation qn xs qname str xs string tim xs time gym xs gyearmonth ymd xs yearmonthduration gyr xs gyear in the following table the notation s t indicates that the source s of the conversion is indicated in the column below the notation and that the target t is indicated in the row to the right of the notation. s t ua str flt dbl dec int dur ymd dtd dt tim dat gym gyr gmd gday gmon bool b64 hxb auri qn not ua y y m m m m m m m m m m m m m m m m m m m m m str y y m m m m m m m m m m m m m m m m m m m m m flt y y y y m m n n n n n n n n n n n y n n n n n dbl y y y y m m n n n n n n n n n n n y n n n n n dec y y y y y y n n n n n n n n n n n y n n n n n int y y y y y y n n n n n n n n n n n y n n n n n dur y y n n n n y y y n n n n n n n n n n n n n n ymd y y n n n n y y y n n n n n n n n n n n n n n dtd y y n n n n y y y n n n n n n n n n n n n n n dt y y n n n n n n n y y y y y y y y n n n n n n tim y y n n n n n n n n y n n n n n n n n n n n n dat y y n n n n n n n y n y y y y y y n n n n n n gym y y n n n n n n n n n n y n n n n n n n n n n gyr y y n n n n n n n n n n n y n n n n n n n n n gmd y y n n n n n n n n n n n n y n n n n n n n n gday y y n n n n n n n n n n n n n y n n n n n n n gmon y y n n n n n n n n n n n n n n y n n n n n n bool y y y y y y n n n n n n n n n n n y n n n n n b64 y y n n n n n n n n n n n n n n n n y y n n n hxb y y n n n n n n n n n n n n n n n n y y n n n auri y y n n n n n n n n n n n n n n n n n n y n n qn y y n n n n n n n n n n n n n n n n n n n y m not y y n n n n n n n n n n n n n n n n n n n y m 18.1.1 casting to xs string and xs untypedatomic casting is permitted from any primitive type to the primitive types xs string and xs untypedatomic. when a value of any simple type is cast as xs string the derivation of the xs string value tv depends on the st and on the sv as follows. if st is xs string or a type derived from xs string tv is sv. if st is xs anyuri the type conversion is performed without escaping any characters. if st is xs qname or xs notation if the qualified name has a prefix then tv is the concatenation of the prefix of sv a single colon and the local name of sv. otherwise tv is the local-name. if st is a numeric type the following rules apply if st is xs integer tv is the canonical lexical representation of sv as defined in xml schema part 2 datatypes second edition there is no decimal point. if st is xs decimal then if sv is in the value space of xs integer that is if there are no significant digits after the decimal point then the value is converted from an xs decimal to an xs integer and the resulting xs integer is converted to an xs string using the rule above. otherwise the canonical lexical representation of sv is returned as defined in xml schema part 2 datatypes second edition if st is xs float or xs double then tv will be an xs string in the lexical space of xs double or xs float that when converted to an xs double or xs float under the rules of 18.2 casting from xs string and xs untypedatomic produces a value that is equal to sv or is nan if sv is nan. in addition tv must satisfy the constraints in the following sub-bullets. if sv has an absolute value that is greater than or equal to 0.000001 one millionth and less than 1000000 one million then the value is converted to an xs decimal and the resulting xs decimal is converted to an xs string according to the rules above as though using an implementation of xs decimal that imposes no limits on the totaldigits or fractiondigits facets. if sv has the value positive or negative zero tv is 0 or 0 respectively. if sv is positive or negative infinity tv is the string inf or inf respectively. in other cases the result consists of a mantissa which has the lexical form of an xs decimal followed by the letter e followed by an exponent which has the lexical form of an xs integer. leading zeroes and signs are prohibited in the exponent. for the mantissa there must be a decimal point and there must be exactly one digit before the decimal point which must be non-zero. the sign is prohibited. there must be at least one digit after the decimal point. apart from this mandatory digit trailing zero digits are prohibited. note the above rules allow more than one representation of the same value. for example the xs float value whose exact decimal representation is 1.26743223e15 might be represented by any of the strings 1.26743223e15 1.26743222e15 or 1.26743224e15 inter alia it is implementation-dependent which of these representations is chosen. if st is xs datetime xs date or xs time tv is the local value. the components of tv are individually cast to xs string using the functions described in casting-to-datetimes and the results are concatenated together. the year component is cast to xs string using eg convertyeartostring. the month day hour and minute components are cast to xs string using eg convertto2charstring. the second component is cast to xs string using eg convertsecondstostring. the timezone component if present is cast to xs string using eg converttztostring. note that the hours component of the resulting string will never be 24 midnight is always represented as 00 00 00 if st is xs yearmonthduration or xs daytimeduration tv is the canonical representation of sv as defined in 8.1.1 xs yearmonthduration or 8.1.2 xs daytimeduration respectively. if st is xs duration then let sym be sv cast as xs yearmonthduration and let sdt be sv cast as xs daytimeduration now let the next intermediate value tym be sym cast as tt and let tdt be sdt cast as tt if tym is p0m then tv is tdt. otherwise tym and tdt are merged according to the following rules if tdt is pt0s then tv is tym. otherwise tv is the concatenation of all the characters in tym and all the characters except the first p and the optional negative sign in tdt. in all other cases tv is the xml schema part 2 datatypes second edition canonical representation of sv. for datatypes that do not have a canonical lexical representation defined an implementation dependent canonical representation may be used. to cast as xs untypedatomic the value is cast as xs string as described above and the type annotation changed to xs untypedatomic. note the string representations of numeric values are backwards compatible with xpath 1.0 except for the special values positive and negative infinity negative zero and values outside the range 1.0e-6 to 1.0e+6. 18.1.2 casting to numeric types 18.1.2.1 casting to xs float when a value of any simple type is cast as xs float the xs float tv is derived from the st and the sv as follows if st is xs float then tv is sv and the conversion is complete. if st is xs double then tv is obtained as follows if sv is the xs double value inf inf nan positive zero or negative zero then tv is the xs float value inf inf nan positive zero or negative zero respectively. otherwise sv can be expressed in the form m 2 e where the mantissa m and exponent e are signed xs integers whose value range is defined in xml schema part 2 datatypes second edition and the following rules apply if m the mantissa of sv is outside the permitted range for the mantissa of an xs float value 2 24-1 to 2 24-1 then it is divided by 2 n where n is the lowest positive xs integer that brings the result of the division within the permitted range and the exponent e is increased by n. this is integer division in effect the binary value of the mantissa is truncated on the right let m be the mantissa and e the exponent after this adjustment. if e exceeds 104 the maximum exponent value in the value space of xs float then tv is the xs float value inf or inf depending on the sign of m. if e is less than 149 the minimum exponent value in the value space of xs float then tv is the xs float value positive or negative zero depending on the sign of m otherwise tv is the xs float value m 2 e. if st is xs decimal or xs integer then tv is xs float sv cast as xs string and the conversion is complete. if st is xs boolean sv is converted to 1.0e0 if sv is true and to 0.0e0 if sv is false and the conversion is complete. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. note xsd 1.1 adds the value inf to the lexical space as an alternative to inf. xsd 1.1 also adds negative zero to the value space. note implementations should return negative zero for xs float 0.0e0 but because xml schema part 2 datatypes second edition does not distinguish between the values positive zero and negative zero. implementations may return positive zero in this case. 18.1.2.2 casting to xs double when a value of any simple type is cast as xs double the xs double value tv is derived from the st and the sv as follows if st is xs double then tv is sv and the conversion is complete. if st is xs float or a type derived from xs float then tv is obtained as follows if sv is the xs float value inf inf nan positive zero or negative zero then tv is the xs double value inf inf nan positive zero or negative zero respectively. otherwise sv can be expressed in the form m 2 e where the mantissa m and exponent e are signed xs integer values whose value range is defined in xml schema part 2 datatypes second edition and tv is the xs double value m 2 e. if st is xs decimal or xs integer then tv is xs double sv cast as xs string and the conversion is complete. if st is xs boolean sv is converted to 1.0e0 if sv is true and to 0.0e0 if sv is false and the conversion is complete. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. note xsd 1.1 adds the value inf to the lexical space as an alternative to inf. xsd 1.1 also adds negative zero to the value space. note implementations should return negative zero for xs double 0.0e0 but because xml schema part 2 datatypes second edition does not distinguish between the values positive zero and negative zero. implementations may return positive zero in this case. 18.1.2.3 casting to xs decimal when a value of any simple type is cast as xs decimal the xs decimal value tv is derived from st and sv as follows if st is xs decimal xs integer or a type derived from them then tv is sv converted to an xs decimal value if need be and the conversion is complete. if st is xs float or xs double then tv is the xs decimal value within the set of xs decimal values that the implementation is capable of representing that is numerically closest to sv. if two values are equally close then the one that is closest to zero is chosen. if sv is too large to be accommodated as an xs decimal see xml schema part 2 datatypes second edition for implementation-defined limits on numeric values a dynamic error is raised err foca0001 if sv is one of the special xs float or xs double values nan inf or inf a dynamic error is raised err foca0002 if st is xs boolean sv is converted to 1.0 if sv is 1 or true and to 0.0 if sv is 0 or false and the conversion is complete. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. 18.1.2.4 casting to xs integer when a value of any simple type is cast as xs integer the xs integer value tv is derived from st and sv as follows if st is xs integer or a type derived from xs integer then tv is sv converted to an xs integer value if need be and the conversion is complete. if st is xs decimal xs float or xs double then tv is sv with the fractional part discarded and the value converted to xs integer. thus casting 3.1456 returns 3 and 17.89 returns 17. casting 3.124e1 returns 31. if sv is too large to be accommodated as an integer see xml schema part 2 datatypes second edition for implementation-defined limits on numeric values a dynamic error is raised err foca0003 if sv is one of the special xs float or xs double values nan inf or inf a dynamic error is raised err foca0002 if st is xs boolean sv is converted to 1 if sv is 1 or true and to 0 if sv is 0 or false and the conversion is complete. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. 18.1.3 casting to duration types when a value of type xs untypedatomic xs string a type derived from xs string xs yearmonthduration or xs daytimeduration is cast as xs duration xs yearmonthduration or xs daytimeduration tv is derived from st and sv as follows if st is the same as tt then tv is sv. if st is xs duration or a type derived from xs duration but not xs daytimeduration or a type derived from xs daytimeduration and tt is xs yearmonthduration then tv is derived from sv by removing the day hour minute and second components from sv. if st is xs duration or a type derived from duration but not xs yearmonthduration or a type derived from xs yearmonthduration and tt is xs daytimeduration then tv is derived from sv by removing the year and month components from sv. if st is xs yearmonthduration or xs daytimeduration and tt is xs duration then tv is derived from sv as defined in 18.3.2 casting from derived types to parent types. if st is xs yearmonthduration and tt is xs daytimeduration the cast is permitted and returns a xs daytimeduration with value 0.0 seconds. if st is xs daytimeduration and tt is xs yearmonthduration the cast is permitted and returns a xs yearmonthduration with value 0 months. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. note that casting from xs duration to xs yearmonthduration or xs daytimeduration loses information. to avoid this users can cast the xs duration value to both an xs yearmonthduration and an xs daytimeduration and work with both values. 18.1.4 casting to date and time types in several situations casting to date and time types requires the extraction of a component from sv or from the result of fn current-datetime and converting it to an xs string. these conversions must follow certain rules. for example converting an xs integer year value requires converting to an xs string with four or more characters preceded by a minus sign if the value is negative. this document defines four functions to perform these conversions. these functions are for illustrative purposes only and make no recommendations as to style or efficiency. references to these functions from the following text are not normative. the arguments to these functions come from functions defined in this document. thus the functions below assume that they are correct and do no range checking on them. declare function eg convertyeartostring year as xs integer as xs string let plusminus if year 0 then else let yearstring fn abs year cast as xs string let length fn string-length yearstring return if length 1 then fn concat plusminus 000 yearstring else if length 2 then fn concat plusminus 00 yearstring else if length 3 then fn concat plusminus 0 yearstring else fn concat plusminus yearstring declare function eg convertto2charstring value as xs integer as xs string let string value cast as xs string return if fn string-length string 1 then fn concat 0 string else string declare function eg convertsecondstostring seconds as xs decimal as xs string let string seconds cast as xs string let intlength fn string-length seconds cast as xs integer cast as xs string return if intlength 1 then fn concat 0 string else string declare function eg converttztostring tz as xs daytimeduration as xs string if empty tz then else if tz eq xs daytimeduration pt0s then z else let tzh fn hours-from-duration tz let tzm fn minutes-from-duration tz let plusminus if tzh 0 then else let tzhstring eg convertto2charstring fn abs tzh let tzmstring eg convertto2charstring fn abs tzm return fn concat plusminus tzhstring tzmstring conversion from primitive types to date and time types follows the rules below. when a value of any primitive type is cast as xs datetime the xs datetime value tv is derived from st and sv as follows if st is xs datetime then tv is sv. if st is xs date then let syr be eg convertyeartostring fn year-from-date sv let smo be eg convertto2charstring fn month-from-date sv let sda be eg convertto2charstring fn day-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs datetime fn concat syr smo sda t00 00 00 stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs time the xs time value tv is derived from st and sv as follows if st is xs time then tv is sv. if st is xs datetime then tv is xs time fn concat eg convertto2charstring fn hours-from-datetime sv eg convertto2charstring fn minutes-from-datetime sv eg convertsecondstostring fn seconds-from-datetime sv eg converttztostring fn timezone-from-datetime sv if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs date the xs date value tv is derived from st and sv as follows if st is xs date then tv is sv. if st is xs datetime then let syr be eg convertyeartostring fn year-from-datetime sv let smo be eg convertto2charstring fn month-from-datetime sv let sda be eg convertto2charstring fn day-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs date fn concat syr smo sda stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs gyearmonth the xs gyearmonth value tv is derived from st and sv as follows if st is xs gyearmonth then tv is sv. if st is xs datetime then let syr be eg convertyeartostring fn year-from-datetime sv let smo be eg convertto2charstring fn month-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs gyearmonth fn concat syr smo stz if st is xs date then let syr be eg convertyeartostring fn year-from-date sv let smo be eg convertto2charstring fn month-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs gyearmonth fn concat syr smo stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs gyear the xs gyear value tv is derived from st and sv as follows if st is xs gyear then tv is sv. if st is xs datetime let syr be eg convertyeartostring fn year-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs gyear fn concat syr stz if st is xs date let syr be eg convertyeartostring fn year-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs gyear fn concat syr stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs gmonthday the xs gmonthday value tv is derived from st and sv as follows if st is xs gmonthday then tv is sv. if st is xs datetime then let smo be eg convertto2charstring fn month-from-datetime sv let sda be eg convertto2charstring fn day-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs gyearmonth fn concat smo sda stz if st is xs date then let smo be eg convertto2charstring fn month-from-date sv let sda be eg convertto2charstring fn day-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs gyearmonth fn concat smo sda stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs gday the xs gday value tv is derived from st and sv as follows if st is xs gday then tv is sv. if st is xs datetime then let sda be eg convertto2charstring fn day-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs gday fn concat sda stz if st is xs date then let sda be eg convertto2charstring fn day-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs gday fn concat sda stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. when a value of any primitive type is cast as xs gmonth the xs gmonth value tv is derived from st and sv as follows if st is xs gmonth then tv is sv. if st is xs datetime then let smo be eg convertto2charstring fn month-from-datetime sv and let stz be eg converttztostring fn timezone-from-datetime sv tv is xs gmonth fn concat smo stz if st is xs date then let smo be eg convertto2charstring fn month-from-date sv and let stz be eg converttztostring fn timezone-from-date sv tv is xs gmonth fn concat smo stz if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. 18.1.5 casting to xs boolean when a value of any primitive type is cast as xs boolean the xs boolean value tv is derived from st and sv as follows if st is xs boolean then tv is sv. if st is xs float xs double xs decimal or xs integer and sv is 0 0 0 0.0 0.0e0 or nan then tv is false. if st is xs float xs double xs decimal or xs integer and sv is not one of the above values then tv is true. if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. 18.1.6 casting to xs base64binary and xs hexbinary values of type xs base64binary can be cast as xs hexbinary and vice versa since the two types have the same value space. casting to xs base64binary and xs hexbinary is also supported from the same type and from xs untypedatomic xs string and subtypes of xs string using xml schema part 2 datatypes second edition semantics. 18.1.7 casting to xs anyuri casting to xs anyuri is supported only from the same type xs untypedatomic or xs string. when a value of any primitive type is cast as xs anyuri the xs anyuri value tv is derived from the st and sv as follows if st is xs untypedatomic or xs string see 18.2 casting from xs string and xs untypedatomic. 18.1.8 casting to xs qname and xs notation casting from xs string or xs untypedatomic to xs qname or xs notation is described in 18.2 casting from xs string and xs untypedatomic. it is also possible to cast from xs notation to xs qname or from xs qname to any type derived by restriction from xs notation. casting to xs notation itself is not allowed because xs notation is an abstract type. the resulting xs qname or xs notation has the same prefix local name and namespace uri parts as the supplied value. note see 17.2 constructor functions for xs qname and xs notation for a discussion of how the combination of atomization and casting might not produce the desired effect. 18.1.9 casting to xs entity xml schema part 2 datatypes second edition says that the value space of entity is the set of all strings that match the ncname production and have been declared as an unparsed entity in a document type definition. however xsl transformations xslt version 3.0 and xquery 3.0 an xml query language do not check that constructed values of type xs entity match declared unparsed entities. thus this rule is relaxed in this specification and in casting to xs entity and types derived from it no check is made that the values correspond to declared unparsed entities. 18.2 casting from xs string and xs untypedatomic this section applies when the supplied value sv is an instance of xs string or xs untypedatomic including types derived from these by restriction. if the value is xs untypedatomic it is treated in exactly the same way as a string containing the same sequence of characters. the supplied string is mapped to a typed value of the target type as defined in xml schema part 2 datatypes second edition whitespace normalization is applied as indicated by the whitespace facet for the datatype. the resulting whitespace-normalized string must be a valid lexical form for the datatype. the semantics of casting follow the rules of xml schema validation. for example 13 cast as xs unsignedint returns the xs unsignedint typed value 13. this could also be written xs unsignedint 13 the target type can be any simple type other than an abstract type. specifically it can be a type whose variety is atomic union or list. in each case the effect of casting to the target type is the same as constructing an element with the supplied value as its content validating the element using the target type as the governing type and atomizing the element to obtain its typed value. when the target type is a derived type that is restricted by a pattern facet the lexical form is first checked against the pattern before further casting is attempted see 18.3.1 casting to derived types if the lexical form does not conform to the pattern a dynamic error err forg0001 is raised. for example consider a user-defined type my boolean which is derived by restriction from xs boolean and specifies the pattern facet value 0 1 the expression true cast as my boolean would fail with a dynamic error err forg0001 facets other than pattern are checked after the conversion. for example if there is a user-defined datatype called my height defined as a restriction of xs integer with the facet maxinclusive value 84 then the expression 100 cast as my height would fail with a dynamic error err forg0001 casting to the types xs notation xs anysimpletype or xs anyatomictype is not permitted because these types are abstract they have no immediate instances special rules apply when casting to namespace-sensitive types. the types xs qname and xs notation are namespace-sensitive. any type derived by restriction from a namespace-sensitive type is itself namespace-sensitive as is any union type having a namespace-sensitive type among its members and any list type having a namespace-sensitive type as its item type. for details see 17.2 constructor functions for xs qname and xs notation. note this version of the specification allows casting between xs qname and xs notation in either direction this was not permitted in the previous recommendation. this version also removes the rule that only a string literal rather than a dynamic string may be cast to an xs qname when casting to a numeric type if the value is too large or too small to be accurately represented by the implementation it is handled as an overflow or underflow as defined in 4.2 arithmetic operators on numeric values. if the target type is xs float or xs double the string 0 and equivalents such as 0.0 or 000 should be converted to the value negative zero. however if the implementation is reliant on an implementation of xml schema 1.0 in which negative zero is not part of the value space for these types these lexical forms may be converted to positive zero. in casting to xs decimal or to a type derived from xs decimal if the value is not too large or too small but nevertheless cannot be represented accurately with the number of decimal digits available to the implementation the implementation may round to the nearest representable value or may raise a dynamic error err foca0006 the choice of rounding algorithm and the choice between rounding and error behavior and is implementation-defined in casting to xs date xs datetime xs gyear or xs gyearmonth or types derived from these if the value is too large or too small to be represented by the implementation a dynamic error err fodt0001 is raised. in casting to a duration value if the value is too large or too small to be represented by the implementation a dynamic error err fodt0002 is raised. for xs anyuri the extent to which an implementation validates the lexical form of xs anyuri is implementation dependent if the cast fails for any other reason a dynamic error err forg0001 is raised. 18.3 casting involving non-primitive types casting from xs string and xs untypedatomic to any other type primitive or non-primitive has been described in 18.2 casting from xs string and xs untypedatomic. this section defines how other casts to non-primitive types operate including casting to types derived by restriction to union types and to list types. 18.3.1 casting to derived types casting a value to a derived type can be separated into four cases. note that xs untypedatomic xs integer and the two derived types of xs duration xs yearmonthduration and xs daytimeduration are treated as primitive types. when sv is an instance of a type that is derived by restriction from tt. this is described in section 18.3.2 casting from derived types to parent types. when sv is an instance of a type derived by restriction from the same primitive type as tt. this is described in 18.3.3 casting within a branch of the type hierarchy. when the derived type is derived directly or indirectly from a different primitive type than the primitive type of st. this is described in 18.3.4 casting across the type hierarchy. when sv is an immediate instance of tt the cast always succeeds returning sv unchanged. 18.3.2 casting from derived types to parent types it is always possible to cast an atomic value a to a type t if the relation a instance of t is true provided that t is not an abstract type. for example it is possible to cast an xs unsignedshort to an xs unsignedint to an xs integer to an xs decimal or to a union type whose member types are xs integer and xs double. since the value space of the original type is a subset of the value space of the target type such a cast is always successful. for the expression a instance of t to be true t must be either an atomic type or a union type that has no constraining facets. it cannot be a list type nor a union type derived by restriction from another union type nor a union type that has a list type among its member types. the result will have the same value as the original but will have a new type annotation if t is an atomic type then the type annotation of the result is t. if t is a union type then the type of the result is an atomic type m such that m is one of the atomic types in the transitive membership of the union type t and a instance of m is true if there is more than one type m that satisfies these conditions which could happen for example if t is the union of two overlapping types such as xs int and xs positiveinteger then the first one is used taking the member types in the order in which they appear within the definition of the union type. 18.3.3 casting within a branch of the type hierarchy it is possible to cast an sv to a tt if the type of the sv and the tt type are both derived by restriction directly or indirectly from the same primitive type provided that the supplied value conforms to the constraints implied by the facets of the target type. this includes the case where the target type is derived from the type of the supplied value as well as the case where the type of the supplied value is derived from the target type. for example an instance of xs byte can be cast as xs unsignedshort provided the value is not negative. if the value does not conform to the facets defined for the target type then a dynamic error is raised err forg0001 see xml schema part 2 datatypes second edition in the case of the pattern facet which applies to the lexical space rather than the value space the pattern is tested against the canonical lexical representation of the value as defined for the source type or the result of casting the value to an xs string in the case of types that have no canonical lexical representation defined for them note that this will cause casts to fail if the pattern excludes the canonical lexical representation of the source type. for example if the type my distance is defined as a restriction of xs decimal with a pattern that requires two digits after the decimal point casting of an xs integer to my distance will always fail because the canonical representation of an xs integer does not conform to this pattern. in some cases casting from a parent type to a derived type requires special rules. see 18.1.3 casting to duration types for rules regarding casting to xs yearmonthduration and xs daytimeduration. see 18.1.9 casting to xs entity below for casting to xs entity and types derived from it. 18.3.4 casting across the type hierarchy when the st and the tt are derived directly or indirectly from different primitive types this is called casting across the type hierarchy. casting across the type hierarchy is logically equivalent to three separate steps performed in order. errors can occur in either of the latter two steps. cast the sv up the hierarchy to the primitive type of the source as described in 18.3.2 casting from derived types to parent types. if sv is an instance of xs string or xs untypedatomic check its value against the pattern facet of tt and raise a dynamic error err forg0001 if the check fails. cast the value to the primitive type of tt as described in 18.1 casting from primitive types to primitive types. if tt is derived from xs notation assume for the purposes of this rule that casting to xs notation succeeds. cast the value down to the tt as described in 18.3.3 casting within a branch of the type hierarchy 18.3.5 casting to union types if the target type of a cast expression or a constructor function is a type with variety union the supplied value must be one of the following a value of type xs string or xs untypedatomic. this case follows the general rules for casting from strings and has already been described in 18.2 casting from xs string and xs untypedatomic. if the union type has a pattern facet the pattern is tested against the supplied value after whitespace normalization using the whitespace normalization rules of the member datatype against which validation succeeds. a value that is an instance of one of the atomic types in the transitive membership of the union type and of the union type itself. this case has already been described in 18.3.2 casting from derived types to parent types this situation only applies when the value is an instance of the union type which means it will never apply when the union is derived by facet-based restriction from another union type. a value that is castable to one or more of the atomic types in the transitive membership of the union type in the sense that the castable as operator returns true in this case the supplied value is cast to each atomic type in the transitive membership of the union type in turn in the order in which the member types appear in the declaration until one of these casts is successful if none of them is successful a dynamic error occurs err forg0001 if the union type has constraining facets then the resulting value must satisfy these facets otherwise a dynamic error occurs err forg0001 if the union type has a pattern facet the pattern is tested against the canonical representation of the result value. only the atomic types in the transitive membership of the union type are considered. the union type may have list types in its transitive membership but unless the supplied value is of type xs string or xs untypedatomic in which case the rules in 18.2 casting from xs string and xs untypedatomic apply any list types in the membership are effectively ignored. if more than one of these conditions applies then the casting is done according to the rules for the first condition that applies. if none of these conditions applies the cast fails with a dynamic error err forg0001 example consider a type u whose member types are xs integer and xs date. the expression 123 cast as u returns the xs integer value 123. the expression current-date cast as u returns the current date as an instance of xs date. the expression 23.1 cast as u returns the xs integer value 23. example consider a type v whose member types are xs short and xs negativeinteger. the expression 123 cast as v returns the xs short value 123. the expression 100000 cast as v returns the xs negativeinteger value 100000. the expression 93.7 cast as v returns the xs short value 93. the expression 93.7 cast as v raises a dynamic error err forg0001 on the grounds that the string 93.7 is not in the lexical space of the union type. example consider a type w that is derived from the above type v by restriction with a pattern facet of d d. the expression 12 cast as v returns the xs short value 12. the expression 123 cast as v raises an dynamic error err forg0001 on the grounds that the string 123 does not match the pattern facet. 18.3.6 casting to list types if the target type of a cast expression or a constructor function is a type with variety list the supplied value must be of type xs string or xs untypedatomic. the rules follow the general principle for all casts from xs string outlined in 18.2 casting from xs string and xs untypedatomic. the semantics of the operation are consistent with validation that is the effect of casting a string s to a list type l is the same as constructing an element or attribute node whose string value is s validating it using l as the governing type and atomizing the resulting node. the result will always be either failure or a sequence of zero or more atomic values each of which is an instance of the item type of l or if the item type of l is a union type an instance of one of the atomic types in its transitive membership if the item type of the list type is namespace-sensitive then the namespace bindings in the static context will be used to resolve any namespace prefix in the same way as when the target type is xs qname. if the list type has a pattern facet the pattern must match the supplied value after collapsing whitespace an operation equivalent to the use of the fn normalize-space function for example the expression cast a b c d as xs nmtokens produces a sequence of four xs nmtoken values a b c d for example given a user-defined type my coordinates defined as a list of xs integer with the facet xs length value 3 the expression my coordinates 2 1 will return a sequence of two xs integer values 2 1 while the expression my coordinates 1 2 3 will result in a dynamic error because the length of the list does not conform to the length facet. the expression my coordinates 1.0 3.0 will also fail because the strings 1.0 and 3.0 are not in the lexical space of xs integer. a references a.1 normative references character model for the world wide web 1.0 fundamentals character model for the world wide web 1.0 fundamentals. available at http www.w3.org tr 2005 rec-charmod-20050215 ieee 754-2008 ieee. ieee standard for floating-point arithmetic. iso 3166-1 iso international organization for standardization codes for the representation of names of countries and their subdivisions part 1 country codes iso 3166-1 2013. iso 10967 iso international organization for standardization information technology language independent arithmetic part 1 integer and floating point arithmetic iso iec 10967-1 2012. locale data markup language unicode technical standard 35 locale data markup language. available at http www.unicode.org reports tr35 legacy extended iris for xml resource identification legacy extended iris for xml resource identification. henry s. thomson richard tobin and norman walsh eds world wide web consortium. 3 november 2008. available at http www.w3.org tr leiri rfc 2376 ietf. rfc 2376 xml media types. available at http www.ietf.org rfc rfc2376.txt rfc 3023 ietf. rfc 2376 xml media types. available at http www.ietf.org rfc rfc3023.txt rfc 3986 ietf. rfc 3986 uniform resource identifiers uri generic syntax. available at http www.ietf.org rfc rfc3986.txt rfc 3987 ietf. rfc 3987 internationalized resource identifiers iris available at http www.ietf.org rfc rfc3987.txt olson timezone database the tz timezone database available at http www.twinsun.com tz tz-link.htm. it is implementation-defined which version of the database is used. the unicode standard the unicode consortium reading ma addison-wesley 2003. the unicode standard as updated from time to time by the publication of new versions. see http www.unicode.org standard versions for the latest version and additional information on versions of the standard and of the unicode character database. the version of unicode to be used is implementation-defined but implementations are recommended to use the latest unicode version currently version 6.0.0. unicode collation algorithm unicode technical standard 10 unicode collation algorithm. available at http www.unicode.org reports tr10 unicode normalization forms unicode standard annex 15 unicode normalization forms. available at http www.unicode.org reports tr15 as with the unicode standard the version to be used is implementation-defined unicode regular expressions unicode technical standard 18 unicode regular expressions. available at http www.unicode.org reports tr18 extensible markup language xml 1.0 fifth edition extensible markup language xml 1.0 fifth edition tim bray jean paoli michael sperberg-mcqueen et. al. editors. world wide web consortium 26 nov 2008. this version is http www.w3.org tr 2008 rec-xml-20081126 the latest version is available at http www.w3.org tr xml. extensible markup language xml 1.1 recommendation extensible markup language xml 1.1 second edition tim bray jean paoli michael sperberg-mcqueen et. al. editors. world wide web consortium 16 aug 2006. this version is http www.w3.org tr 2006 rec-xml11-20060816. the latest version is available at http www.w3.org tr xml11 xml path language xpath version 1.0 xml path language xpath version 1.0 james clark and steven derose editors. world wide web consortium 16 nov 1999. this version is http www.w3.org tr 1999 rec-xpath-19991116. the latest version is available at http www.w3.org tr xpath. xml path language xpath 2.0 xml path language xpath 2.0 second edition don chamberlin anders berglund scott boag et. al. editors. world wide web consortium 14 december 2010. this version is http www.w3.org tr 2010 rec-xpath20-20101214 the latest version is available at http www.w3.org tr xpath20 xml path language xpath 3.0 xml path language xpath 3.0 jonathan robie don chamberlin michael dyck john snelson editors. world wide web consortium 08 april 2014. this version is http www.w3.org tr 2014 rec-xpath-30-20140408 the latest version is available at http www.w3.org tr xpath-30 xquery 1.0 and xpath 2.0 functions and operators xquery 1.0 and xpath 2.0 functions and operators second edition ashok malhotra jim melton and norman walsh editors. world wide web consortium 14 december 2010. this version is http www.w3.org tr 2010 rec-xpath-functions-20101214 the latest version is available at http www.w3.org tr xpath-functions xsl transformations xslt version 2.0 xsl transformations xslt version 2.0 second edition michael kay editor. world wide web consortium 23 january 2007. this version is http www.w3.org tr 2007 rec-xslt20-20070123 the latest version is available at http www.w3.org tr xslt20 xquery and xpath data model xdm 3.0 xquery and xpath data model xdm 3.0 norman walsh anders berglund john snelson editors. world wide web consortium 08 april 2014. this version is http www.w3.org tr 2014 rec-xpath-datamodel-30-20140408 the latest version is available at http www.w3.org tr xpath-datamodel-30 xslt and xquery serialization 3.0 xslt and xquery serialization 3.0 henry zongaro andrew coleman michael sperberg-mcqueen editors. world wide web consortium 08 april 2014. this version is http www.w3.org tr 2014 rec-xslt-xquery-serialization-30-20140408 the latest version is available at http www.w3.org tr xslt-xquery-serialization-30 xquery 1.0 and xpath 2.0 formal semantics xquery 1.0 and xpath 2.0 formal semantics second edition j r me sim on denise draper peter frankhauser et. al. editors. world wide web consortium 14 december 2010. this version is http www.w3.org tr 2010 rec-xquery-semantics-20101214 the latest version is available at http www.w3.org tr xquery-semantics xquery 1.0 an xml query language xquery 1.0 an xml query language second edition don chamberlin anders berglund scott boag et. al. editors. world wide web consortium 14 december 2010. this version is http www.w3.org tr 2010 rec-xquery-20101214 the latest version is available at http www.w3.org tr xquery xquery 3.0 an xml query language xquery 3.0 an xml query language jonathan robie don chamberlin michael dyck john snelson editors. world wide web consortium 08 april 2014. this version is http www.w3.org tr 2014 rec-xquery-30-20140408 the latest version is available at http www.w3.org tr xquery-30 xml inclusions xinclude version 1.0 second edition xml inclusions xinclude version 1.0 second edition jonathan marsh david orchard and daniel veillard editors. world wide web consortium 15 nov 2006. this version is http www.w3.org tr 2006 rec-xinclude-20061115 the latest version is available at http www.w3.org tr xinclude xml schema part 2 datatypes second edition xml schema part 2 datatypes second edition oct. 28 2004. available at http www.w3.org tr xmlschema-2 schema 1.1 part 2 w3c xml schema definition language xsd 1.1 part 2 datatypes david peterson sandy gao ashok malhotra et. al. editors. world wide web consortium 05 apr 2012. this version is http www.w3.org tr 2012 rec-xmlschema11-2-20120405 the latest version is available at http www.w3.org tr xmlschema11-2 namespaces in xml namespaces in xml 1.0 third edition tim bray dave hollander andrew layman et. al. editors. world wide web consortium 08 dec 2009. this version is http www.w3.org tr 2009 rec-xml-names-20091208 the latest version is available at http www.w3.org tr xml-names. a.2 non-normative references xsl transformations xslt version 3.0 xsl transformations xslt version 3.0 michael kay editor. world wide web consortium 12 december 2013. this version is http www.w3.org tr 2013 wd-xslt-30-20131212 the latest version is available at http www.w3.org tr xslt-30 calendrical calculations edward m. reingold and nachum dershowitz. calendrical calculations millennium edition 2nd edition cambridge university press isbn 0 521 77752 6 character model for the world wide web 1.0 normalization character model for the world wide web 1.0 normalization last call working draft. available at http www.w3.org tr 2004 wd-charmod-norm-20040225 html 4.0 html 4.01 recommendation 24 december 1999. available at http www.w3.org tr rec-html40 iso 8601 iso international organization for standardization representations of dates and times 2000-08-03. available from http www.iso.org posix.1-2008 the open group base specifications isuse 7 ieee std 1003.1-2008 available at http pubs.opengroup.org onlinepubs 9699919799 working with timezones world wide web consortium working group note. working with timezones october 13 2005. available at http www.w3.org tr 2005 note-timezone-20051013 b error summary the error text provided with these errors is non-normative. err foar0001 division by zero. this error is raised whenever an attempt is made to divide by zero. err foar0002 numeric operation overflow underflow. this error is raised whenever numeric operations result in an overflow or underflow. err foca0001 input value too large for decimal. raised when casting to xs decimal if the supplied value exceeds the implementation-defined limits for the data type. err foca0002 invalid lexical value. raised by fn resolve-qname and fn qname when a supplied value does not have the lexical form of a qname or uri respectively and when casting to decimal if the supplied value is nan or infinity. err foca0003 input value too large for integer. raised when casting to xs integer if the supplied value exceeds the implementation-defined limits for the data type. err foca0005 nan supplied as float double value. raised when multiplying or dividing a duration by a number if the number supplied is nan. err foca0006 string to be cast to decimal has too many digits of precision. raised when casting a string to xs decimal if the string has more digits of precision than the implementation can represent the implementation also has the option of rounding err foch0001 codepoint not valid. raised by fn codepoints-to-string if the input contains an integer that is not the codepoint of a valid xml character. err foch0002 unsupported collation. raised by any function that uses a collation if the requested collation is not recognized. err foch0003 unsupported normalization form. raised by fn normalize-unicode if the requested normalization form is not supported by the implementation. err foch0004 collation does not support collation units. raised by functions such as fn contains if the requested collation does not operate on a character-by-character basis. err fodc0001 no context document. raised by fn id fn idref and fn element-with-id if the node that identifies the tree to be searched is a node in a tree whose root is not a document node. err fodc0002 error retrieving resource. raised by fn doc fn collection and fn uri-collection to indicate that either the supplied uri cannot be dereferenced to obtain a resource or the resource that is returned is not parseable as xml. err fodc0003 function not defined as deterministic. raised by fn doc fn collection to indicate that it is not possible to return a result that is guaranteed deterministic. err fodc0004 invalid argument to fn collection. raised by fn collection if the argument is not a valid xs anyuri. err fodc0005 invalid argument to fn doc or fn doc-available. raised optionally by fn doc and fn doc-available if the argument is not a valid xs anyuri. err fodc0006 string passed to fn parse-xml is not a well-formed xml document. raised by fn parse-xml if the supplied string is not a well-formed and namespace-well-formed xml document or if dtd validation is requested and the document is not valid against its dtd. err fodc0010 the processor does not support serialization. raised when fn serialize is called and the processor does not support serialization in cases where the host language makes serialization an optional feature. err fodf1280 invalid decimal format name. this error is raised if the decimal format name supplied to fn format-number is not a valid qname or if the prefix in the qname is undeclared or if there is no decimal format in the static context with a matching name. err fodf1310 invalid decimal format picture string. this error is raised if the picture string supplied to fn format-number has invalid syntax. err fodt0001 overflow underflow in date time operation. raised when casting to date time data types or performing arithmetic with date time values if arithmetic overflow or underflow occurs. err fodt0002 overflow underflow in duration operation. raised when casting to duration data types or performing arithmetic with duration values if arithmetic overflow or underflow occurs. err fodt0003 invalid timezone value. raised by adjust-date-to-timezone and related functions if the supplied timezone is invalid. err foer0000 unidentified error. error code used by fn error when no other error code is provided. err fofd1340 invalid date time formatting parameters. this error is raised if the picture string or calendar supplied to fn format-date fn format-time or fn format-datetime has invalid syntax. err fofd1350 invalid date time formatting component. this error is raised if the picture string supplied to fn format-date selects a component that is not present in a date or if the picture string supplied to fn format-time selects a component that is not present in a time. err fons0004 no namespace found for prefix. raised by fn resolve-qname and analagous functions if a supplied qname has a prefix that has no binding to a namespace. err fons0005 base-uri not defined in the static context. raised by fn resolve-uri if no base uri is available for resolving a relative uri. err forg0001 invalid value for cast constructor. a general-purpose error raised when casting if a cast between two data types is allowed in principle but the supplied value cannot be converted for example when attempting to cast the string nine to an integer. err forg0002 invalid argument to fn resolve-uri raised when either argument to fn resolve-uri is not a valid uri iri. err forg0003 fn zero-or-one called with a sequence containing more than one item. raised by fn zero-or-one if the supplied value contains more than one item. err forg0004 fn one-or-more called with a sequence containing no items. raised by fn one-or-more if the supplied value is an empty sequence. err forg0005 fn exactly-one called with a sequence containing zero or more than one item. raised by fn exactly-one if the supplied value is not a singleton sequence. err forg0006 invalid argument type. raised by functions such as fn max fn min fn avg fn sum if the supplied sequence contains values inappropriate to this function. err forg0008 the two arguments to fn datetime have inconsistent timezones. raised by fn datetime if the two arguments both have timezones and the timezones are different. err forg0009 error in resolving a relative uri against a base uri in fn resolve-uri. a catch-all error for fn resolve-uri recognizing that the implementation can choose between a variety of algorithms and that some of these may fail for a variety of reasons. err forx0001 invalid regular expression flags. raised by regular expression functions such as fn matches and fn replace if the regular expression flags contain a character other than imsx err forx0002 invalid regular expression. raised by regular expression functions such as fn matches and fn replace if the regular expression is syntactically invalid. err forx0003 regular expression matches zero-length string. for functions such as fn replace and fn tokenize raises an error if the supplied regular expression is capable of matching a zero length string. err forx0004 invalid replacement string. raised by fn replace to report errors in the replacement string. err foty0012 argument to fn data contains a node that does not have a typed value. raised by fn data or by implicit atomization if applied to a node with no typed value the main example being an element validated against a complex type that defines it to have element-only content. err foty0013 the argument to fn data contains a function item. raised by fn data or by implicit atomization if the sequence to be atomized contains a function item. err foty0014 the argument to fn string is a function item. raised by fn string or by implicit string conversion if the input sequence contains a function item. err foty0015 an argument to fn deep-equal contains a function item. raised by fn deep-equal if either input sequence contains a function item. err fout1170 invalid href argument to fn unparsed-text etc. a dynamic error is raised if the href argument contains a fragment identifier or if it cannot be used to retrieve a resource containing text. err fout1190 cannot decode resource retrieved by fn unparsed-text etc. a dynamic error is raised if the retrieved resource contains octets that cannot be decoded into unicode characters using the specified encoding or if the resulting characters are not permitted xml characters. this includes the case where the processor does not support the requested encoding. err fout1200 cannot infer encoding of resource retrieved by fn unparsed-text etc. a dynamic error is raised if encoding is absent and the processor cannot infer the encoding using external information and the encoding is not utf-8. c illustrative user-written functions non-normative certain functions that were proposed for inclusion in this function library have been excluded on the basis that it is straightforward for users to implement these functions themselves using xslt 2.0 or xquery 1.0. this appendix provides sample implementations of some of these functions. to emphasize that these functions are examples of functions that vendors may write their names carry the prefix eg vendors are free to define such functions in any namespace. a group of vendors may also choose to create a collection of such useful functions and put them in a common namespace. c.1 eg if-empty and eg if-absent in some situations users may want to provide default values for missing information that may be signaled by elements that are omitted have no value or have the empty sequence as their value. for example a missing middle initial may be indicated by omitting the element or a non-existent bonus signaled with an empty sequence. this section includes examples of functions that provide such defaults. these functions return xs anyatomictype users may want to write functions that return more specific types. c.1.1 eg if-empty eg if-empty node as node value as xs anyatomictype as xs anyatomictype if the first argument is the empty sequence or an element without simple or complex content eg if-empty returns the second argument otherwise it returns the content of the first argument. xslt implementation xsl function name eg if-empty as xs anyatomictype xsl param name node as node xsl param name value as xs anyatomictype xsl sequence select node child node value 1 xsl function xquery implementation declare function eg if-empty node as node value as xs anyatomictype as xs anyatomictype node child node value 1 c.1.2 eg if-absent eg if-absent node as node value as xs anyatomictype as xs anyatomictype if the first argument is the empty sequence eg if-absent returns the second argument otherwise it returns the content of the first argument. xslt implementation xsl function name eg if-absent as xs anyatomictype xsl param name node as node xsl param name value as xs anyatomictype xsl sequence select node value 1 xsl function xquery implementation declare function eg if-absent node as node value as xs anyatomictype as xs anyatomictype node value 1 c.2 union intersection and difference on sequences of values c.2.1 eg value-union eg value-union arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype this function returns a sequence containing all the distinct items in arg1 and arg2 in an arbitrary order. xslt implementation xsl function name eg value-union as xs anyatomictype xsl param name arg1 as xs anyatomictype xsl param name arg2 as xs anyatomictype xsl sequence select fn distinct-values arg1 arg2 xsl function xquery implementation declare function eg value-union arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype fn distinct-values arg1 arg2 c.2.2 eg value-intersect eg value-intersect arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype this function returns a sequence containing all the distinct items that appear in both arg1 and arg2 in an arbitrary order. xslt implementation xsl function name eg value-intersect as xs anyatomictype xsl param name arg1 as xs anyatomictype xsl param name arg2 as xs anyatomictype xsl sequence select fn distinct-values arg1 arg2 xsl function xquery implementation declare function eg value-intersect arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype fn distinct-values arg1 arg2 c.2.3 eg value-except eg value-except arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype this function returns a sequence containing all the distinct items that appear in arg1 but not in arg2 in an arbitrary order. xslt implementation xsl function name eg value-except as xs anyatomictype xsl param name arg1 as xs anyatomictype xsl param name arg2 as xs anyatomictype xsl sequence select fn distinct-values arg1 not arg2 xsl function xquery implementation declare function eg value-except arg1 as xs anyatomictype arg2 as xs anyatomictype as xs anyatomictype fn distinct-values arg1 not arg2 c.3 eg index-of-node eg index-of-node seq as node search as node as xs integer this function returns a sequence of positive integers giving the positions within the sequence seq of nodes that are identical to search. the nodes in the sequence seq are compared with search under the rules for the is operator. if a node compares identical then the position of that node in the sequence seq is included in the result. if the value of seq is the empty sequence or if no node in seq matches search then the empty sequence is returned. the index is 1-based not 0-based. the result sequence is in ascending numeric order. xslt implementation xsl function name eg index-of-node as xs integer xsl param name seq as node xsl param name search as node xsl sequence select filter function i as xs integer as xs boolean seq i is search 1 to count seq xsl function xquery implementation declare function eg index-of-node seq as node search as node as xs integer fn filter function i as xs integer as xs boolean seq i is search 1 to fn count seq an alternative implementation which might be faster in systems where indexing into a sequence is slow is declare function eg index-of-node seq as node search as node as xs integer fn for-each-pair function node index if node is search then index else seq 1 to fn count seq c.4 eg string-pad eg string-pad padstring as xs string padcount as xs integer as xs string returns a xs string consisting of a given number of copies of an xs string argument concatenated together. xslt implementation xsl function name eg string-pad as xs string xsl param name padstring as xs string xsl param name padcount as xs integer xsl sequence select fn string-join for i in 1 to padcount return padstring xsl function xquery implementation declare function eg string-pad padstring as xs string padcount as xs integer as xs string fn string-join for i in 1 to padcount return padstring this returns the zero-length string if padstring is the empty sequence which is consistent with the general principle that if an xs string argument is the empty sequence it is treated as if it were the zero-length string. c.5 eg distinct-nodes-stable eg distinct-nodes-stable arg as node as node this function illustrates one possible implementation of a distinct-nodes function. it removes duplicate nodes by identity preserving the first occurrence of each node. xpath arg empty subsequence arg 1 position 1 intersect xslt implementation xsl function name eg distinct-nodes-stable as node xsl param name arg as node xsl sequence select fn fold-left function foundsofar as node this as node as node if foundsofar intersect this then foundsofar else foundsofar this seq xsl function xquery implementation declare function distinct-nodes-stable arg as node as node fn fold-left function foundsofar as node this as node as node if foundsofar intersect this then foundsofar else foundsofar this seq c.6 finding minima and maxima the fn min and fn max functions allow one to determine the smallest and largest values in a set of values but they do not directly allow one to determine the elements having the smallest or largest value for some property for example the employees earning the highest or lowest salary. the functions in this section show how this can be achieved. the functions take as input an arbitrary sequence of items typically but not necessarily a sequence of elements and a function that computes a property value for each of these items. this must be a value of an atomic type for which order comparisons are defined. the functions return those items from the input sequence that have a higher or lower value for the given property than any others in the sequence. if there are several that are joint highest or lowest then they are all returned. c.6.1 eg highest the function eg highest returns the items having the highest value for the supplied function. xslt implementation xsl function name eg highest as item xsl param name f as function item as xs anyatomictype xsl param name seq as item xsl sequence select fold-left function highestsofar as item this as item as item let thisvalue f this let highestvalue f highestsofar 1 return if thisvalue gt highestvalue then this else if thisvalue eq highestvalue then highestsofar this else highestsofar head seq tail seq xsl function xquery implementation declare function eg highest f as function item as xs anyatomictype seq as item as item fn fold-left function highestsofar as item this as item as item let thisvalue f this let highestvalue f highestsofar 1 return if thisvalue gt highestvalue then this else if thisvalue eq highestvalue then highestsofar this else highestsofar fn head seq fn tail seq to find the employees with the highest salary the function might be called as eg highest function emp emp salary employee c.6.2 eg lowest the function eg lowest returns the items having the lowest value for the supplied function. xslt implementation xsl function name eg lowest as item xsl param name f as function item as xs anyatomictype xsl param name seq as item xsl sequence select fold-left function lowestsofar as item this as item as item let thisvalue f this let lowestvalue f lowestsofar 1 return if thisvalue lt lowestvalue then this else if thisvalue eq lowestvalue then lowestsofar this else lowestsofar head seq tail seq xsl function xquery implementation declare function eg highest f as function item as xs anyatomictype seq as item as item fn fold-left function lowestsofar as item this as item as item let thisvalue f this let lowestvalue f lowestsofar 1 return if thisvalue gt lowestvalue then this else if thisvalue eq lowestvalue then lowestsofar this else lowestsofar fn head seq fn tail seq to find the employees with the lowest total number of hours worked the function might be called as eg lowest function emp sum emp timesheet period hours employee c.7 sorting both xslt and xquery include constructs for sorting sequences. however it can often be convenient to invoke sorting via a simple function call. the example function in this section takes two arguments a sequence to be sorted and a function to compute a sort key and it returns the items from the input sequence in sorted order of this sort key. xslt implementation xsl function name eg sort as item xsl param name f as function item as xs anyatomictype xsl param name seq as item xsl perform-sort select seq xsl sort select f xsl perform-sort xsl function xquery implementation declare function eg sort f as function item as xs anyatomictype seq as item as item for item in seq order by f item return item to obtain a list of employees sorted by salary the function might be called as eg sort function emp emp salary employee d checklist of implementation-defined features non-normative it is implementation-defined which version of unicode is supported but it is recommended that the most recent version of unicode be used. see conformance. it is implementation-defined whether the type system is based on xml schema 1.0 or xml schema 1.1. see conformance. it is implementation-defined which version of the unicode standard is supported but it is recommended that the most recent version of unicode be used. see strings characters and codepoints. some functions such as fn distinct-values and fn unordered produce results in an implementation-defined or implementation-dependent order. in such cases there is no guarantee that the order of results from different calls will be the same. these functions are said to be non-deterministic with respect to ordering. see properties of functions. where the results of a function are described as being to a greater or lesser extent implementation-defined or implementation-dependent this does not by itself remove the requirement that the results should be deterministic that is that repeated calls with the same explicit and implicit arguments must return identical results. see properties of functions. in the case of a document node d returned by the fn doc function or a document node at the root of a tree containing a node returned by the fn collection function it will always be true that either fn document-uri d returns the empty sequence or that the following expression is true fn doc fn document-uri d is d. it is implementation-defined whether this guarantee also holds for document nodes obtained by other means for example a document node passed as the initial context node of a query or transformation. see fn document-uri. in addition the values of value converted to an xs string and label may be directed to a trace data set. the destination of the trace output is implementation-defined the format of the trace output is implementation dependent the ordering of output from calls of the fn trace function is implementation dependent see fn trace. they may provide an implementation-defined mechanism that allows users to choose between raising an error and returning a result that is modulo the largest representable integer value. see iso 10967 see arithmetic operators on numeric values. for xs decimal values the number of digits of precision returned by the numeric operators is implementation-defined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementation-defined manner. see arithmetic operators on numeric values. for xs decimal values the number of digits of precision returned by the numeric operators is implementation-defined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementation-defined manner. see arithmetic operators on numeric values. the ieee 754-2008 specification also describes handling of two exception conditions called dividebyzero and invalidoperation. the ieee dividebyzero exception is raised not only by a direct attempt to divide by zero but also by operations such as log 0 the ieee invalidoperation exception is raised by attempts to call a function with an argument that is outside the function s domain for example sqrt 1 or log 1 these ieee exceptions do not cause a dynamic error at the application level rather they result in the relevant function or operator returning nan. the underlying ieee exception may be notified to the application or to the user by some implementation-defined warning condition but the observable effect on an application using the functions and operators defined in this specification is simply to return nan with no error. see arithmetic operators on numeric values. the ieee 754-2008 specification distinguishes two nan values a quiet nan and a signaling nan. these two values are not distinguishable in the xdm model the value spaces of xs float and xs double each include only a single nan value. this does not prevent the implementation distinguishing them internally and triggering different implementation-defined warning conditions but such distinctions do not affect the observable behavior of an application using the functions and operators defined in this specification. see arithmetic operators on numeric values. the implementation may adopt a different algorithm provided that it is equivalent to this formulation in all cases where implementation-dependent or implementation-defined behavior does not affect the outcome for example the implementation-defined precision of the result of xs decimal division. see op numeric-integer-divide. xsd 1.1 allows the string inf as a representation of positive infinity xsd 1.0 does not. it is implementation-defined whether xsd 1.1 is supported. see fn number. any other format token which indicates a numbering sequence in which that token represents the number 1 one but see the note below it is implementation-defined which numbering sequences additional to those listed above are supported. if an implementation does not support a numbering sequence represented by the given token it must use a format token of 1. see fn format-integer. for all format tokens other than the first kind above one that consists of decimal digits there may be implementation-defined lower and upper bounds on the range of numbers that can be formatted using this format token indeed for some numbering sequences there may be intrinsic limits. for example the format token x2460 circled digit one has a range imposed by the unicode character repertoire 1 to 20 in unicode versions prior to 4.0 increased in subsequent versions. for the numbering sequences described above any upper bound imposed by the implementation must not be less than 1000 one thousand and any lower bound must not be greater than 1. numbers that fall outside this range must be formatted using the format token 1. see fn format-integer. the set of languages for which numbering is supported is implementation-defined if the lang argument is absent or is set to an empty sequence or is invalid or is not a language supported by the implementation then the number is formatted using the default language from the dynamic context. see fn format-integer. either a or t to indicate alphabetic or traditional numbering respectively the default being implementation-defined see fn format-integer. it is implementation-defined what combinations of values of the format token the language and the cardinal ordinal modifier are supported. if ordinal numbering is not supported for the combination of the format token the language and the string appearing in parentheses the request is ignored and cardinal numbers are generated instead. see fn format-integer. the use of the a or t modifier disambiguates between numbering sequences that use letters. in many languages there are two commonly used numbering sequences that use letters. one numbering sequence assigns numeric values to letters in alphabetic sequence and the other assigns numeric values to each letter in some other manner traditional in that language. in english these would correspond to the numbering sequences specified by the format tokens a and i. in some languages the first member of each sequence is the same and so the format token alone would be ambiguous. in the absence of the a or t modifier the default is implementation-defined see fn format-integer. the static context provides a set of decimal formats. one of the decimal formats is unnamed the others if any are identified by a qname. there is always an unnamed decimal format available but its contents are implementation-defined see defining a decimal format. ieee states that the preferred quantum is language-defined. in this specification it is implementation-defined see trigonometric and exponential functions. ieee defines various rounding algorithms for inexact results and states that the choice of rounding direction and the mechanisms for influencing this choice are language-defined. in this specification the rounding direction and any mechanisms for influencing it are implementation-defined see trigonometric and exponential functions. because the set of collations that are supported is implementation-defined an implementation has the option to support all collation uris in which case it will never raise this error. see choosing a collation. conforming implementations must support normalization form nfc and may support normalization forms nfd nfkc nfkd and fully-normalized they may also support other normalization forms with implementation-defined semantics. see fn normalize-unicode. it is possible to define collations that do not have the ability to decompose a string into units suitable for substring matching. an argument to a function defined in this section may be a uri that identifies a collation that is able to compare two strings but that does not have the capability to split the string into collation units. such a collation may cause the function to fail or to give unexpected results or it may be rejected as an unsuitable argument. the ability to decompose strings into collation units is an implementation-defined property of the collation. see functions based on substring matching. all minimally conforming processors must support positive year values with a minimum of 4 digits i.e. yyyy and a minimum fractional second precision of 1 millisecond or three digits i.e. s.sss however conforming processors may set larger implementation-defined limits on the maximum number of digits they support in these two situations. processors may also choose to support the year 0000 and years with negative values. the results of operations on dates that cross the year 0000 are implementation-defined see limits and precision. all minimally conforming processors must support positive year values with a minimum of 4 digits i.e. yyyy and a minimum fractional second precision of 1 millisecond or three digits i.e. s.sss however conforming processors may set larger implementation-defined limits on the maximum number of digits they support in these two situations. processors may also choose to support the year 0000 and years with negative values. the results of operations on dates that cross the year 0000 are implementation-defined see limits and precision. the format token n n or nn indicating that the value of the component is to be output by name in lower-case upper-case or title-case respectively. components that can be output by name include but are not limited to months days of the week timezones and eras. if the processor cannot output these components by name for the chosen calendar and language then it must use an implementation-defined fallback representation. see the picture string. indicates alphabetic or traditional numbering respectively the default being implementation-defined this has the same meaning as in the second argument of fn format-integer. see the picture string. a format token consisting of a single digit such as 1 does not constrain the number of digits in the output. in the case of fractional seconds in particular f001 requests three decimal digits f01 requests two digits but f1 will produce an implementation-defined number of digits. if exactly one digit is required this can be achieved using the component specifier f1 1-1 see the picture string. the set of languages calendars and places that are supported in the date formatting functions is implementation-defined when any of these arguments is omitted or is an empty sequence an implementation-defined default value is used. see the language calendar and place arguments. the set of languages calendars and places that are supported in the date formatting functions is implementation-defined when any of these arguments is omitted or is an empty sequence an implementation-defined default value is used. see the language calendar and place arguments. the choice of the names and abbreviations used in any given language is implementation-defined for example one implementation might abbreviate july as jul while another uses jly. in german one implementation might represent saturday as samstag while another uses sonnabend. implementations may provide mechanisms allowing users to control such choices. see the language calendar and place arguments. the choice of the names and abbreviations used in any given language for calendar units such as days of the week and months of the year is implementation-defined see the language calendar and place arguments. the calendar value if present must be a valid eqname dynamic error err fofd1340 if it is a lexical qname then it is expanded into an expanded qname using the statically known namespaces if it has no prefix then it represents an expanded-qname in no namespace. if the expanded qname is in no namespace then it must identify a calendar with a designator specified below dynamic error err fofd1340 if the expanded qname is in a namespace then it identifies the calendar in an implementation-defined way. see the language calendar and place arguments. at least one of the above calendars must be supported. it is implementation-defined which calendars are supported. see the language calendar and place arguments. various aspects of this processing are implementation-defined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user. in particular see fn doc. it is implementation-defined whether dtd validation and or schema validation is applied to the source document. see fn doc. by default this function is deterministic this means that repeated calls on the function with the same argument will return the same result. however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism. the manner in which any such option is provided is implementation-defined if the user has not selected such an option a call to this function must either return a deterministic result or must raise a dynamic error err fodc0003 see fn collection. the processor may use implementation-defined heuristics to determine the likely encoding otherwise... see fn unparsed-text. the fact that the resolution of uris is defined by a mapping in the dynamic context means that in effect various aspects of the behavior of this function are implementation-defined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user. in particular see fn unparsed-text. the collation used for matching names is implementation-defined but must be the same as the collation used to ensure that the names of all environment variables are unique. see fn environment-variable. the precise process used to construct the xdm instance is implementation-defined in particular it is implementation-defined whether dtd and or schema validation is invoked and it is implementation-defined whether an xml 1.0 or xml 1.1 parser is used. see fn parse-xml. the precise process used to construct the xdm instance is implementation-defined in particular it is implementation-defined whether an xml 1.0 or xml 1.1 parser is used. see fn parse-xml-fragment. if the arguments to fn function-lookup identify a function that is present in the static context of the function call the function will always return the same function that a static reference to this function would bind to. if there is no such function in the static context then the results depend on what is present in the dynamic context which is implementation-defined see fn function-lookup. if st is xs float or xs double then tv is the xs decimal value within the set of xs decimal values that the implementation is capable of representing that is numerically closest to sv. if two values are equally close then the one that is closest to zero is chosen. if sv is too large to be accommodated as an xs decimal see xml schema part 2 datatypes second edition for implementation-defined limits on numeric values a dynamic error is raised err foca0001 if sv is one of the special xs float or xs double values nan inf or inf a dynamic error is raised err foca0002 see casting to xs decimal. if st is xs decimal xs float or xs double then tv is sv with the fractional part discarded and the value converted to xs integer. thus casting 3.1456 returns 3 and 17.89 returns 17. casting 3.124e1 returns 31. if sv is too large to be accommodated as an integer see xml schema part 2 datatypes second edition for implementation-defined limits on numeric values a dynamic error is raised err foca0003 if sv is one of the special xs float or xs double values nan inf or inf a dynamic error is raised err foca0002 see casting to xs integer. in casting to xs decimal or to a type derived from xs decimal if the value is not too large or too small but nevertheless cannot be represented accurately with the number of decimal digits available to the implementation the implementation may round to the nearest representable value or may raise a dynamic error err foca0006 the choice of rounding algorithm and the choice between rounding and error behavior and is implementation-defined see casting from xs string and xs untypedatomic. the tz timezone database available at http www.twinsun.com tz tz-link.htm. it is implementation-defined which version of the database is used. see olson timezone database. the unicode consortium reading ma addison-wesley 2003. the unicode standard as updated from time to time by the publication of new versions. see http www.unicode.org standard versions for the latest version and additional information on versions of the standard and of the unicode character database. the version of unicode to be used is implementation-defined but implementations are recommended to use the latest unicode version currently version 6.0.0. see the unicode standard. unicode standard annex 15 unicode normalization forms. available at http www.unicode.org reports tr15 as with the unicode standard the version to be used is implementation-defined see unicode normalization forms. e changes since previous recommendation non-normative e.1 substantive changes 15 december 2009 in the working draft of 15 december 2009 the following changes were made relative to the first edition of the functions and operators specification for xpath 2.0 and xquery 1.0 published on 23 january 2007 errata e1 through e47 were applied. a two-argument version of the fn round function was introduced. bugzilla 6240 a single-argument version of the fn string-join function was introduced. specifications for the functions fn format-date fn format-time and fn format-datetime were transferred from the xslt 2.0 specification. the specification of fn format-number was transferred from the xslt specification. a function fn format-integer was introduced. the function fn generate-id was introduced transferred from the xslt specification. a range of trigonometric functions was defined in a new namespace new functions fn parse-xml and fn serialize were defined. the fn parse function was subsequently renamed fn parse-xml a new function fn analyze-string was defined. the syntax of regular expressions was extended to allow non-capturing groups. a new flag was introduced for the flags argument of functions that use regular expressions the q flag causes all characters in a regular expression to be treated as ordinary characters rather than metacharacters. supporting the new language feature of higher-order functions a number of functions were defined that operate on function items as their arguments fn map subsequently renamed fn for-each fn filter fn map-pairs subsequently renamed fn for-each-pair fn fold-left fn fold-right. the function fn partial-apply however which was introduced in the previous version of this working draft has now been dropped in favor of custom syntax for partial application using as a place-holder for missing arguments. the description of the fn error function was rewritten to allow for the introduction of try catch facilities into xquery and xslt. the section describing what it means for functions to be contextual and or deterministic was rewritten. the term deterministic has replaced stable. e.2 substantive changes 18 june 2012 in the last call working draft of 18 june 2012 the following substantive changes are made relative to the draft of 15 december 2009 the version number of the specification is changed from 1.1 to 3.0. new functions math exp math exp10 math log math log10 math atan2 and math pow are defined. the trigonometric and exponential functions are now specified by reference to ieee 754-2008 in the rules for fn format-datetime and related functions the rules for formatting of timezones have been expanded and clarified the country argument is renamed place and its value may now be an olson timezone name. the rules for the fn normalize-unicode function are now defined directly by reference to the unicode specifications rather than the w3c working draft on the character model for the world wide web which never progressed beyond working draft status the rules for the normalization form fully_normalized are now defined normatively in this specification. the syntax for the picture string used by fn format-integer has been extended to allow grouping positions to be associated with optional digit positions. two convenience functions fn head and fn tail are added reflecting the increased role played by head-tail recursive functions when writing code to take advantage of higher-order functions. the function fn partial-apply has been removed as this functionality is now provided by custom syntax partial function application using as a placeholder for missing arguments new functions fn function-name fn function-arity and fn function-lookup are available. a new function fn parse-xml-fragment was introduced. this change went unremarked in the change log up to and including the candidate recommendation of 8 january 2013. casting from a dynamic string to an xs qname or a type derived from xs notation is now permitted the restriction that the argument must be a string literal has been removed bug 9183 zero-argument forms have been introduced for the functions fn data fn document-uri and fn node-name fn base-uri fn nilled and fn has-children with the argument defaulting to the context item in each case. bug 9571 the new function fn parse is renamed fn parse-xml. bug 9751 the rules for handling of negative zero have been clarified. where operations return negative zero then in general implementations must respect this the only exception is for casting from string to float or double where the lexical form 0 may result in positive zero for compatibility with existing xml schema 1.0 processors. bug 9907 the functions fn unparsed-text and fn unparsed-text-available have been transferred unchanged from xslt 2.0. bug 9067 and fn unparsed-text-lines has been transferred from the xslt 2.1 draft. the function fn uri-collection has been added. this was originally defined as an output of the work on streaming in xslt 3.0 its purpose is to give applications greater control of the processing of individual documents within a large collection. the rules for the fn resolve-uri function have been rewritten to refer to more up-to-date specifications specifically the iri and leiri specifications. implementations are required to support the iri syntax as a minimum and are permitted to support the legacy extensions defined in leiri. two new functions fn environment-variable and fn available-environment-variables have been defined. casting from a string or xs untypedatomic value to a union or list type is now allowed. references to the formal semantics have been removed. rules for the precision of the results of trigonometric and exponential functions have been removed and replaced with a normative reference to the rules in the ieee specifications. the functions fn unparsed-text-lines fn has-children fn innermost and fn outermost have been transferred from the xslt 3.0 working draft. the function fn path has been added. references to ieee 754-1985 to define the semantics of operations on 32-bit and 64-bit floating point have been updated to refer to ieee 754-2008. the error codes produced by fn collection have been clarified possibly involving incompatible changes. in regular expressions without the m option the meta-character now matches everything except x0a and x0d. previously it was defined to match everything except x0a which was an unnecessary and unintended incompatibility with regular expressions in xsd. e.3 substantive changes candidate recommendation in this candidate recommendation the following substantive changes are made relative to the last call working draft draft of 18 june 2012 functions with dependencies on the static or dynamic context can now be bound to function items for example by the use of fn function-lookup and the rules for doing so have been clarified. the specification of fn format-integer makes a more precise distinction between situations where the processor must report an error in the supplied picture and situations where it must adopt a fallback representation. the conditions under which the static base uri used during static uow.acc.tab.analysis can differ from the base uri used during evaluation are now more clearly and consistently described. the concept of dynamic base uri is dropped. the syntax for regular expressions is now described by reference to the xsd 1.1 specification as well as the xsd 1.0 specification. xsd 1.1 gives a much clearer exposition of the syntax and semantics of regular expressions without introducing any intended changes to the functionality. some edge cases for capturing subgroups in regular expressions are described. the role of the schema for the data returned by fn analyze-string is more clearly defined. in the result of fn path dependencies on the default namespace for functions have been removed by ensuring that any function calls in the return path use fully-qualified names. in the specification of fn deep-equal the consequences of the existing rules for comparing validated against unvalidated trees are more carefully explained. the rules for the fn unparsed-text function have been expressed at a higher level of abstraction using the context in the same way as the fn doc function and making use of concepts such as the distinction in web architecture between a resource and its representation. a number of rules have been added which were previously omitted concerning casts and constructors where the target type is a union or list type. e.4 substantive changes post candidate recommendation the following changes were made subsequent to the candidate recommendation of 8 january 2013 the functions fn map and fn map-pairs are renamed fn for-each and fn for-each-pair respectively. this change is made to remove the risk of potential confusion and syntactic conflicts if and when a map data type is added to the language as proposed in the current xslt 3.0 working draft. bug 21128 the arguments of the functions fn for-each and fn for-each-pair fn filter fn fold-left and fn fold-right are re-ordered. this change has been made in the interests of usability and consistency with other functions. bug 21797 the regular expression matching the format modifier in the picture string supplied to fn format-integer has been corrected to match the accompanying prose. bug 19004 the function signature for the xs qname constructor function has been corrected to show that the supplied value may be an empty sequence the error arose because in xpath 2.0 this constructor was a special case requiring that the supplied argument be an string literal bug 20856 the function signature for the fn adjust-datetime-to-timezone function has been corrected to show that the returned value may be an empty sequence making the signature consistent with the prose description and with the xpath 2.0 xquery 1.0 version of the specification. bug 20850 the calendar argument of functions in the fn format-date family may now be an eqname for consistency and the error conditions for the arguments to these functions are more clearly spelled out. bug 21284 a section has been added to describe the constructor function xs error present in implementations that support xsd 1.1. the existence of such a function is a consequence of general rules included in the published candidate recommendation but the function was not listed along with other constructor functions for built-in xsd types. bug 20634 a paragraph has been added explaining how to interpret the week-in-month w component for the fn format-date family of functions in the case where the chosen calendar is the iso calendar. bug 21370 it is now stated that it is an error in a regular expression to use a unicode block name which is not defined in the version s of unicode supported by the processor. this differs from the treatment of this condition in xsd 1.1. bug 20575 error conditions are now properly categorized as type errors or dynamic errors and in particular where the error condition xpdy0002 was previously categorized as a type error this has been corrected. bug 21315 it is now stated that failure to cast to a union type is always a dynamic error not a type error. bug 21766 it is now noted that the 5-argument versions of the functions fn format-date fn format-datetime and fn format-time are dependent on the namespaces in the static context since the calendar argument is a lexical qname. bug 22395 the rules for the use of fn function-lookup when applied to context-dependent built-in functions have been clarified. the intent of the rules is unchanged but they have been explained more carefully to prevent possible misinterpretation. bug 22732 e.5 editorial changes the following editorial changes have been made since the first edition of the functions and operators specification for xpath 2.0 and xquery 1.0 published on 23 january 2007. these are not explicitly marked in the change-highlighted version of the specification references to the formal semantics which in nearly all cases were references to detailed rules for static type inferencing have been removed as the formal semantics is not being maintained. bug 9056 a quick reference section containing links to the functions has been added before the full table of contents. the end-of-document indexes have been dropped in this draft any readers disappointed by this decision are invited to make representations to the editor since they can easily be re-instated the section on constructor functions has been moved so that it is now adjacent to the closely-related section on casting. the function fn datetime has been moved out of the section describing constructor functions and is no longer described as a special constructor function it is now an ordinary function described in the appropriate section along with other functions on dates and times. this allows the term constructor function to be associated exclusively with single-argument functions whose name is the same as the type name of the value that they return and avoids any suggestion that this function has special behavior. similarly the functions fn true and fn false are no longer described as constructor functions. where a function is referred to by name the reference is now always in the form for example fn base-uri rather than fn base-uri the latter form is used only to indicate a call on the function in which no arguments are supplied. the specification of each function now consists of a set of standard subsections summary operator mapping signature properties rules error conditions notes and examples. the summary of the effect of each function is now just that it never contains any information that cannot be found in the more detailed rules and it does not attempt to list unusual or error conditions. such rules have been moved into separate paragraphs. sometimes the language used in the summary is relatively informal. although the summary remains normative it must be regarded as being subservient to the rules that follow. functions are always called never invoked. the specification no longer discusses functions it now specifies or defines them. a seperate section for each function now lists the properties of the function whether or not it is deterministic context-dependent or focus-dependent. these properties are linked to their definitions. rules have been rewritten in a more consistent style if arg is x the function returns y avoiding alternatives such as returns y if arg is x and avoiding the passive is returned in nearly all cases the language used for error conditions has been standardized to the form an error is raised code if the section heading for a section that defines a function is now always the name of the function. some function definitions have been moved into subsections to achieve this. statements within the rules of a function that follow inevitably from other rules have in many cases been downgraded to notes. an example is the statement that fn remove seq n returns an empty sequence if seq is an empty sequence. the functions for durations and those for dates times have been split into separate sections. the fn boolean function has been moved from general functions and operators on sequences to functions on boolean values in the interests of automating the testing of examples the convention has been adopted that the result of an example expression is wherever possible given in the form of a simple xpath expression. specifically a numeric or string literal is used for numbers and strings the expressions true and false for booleans constructors such as xs duration pt0s for other atomic types expressions such as 1 2 3 4 for sequences. the expression will always return a value of the correct type so the xs double value zero is shown as 0.0e0 not as 0 which is the way the value would be serialized on output. the value nan is given as xs double nan previously results were sometimes given in this form sometimes in the form of a serialization of the result value and sometimes particularly for dates times and durations in the form of an informal description. in some cases where one function can be readily specified in terms of another the opportunity has been taken to simplify the specification. for example all the operator support functions of the form op xx-greater-than are now specified by reference to the corresponding op xx-less-than function with the arguments reversed. this reduces the risk of introducing errors and inconsistencies. in some cases the rules for a function have been reordered. for example the rule describing how an empty sequence is handled now generally comes before any rule that works only if the argument is not an empty sequence. some non-normative examples and notes have been added. the non-normative example functions in appendix d have been revised and new functions are supplied to illustrate use cases for higher-order functions. the appendix describing error codes gives more information. the checklist of implementation-defined features is now automatically aligned with the text. e.6 changes since the proposed recommendation the following changes are made subsequent to the proposed recommendation of 22 october 2013. these are all minor editorial changes. further details can be found in the referenced w3c bugzilla entries. bug 24228 a trivial copy-edit in the description of error fodc0002. bug 24384 a couple of trivial copy-edits in the description of fn unparsed-text-lines plus a non-normative note to clarify the relationship between fn unparsed-text-available and fn unparsed-text-lines. bug 24385 removed a possible ambiguity in the text to clarify how fn unparsed-text-lines handles a newline at the end of the input file. bug 24646 clarified the definition of deterministic to link it explicitly to the definition of execution scope the linkage of the terms was previously implicit. bug 24689 where appropriate references to other specifications have been updated to refer to the latest version. bug 24742 an incompatibility relating to regular expressions was listed in the wrong part of f.2 compatibility between xpath 3.0 and xpath 2.0. f compatibility with previous versions non-normative this section summarizes the extent to which this specification is compatible with previous versions. it describes first the incompatibilities between xpath 1.0 and xpath 2.0 or xquery 1.0 then the incompatibilities between xpath 2.0 or xquery 1.0 and xpath xquery 3.0. f.1 compatibility between xpath 2.0 and xpath 1.0 note xpath 2.0 and xquery 1.0 were aligned so all references to xpath 2.0 in this section apply equally to xquery 1.0. this appendix summarizes the relationship between certain functions defined in xml path language xpath version 1.0 and the corresponding functions defined in this document. the first column of the table provides the name of the function. the second column describes the differences in the semantics of the corresponding functions. the functions appear in the order they appear in xml path language xpath version 1.0 a more detailed version of this information can be found in xquery 1.0 and xpath 2.0 functions and operators this appendix does not include incompatibilities that arise solely from the change in function calling rules that occurred between xpath 1.0 and xpath 2.0 that is incompatibilities that can be avoided by ensuring that xpath 1.0 compatibility mode is enabled. for example in xpath 1.0 the fn name function when applied to a sequence of three nodes would return the name of the first in document order in xpath 2.0 and xpath 3.0 such a call is a type error unless xpath 1.0 compatiblity mode is enabled. similarly functions such as fn substring fn contains and fn translate that expect string arguments will raise a type error in xpath 2.0 if called with a boolean or numeric argument unless xpath 1.0 compatibility mode is enabled. a more complete list of these incompatibilities can be found in xquery 1.0 and xpath 2.0 functions and operators in addition this appendix does not include incompatibilities that arise when the default collation is set to something other than unicode codepoint collation. this appendix does not include incompatibilities that might arise due to xpath 2.0 defining the specification with greater clarity or precision. for example an implementation of fn sum in xpath 1.0 that returned nan when given an empty node-set as the argument would not have contradicted any explicit statement in the specification while xpath 2.0 is explicit that the expected result in this case is zero. function notes fn last because the result is an integer rather than a double the precision of subsequent computations may be different. fn position because the result is an integer rather than a double the precision of subsequent computations may be different. fn count because the result is an integer rather than a double the precision of subsequent computations may be different. fn id xpath 2.0 raises a type error with boolean and numeric arguments. the rules for recognizing a node as an id value changed. in xpath 1.0 the whole string is treated as a unit while in xpath 2.0 each string is treated as a list. fn name the rules for determining the prefix are more precisely defined in xml path language xpath 2.0 fn string representations of numeric values are xpath 1.0 compatible except for the special values positive and negative infinity and for values outside the range 1.0e-6 to 1.0e+6. fn string-length because the result is an integer rather than a double the precision of subsequent computations may be different. fn sum xpath 2.0 raises an error if the sequence contains values that cannot be added together such as strings. xpath 1.0 returns nan. fn floor in xpath 2.0 if the argument is the result is in xpath 1.0 the result is nan. fn ceiling in xpath 2.0 if the argument is the result is in xpath 1.0 the result is nan. fn round in xpath 2.0 if the argument is the result is in xpath 1.0 the result is nan. f.2 compatibility between xpath 3.0 and xpath 2.0 note xpath 2.0 and xquery 1.0 were aligned and xpath 3.0 and xquery 3.0 are aligned. so all references to xpath 2.0 in this section apply equally to xquery 1.0 and all references to xpath 3.0 apply equally to xquery 3.0. the only incompatibilities between this version of the specification and the version that applied to xpath 2.0 and xquery 1.0 are clarifications where this version of the specification describes the intended behavior more precisely. such clarifications have been made mainly to the description of functions that have significant interactions with the processing environment examples are fn resolve-uri fn collection and fn doc. in regular expressions without the m option the meta-character now matches everything except x0a and x0d. previously it was defined to match everything except x0a which was an unnecessary and unintended incompatibility with regular expressions in xsd. note that x0d rarely appears in xml documents because it is ordinarily removed by the process of normalizing line endings. some functions appearing in this specification previously appeared as part of the specification of xslt 2.0. incompatibilities applying to these functions are as follows the rules for timezone formatting using the z component in the second argument of fn format-date fn format-datetime and fn format-time were previously very unclear and have been completely revised. the new rules are likely to be different from the interpretation adopted by particular xslt 2.0 processors. error codes have been changed to fit with the coding scheme used in this specification. note however that in xslt 2.0 there was no interoperable way of testing error codes and the specification explicitly made the error codes non-normative. 