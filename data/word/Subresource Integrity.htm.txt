subresource integrity subresource integrity w3c first public working draft 18 march 2014 this version http www.w3.org tr 2014 wd-sri-20140318 latest published version http www.w3.org tr sri latest editor s draft http w3c.github.io webappsec specs subresourceintegrity editors frederik braun mozilla corporation devdatta akhawe uc berkeley joel weinberger google inc. mike west google inc. copyright 2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract this specification defines a mechanism by which user agents may verify that a fetched resource has been delivered without unexpected manipulation. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr a list of changes to this document may be found at https github.com w3c webappsec. this document was published by the web application security working group as a first public working draft. this document is intended to become a w3c recommendation. if you wish to make comments regarding this document please send them to public-webappsec@w3.org subscribe archives with integrity at the start of your email s subject. all comments are welcome. publication as a first public working draft does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 1.1 goals 1.2 use cases examples 1.2.1 resource integrity 1.2.2 downloads 1.2.3 fallback 2. conformance 2.1 key concepts and terminology 3. framework 3.1 integrity metadata 3.2 cryptographic hash functions 3.3 resource verification algorithms 3.3.1 apply algorithm to resource 3.3.2 is resource eligible for integrity validation 3.3.3 does resource match metadata 3.4 modifications to fetch 3.5 verification of html document subresources 3.5.1 the integrity attribute 3.5.2 the noncanonical-src attribute todo 3.5.3 element interface extensions 3.5.3.1 htmlanchorelement 3.5.3.1.1 attributes 3.5.3.2 htmlembedelement 3.5.3.2.1 attributes 3.5.3.3 htmliframeelement 3.5.3.3.1 attributes 3.5.3.4 htmlimageelement 3.5.3.4.1 attributes 3.5.3.5 htmllinkelement 3.5.3.5.1 attributes 3.5.3.6 htmlmediaelement 3.5.3.6.1 attributes 3.5.3.7 htmlobjectelement 3.5.3.7.1 attributes 3.5.3.8 htmlscriptelement 3.5.3.8.1 attributes 3.5.3.9 htmltrackelement 3.5.3.9.1 attributes 3.5.4 handling integrity violations 3.5.5 elements 3.5.5.1 the a element 3.5.5.2 the embed element 3.5.5.3 the iframe element 3.5.5.4 the img element 3.5.5.5 the link element 3.5.5.6 the object element 3.5.5.7 the script element 3.5.5.8 the track element 3.5.5.9 the audio element todo 3.5.5.10 the source element todo 3.5.5.11 the video element todo 3.6 verification of css-loaded subresources 3.7 verification of js-loaded subresources 3.7.1 workers 3.7.1.1 worker extension 3.7.1.1.1 attributes 3.7.1.2 sharedworker extension 3.7.1.2.1 attributes 3.7.1.3 validation 3.7.2 xmlhttprequest 3.7.2.1 the integrity attribute 3.7.2.2 progress events 3.7.2.3 validation 4. caching optional 4.1 risks 4.1.1 origin confusion 4.1.2 mime type confusion 4.2 recommendations 5. proxies 6. security considerations 6.1 insecure channels remain insecure 6.2 hash collision attacks 6.3 cross-origin data leakage 7. acknowledgements a. references a.1 normative references 1. introduction this section is non-normative. sites and applications on the web are rarely composed of resources from only a single origin. authors pull scripts images fonts etc. from a wide variety of services and content delivery networks and must trust that the delivered representation is in fact what they expected to load. if an attacker can trick a user into downloading content from a hostile server via dns poisoning or other such means the author has no recourse. likewise an attacker who can replace the file on the cdn server has the ability to inject arbitrary content. delivering resources over a secure channel mitigates some of this risk with tls hsts and pinned public keys a user agent can be fairly certain that it is indeed speaking with the server it believes it s talking to. these mechanisms however authenticate only the server not the content. an attacker or admin with access to the server can manipulate content with impunity. ideally authors would not only be able to pin the keys of a server but also pin the content ensuring that an exact representation of a resource and only that representation loads and executes. this document specifies such a validation scheme extending several html elements with a integrity attribute that contains a cryptographic hash of the representation of the resource the author expects to load. for instance an author may wish to load jquery from a shared server rather than hosting it on their own origin. specifying that the expected sha-256 hash of https code.jquery.com jquery-1.10.2.min.js is c6cb9uyis9ujeqinphwthvqh_e1uhg5twh-y5qfqmyg means that the user agent can verify that the data it loads from that url matches that expected hash before executing the javascript it contains. this integrity verification significantly reduces the risk that an attacker can substitute malicious content. this example can be communicated to a user agent by adding the hash to a script element like so example 1 script src https code.jquery.com jquery-1.10.2.min.js integrity ni sha-256 c6cb9uyis9ujeqinphwthvqh_e1uhg5twh-y5qfqmyg ct application javascript scripts of course are not the only resource type which would benefit from integrity validation. the scheme specified here applies to all html elements which trigger fetches as well as to fetches triggered from css and javascript. moreover integrity metadata may also be useful for purposes other than validation. user agents may decide to use the integrity metadata as an identifier in a local cache for instance meaning that common resources for example javascript libraries could be cached and retrieved once regardless of the url from which they are loaded. 1.1 goals compromise of the third-party service should not automatically mean compromise of every site which includes its scripts. content authors will have a mechanism by which they can specify expectations for content they load meaning for example that they could load a specific script and not any script that happens to have a particular url. the verification mechanism should extend to all resource types that a page may fetch in the course of its execution and rendering. active content scripts style iframe contents etc are of course critical but inactive content such as images and fonts will also be covered. the verification mechanism should have reporting functionality which would inform the author that an invalid resource was downloaded. further it should be possible for an author to choose to run only the reporting functionality allowing potentially corrupt resources to run on her site but flagging violations for manual review. the metadata provided for verification may enable improvements to user agents caching schemes common resources such as javascript libraries can be downloaded once and only once even if multiple instances with distinct urls are requested. potentially relax mixed-content warnings for resources whose integrity is verified. if the integrity metadata for a resource is delivered over a secure channel the user agent might choose to allow loading the resource over an insecure channel. potentially allow resources to be downloaded from non-canonical sources for instance over an insecure channel for performance but fall back to a canonical source if the non-canonical source fails an integrity check. issue 1 i m not sure about 5 and 6. get more detail from the wg about the benefits that such a fallback system would enable. mkwst 1.2 use cases examples 1.2.1 resource integrity an author wants to include javascript provided by a third-party analytics service on her site. she wants however to ensure that only the code she s carefully reviewed is executed. she can do so by generating integrity metadata for the script she s planning on including and adding it to the script element she includes on her page example 2 script src https analytics-r-us.com v1.0 include.js integrity ni sha-256 sdfwewfae...wefjijfe ct application javascript script an advertising network wishes to ensure that advertisements delivered via third-party servers matches the code which they reviewed in order to reduce the risk of accidental or malicious substitution of unreviewed content. by adding integrity metadata to the iframe element wrapping the advertisement they can ensure that the third-party server delivers only the agreed-upon content. example 3 iframe src https awesome-ads.com advertisement1.html integrity ni sha-256 kasfdsaffs...eoirw-e ct text html iframe a user agent wishes to ensure that pieces of its ui which are rendered via html for example chrome s new tab page aren t manipulated before display. integrity metadata mitigates the risk that altered javascript will run in these page s high-privilege context. the author of a mash-up wants to make sure her creation remains in a working state. adding integrity metadata to external subresources defines an expected revision of the included files. the author can then use the reporting functionality to be notified of changes to the included resources. 1.2.2 downloads a software distribution service wants to ensure that files are correctly downloaded. it can do so by adding integrity metadata to the a elements which users click on to trigger a download example 4 a href https software-is-nice.com awesome.exe integrity ni sha-256 fkfrewfrfefhjr...wfjfrerw ct application octet-stream download a 1.2.3 fallback an author wishes to load a resource over an insecure channel for performance reasons but fall back to a secure channel if the insecurely-loaded resource is manipulated. she can do this by adding integrity metadata and a non-canonical source to the script element example 5 script src https rockin-resources.com script.js noncanonical-src http insecurity-is-inherent.net script.js integrity ni sha-256 asijfiqu4t12...woeji3w ct application javascript script 2. conformance as well as sections marked as non-normative all authoring guidelines diagrams examples and notes in this specification are non-normative. everything else in this specification is normative. the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc2119 conformance requirements phrased as algorithms or specific steps can be implemented in any manner so long as the end result is equivalent. in particular the algorithms defined in this specification are intended to be easy to understand and are not intended to be performant. implementers are encouraged to optimize. 2.1 key concepts and terminology this section defines several terms used throughout the document. the term digest refers to the base64url-encoded result of executing a cryptographic hash function on an arbitrary block of data. a secure channel is any communication mechanism that the user agent has defined as secure typically limited to http over transport layer security tls rfc2818 an insecure channel is any communication mechanism other than those the user agent has defined as secure the term origin is defined in the origin specification. rfc6454 the mime type of a resource is a technical hint about the use and format of that resource. mimetype the entity body transfer encoding content encoding and message body of a resource is defined by the http 1.1 specification section 7.2. http11 a base64url encoding is defined in rfc 4648 section 5. in a nutshell it replaces the characters u+002b plus sign and u+002f solidus characters in normal base64 encoding with the u+002d hyphen-minus and u+005f low line characters respectively. rfc4648 the augmented backus-naur form abnf notation used in this document is specified in rfc 5234. abnf the sha-256 sha-384 and sha-512 are part of the sha-2 set of cryptographic hash functions defined by the nist in descriptions of sha-256 sha-384 and sha-512 3. framework the integrity verification mechanism specified here boils down to the process of generating a sufficiently strong cryptographic digest for a resource and transmitting that digest to a user agent so that it may be used when fetching the resource. 3.1 integrity metadata to verify the integrity of a resource a user agent requires integrity metadata which consists of the following pieces of information cryptographic hash function digest the resource s mime type the hash function and digest must be provided in order to validate a resource s integrity. the mime type should be provided as it mitigates the risk of certain attack vectors see mime type confusion in this document s security considerations section this metadata is generally encoded as a named information ni uri as defined in rfc6920. rfc6920 for example given a resource containing only the string hello world an author might choose sha-256 as a hash function. mo_yqmqpm_byzwldkir51gtc9pt9bvmlrxcrrma8u8 is the base64url-encoded digest that results. this can be encoded as an ni uri as follows example 6 ni sha-256 mo_yqmqpm_byzwldkir51gtc9pt9bvmlrxcrrma8u8 or if the author further wishes to specify the content type text plain example 7 ni sha-256 mo_yqmqpm_byzwldkir51gtc9pt9bvmlrxcrrma8u8 ct text plain note digests may be generated using any number of utilities. openssl for example is quite commonly available. the example in this section is the result of the following command line echo n hello world. openssl dgst sha256 binary openssl enc base64 sed e s g e s g 3.2 cryptographic hash functions conformant user agents must support the sha-256 and sha-512 cryptographic hash functions for use as part of a resource s integrity metadata. 3.3 resource verification algorithms 3.3.1 apply algorithm to resource if algorithm is not a hash function recognized and supported by the user agent return null. let result be the result of applying algorithm to the content of the entity body of resource including any content coding that has been applied but not including any transfer encoding applied to the message body. let encodedresult be result of base64url-encoding result. strip any trailing u+003d equals sign characters from encodedresult. return encodedresult. issue 2 step 2 is pulled from the content-md5 definition in http11 it s unclear that it s what we want. see bzbarsky s wg post on this topic 3.3.2 is resource eligible for integrity validation in order to mitigate an attacker s ability to read data cross-origin by brute-forcing values via integrity checks resources are only eligible for such checks if they are same-origin publicly cachable or are the result of explicit access granted to the loading origin via cors. cors certain http headers can also change the way the resource behaves in ways which integrity checking cannot account for. if the resource contains these headers it is ineligible for integrity validation www-authenticate hides resources behind a login such non-public resources are excluded from integrity checks. refresh can cause iframe contents to transparently redirect to an unintended target bypassing the integrity check. issue 3 consider the impact of other headers content-length content-range etc. is there danger there the following algorithm details these restrictions let request be the request that fetched resource. if resource contains any of the following http headers return false www-authenticate refresh if the mode of request is cors return true. if the origin of request is resource s origin return true. if resource is cachable by a shared cache as defined in http11 return true. return false. note step 2 returns true if the resource was a cors-enabled request. if the resource failed the cors checks it won t be available to us for integrity checking because it won t have loaded successfully. 3.3.3 does resource match metadata if metadata is the empty string return true. if resource s url s scheme is about return true. if metadata is not a valid named information ni uri return false. if resource is not eligible for integrity valiation return false. let algorithm be the alg component of metadata. let expectedvalue be the val component of metadata. let expectedtype be the value of metadata s ct query string parameter. if expectedtype is not the empty string and is not a case-insensitive match for resource s mime type return false. let actualvalue be the result of applying algorithm to resource. if actualvalue is null return false. if actualvalue is a case-sensitive match for expectedvalue return true. otherwise return false. note if expectedtype is the empty string in 6 it would be reasonable for the user agent to warn the page s author about the dangers of mime type confusion attacks via its developer console. 3.4 modifications to fetch the fetch specification should contain the following modifications in order to enable the rest of this specification s work the following text should be added to section 2.2 a request has an associated integrity metadata. unless stated otherwise a request s integrity metadata is the empty string. the following text should be added to section 2.3 a response has an associated integrity state which is one of indeterminate pending corrupt and intact. unless stated otherwise it is indeterminate. perform the following steps before executing both the basic fetch and cors fetch with preflight algorithms if request s integrity metadata is the empty string set response s integrity state to indeterminate. otherwise set response s integrity state to pending. include a cache-control header whose value is no-transform if request s integrity metadata contains a content type set request s accept header value to the value of request s integrity metadata s content type. add the following step before step 1 of the handling of 401 status codes for both basic fetch and cors fetch with preflight algorithms if request s integrity state is pending set response s integrity state to corrupt and return response. before firing the process request end-of-file event for any request if the request s integrity metadata is the empty string set the response s integrity state to indeterminate and skip directly to firing the event. if response matches the request s integrity metadata set the response s integrity state to intact and skip directly to firing the event. set the response s integrity state to corrupt and skip directly to firing the event. 3.5 verification of html document subresources a variety of html elements result in requests for resources that are to be embedded into the document or executed in its context. to support integrity metadata for each of these and new elements that are added in the future a new integrity attribute is added to the list of content attributes for the a audio embed iframe link object script source track and video elements. a corresponding integrity idl attribute which reflects the value each element s integrity content attribute is added to the htmlanchorelement htmlmediaelement htmlembedelement htmliframeelement htmllinkelement htmlobjectelement htmlscriptelement htmlsourceelement and htmltrackelement interfaces. 3.5.1 the integrity attribute the integrity attribute represents integrity metadata for an element. the value of the attribute must be either the empty string or one valid named information ni uri rfc6920 as described by the following abnf grammar integrity-metatata 1# wsp ni-url wsp the ni-url rule is defined in rfc6920 section 3 figure 4. the integrity idl attribute must reflect the integrity content attribute. issue 4 we should consider supporting multiple ni urls which could allow migration between algorithms. 3.5.2 the noncanonical-src attribute todo authors may opt-in to a fallback mechanism whereby user agents would initially attempt to load resources from a non-canonical source perhaps over http for performance and caching reasons if that fetch failed an integrity check the user agent would report a violation and retry the fetch using a canonical url perhaps over https the non-canonical url is specified via a noncanonical-src attribute. for example example 8 script src http example.com script.js noncanonical-src http cdn.example.com script.js integrity ni sha-256 jsdfhiuwergn...vaaetgoifq ct application javascript script the noncanonicalsrc idl attribute must reflect the noncanonical-src content attribute. the noncanonical resource must be fetched with its omit credentials mode set to always to prevent leakage of cookies across insecure channels. issue 5 this attribute and fallback in general only makes sense if we care about allowing cache-friendly read http urls to load in an https context without warnings. i m not sure we do so i m not going to put too much thought into the details here before we discuss things a bit more. mkwst 3.5.3 element interface extensions 3.5.3.1 htmlanchorelement partial interface htmlanchorelement attribute domstring integrity 3.5.3.1.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.2 htmlembedelement partial interface htmlobjectelement attribute domstring integrity 3.5.3.2.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.3 htmliframeelement partial interface htmliframeelement attribute domstring integrity 3.5.3.3.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.4 htmlimageelement partial interface htmlimageelement attribute domstring integrity 3.5.3.4.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.5 htmllinkelement partial interface htmllinkelement attribute domstring integrity 3.5.3.5.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.6 htmlmediaelement partial interface htmlmediaelement attribute domstring integrity 3.5.3.6.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.7 htmlobjectelement partial interface htmlobjectelement attribute domstring integrity 3.5.3.7.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.8 htmlscriptelement partial interface htmlscriptelement attribute domstring integrity 3.5.3.8.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.3.9 htmltrackelement partial interface htmltrackelement attribute domstring integrity 3.5.3.9.1 attributes integrity of type domstring the value of this element s integrity attribute 3.5.4 handling integrity violations documents may specify the behavior of a failed integrity check by delivering a content security policy which contains an integrity-policy directive defined by the following abnf grammar directive-name integrity-policy directive-value 1#failure-mode require-for-all failure-mode block report fallback a document s integrity policy is the value of the integrity-policy directive if explicitly provided as part of the document s content security policy or block otherwise. if the document s integrity policy contains block the user agent must refuse to render or execute resources that fail an integrity check and must report a violation. if the document s integrity policy contains report the user agent may render or execute resources that fail an integrity check but must report a violation. issue 6 if the document s integrity policy contains fallback the user agent must refuse to render or execute resources that fail an integrity check and must report a violation. the user agent may additionally choose to load a fallback resource as specified for each relevant element. if the fallback resource fails an integrity check the user agent must refuse to render or execute the resource and must report a nother violation. see the noncanonical-src attribute for a strawman of how that might look issue 7 if the document s integrity policy contains require-for-all the user agent must treat the lack of integrity metadata for an resource as automatic failure refuse to fetch the resource and report a violation. 3.5.5 elements 3.5.5.1 the a element if an a element has both integrity and download attributes the user agent has all the data it needs in order to verify the integrity of the downloaded resource. this is the only type of download we can safely make promises about so it is the only type of download that we support. if integrity metadata is added to any a element that does not explicitly request that the resource it points to be downloaded user agents must treat the link as broken. before following a hyperlink the user agent must run the following steps if subject has an integrity attribute whose value is not the empty string then the user agent may report an error to the user in a user-agent-specific manner. abort the following a hyperlink algorithm. replace step 6 of the downloads a hyperlink algorithm with the following if the integrity attribute of that element is not the empty string and the element does not have a download attribute abort these steps. fetch url with integrity metadata set to the value of the integrity attribute of that element and handle the resulting resource as a download. when handling a resource as a download perform the following step before providing a user with a way to save the resource for later use if response s integrity state is corrupt and the document s integrity policy is block the user agent must report a violation and must abort the download. note note that this will cover only downloads triggered explicitly by adding a download attribute to an a element. such a link might look like the following example 9 a href https example.com file.zip integrity ni sha256 skjdsfkafinqfb...ihja_gqg ct application octet-stream download download a 3.5.5.2 the embed element when fetching an url via step 2 of the embed element setup steps algorithm set the integrity metadata of the request to the value of the element s integrity attribute. before running the task queued by the networking task source once the url has been fetched first perform the following steps if the response s integrity state is corrupt if the document s integrity policy is block set the element s type attribute to the empty string. skip to step 4 of the algorithm. report a violation. 3.5.5.3 the iframe element when content is to be loaded into the child browsing context created by an iframe perform fetches with the integrity metadata set to the value of the iframe element s integrity attribute. moreover if the document s integrity policy is block then the user agent must delay rendering the content until the fetching algorithm s task to process request end-of-file completes. when the process request end-of-file task completes if the request s integrity state is corrupt if resource is same origin with the document s browsing context owner iframe element s document s origin then queue a task to fire a simple event named error at the iframe element this will not fire for cross-origin requests to avoid leaking data about those resource s content report a violation. navigate the child browsing context to about blank. note note that this will only check the integrity of the iframe s document source. no subsequent verification for the document s subresources is perfomed. if integrity checks for the document s subresources are desirable the document loaded into the iframe needs to include integrity metadata for its subresources. issue 8 how does this effect things like the preload scanner how much work is it going to be for vendors to change the display whatever we ve got asap behavior that makes things fast for users how much impact will there be on user experience especially for things like ads where this kind of validation has the most value issue 9 how do we deal with navigations in the child browsing context are they simply disallowed if so does that make sense it might for ads but what about other use-cases 3.5.5.4 the img element when fetching an image via step 12 of the update the image data algorithm set the integrity metadata of the request to the value of the element s integrity attribute. before jumping one of the entries from the list in step 14 of the update the image data algorithm first perform the following steps if the response s integrity state is corrupt if the document s integrity policy is block abort the jump in progress. perform the steps in the entry labeled otherwise under step 14. report a violation. 3.5.5.5 the link element whenever a user agent attempts to obtain a resource pointed to by a link element set the integrity metadata of the request to the value of the element s integrity attribute. additionally perform the following steps before firing a load event at the element if the response s integrity state is corrupt if the document s integrity policy is block abort the load event and treat the resource as having failed to load. if resource is same origin with the origin of the link element s document then queue a task to fire a simple event named error at the link element. report a violation. 3.5.5.6 the object element when fetching an image via step 4 of step 4 of the determine what the object element represents algorithm set the integrity metadata of the request to the value of the element s integrity attribute. before step 7 of the determine what the object element represents algorithm first perform the following steps if the response s integrity state is corrupt if the document s integrity policy is block fire a simple event named error at the element. jump to the step labeled fallback. report a violation. 3.5.5.7 the script element when executing step 5 of step 14 of html5 s prepare a script algorithm set the integrity metadata of the request to the value of the element s integrity attribute. insert the following steps after step 5 of step 14 of html5 s prepare a script algorithm once the fetching algorithm has completed if the response s integrity state is corrupt if the document s integrity policy is block if resource is same origin with the link element s document s origin then queue a task to fire a simple event named error at the element and abort these steps. report a violation. 3.5.5.8 the track element when fetching the track url in step 10 of the start the track processing model algorithm set the integrity metadata of the request to the value of the element s integrity attribute. additionally perform the following steps before performing the steps specified for a successful track fetch if the response s integrity state is corrupt if the document s integrity policy is block perform the steps specified for a failed track fetch. abort the steps specified for a successful track fetch. report a violation. 3.5.5.9 the audio element todo issue 10 todo write this section might want to delay media elements until we have a solution to streaming. 3.5.5.10 the source element todo issue 11 todo write this section might want to delay media elements until we have a solution to streaming. 3.5.5.11 the video element todo issue 12 todo write this section might want to delay media elements until we have a solution to streaming. 3.6 verification of css-loaded subresources issue 13 tab and anne are poking at adding fetch to some spec somewhere which would allow css files to specify various arguments to the fetch algorithm while requesting resources. detail on the proposal is at http lists.w3.org archives public public-webappsec 2014jan 0129.html. once that is specified we can proceed defining an integrity argument that would allow integrity checks in css. 3.7 verification of js-loaded subresources issue 14 these sections are less fleshed out and debated than the html sections where the wg has concentrated most of its time thus far. 3.7.1 workers to validate the integrity of scripts which are to be run as workers a new constructor is added for worker and sharedworker which accepts a second argument containing integrity metadata. this information is used when running a worker to perform validation as outlined in the following sections webworkers 3.7.1.1 worker extension constructor domstring scripturl domstring integritymetadata partial interface worker eventtarget attribute domstring integrity 3.7.1.1.1 attributes integrity of type domstring the value of the worker s integrity attribute. defaults to the empty string. when the worker scripturl integritymetadata constructor is invoked if integritymetadata is not a valid named information ni url throw a syntaxerror exception and abort these steps. execute the worker scripturl constructor and set the newly created worker object s integrity attribute to integritymetadata. 3.7.1.2 sharedworker extension constructor domstring scripturl domstring name domstring integritymetadata partial interface worker eventtarget attribute domstring integrity 3.7.1.2.1 attributes integrity of type domstring the value of the sharedworker s integrity attribute. defaults to the empty string. when the sharedworker scripturl name integritymetadata constructor is invoked if integritymetadata is not a valid named information ni url throw a syntaxerror exception and abort these steps. execute the sharedworker scripturl name constructor and set the newly created sharedworker object s integrity attribute to integritymetadata. 3.7.1.3 validation add the following step directly after step 4 of the run a worker algorithm if the script resource fetched in step 4 has an integrity status of corrupt then for each worker or sharedworker object associated with worker global scope queue a task to fire a simple event named error at that object. abort these steps. 3.7.2 xmlhttprequest to validate the integrity of resources loaded via xmlhttprequest a new integrity attribute is added to the xmlhttprequest object. if set the integrity metadata in this attribute is used to validate the resource before triggering the load event. xmlhttprequest 3.7.2.1 the integrity attribute the integrity attribute must return its value. initially its value must be the empty string. setting the integrity attribute must run these steps if the state is not unsent or opened throw an invalidstateerror exception and abort these steps. if the value provided is not a valid named information ni url throw a syntaxerror exception and abort these steps. set the integrity attribute s value to the value provided. 3.7.2.2 progress events validation only takes place when the entire resource body has been downloaded. data processed before the resource has completely loaded or failed to load is unvalidated and potentially corrupt. for that reason if the document s integrity policy is block progress events will not fire until the fetch has completed one way or another. if the document s integrity policy is not block developers who care about integrity validation should still ignore progress events fired while the resource is downloading and instead listen only for the load abort and error events. if the document s integrity policy is block then before executing step 3.2 of the process response algorithm in step 13 of xmlhttprequest s send data method if the object s integrity attribute is not the empty string the user agent must abort the process response algorithm and must not fire the readystatechange event. before executing step 2.2 of the process response body algorithm in step 13 of xmlhttprequest s send data method if the object s integrity attribute is not the empty string the user agent must abort the process response body algorithm and must not fire the readystatechange event. before executing step 4 of the process response body algorithm in step 13 of xmlhttprequest s send data method if the object s integrity attribute is not the empty string the user agent must abort the process response body algorithm and must not fire the progress event. 3.7.2.3 validation whenever the user agent would switch an xmlhttprequest object to the done state then perform the following steps before switching state if the response s integrity state is intact or indeterminate then abort these steps and continue to switch to the done state. otherwise report a violation and run the following steps if the document s integrity policy is block set the response entity body to null run the request error steps for exception networkerror and event error. do not continue to switch to the done state. 4. caching optional the caching mechanism described in this section is optional. javascript libraries are a good example of resources that are often loaded and reloaded from different locations as users browse the web http cdnjs.cloudflare.com ajax libs jquery 1.10.2 jquery.min.js is exactly the same file as https ajax.googleapis.com ajax libs jquery 1.10.2 jquery.min.js. both files are identifiable via the ni url ni sha-256 iafenec8axsanynu6m0-0epcotwfbkvcefxnd5s_ki4 ct application javascript. to reduce the performance impact of reloading the same data user agents may use integrity metadata as a new index to a local cache meaning that a user who had already loaded a version of the file from ajax.googleapis.com wouldn t have to touch the network to load the cdnjs.cloudflare.com version. the user agent knows that the content is the same and would be free to treat the latter as a cache hit regardless of the location mismatch. 4.1 risks this approach is good for performance but can have security implications. see the origin confusion and mime type confusion sections below for some details. 4.1.1 origin confusion user agents which set up a caching mechanism that uses only the integrity metadata to identify a resource are vulnerable to attacks which bypass same-origin restrictions unless they are very careful when choosing whether or not to read data straight from the cache. for instance runtime script errors are sanitized for resources that are cors-cross-origin to the page into which they are loaded. html5 xmlhttprequest may only load data from same-origin resources or from resources delivered with proper cors headers. xmlhttprequest content security policy performs origin-based security checks. csp issue 15 more note the simple cache-poisoning version of this attack can be mitigated by requiring strong hash functions for cachable resources. more complex variants are more difficult to mitigate. consider the following an attacker lures alice to a page containing the following code example 10 script src http evil.com evil.js digest ni sha-256 123...789 alice s user agent loads evil.js and stores it in her cache. though bank.com is protected by a csp which allows only script from bank.com the attacker may still be able to exploit an xss vulnerability in bank.com which allows the injection of example 11 script src http bank.com awesome.js digest ni sha-256 123...789 since the script appears to come from bank.com csp allows it even though it doesn t actually exist on that server. 4.1.2 mime type confusion user agents which set up a caching mechanism that uses only the integrity metadata to identify a resource are vulnerable to attacks which create resources that behave differently based on the context in which they are loaded. gifar is the canonical example of such an attack. authors should mitigate this risk by specifying the expected content type along with the digest as specified in rfc 6920 section 3.1. this means that the content type will be verified along with the digest when determining whether a resource matches certain integrity metadata. 4.2 recommendations to mitigate the risk of cross-origin data leakage or type-sniffing exploitation user agents that take this approach to caching must not use integrity metadata as a cache identifier unless the following are all true the integrity metadata contains a content type. the resource was delivered in response to an http get request and not post options trace etc. the resource was delivered with an access-control-allow-origin http header with a value of cors the integrity metadata uses a hash function with very strong uniqueness characteristics sha-512 or better. if a content security policy is active in a context the script or link element which triggered the resource s fetch has a valid nonce. issue 16 more ideas limiting to resources with wide-open cors headers and strong hash functions seems like a reasonable start 5. proxies optimizing proxies and other intermediate servers which modify the content of fetched resources must ensure that the digest associated with those resources stays in sync with the new content. one option is to ensure that the integrity metadata associated with resources is updated along with the resource itself. another would be simply to deliver only the canonical version of resources for which a page author has requested integrity verification. to support this latter option user agents may send a cache-control header with a value of no-transform. issue 17 think about how integrity checks would effect vary headers in general. 6. security considerations 6.1 insecure channels remain insecure integrity metadata delivered over an insecure channel provides no security benefit. attackers can alter the digest in-flight or remove it entirely or do absolutely anything else to the document just as they could alter the resource the hash is meant to validate. authors who desire any sort of security whatsoever should deliver resources containing digests over secure channels. 6.2 hash collision attacks digests are only as strong as the hash function used to generate them. user agents should refuse to support known-weak hashing functions like md5 and should restrict supported hashing functions to those known to be collision-resistant. at the time of writing sha-256 is a good baseline. moreover user agents should reevaluate their supported hashing functions on a regular basis and deprecate support for those functions shown to be insecure. 6.3 cross-origin data leakage attackers can determine whether some cross-origin resource has certain content by attempting to load it with a known digest and watching for load failure. if the load fails the attacker can surmise that the resource didn t match the hash and thereby gain some insight into its contents. this might reveal for example whether or not a user is logged into a particular service. moreover attackers can brute-force specific values in an otherwise static resource consider a document that looks like this example 12 html static content h1 hello username h1 static content html an attacker can precompute hashes for the page with a variety of common usernames and specify those hashes while repeatedly attempting to load the document. by examining the reported violations the attacker can obtain a user s username. user agents should mitigate the risk by refusing to fire error events on elements which loaded cross-origin resources but some side-channels will likely be difficult to avoid image s naturalheight and naturalwidth for instance 7. acknowledgements none of this is new. much of the content here is inspired heavily by gervase markham s link fingerprints concept as well as whatwg s link hashes. a. references a.1 normative references abnf d. crocker p. overell. augmented bnf for syntax specifications abnf. january 2008. std. url http www.ietf.org rfc rfc5234.txt cors anne van kesteren. cross-origin resource sharing. 16 january 2014. w3c recommendation. url http www.w3.org tr cors csp adam barth dan veditz mike west. content security policy 1.1. working draft. url http w3.org tr csp11 html5 robin berjon steve faulkner travis leithead erika doyle navara edward o connor silvia pfeiffer. html5. 4 february 2014. w3c candidate recommendation. url http www.w3.org tr html5 http11 r. fielding et al. hypertext transfer protocol http 1.1. june 1999. rfc. url http www.ietf.org rfc rfc2616.txt mimetype ned freed nathaniel s. borenstein. multipurpose internet mail extensions mime part two media types. draft standard. url http tools.ietf.org html rfc2046 rfc2119 s. bradner. key words for use in rfcs to indicate requirement levels. march 1997. internet rfc 2119. url http www.ietf.org rfc rfc2119.txt rfc2818 e. rescorla. http over tls. may 2000. rfc. url http www.ietf.org rfc rfc2818.txt rfc4648 simon josefsson. the base16 base32 and base64 data encodings. proposed standard. url http tools.ietf.org html rfc4648 rfc6454 a. barth. the web origin concept. december 2011. rfc. url http www.ietf.org rfc rfc6454.txt rfc6920 stephen farrell dirk kutscher christian dannewitz borje ohlman ari keranen phillip hallam-baker. naming things with hashes. proposed standard. url http tools.ietf.org html rfc6920 webworkers ian hickson. web workers. 1 may 2012. w3c candidate recommendation. url http www.w3.org tr workers xmlhttprequest anne van kesteren julian aubourg jungkee song hallvord steen et al. xmlhttprequest level 1. 30 january 2014. w3c working draft. url http www.w3.org tr xmlhttprequest 