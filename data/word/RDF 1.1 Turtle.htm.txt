rdf 1.1 turtle rdf 1.1 turtle terse rdf triple language w3c recommendation 25 february 2014 this version http www.w3.org tr 2014 rec-turtle-20140225 latest published version http www.w3.org tr turtle test suite http www.w3.org tr 2014 note-rdf11-testcases-20140225 implementation report http www.w3.org 2013 turtlereports index.html previous version http www.w3.org tr 2014 pr-turtle-20140225 editors eric prud hommeaux w3c gavin carothers lex machina inc authors david beckett tim berners-lee w3c eric prud hommeaux w3c gavin carothers lex machina inc please check the errata for any errors or issues reported since publication. the english version of this specification is the only normative version. non-normative translations may also be available. copyright 2008-2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract the resource description framework rdf is a general-purpose language for representing information in the web. this document defines a textual syntax for rdf called turtle that allows an rdf graph to be completely written in a compact and natural text form with abbreviations for common usage patterns and datatypes. turtle provides levels of compatibility with the n-triples n-triples format as well as the triple pattern syntax of the sparql w3c recommendation. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document is a part of the rdf 1.1 document suite. the document defines turtle the terse rdf triple language a concrete syntax for rdf rdf11-concepts this document was published by the rdf working group as a recommendation. if you wish to make comments regarding this document please send them to public-rdf-comments@w3.org subscribe archives all comments are welcome. please see the working group s implementation report. this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 2. turtle language 2.1 simple triples 2.2 predicate lists 2.3 object lists 2.4 iris 2.5 rdf literals 2.5.1 quoted literals 2.5.2 numbers 2.5.3 booleans 2.6 rdf blank nodes 2.7 nesting unlabeled blank nodes in turtle 2.8 collections 3. examples 4. turtle compared to sparql 5. conformance 5.1 media type and content encoding 6. turtle grammar 6.1 white space 6.2 comments 6.3 iri references 6.4 escape sequences 6.5 grammar 7. parsing 7.1 parser state 7.2 rdf term constructors 7.3 rdf triples constructors 7.4 parsing example a. embedding turtle in html documents a.1 xhtml a.2 parsing turtle in html b. internet media type file extension and macintosh file type c. acknowledgements d. change log d.1 changes since january 2014 proposed recommendation d.2 changes from february 2013 candidate recommendation to january 2014 proposed recommendation d.3 changes from august 2011 first public working draft to candidate recommendation d.4 changes from january 2008 team submission to first public working draft e. references e.1 normative references e.2 informative references 1. introduction this section is non-normative. this document defines turtle the terse rdf triple language a concrete syntax for rdf rdf11-concepts a turtle document is a textual representations of an rdf graph. the following turtle document describes the relationship between green goblin and spiderman. example 1 base http example.org prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# prefix rdfs http www.w3.org 2000 01 rdf-schema# prefix foaf http xmlns.com foaf 0.1 prefix rel http www.perceive.net schemas relationship green-goblin rel enemyof spiderman a foaf person in the context of the marvel universe foaf name green goblin spiderman rel enemyof green-goblin a foaf person foaf name spiderman ru this example introduces many of features of the turtle language base and relative iris prefix and prefixed names predicate lists separated by object lists separated by the token a and literals. the turtle grammar for triples is a subset of the sparql 1.1 query language sparql11-query grammar for triplesblock. the two grammars share production and terminal names where possible. the construction of an rdf graph from a turtle document is defined in turtle grammar and parsing. 2. turtle language this section is non-normative. a turtle document allows writing down an rdf graph in a compact textual form. an rdf graph is made up of triples consisting of a subject predicate and object. comments may be given after a that is not part of another lexical token and continue to the end of the line. 2.1 simple triples the simplest triple statement is a sequence of subject predicate object terms separated by whitespace and terminated by after each triple. example 2 http example.org spiderman http www.perceive.net schemas relationship enemyof http example.org green-goblin 2.2 predicate lists often the same subject will be referenced by a number of predicates. the predicateobjectlist production matches a series of predicates and objects separated by following a subject. this expresses a series of rdf triples with that subject and each predicate and object allocated to one triple. thus the symbol is used to repeat the subject of triples that vary only in predicate and object rdf terms. these two examples are equivalent ways of writing the triples about spiderman. example 3 http example.org spiderman http www.perceive.net schemas relationship enemyof http example.org green-goblin http xmlns.com foaf 0.1 name spiderman example 4 http example.org spiderman http www.perceive.net schemas relationship enemyof http example.org green-goblin http example.org spiderman http xmlns.com foaf 0.1 name spiderman 2.3 object lists as with predicates often objects are repeated with the same subject and predicate. the objectlist production matches a series of objects separated by following a predicate. this expresses a series of rdf triples with the corresponding subject and predicate and each object allocated to one triple. thus the symbol is used to repeat the subject and predicate of triples that only differ in the object rdf term. these two examples are equivalent ways of writing spiderman s name in two languages. example 5 http example.org spiderman http xmlns.com foaf 0.1 name spiderman ru example 6 http example.org spiderman http xmlns.com foaf 0.1 name spiderman http example.org spiderman http xmlns.com foaf 0.1 name ru there are three types of rdf term defined in rdf concepts iris internationalized resource identifiers literals and blank nodes. turtle provides a number of ways of writing each. 2.4 iris iris may be written as relative or absolute iris or prefixed names. relative and absolute iris are enclosed in and and may contain numeric escape sequences described below for example http example.org green-goblin relative iris like green-goblin are resolved relative to the current base iri. a new base iri can be defined using the base or base directive. specifics of this operation are defined in section 6.3 iri references the token a in the predicate position of a turtle triple represents the iri http www.w3.org 1999 02 22-rdf-syntax-ns#type a prefixed name is a prefix label and a local part separated by a colon a prefixed name is turned into an iri by concatenating the iri associated with the prefix and the local part. the prefix or prefix directive associates a prefix label with an iri. subsequent prefix or prefix directives may re-map the same prefix label. note the turtle language originally permitted only the syntax including the character for writing prefix and base directives. the case-insensitive prefix and base forms were added to align turtle s syntax with that of sparql. it is advisable to serialize rdf using the prefix and base forms until rdf 1.1 turtle parsers are widely deployed. to write http www.perceive.net schemas relationship enemyof using a prefixed name define a prefix label for the vocabulary iri http www.perceive.net schemas relationship as someprefix then write someprefix enemyof which is equivalent to writing http www.perceive.net schemas relationship enemyof this can be written using either the original turtle syntax for prefix declarations example 7 prefix someprefix http www.perceive.net schemas relationship http example.org green-goblin someprefix enemyof http example.org spiderman or sparql s syntax for prefix declarations example 8 prefix someprefix http www.perceive.net schemas relationship http example.org green-goblin someprefix enemyof http example.org spiderman note prefixed names are a superset of xml qnames. they differ in that the local part of prefixed names may include leading digits e.g. leg 3032571 or isbn13 9780136019701 non leading colons e.g. og video height reserved character escape sequences e.g. wgs lat long the following turtle document contains examples of all the different ways of writing iris in turtle. example 9 a triple with all absolute iris http one.example subject1 http one.example predicate1 http one.example object1 base http one.example subject2 predicate2 object2 relative iris e.g. http one.example subject2 base http one.example subject2 predicate2 object2 relative iris e.g. http one.example subject2 prefix p http two.example p subject3 p predicate3 p object3 prefixed name e.g. http two.example subject3 prefix p http two.example p subject3 p predicate3 p object3 prefixed name e.g. http two.example subject3 prefix p path prefix p now stands for http one.example path p subject4 p predicate4 p object4 prefixed name e.g. http one.example path subject4 prefix http another.example empty prefix subject5 predicate5 object5 prefixed name e.g. http another.example subject5 subject6 a subject7 same as subject6 http www.w3.org 1999 02 22-rdf-syntax-ns#type subject7 http 伝 言 example user amp channel r 26d a subject8 a multi-script subject iri note the prefix and base directives require a trailing after the iri the equalivent prefix and base must not have a trailing after the iri part of the directive. 2.5 rdf literals literals are used to identify values such as strings numbers dates. example 10 prefix foaf http xmlns.com foaf 0.1 http example.org green-goblin foaf name green goblin http example.org spiderman foaf name spiderman 2.5.1 quoted literals quoted literals grammar production rdfliteral have a lexical form followed by a language tag a datatype iri or neither. the representation of the lexical form consists of an initial delimiter e.g. u+0022 a sequence of permitted characters or numeric escape sequence or string escape sequence and a final delimiter. the corresponding rdf lexical form is the characters between the delimiters after processing any escape sequences. if present the language tag is preceded by a u+0040 if there is no language tag there may be a datatype iri preceeded by u+005e u+005e the datatype iri in turtle may be written using either an absolute iri a relative iri or prefixed name. if there is no datatype iri and no language tag the datatype is xsd string. u+005c may not appear in any quoted literal except as part of an escape sequence. other restrictions depend on the delimiter literals delimited by u+0027 may not contain the characters lf u+000a or cr u+000d literals delimited by may not contain the characters lf or cr. literals delimited by may not contain the sequence of characters literals delimited by may not contain the sequence of characters example 11 prefix rdfs http www.w3.org 2000 01 rdf-schema# prefix show http example.org vocab show prefix xsd http www.w3.org 2001 xmlschema# show 218 rdfs label that seventies show xsd string literal with xml schema string datatype show 218 rdfs label that seventies show http www.w3.org 2001 xmlschema#string same as above show 218 rdfs label that seventies show same again show 218 show localname that seventies show en literal with a language tag show 218 show localname cette s rie des ann es soixante-dix fr literal delimited by single quote show 218 show localname cette s rie des ann es septante fr-be literal with a region subtag show 218 show blurb this is a multi-line literal with embedded new lines and quotes literal with many quotes and up to two sequential apostrophes 2.5.2 numbers numbers can be written like other literals with lexical form and datatype e.g. 5.0 xsd decimal turtle has a shorthand syntax for writing integer values arbitrary precision decimal values and double precision floating point values. data type abbreviated lexical description xsd integer 5 5 xsd integer integer values may be written as an optional sign and a series of digits. integers match the regular expression 0-9 xsd decimal 5.0 5.0 xsd decimal arbitrary-precision decimals may be written as an optional sign zero or more digits a decimal point and one or more digits. decimals match the regular expression 0-9 0-9 xsd double 4.2e9 4.2e9 xsd double double-precision floating point values may be written as an optionally signed mantissa with an optional decimal point the letter e or e and an optionally signed integer exponent. the exponent matches the regular expression 0-9 and the mantissa one of these regular expressions 0-9 0-9 0-9 or 0-9 example 12 prefix http example.org elements http en.wikipedia.org wiki helium atomicnumber 2 xsd integer atomicmass 4.002602 xsd decimal specificgravity 1.663e-4 xsd double 2.5.3 booleans boolean values may be written as either true or false case-sensitive and represent rdf literals with the datatype xsd boolean. example 13 prefix http example.org stats http somecountry.example census2007 islandlocked false xsd boolean 2.6 rdf blank nodes rdf blank nodes in turtle are expressed as followed by a blank node label which is a series of name characters. the characters in the label are built upon pn_chars_base liberalized as follows the characters and digits may appear anywhere in a blank node label. the character may appear anywhere except the first or last character. the characters u+00b7 u+0300 to u+036f and u+203f to u+2040 are permitted anywhere except the first character. a fresh rdf blank node is allocated for each unique blank node label in a document. repeated use of the same blank node label identifies the same rdf blank node. example 14 prefix foaf http xmlns.com foaf 0.1 alice foaf knows bob bob foaf knows alice 2.7 nesting unlabeled blank nodes in turtle in turtle fresh rdf blank nodes are also allocated when matching the production blanknodepropertylist and the terminal anon. both of these may appear in the subject or object position of a triple see the turtle grammar that subject or object is a fresh rdf blank node. this blank node also serves as the subject of the triples produced by matching the predicateobjectlist production embedded in a blanknodepropertylist. the generation of these triples is described in predicate lists. blank nodes are also allocated for collections described below. example 15 prefix foaf http xmlns.com foaf 0.1 someone knows someone else who has the name bob foaf knows foaf name bob the turtle grammar allows blanknodepropertylists to be nested. in this case each inner establishes a new subject blank node which reverts to the outer node at the and serves as the current subject for predicate object lists. the use of predicateobjectlist within a blanknodepropertylist is a common idiom for representing a series of properties of a node. abbreviated example 16 prefix foaf http xmlns.com foaf 0.1 foaf name alice foaf knows foaf name bob foaf knows foaf name eve foaf mbox bob@example.com corresponding simple triples example 17 a http xmlns.com foaf 0.1 name alice a http xmlns.com foaf 0.1 knows b b http xmlns.com foaf 0.1 name bob b http xmlns.com foaf 0.1 knows c c http xmlns.com foaf 0.1 name eve b http xmlns.com foaf 0.1 mbox bob@example.com 2.8 collections rdf provides a collection rdf11-mt structure for lists of rdf nodes. the turtle syntax for collections is a possibly empty list of rdf terms enclosed by this collection represents an rdf first rdf rest list structure with the sequence of objects of the rdf first statements being the order of the terms enclosed by the syntax must appear in the subject or object position of a triple see the turtle grammar the blank node at the head of the list is the subject or object of the containing triple. example 18 prefix http example.org foo the object of this triple is the rdf collection blank node subject predicate a b c an empty collection value rdf nil subject predicate2 3. examples this section is non-normative. this example is a turtle translation of example 7 in the rdf xml syntax specification example1.ttl example 19 prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# prefix dc http purl.org dc elements 1.1 prefix ex http example.org stuff 1.0 http www.w3.org tr rdf-syntax-grammar dc title rdf xml syntax specification revised ex editor ex fullname dave beckett ex homepage http purl.org net dajobe an example of an rdf collection of two literals. example 20 prefix http example.org stuff 1.0 a b apple banana which is short for example2.ttl example 21 prefix http example.org stuff 1.0 prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# a b rdf first apple rdf rest rdf first banana rdf rest rdf nil an example of two identical triples containing literal objects containing newlines written in plain and long literal forms. the line breaks in this example are line feed characters u+000a example3.ttl example 22 prefix http example.org stuff 1.0 a b the first line nthe second line n more a b the first line the second line more as indicated by the grammar a collection can be either a subject or an object. this subject or object will be the novel blank node for the first object if the collection has one or more objects or rdf nil if the collection is empty. for example example 23 prefix http example.org stuff 1.0 1 2.0 3e1 p w is syntactic sugar for noting that the blank nodes b0 b1 and b2 do not occur anywhere else in the rdf graph example 24 prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# b0 rdf first 1 rdf rest b1 b1 rdf first 2.0 rdf rest b2 b2 rdf first 3e1 rdf rest rdf nil b0 p w rdf collections can be nested and can involve other syntactic forms example 25 prefix http example.org stuff 1.0 1 p q 2 p2 q2 is syntactic sugar for example 26 prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# b0 rdf first 1 rdf rest b1 b1 rdf first b2 b2 p q b1 rdf rest b3 b3 rdf first b4 b4 rdf first 2 rdf rest rdf nil b3 rdf rest rdf nil 4. turtle compared to sparql this section is non-normative. the sparql 1.1 query languagef sparql sparql11-query uses a turtle style syntax for its triplesblock production. this production differs from the turtle language in that sparql permits rdf literals as the subject of rdf triples. sparql permits variables name or name in any part of the triple of the form. turtle allows prefix and base declarations anywhere outside of a triple. in sparql they are only allowed in the prologue at the start of the sparql query sparql uses case insensitive keywords except for a turtle s prefix and base declarations are case sensitive the sparql dervied prefix and base are case insensitive. true and false are case insensitive in sparql and case sensitive in turtle. true is not a valid boolean value in turtle. for further information see the syntax for iris and sparql grammar sections of the sparql query document sparql11-query 5. conformance as well as sections marked as non-normative all authoring guidelines diagrams examples and notes in this specification are non-normative. everything else in this specification is normative. the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc2119 this specification defines conformance criteria for turtle documents turtle parsers a conforming turtle document is a unicode string that conforms to the grammar and additional constraints defined in section 6. turtle grammar starting with the turtledoc production. a turtle document serializes an rdf graph. a conforming turtle parser is a system capable of reading turtle documents on behalf of an application. it makes the serialized rdf dataset as defined in section 7. parsing available to the application usually through some form of api. the iri that identifies the turtle language is http www.w3.org ns formats turtle note this specification does not define how turtle parsers handle non-conforming input documents. 5.1 media type and content encoding the media type of turtle is text turtle. the content encoding of turtle content is always utf-8. charset parameters on the mime type are required until such time as the text media type tree permits utf-8 to be sent without a charset parameter. see section b. internet media type file extension and macintosh file type for the media type registration form. 6. turtle grammar a turtle document is a unicode unicode character string encoded in utf-8. unicode characters only in the range u+0000 to u+10ffff inclusive are allowed. 6.1 white space white space production ws is used to separate two terminals which would otherwise be mis- recognized as one terminal. rule names below in capitals indicate where white space is significant these form a possible choice of terminals for constructing a turtle parser. white space is significant in the production string. 6.2 comments comments in turtle take the form of outside an iriref or string and continue to the end of line marked by characters u+000d or u+000a or end of file if there is no end of line after the comment marker. comments are treated as white space. 6.3 iri references relative iris are resolved with base iris as per uniform resource identifier uri generic syntax rfc3986 using only the basic algorithm in section 5.2. neither syntax-based normalization nor scheme-based normalization described in sections 6.2.2 and 6.2.3 of rfc3986 are performed. characters additionally allowed in iri references are treated in the same way that unreserved characters are treated in uri references per section 6.5 of internationalized resource identifiers iris rfc3987 the base or base directive defines the base iri used to resolve relative iris per rfc3986 section 5.1.1 base uri embedded in content section 5.1.2 base uri from the encapsulating entity defines how the in-scope base iri may come from an encapsulating document such as a soap envelope with an xml base directive or a mime multipart document with a content-location header. the retrieval uri identified in 5.1.3 base uri from the retrieval uri is the url from which a particular turtle document was retrieved. if none of the above specifies the base uri the default base uri section 5.1.4 default base uri is used. each base or base directive sets a new in-scope base uri relative to the previous one. 6.4 escape sequences there are three forms of escapes used in turtle documents numeric escape sequences represent unicode code points escape sequence unicode code point u hex hex hex hex a unicode character in the range u+0000 to u+ffff inclusive corresponding to the value encoded by the four hexadecimal digits interpreted from most significant to least significant digit. u hex hex hex hex hex hex hex hex a unicode character in the range u+0000 to u+10ffff inclusive corresponding to the value encoded by the eight hexadecimal digits interpreted from most significant to least significant digit. where hex is a hexadecimal character hex 0-9 a-f a-f string escape sequences represent the characters traditionally escaped in string literals escape sequence unicode code point t u+0009 b u+0008 n u+000a r u+000d f u+000c u+0022 u+0027 u+005c reserved character escape sequences consist of a followed by one of and represent the character to the right of the context where each kind of escape sequence can be used numeric escapes string escapes reserved character escapes iris used as rdf terms or as in prefix prefix base or base declarations yes no no local names no no yes strings yes yes no note encoded sequences are in the character range for iris and are explicitly allowed in local names. these appear as a followed by two hex characters and represent that same sequence of three characters. these sequences are not decoded during processing. a term written as http a.example 66oo-bar in turtle designates the iri http a.example 66oo-bar and not iri http a.example foo-bar. a term written as ex 66oo-bar with a prefix prefix ex http a.example also designates the iri http a.example 66oo-bar. 6.5 grammar the ebnf used here is defined in xml 1.0 ebnf-notation production labels consisting of a number and a final s e.g. 60s reference the production with that number in the sparql 1.1 query language grammar sparql11-query notes keywords in single quotes base prefix a true false are case-sensitive. keywords in double quotes base prefix are case-insensitive. escape sequences uchar and echar are case sensitive. when tokenizing the input and choosing grammar rules the longest match is chosen. the turtle grammar is ll 1 and lalr 1 when the rules with uppercased names are used as terminals. the entry point into the grammar is turtledoc. in signed numbers no white space is allowed between the sign and the number. the 162s anon ws token allows any amount of white space and comments between s. the single space version is used in the grammar for clarity. the strings prefix and base match the pattern for langtag though neither prefix nor base are registered language subtags. this specification does not define whether a quoted literal followed by either of these tokens e.g. a base is in the turtle language. 1 turtledoc statement 2 statement directive triples 3 directive prefixid base sparqlprefix sparqlbase 4 prefixid prefix pname_ns iriref 5 base base iriref 5s sparqlbase base iriref 6s sparqlprefix prefix pname_ns iriref 6 triples subject predicateobjectlist blanknodepropertylist predicateobjectlist 7 predicateobjectlist verb objectlist verb objectlist 8 objectlist object object 9 verb predicate a 10 subject iri blanknode collection 11 predicate iri 12 object iri blanknode collection blanknodepropertylist literal 13 literal rdfliteral numericliteral booleanliteral 14 blanknodepropertylist predicateobjectlist 15 collection object 16 numericliteral integer decimal double 128s rdfliteral string langtag iri 133s booleanliteral true false 17 string string_literal_quote string_literal_single_quote string_literal_long_single_quote string_literal_long_quote 135s iri iriref prefixedname 136s prefixedname pname_ln pname_ns 137s blanknode blank_node_label anon productions for terminals 18 iriref x00-#x20 uchar x00 null 01-#x1f control codes x20 space 139s pname_ns pn_prefix 140s pname_ln pname_ns pn_local 141s blank_node_label pn_chars_u 0-9 pn_chars pn_chars 144s langtag a-za-z a-za-z0-9 19 integer 0-9 20 decimal 0-9 0-9 21 double 0-9 0-9 exponent 0-9 exponent 0-9 exponent 154s exponent ee 0-9 22 string_literal_quote x22#x5c#xa#xd echar uchar x22 x5c xa new line xd carriage return 23 string_literal_single_quote x27#x5c#xa#xd echar uchar x27 x5c xa new line xd carriage return 24 string_literal_long_single_quote echar uchar 25 string_literal_long_quote echar uchar 26 uchar u hex hex hex hex u hex hex hex hex hex hex hex hex 159s echar tbnrf 161s ws x20 x9 xd xa x20 space x9 character tabulation xd carriage return xa new line 162s anon ws 163s pn_chars_base a-z a-z x00c0-#x00d6 x00d8-#x00f6 x00f8-#x02ff x0370-#x037d x037f-#x1fff x200c-#x200d x2070-#x218f x2c00-#x2fef x3001-#xd7ff xf900-#xfdcf xfdf0-#xfffd x10000-#xeffff 164s pn_chars_u pn_chars_base 166s pn_chars pn_chars_u 0-9 x00b7 x0300-#x036f x203f-#x2040 167s pn_prefix pn_chars_base pn_chars pn_chars 168s pn_local pn_chars_u 0-9 plx pn_chars plx pn_chars plx 169s plx percent pn_local_esc 170s percent hex hex 171s hex 0-9 a-f a-f 172s pn_local_esc 7. parsing the rdf 1.1 concepts and abstract syntax specification rdf11-concepts defines three types of rdf term iris literals and blank nodes. literals are composed of a lexical form and an optional language tag bcp47 or datatype iri. an extra type prefix is used during parsing to map string identifiers to namespace iris. this section maps a string conforming to the grammar in section 6.5 grammar to a set of triples by mapping strings matching productions and lexical tokens to rdf terms or their components e.g. language tags lexical forms of literals grammar productions change the parser state and emit triples. 7.1 parser state parsing turtle requires a state of five items iri baseuri when the base production is reached the second rule argument iriref is the base uri used for relative iri resolution. map prefix iri namespaces the second and third rule arguments pname_ns and iriref in the prefixid production assign a namespace name iriref for the prefix pname_ns outside of a prefixid production any pname_ns is substituted with the namespace. note that the prefix may be an empty string per the pname_ns production pn_prefix map string blank node bnodelabels a mapping from string to blank node. rdf_term cursubject the cursubject is bound to the subject production. rdf_term curpredicate the curpredicate is bound to the verb production. if token matched was a curpredicate is bound to the iri http www.w3.org 1999 02 22-rdf-syntax-ns#type. 7.2 rdf term constructors this table maps productions and lexical tokens to rdf terms or components of rdf terms listed in section 7. parsing production type procedure iriref iri the characters between and are taken with the numeric escape sequences unescaped to form the unicode string of the iri. relative iri resolution is performed per section 6.3. pname_ns prefix when used in a prefixid or sparqlprefix production the prefix is the potentially empty unicode string matching the first argument of the rule is a key into the namespaces map. iri when used in a prefixedname production the iri is the value in the namespaces map corresponding to the first argument of the rule. pname_ln iri a potentially empty prefix is identified by the first sequence pname_ns. the namespaces map must have a corresponding namespace. the unicode string of the iri is formed by unescaping the reserved characters in the second argument pn_local and concatenating this onto the namespace. string_literal_single_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form. string_literal_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form. string_literal_long_single_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form. string_literal_long_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form. langtag language tag the characters following the form the unicode string of the language tag. rdfliteral literal the literal has a lexical form of the first rule argument string. if the iri rule matched the datatype is iri and the literal has no language tag. if the langtag rule matched the datatype is rdf langstring and the language tag is langtag. if neither matched the datatype is xsd string and the literal has no language tag. integer literal the literal has a lexical form of the input string and a datatype of xsd integer. decimal literal the literal has a lexical form of the input string and a datatype of xsd decimal. double literal the literal has a lexical form of the input string and a datatype of xsd double. booleanliteral literal the literal has a lexical form of the true or false depending on which matched the input and a datatype of xsd boolean. blank_node_label blank node the string matching the second argument pn_local is a key in bnodelabels. if there is no corresponding blank node in the map one is allocated. anon blank node a blank node is generated. blanknodepropertylist blank node a blank node is generated. note the rules for blanknodepropertylist in the next section. collection blank node for non-empty lists a blank node is generated. note the rules for collection in the next section. iri for empty lists the resulting iri is rdf nil. note the rules for collection in the next section. 7.3 rdf triples constructors a turtle document defines an rdf graph composed of set of rdf triples. the subject production sets the cursubject. the verb production sets the curpredicate. each object n in the document produces an rdf triple cursubject curpredicate n property lists beginning the blanknodepropertylist production records the cursubject and curpredicate and sets cursubject to a novel blank node b. finishing the blanknodepropertylist production restores cursubject and curpredicate. the node produced by matching blanknodepropertylist is the blank node b. collections beginning the collection production records the cursubject and curpredicate. each object in the collection production has a cursubject set to a novel blank node b and a curpredicate set to rdf first. for each object objectn after the first produces a triple objectn-1 rdf rest objectn finishing the collection production creates an additional triple cursubject rdf rest rdf nil and restores cursubject and curpredicate the node produced by matching collection is the first blank node b for non-empty lists and rdf nil for empty lists. 7.4 parsing example this section is non-normative. the following informative example shows the semantic actions performed when parsing this turtle document with an lalr 1 parser example 27 prefix ericfoaf http www.w3.org people eric ericp-foaf.rdf# prefix http xmlns.com foaf 0.1 ericfoaf ericp givenname eric knows http norman.walsh.name knows who dan-brickley mbox mailto timbl@w3.org http getopenid.com amyvdh map the prefix ericfoaf to the iri http www.w3.org people eric ericp-foaf.rdf#. map the empty prefix to the iri http xmlns.com foaf 0.1 assign cursubject the iri http www.w3.org people eric ericp-foaf.rdf#ericp. assign curpredicate the iri http xmlns.com foaf 0.1 givenname. emit an rdf triple rdf#ericp givenname eric assign curpredicate the iri http xmlns.com foaf 0.1 knows. emit an rdf triple rdf#ericp knows who dan-brickley emit an rdf triple rdf#ericp knows 1 save cursubject and reassign to the blank node 1. save curpredicate. assign curpredicate the iri http xmlns.com foaf 0.1 mbox. emit an rdf triple 1 mbox mailto timbl@w3.org restore cursubject and curpredicate to their saved values rdf#ericp knows emit an rdf triple rdf#ericp knows http getopenid.com amyvdh a. embedding turtle in html documents this section is non-normative. html html5 script tags can be used to embed data blocks in documents. turtle can be easily embedded in html this way. example 28 script type text turtle prefix dc http purl.org dc terms prefix frbr http purl.org vocab frbr core# http books.example.com works 45u8qjgzsqkdh8n a frbr work dc creator wil wheaton en dc title just a geek en frbr realization http books.example.com products 9780596007683.book http books.example.com products 9780596802189.ebook http books.example.com products 9780596007683.book a frbr expression dc type http books.example.com product-types book http books.example.com products 9780596802189.ebook a frbr expression dc type http books.example.com product-types ebook script turtle content should be placed in a script tag with the type attribute set to text turtle. and symbols do not need to be escaped inside of script tags. the character encoding of the embedded turtle will match the html documents encoding. a.1 xhtml this section is non-normative. like javascript turtle authored for html text html can break when used in xhtml application xhtml+xml the solution is the same one used for javascript. example 29 script type text turtle cdata prefix frbr http purl.org vocab frbr core# http books.example.com works 45u8qjgzsqkdh8n a frbr work script when embedded in xhtml turtle data blocks must be enclosed in cdata sections. those cdata markers must be in turtle comments. if the character sequence occurs in the document it must be escaped using strings escapes u005d u0054 u003e this will also make turtle safe in polyglot documents served as both text html and application xhtml+xml. failing to use cdata sections or escape may result in a non well-formed xml document. a.2 parsing turtle in html this section is non-normative. there are no syntactic or grammar differences between parsing turtle that has been embedded and normal turtle documents. a turtle document parsed from an html dom will be a stream of character data rather than a stream of utf-8 encoded bytes. no decoding is necessary if the html document has already been parsed into dom. each script data block is considered to be it s own turtle document. prefix and base declarations in a turtle data bloc are scoped to that data block and do not effect other data blocks. the html lang attribute or xhtml xml lang attribute have no effect on the parsing of the data blocks. the base uri of the encapsulating html document provides a base uri embedded in content per rfc3986 section 5.1.1. b. internet media type file extension and macintosh file type contact eric prud hommeaux see also how to register a media type for a w3c specification internet media type registration consistency of use tag finding 3 june 2002 revised 4 september 2002 the internet media type mime type for turtle is text turtle it is recommended that turtle files have the extension ttl all lowercase on all platforms. it is recommended that turtle files stored on macintosh hfs file systems be given a file type of text this information that follows has been submitted to the iesg for review approval and registration with iana. type name text subtype name turtle required parameters none optional parameters charset this parameter is required when transferring non-ascii data. if present the value of charset is always utf-8. encoding considerations the syntax of turtle is expressed over code points in unicode unicode the encoding is always utf-8 utf-8 unicode code points may also be expressed using an uxxxx u+0000 to u+ffff or uxxxxxxxx syntax for u+10000 onwards where x is a hexadecimal digit 0-9a-fa-f security considerations turtle is a general-purpose assertion language applications may evaluate given data to infer more assertions or to dereference iris invoking the security considerations of the scheme for that iri. note in particular the privacy issues in rfc3023 section 10 for http iris. data obtained from an inaccurate or malicious data source may lead to inaccurate or misleading conclusions as well as the dereferencing of unintended iris. care must be taken to align the trust in consulted resources with the sensitivity of the intended use of the data inferences of potential medical treatments would likely require different trust than inferences for trip planning. turtle is used to express arbitrary application data security considerations will vary by domain of use. security tools and protocols applicable to text e.g. pgp encryption md5 sum validation password-protected compression may also be used on turtle documents. security privacy protocols must be imposed which reflect the sensitivity of the embedded information. turtle can express data which is presented to the user for example rdf schema labels. application rendering strings retrieved from untrusted turtle documents must ensure that malignant strings may not be used to mislead the reader. the security considerations in the media type registration for xml rfc3023 section 10 provide additional guidance around the expression of arbitrary data and markup. turtle uses iris as term identifiers. applications interpreting data expressed in turtle should address the security issues of internationalized resource identifiers iris rfc3987 section 8 as well as uniform resource identifier uri generic syntax rfc3986 section 7. multiple iris may have the same appearance. characters in different scripts may look similar a cyrillic may appear similar to a latin o a character followed by combining characters may have the same visual representation as another character latin small letter e followed by combining acute accent has the same visual representation as latin small letter e with acute any person or application that is writing or interpreting data in turtle must take care to use the iri that matches the intended semantics and avoid iris that make look similar. further information about matching of similar characters can be found in unicode security considerations unicode-security and internationalized resource identifiers iris rfc3987 section 8. interoperability considerations there are no known interoperability issues. published specification this specification. applications which use this media type no widely deployed applications are known to use this media type. it may be used by some web services and clients consuming their data. additional information magic number s turtle documents may have the strings prefix or base case sensitive or the strings prefix or base case insensitive near the beginning of the document. file extension s ttl base uri the turtle base iriref or base iriref term can change the current base uri for relative irirefs in the query language that are used sequentially later in the document. macintosh file type code s text person email address to contact for further information eric prud hommeaux eric@w3.org intended usage common restrictions on usage none author change controller the turtle specification is the product of the rdf wg. the w3c reserves change control over this specifications. c. acknowledgements this work was described in the paper new syntaxes for rdf which discusses other rdf syntaxes and the background to the turtle submitted to www2004 referred to as n-triples plus there this work was started during the semantic web advanced development europe swad-europe project funded by the eu ist-7 programme ist-2001-34732 2002-2004 and further development supported by the institute for learning and research technology at the university of bristol uk 2002-sep 2005 valuable contributions to this version were made by gregg kellogg andy seaborn sandro hawke and the members of the rdf working group. the document was improved through the review process by the wider community. d. change log d.1 changes since january 2014 proposed recommendation missing prefix added in example 11 in response to comment from lars svensson. error in grammar productions 21 and 23 fixed. error in grammar productions 24 and 25 fixed. d.2 changes from february 2013 candidate recommendation to january 2014 proposed recommendation the addition of sparqlprefix and sparqlbase which allow for using sparql style base and prefix directives in a turtle document was marked at risk in the candidate recommendation publication. this feature is no longer at risk. the title of this document was changed from turtle to rdf 1.1 turtle removed the obsolete links to tests in sec. 7.1. d.3 changes from august 2011 first public working draft to candidate recommendation renaming for string_ productions to string_literal_quote sytle names rather than numbers local part of prefix names can now include turtle in html renaming of grammar tokens and rules around iris reserved character escape sequences string escape sequences limited to strings numeric escape sequences limited to iris and strings support top-level blank-predicate-object lists whitespace required between prefix and prefix label d.4 changes from january 2008 team submission to first public working draft adopted three additional string syntaxes from sparql string_literal2 string_literal_long1 string_literal_long2 adopted sparql s syntax for prefixed names see editor s draft s in names in all positions of a local name apart from the first or last e.g. ex first.name. digits in the first character of the pn_local lexical token e.g. ex 7tm. adopted sparql s iri resolution and prefix substitution text. explicitly allowed re-use of the same prefix. added parsing rules. see also the pre-w3c submission changelog. e. references e.1 normative references bcp47 a. phillips m. davis. tags for identifying languages. september 2009. ietf best current practice. url http tools.ietf.org html bcp47 ebnf-notation tim bray jean paoli c. m. sperberg-mcqueen eve maler fran ois yergeau. ebnf notation 26 november 2008. w3c recommendation. url http www.w3.org tr rec-xml sec-notation rdf11-concepts richard cyganiak david wood markus lanthaler. rdf 1.1 concepts and abstract syntax. w3c recommendation 25 february 2014. url http www.w3.org tr 2014 rec-rdf11-concepts-20140225 the latest edition is available at http www.w3.org tr rdf11-concepts rfc2119 s. bradner. key words for use in rfcs to indicate requirement levels. march 1997. internet rfc 2119. url http www.ietf.org rfc rfc2119.txt rfc3023 m. murata s. st.laurent d. kohn. xml media types rfc 3023 january 2001. rfc. url http www.ietf.org rfc rfc3023.txt rfc3986 t. berners-lee r. fielding l. masinter. uniform resource identifier uri generic syntax rfc 3986 january 2005. rfc. url http www.ietf.org rfc rfc3986.txt rfc3987 m. d rst m. suignard. internationalized resource identifiers iris january 2005. rfc. url http www.ietf.org rfc rfc3987.txt unicode the unicode standard. url http www.unicode.org versions latest utf-8 f. yergeau. utf-8 a transformation format of iso 10646. ietf rfc 3629. november 2003. url http www.ietf.org rfc rfc3629.txt e.2 informative references html5 robin berjon steve faulkner travis leithead erika doyle navara edward o connor silvia pfeiffer. html5. 4 february 2014. w3c candidate recommendation. url http www.w3.org tr html5 n-triples gavin carothers andy seabourne. rdf 1.1 n-triples. w3c recommendation 25 february 2014. url http www.w3.org tr 2014 rec-n-triples-20140225 the latest edition is available at http www.w3.org tr n-triples rdf11-mt patrick j. hayes peter f. patel-schneider. rdf 1.1 semantics. w3c recommendation 25 february 2014. url http www.w3.org tr 2014 rec-rdf11-mt-20140225 the latest edition is available at http www.w3.org tr rdf11-mt sparql11-query steven harris andy seaborne. sparql 1.1 query language. 21 march 2013. w3c recommendation. url http www.w3.org tr sparql11-query unicode-security mark davis michel suignard. unicode security considerations. url http www.unicode.org reports tr36 