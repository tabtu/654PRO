device apis requirements device apis requirements w3c working group note 15 october 2009 this version http www.w3.org tr 2009 note-dap-api-reqs-20091015 latest published version http www.w3.org tr dap-api-reqs latest editor s draft http dev.w3.org 2009 dap api-reqs previous version none editors robin berjon vodafone daniel coloma telef nica de espa a max froumentin opera marcin hanclik access jere k pyaho nokia 이 강 찬 kangchan lee etri bryan sullivan at&t dzung tran intel copyright 2009 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract these are the requirements intended to be met in the development of client-side apis that enable the creation of web applications and web widgets that interact with devices services such as calendar contacts camera etc. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document was published by the device apis and policy working group as a working group note. if you wish to make comments regarding this document please send them to public-device-apis@w3.org subscribe archives all feedback is welcome. this is the first publication of this document and it reflects the current vision of the working group on the apis it plans to develop. there are open issues listed in the body of the document on which feedback would be particularly appreciated. the group plans to update that document as these issues get resolved. publication as a working group note does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 2. global requirements 3. application configuration 4. application launcher 5. calendar 5.1 may be considered in future versions 6. camera 7. communications log 8. contacts 9. file system 10. gallery 11. messaging 12. system information events 13. tasks 14. user interface a. acknowledgements b. references b.1 normative references b.2 informative references 1. introduction this section is non-normative. the requirements in this document are produced in a high-level functionally oriented fashion in order to provide sufficient ground on which to build without going through the full landscape uow.acc.tab.analysis process given that the apis being produced concern domains in which industry experience is already solid. this document is not currently considered to be complete but rather represents a snapshot of the dap wg s thinking at the time of its publication. 2. global requirements these requirements apply to all apis produced by the dap wg. apis must be made available in a consistent fashion hanging off a single access point methods that may take a long time to complete must support asynchronous cancellable operation. should the apis be made available on navigator navigator.device or straight off a window.device 3. application configuration due to overlapping with widgets the widget interface widgets-apis and with web storage webstorage this deliverable has been dropped. 4. application launcher the following requirements have been expressed. a user agent may provide means for non-web applications to register themselves as handlers for media types and uri schemes. note that this may be outside the scope of this api. it should be possible to launch an application for which no media type or protocol handler exists. it should be possible to pass arguments to a launched application. it should be possible to launch an application asynchronously. it should be possible to launch an application synchronously. for applications that run synchronously it should be possible to catch the output streams stdout err etc. the following requirements while they could be considered to be functionally part of this api are already addressed as part of the html5 html5 custom scheme and content handlers this interface must enable web applications to register themselves as handlers for a specific protocol. a user agent may provide default handlers for a specific protocol. this interface must enable web applications to register themselves as handlers for a specific media type. a user agent may provide default handlers for a specific media type. 5. calendar this interface must enable listing multiple available calendars must expose some basic properties of calendars such as default time zone name etc. must enable creating deleting and updating calendars must enable creating deleting updating and finding calendar events must expose calendar event properties with a 1 1 mapping to icalendar rfc5545 properties and values. the above suggests support for only vevent. however andrew mcmillan makes the following point given that the differences between vevent vtodo are trivial in comparison to the complexity of their common elements and that vjournal is entirely a subset of those it seems to me there is very little to gain by removing vtodo and vjournal from this specification. removal might restrict clients from implementing some potentially useful functionality. the other supporting components of the specification like valarm and vtimezone seem to me so essential in any reasonable implementation of vevent that they don t even merit discussion. 5.1 may be considered in future versions icalendar parsing and serialision hcalendar parsing and serialision calendar diffs direct caldav access. 6. camera this interface must enable capture of static images must enable capture of videos must enable listing the available cameras must enable listing the available formats and codecs per camera must enable retrieval of the captured content must provide some metadata about the captured content e.g. width height format duration must enable choosing preferred aspects of the captured content e.g. width height format frame rate must enable displaying a viewfinder must support asynchronous cancellable capture should enable displaying a viewfinder as part of the document e.g. as a video element html5 should enable control of the camera s capabilities e.g. zoom luminosity night mode focus mode given support for capturing video we need to take sound capture into account. once that s supported is there any reason not to support capturing sound on its own if we go there isn t this a capture api with the ability to list mikes if the user requests a given capture size which isn t available do we refuse or do we fall back if the latter which is likely what is the algorithm that is used to find the fallback it could be given a request for 1000x50 the camera s preferred default 500x100 closest number of pixels 1000x700 closest longest side 2000x100 closest ratio we could very easily get bogged down in specifying camera capabilities and format feature variants how do we decide which ones are reasonably in 7. communications log this interface must be able to provide a list of incoming and outgoing communication events must be able to search for events by type email phone sms... as well as by content must be able to expose relevant metadata about events start and end time to and from etc. 8. contacts this interface must enable listing all available address books on the device must enable listing all contacts in the address book s must enable reading the details for a contact should enable creating a new contact should enable updating a contact should enable deleting a contact should enable filtering the list of contacts to search for a subset. are there convincing use cases for supporting multiple address books in v1 as opposed to just a default one and maybe exposing more later do we need support for groups in v1 9. file system this interface must integrate with the w3c file api file-upload must enable listing items in a directory must enable creating a file or directory must enable deleting a file or directory must enable writing to a file must enable appending to a file must enable getting some metadata about a file e.g. size creation and update time media type may enable setting some metadata on a file should enable copying files and directories should enable moving files and directories must handle text encoding conversion when reading and writing to file at least utf-8 and utf-16 le be should support binary access to file content must enable navigating a directory tree must reflect file system paths using a normalised separator and in a consistent encoding may provide conversion between paths and file urls may support reading and writing in base64 or using data urls should support reading lines from a text document should support events for detecting the mounting unmounting of a file system e.g. to detect a memory card being plugged in must support listing the available file systems should provide access to a temporary storage location a form of tmp directory must provide some file system metadata e.g. size available space quota 10. gallery this interface must enable listing all available gallery sources their names and types must enable finding content inside a gallery must enable adding updating and removing content from a gallery must expose metadata about the gallery s content items copyright author media-dependent information etc. exposing metadata is tricky often giving a choice between creating an endless ontology or building an open-ended system that guarantees no interoperability. a lot of this functionality can be provided if the gallery api is basically a way of accessing well-known parts of the file system and if the file system api has a way of exposing sufficient metadata. this could make for a very simple api. 11. messaging this interface must support messages in one or several formats and transports supported by the platform email sms mms... must allow creating and sending messages must support multiple accounts for each transport format type must support setting various envelope fields corresponding to the message type email sms... must support attaching files when the format allows it. 12. system information events this interface must enable listing available power sources batteries wall... must expose whether the device is running on battery or not must expose charge level per battery and globally must enable listing available network interfaces their types wifi 3g lan... and signal strengths must list which of the available network interface are active and provide events to be informed of their status must provide cpu information may provide cpu load information must enable listing storage areas their types writability and available space must provide ram information may provide ram load information must enable listing displays as well as their colour depth resolution etc. must enable listing input devices mouse keyboard touch keypad voice stylus... must enable listing audio output devices and their properties must enable listing audio input devices and their properties must enable listing video capture devices and their properties must enable listing picture capture devices and their properties must enable listing thermal sensors alongside their names and measurements must enable listing ambient light sensors alongside their names and measurements must enable listing proximity detectors alongside their names and measurements must expose gyroscope and accelerometer capability and measurements must enable listing vibration capability must expose the availability of compass and geolocation capability. this mixes system information and sensors should they be separate should we have some system information and a universal sensor api how do we get interoperability out of that 13. tasks this interface must enable listing multiple available task lists projects must expose some basic properties of projects such as default name priority etc. must enable creating deleting and updating projects must enable creating deleting updating and finding tasks must expose task properties with a 1 1 mapping to icalendar rfc5545 properties and values vtodo see the issues that are part of the calendar api. 14. user interface this interface must support beeping must support vibrating must support manipulating the backlight s must enable the creation deletion and update of native application menus with arbitrary depth levels and callbacks. a. acknowledgements the editors would like to extend special thanks to nokia omtp bondi and phonegap for providing the foundation of the working group s requirements discussion. b. references b.1 normative references file-upload robin berjon. file upload. 18 october 2006. w3c working draft. work in progress. url http www.w3.org tr 2006 wd-file-upload-20061018 rfc5545 b. desruisseaux. internet calendaring and scheduling core object specification icalendar september 2009. internet rfc 5545. url http www.rfc-editor.org rfc rfc5545.txt b.2 informative references html5 ian hickson david hyatt. html 5. 23 april 2009. w3c working draft. work in progress. url http www.w3.org tr 2009 wd-html5-20090423 webstorage ian hickson. web storage. 10 september 2009. w3c working draft. work in progress. url http www.w3.org tr 2009 wd-webstorage-20090910 widgets-apis marcos caceres robin berjon arve bersvendsen. widgets 1.0 apis and events. 18 august 2009. w3c working draft. work in progress. url http www.w3.org tr 2009 wd-widgets-apis-20090818 