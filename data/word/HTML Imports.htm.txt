html imports html imports w3c working draft 11 march 2014 this version http www.w3.org tr 2014 wd-html-imports-20140311 latest version http www.w3.org tr html-imports previous version http www.w3.org tr 2013 wd-html-imports-20130514 revision history https github.com w3c webcomponents commits gh-pages spec imports participate discuss on public-webapps@w3.org web applications working group file bugs w3.org s bugzilla editor dimitri glazkov google dglazkov@chromium.org hajime morrita google morrita@chromium.org copyright 2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract html imports are a way to include and reuse html documents in other html documents. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document was published by the web applications working group as an working draft. if you wish to make comments regarding this document please send them to public-webapps@w3.org subscribe archives with a subject prefix of html-imports all feedback is welcome. publication as a working draft does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents about this document dependencies terminology link type import extensions to htmllinkelement interface loading imports import dependent requesting import fetching import imports and content security policy parsing imports additions to prepare a script algorithm additions to tree construction algorithm additions to parsing xhtml documents additions to document.write method scripting in imports additions to script enabling criteria additions to document.currentscript style processing with imports events in imports additions to event handlers acknowledgements about this document all diagrams examples notes are non-normative as well as sections explicitly marked as non-normative. everything else in this specification is normative. the key words must must not required shall shall not should should not recommended may and optional in the normative parts of this document are to be interpreted as described in rfc2119. for readability these words do not appear in all uppercase letters in this specification. any point at which a conforming ua must make decisions about the state or reaction to the state of the conceptual model is captured as algorithm. the algorithms are defined in terms of processing equivalence. the processing equivalence is a constraint imposed on the algorithm implementors requiring the output of the both ua-implemented and the specified algorithm to be exactly the same for all inputs. dependencies this document relies on the following specifications dom4 dom core html dom parsing and serialization ecmascript language specification url terminology html imports or just imports from here on are html documents that are linked as external resources from another html document. the document that links to an import is called an import referrer. for any given import an import referrer ancestor is its import referrer or any import referrer ancestor of its import referrer. an import referrer which has its own browsing context is called a master document. each import is associated with one master document if the referrer of the import is a master document it is the master document of the import. otherwise the master document of the import referrer is the master document of the import. imported documents share its defaultview with the master document. see bug 23170 and bug 22305. the url of an import is called the import location. in the import referrer an import is represented as a document called the imported document. the imported documents don t have browsing context. the set of all imports associated with the master document forms an import map of the master document. the maps stores imports as its items with their import locations as keys. the import map is empty at beginning. new items are added to the map as import fetching algorithm specifies. link type import to enable declaring imports in html a new link type is added to html link types the import keyword may be used with link elements. this keyword creates an external resource link to an import. the default type for resources given by the import keyword is text html. the link element may have an async attribute. the async attribute is a boolean attribute. the appropriate time to obtain the resource is when the external resource link is created or when its element is inserted into a document whichever happens last. the following document has one import located at imports heart.html doctype html html lang en-us head title human being title link rel import href imports heart.html head body p what is a body without a heart p body html extensions to htmllinkelement interface partial interface linkimport readonly attribute document import htmllinkelement implements linkimport on getting the import attribute must return null if the link does not represent an import the user agent does not support imports the link element is not in a document otherwise the attribute must return the imported document for the import represented by the link element. the same object must be returned each time. here s how one could access the imported document mentioned in the previous example var link document.queryselector link rel import var heart link.import access dom of the document in imports heart.html var pulse heart.queryselector div.pulse an import in the context of the document of an html parser or xml parser is said to be an import that is blocking scripts if the element was created by that document s parser or and the element is a link of type import when the element was created by the parser and the link is not marked as async and the the import is yet to be completely loaded and the last time the event loop has reached step 1 the element was in that document and the user agent hasn t given up on that import yet. a user agent may give up on an import at any time. giving up an import before it loads even if the import eventually does still load means that the script might end up operating with incorrect information. for example if an import registers a custom element and a script relies on the availability of this element the script will find that this element is unavailable if the user agent gives up early. implementors have to balance the likelihood of a script using incorrect information with the performance impact of doing nothing while waiting for a slow network request to finish. a document has an import that is blocking scripts if there is an import that is blocking scripts in the document s import dependent. a document has no import that is blocking scripts if it does not have an import that is blocking scripts as defined in the previous paragraph. the sate of has an import that is blocking scripts can change each time an existing import is completely loaded or new import loading is started. html parser has changes to unblock it for each of such timings. loading imports import dependent each document has an import link list each of whose item is consist of link the link element and location a url. also the item is optionally marked as cycle. the list is empty at beginning and the item is added as import request altorighm specifies. an imported document has zero or more import ancestors. the import ancestor is a document. if the import link list of document a contains an non-cycle item whose location points document b a is a import ancestor of b. b is also called the import parent of the document. the import ancestor is transitive if document c is a import ancestor of document b and document b is a import ancestor of document a c is a import ancestor of document a. an imported document also has one or more import predecessor. the import predecessor is a document. if the url of document a is located before the url of document b in the import link list of b s import parent a is import predecessor of b. the import predecessor is transitive. if document a is import predecessor of document b and b is redecessor of document c a is import predecessor of c. the document that is in either import ancestors or import predecessors of document a or is linked from non-cycle item of a s import link list is the import dependent of a. the import link list and the import dependent constrains the order of script execution in imports. it is intend to give a deterministic order of script execution which is defined by the order of link element in each import. the linking structure of import link lists forms a directed asyclic graph dag each node of the dag is a document and its edge is a link. it cannot be a tree because more than one link can point same import. any cycle is marked by the import request algorithm and excluded from dependency calculation. the edges of each node is ordered in terms of import link list. the import predecessors selection is aware of the order. an example of import link lists. in the figure the document a has an import link list which contains a link to b and another link to c. the document d has a set of import ancestors that are a b and c. as b is a import ancestor of d one of d s list item that points b is marked as cycle. the import predecessors of e are b and d its import ancestors are a and c and its import link list is empty. thus its import dependents are a b c and d. the document d has two import parents which are b and c. the difference between the import referrer and the import parent is that import referrer reflects the state of the node tree and that the import parent is built by the algorithm described in this document. requesting import when user agents attempt to obtain a linked import they must also run the import request algorithm which is equivalent to running these steps input link the link element that creates an external resource link to the import. location the url of the linked resource. if the async attribute of link is true mark link as async. let document be a document of link. let list be an import link list of document. let item be link and location if there is a import ancestor of document whose url is same as location mark item as cycle. add item at the end of list. fetching import all imports linked from documents that is the master document or the one in the import map must be loaded using potentially cors-enabled fetch with mode set to anonymous when an import is fetched the user agent must run the import fetching algorithm which must be equivalent to running these steps input link a link element which makes the external resource link to the import. location the import location output import the imported document. if location is already in the import map let import be the imported document for location and stop. fetch a resource from location with import as overnride referrer source and block cookies flag set if fetched response type is error add location and null to the import map and stop. let import be a new document the document s address of which is location set import no quirks mode. let parser be a new html parser associated with import input a doctype token to parser s tree construction stage with name html and force-quirks flag turned off. see bug 24349. add location and import to the import map. for each task that the networking task source places on the task queue while fetching fill parser s input byte stream with the fetched bytes let parser process the input byte stream with utf-8 as a known definite encoding when no more bytes are available queue a task from the networking task source for parser to process implied eof character all of loaded imports and imports under loading are in the import link list thus every import which is linked from imports in the list will also be loaded using the import fetching algorithm with location be the import location of the import. the loading attempt must be considered successful if import is not null on the algorithm completion and failed otherwise. the link element fires a simple event called load for successful loading attempt. for failed attempt it fires a simple event named error. imports and content security policy content security policy must restrict import loading through the script-src directive. each import must be restricted by the content security policy of the master document. for example if content security header field is sent to an import the user agent must enforce the policy of the master document to the imported document. parsing imports parsing behaviour of imports is defined as a set of changes to the html parsing. additions to prepare a script algorithm in step 15 of prepare a script algorithm modify the last part of condition which begins with if element does not have a src attribute to read and the document of the html parser or xml parser that created the script element has a style sheet that is blocking scripts or has an import that is blocking scripts additions to tree construction algorithm in sub-condition named otherwise of condition an end tag whose name is script in text insertion mode modify step 3 to read if the parser s document has a style sheet that is blocking scripts or has an import that is blocking scripts or the script s ready to be parser-executed flag is not set spin the event loop until the parser s document has no style sheet that is blocking scripts and has no import that is blocking scripts and the script s ready to be parser-executed flag is set. modify sub-step 1 of step 3 of the end to read spin the event loop until the first script in the list of scripts that will execute when the document has finished parsing has its ready to be parser-executed flag set and the parser s document has no style sheet that is blocking scripts and has has no import that is blocking scripts. all import dependents must be loaded before domcontentloaded is fired. see bug 23526. additions to parsing xhtml documents modify step 3 of steps that run following preparing the script element to read spin the event loop until the parser s document has no style sheet that is blocking scripts and has no import that is blocking scripts and the pending parsing-blocking script s ready to be parser-executed flag is set. additions to document.write method insert following step between step 2 and step 3 of document.write method if document.currentscript points the element that isn t owned by the active document then abort these steps. see bug 24042. scripting in imports additions to script enabling criteria add following condition to the list of enabling and disabling scripting criteria scripting is enabled for a node if the document object of the node is in the import map. additions to document.currentscript modify the definition of document.currentscript as follows the currentscript attribute on getting must return the value to which it was most recently initialized in the document or the import map of the document. when the document is created the currentscript must be initialized to null. if the document is an imported document its currentscript is always null. style processing with imports the contents of the style elements and the external resources of the link elements in imports must be considered as input sources of the style processing model of the master document. between declarations from different documents the document order in terms of order of appearance is defined based on the document order of the link elements of their import referrer ancestors which are in the same document. if thre are more than one of such documents the comparison result in the first document in the document order wins. see bug 24756. events in imports events in imports is defined as a set of changes to the html events. additions to event handlers modify the event handler content attribute s script creation criteria by expanding the first paragraph when an event handler content attribute is set if the element is owned by a document that is in a browsing context or in an import map acknowledgements david hyatt developed xbl 1.0 and ian hickson co-wrote xbl 2.0. these documents provided tremendous insight into the problem of behavior attachment and greatly influenced this specification. alex russell and his considerable forethought triggered a new wave of enthusiasm around the subject of behavior attachment and how it can be applied practically on the web. dominic cooney and roland steiner worked tirelessly to scope the problem within the confines of the web platform and provided a solid foundation for this document. the editor would also like to thank alex komoroske angelina fabbro anne van kesteren boris zbarsky brian kardell daniel buchner edward o connor eric bidelman erik arvidsson elliott sprehn gabor krizsanits hayato ito james simonsen jonas sicking ken shirriff neel goyal olli pettay rafael weinstein scott miles steve orvell tab atkins william chan and william chen for their comments and contributions to this specification. this list is too short. there s a lot of work left to do. please contribute by reviewing and filing bugs and don t forget to ask the editor to add your name into this section. 