mbui task models mbui task models w3c working group note 08 april 2014 this version http www.w3.org tr 2014 note-task-models-20140408 latest published version http www.w3.org tr task-models previous version http www.w3.org tr 2013 wd-task-models-20131107 editors fabio patern isti-cnr carmen santoro isti-cnr lucio davide spano isti-cnr dave raggett w3c copyright 2013 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract task models are useful when designing and developing interactive systems. they describe the logical activities that have to be carried out in order to reach the user s goals. this document covers the specification of task models with a meta-model expressed in uml and an xml schema that can be used as the basis for interchange of task models between different user interface development tools. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document defines a meta-model and xml serialization for task models for describing user interfaces. this is an update to the first public working draft to conform to the policy for w3c namespace uris and to make minor changes to terminology. this document has been published as a working group note to reflect the fact that the model based ui working group is no longer progressing it along the w3c recommendation track. a record of discussion relating to this specification can be found in the model based ui working group s email archive. the email list is public-mbui@w3.org. publication as a working group note does not imply endorsement by the w3c membership. this is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to cite this document as other than work in progress. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents introduction specific requirements for task meta-model meta-model operators task categories task types additional task properties task meta model in uml examples xml schema definition description complete schema operators by languages references acknowledgements introduction interactive systems cover a wide range of possibilities e.g. the means for controlling a microwave oven or web applications where the user interface runs in a web browser and is coupled via http to back-end services in the network. task models provide a goal-oriented description of interactive systems suitable for reviewing temporal relationships between tasks and their decomposition into subtasks but avoiding the need for the level of detail required for a full description of the user interface. this makes it easier to talk through a user interface design without getting distracted by the details. each task describes an activity that has to be carried out to fulfil the user s goals. tasks can be represented at various abstraction levels. when designers only want to specify requirements on how activities should be carried out they just need to consider the main high-level tasks. on the other hand when designers aim to provide more precise design indications then the activities are represented at a finer granularity for example covering the temporal sequence of tasks to be carried out by the user or system as well as any preconditions for each task. the purpose of this document is to define a standard for interchange of task models based on the widely adopted concurtasktrees ctt notation. ctt is a visual notation for describing task models. here is an example for the task of reserving a hotel room figure 1. example of a task model in the ctt notation this specification defines a meta-model and xml schema for interchange of task models based on the ctt notation but does not normatively define how such models should be visualized. specific requirements for task meta-model in this section there are some requirements that have been specifically identified for task models. req1 separation of static aspects from dynamic aspects req2 separation of the hierarchical structure from other aspects req3 possibility of relating task performance to the context of use even if modelling the context of use is not in the scope of this document req4 provide an initial taxonomy of task types optional usage the requirements are not normative and rather intended to give the reader a sense of the assumptions that underlay the notation. meta-model this section defines a normative meta-model for the task model notation. tasks have a hierarchical structure and use the set of temporal operators to describe the relations between them which are based on those used in ctt. operators the operators include both n-ary operators and 1-ary operators. they are described in the following list interleaving t1 t2 tn the connected tasks can be performed concurrently without any specific constraint. order independence t1 t2 tn the tasks can be performed in any order synchronisation t1 t2 tn the tasks are concurrent and can exchange information among them parallelism t1 t2 tn the tasks are performed in true paralllelism. choice t1 t2 tn in this case it is possible to choose one task from a set of tasks and once the choice has been made the chosen task can be performed disabling t1 t2 tn the left-hand task is deactivated once the right-hand task has started suspend-resume t1 t2 tn the right-hand task interrupts the left-hand task one. when it is finished the left-hand task can be reactivated from the state it was before the interruption. enabling t1 t2 tn there are two cases without information passing when t1 completes it enables t2 when t2 completes it enables t3 and so forth through tn with information passing as before except information is passed from each completed task to the next task iteration t the task is performed iteratively when it terminates its execution is started again from the beginning. optional t the task is optionally performed. a comparison of which operators are supported in different task modelling languages is given in table 1. the temporal operators are all n-ary except iteration and optionality which are both unary. the n-ary operator relationship is associated to 2..n subtasks to model that n-ary operators are associated to the decomposition of a task into its subtasks. the n-ary operators are associative and commutative except for disabling suspend-resume and enabling which are associative but not commutative. it is also worth pointing out that the operators have different priorities. for n-ary operators the priority associated to each operator is expressed by the order in which it appears in the uml class diagram in figure 2 e.g. the choice is the operator which has the highest priority another key concept inherited from the ctt notation is task allocation how each task is to be carried out is indicated by the related category and is explicitly represented using different subclasses for each category. there are four possibilities task categories user task an internal cognitive activity such as selecting a strategy to solve a problem system task performed by the application itself such as generating the results of a query interaction task user actions that may result in immediate system feedback such as editing a diagram abstract task a task that has subtasks belonging to different categories and thus cannot be allocated uniquely using the previous three categories task types designers can also classify tasks according to their semantics i.e. by giving each task a type. it is important to note that each of the above categories has its own predefined set of task types thus such sets of predefined task types are indicated separately in the class diagram as defined below system tasks comparison the system provides information that is useful for comparing pieces of information generatealerts the system generates an alert feedback the system provides feedback about some intensive computational activity grouping the system provides pieces of information that are somehow grouped locate the system provides information useful to locate something overview the system provides an overview of some data interaction tasks single selection the user interacts with the system to select one piece of information multiple selection the user interacts with the system to select multiple pieces of information edit the user interacts with the system to change some piece of information control the user interacts with the system to trigger some functionality zooming the user interacts with the system to change the level of detail presented e.g. zooming on a map or photograph filtering the user interacts with the system to filter how some data is visualised e.g. to show some aspects and to hide others detailondemand the user interacts with the system to ask for some detail on some item user tasks problemsolving the user performs a cognitive activity to solve a problem comparing the user performs a cognitive activity to compare pieces of information planning the user performs some activity to plan what to do abstract tasks search information the user performs an iterative search for a piece of information additional task types may be used for added flexibility. in order to model this each task category has two attributes predef_type which contains the task type when it is included in the predefined set of tasks already identified ext_type which contains the task type in case a new task type has to be defined. additional task properties it is possible to specify additional information associated with each task through a number of attributes. for instance it is possible to specify the context of use that supports the task concerned if there are tasks that are meaningful only for some contexts of use. modelling the context of use is out of the scope of this document. in addition for each task it is possible to specify the domain objects that are manipulated by the task and whether they are read-only or can be updated. task meta model in uml figure 2 shows the class diagram representing the task meta-model. a task model is composed of a set of tasks a subtask relation is defined among them and n-ary operators are associated with the 2..n subtasks of a task. figure 2. main aspects of the task meta-model each task can be associated with one or multiple domain objects that it can manipulate. in addition each task has a number of properties attributes an identifier the context of use indicating what contexts are suitable for its performance informal description and so forth. moreover since the execution of a task is often subject to the availability of a given resource or depends on the value of a certain variable in order to express such dependencies the language contains the precondition and postcondition classes pre-conditions indicate what must be true before the task is carried out while post-conditions indicate what will be true after task execution a precondition which can occur or not as associated to a certain task see related multiplicity 0..1 in figure 2 is an instance of the conditiongroup class. it returns a boolean value which is obtained by applying the logical operators to the operands. an operand is a conditionliteral which can be used to represent values. it can be either a constant or a variable manipulated during the task execution. in the former case the value is expressed by the value attribute of the valueliteral subclass in the latter it is expressed by the domainobjectliteral class which represents a reference to a domain object manipulated by the task itself. an operand can also be represented in turn by a conditiongroup in order to create complex boolean expressions. the operators express the boolean relation between the operands. an operator can be one of the following and or xor contains stars ends greater than greater than or equals to less than less than or equals to equals to not equals. this hierarchical structure of preconditions allows the representation of complex conditions. the same structure is also possible for specifying postconditions associated to the tasks. the following is the list of classes contained in figure 2. class task composition from task to task associated with n-aryoperator association domain object cardinality minimum zero maximum unbounded association conditiongroup name precondition cardinality minimum zero maximum one association conditiongroup name postcondition cardinality minimum zero maximum one association 1-aryoperator cardinality minimum zero maximum two attribute identifier string attribute name string attribute frequency string attribute contextofuse string attribute description string class user superclass task attribute predef_type enum attribute ext_type string class abstract superclass task attribute predef_type enum attribute ext_type string class system superclass task attribute predef_type enum attribute ext_type string class interaction superclass task attribute predef_type enum attribute ext_type string class domainobject enumeration class n-aryoperator association composition subtask cardinality role task minimum zero maximum one cardinality role subtask minimum zero or two maximum n constant choice constant order_independence constant interleaving constant parallelism constant synchronisation constant disabling constant suspend_resume constant enabling enumeration class 1-aryoperator association task cardinality 1 constant optional constant iterative class conditiongroup aggregation from conditiongroup to conditiongroup name operand aggregation from conditionliteral to conditiongroup name operand association logicoperator name operator cardinality 1 association task name precondition cardinality one association task name postcondition cardinality one class conditionliteral aggregation from conditionliteral to conditiongroup name operand class valueliteral superclass conditionliteral attribute value string class domainobjectliteral superclass conditionliteral attribute domain_object string class logicoperator association conditiongroup name operator cardinality 1 examples the example below see figure 3 has been taken from the serenoa project. it is about a case study on a car rental service which the user can access in order to reserve a car. to this goal users have to specify a number of characteristics they are searching for about the car also providing some other information about themselves name surname address city.. then the user can submit the request and the service responds with the list of results. in the following we will specify the task model as a nested list of tasks where nesting is used to model the hierarchy between parent and children. in addition for each task we will specify in brackets beside its name- the relationship s in which the concerned task is involved. please also note that in this example all the tasks are interactive apart two tasks access service and show results- which are application tasks the first access service models the system task access the service for doing the search with the parameters provided by the user the second one is the system task that is in charge of showing the results to the user. figure 3 a task model example modelled through ctt notation 1 make car reservation this is the root task 1.1 enter info enter info disabling submit request any time during the execution of the task for entering information the user can decide to submit the search request 1.1.1 enter car info enter car info interleaving enter user info the two tasks can be carried out in a concurrent way 1.1.1.1 enter category enter category interleaving enter colour 1.1.1.2 enter colour enter category interleaving enter colour interleaving enter model 1.1.1.3 enter model enter colour interleaving enter model interleaving enter engine 1.1.1.4 enter engine enter model interleaving enter engine interleaving enter colour 1.1.2 enter user info enter car info interleaving enter user info interleaving enter other info 1.1.2.1 enter name enter name interleaving enter surname 1.1.2.2 enter surname enter name interleaving enter surname interleaving enter address 1.1.2.3 enter address enter surname interleaving enter address interleaving enter city 1.1.2.4 enter city enter address interleaving enter city interleaving enter zip code 1.1.2.5 enter zip code enter city interleaving enter zip code interleaving enter country 1.1.2.6 enter country enter zip code interleaving enter country interleaving enter gender 1.1.2.7 enter gender enter country interleaving enter gender interleaving enter birthdate 1.1.2.8 enter birthdate enter gender interleaving enter birthdate interleaving enter email 1.1.2.9 enter email enter birthdate interleaving enter email 1.1.3 enter other info enter user info interleaving enter other info interleaving set preference 1.1.3.1 enter comments enter comments interleaving enter max budget 1.1.3.2 enter max budget enter comments interleaving enter max budget 1.1.4 set preferences enter other info interleaving set preferences 1.2 submit request enter info disabling submit request sequential enabling with info access service the task called submit request can disable at any moment the execution of the task for entering information. the execution of the submission of the request also implies that the parameters are passed to the system task that has to carry out the search 1.3 access service submit request sequential enabling withinfo access service sequential enabling with info show results 1.4 show results access service sequential enabling with info show results xml schema definition description the root element of the schema is the taskmodel having a complex type whose definition includes a group named categorygroup indicating the allocation of a task user system interaction abstract and containing an attribute for specifying its identifier taskmodelid the task element contains all the sub elements and attributes for the specification of a task. such element contains the following elements description a human-readable task description precondition a structured precondition on the task execution postcondition a structured postcondition on the task execution unaryoperatorgroup the unary operators associated with the task iterative if the task is iterative optional if the task is optional n-aryoperatorgroup the list of sub-tasks if any enclosed by a tag representing the n-ary operator that connects them contextofuse the suitable context for carrying out the task domainobject the list of objects manipulated by the current task in addition it contains the following attributes identifier a unique task identifier name a human readable task name frequency the task execution frequency the n-aryoperatorgroup definition contains a choice among elements representing a different n-ary temporal operator. each one of these elements contains the definition of a sub-task list subtask type such list is represented by a group that defines the task category user system interaction abstract and its type according to the class hierarchy defined by the meta model. the possible task types have been indicated beforehand. the conditiongroup complex type contains one of the following elements conditionliteral which represents a literal value or object represented as different elements conditiongroup which represents an expression of conditionliterals or conditiongroups also mixed as a list of elements. it contains also the operator attribute that contains the boolean operator for the expression. the possible values for the n-ary temporal operators are the following choice interleaving orderindependence synchronisation disabling suspendresume enabling parallelism the n-ary operators are repesented as tags that include the connected sub-tasks. for instance a sequence of three interaction sub-tasks is represented with a enabling tag that contains tree interaction tags. complete schema xml version 1.0 encoding iso-8859-1 xs schema xmlns http www.w3.org 2013 mbui-task-models elementformdefault qualified targetnamespace http www.w3.org 2013 mbui-task-models xmlns xs http www.w3.org 2001 xmlschema xs element name taskmodel xs complextype xs sequence xs group ref categorygroup minoccurs 1 maxoccurs 1 xs sequence xs attribute name taskmodelid type xs string use required xs complextype xs element xs complextype name task xs sequence xs element name description type xs string minoccurs 0 xs element name precondition type conditiongroup minoccurs 0 xs element name postcondition type conditiongroup minoccurs 0 xs group ref unaryoperatorgroup minoccurs 0 maxoccurs 1 xs group ref n-aryoperatorgroup minoccurs 0 maxoccurs unbounded xs element minoccurs 0 maxoccurs unbounded name contextofuse type xs qname xs element minoccurs 0 maxoccurs unbounded name domainobject type xs qname xs sequence xs attribute name identifier type xs string use required xs attribute name name type xs string xs attribute name frequency type xs string xs complextype xs complextype name subtask xs sequence minoccurs 1 maxoccurs 1 xs group ref categorygroup minoccurs 2 maxoccurs unbounded xs sequence xs complextype xs group name unaryoperatorgroup xs sequence xs element name optional type unaryoperator xs element name iterative type unaryoperator xs sequence xs group xs group name n-aryoperatorgroup xs choice xs element name choice type subtask xs element name interleaving type subtask xs element name orderindependence type subtask xs element name synchronization type subtask xs element name disabling type subtask xs element name suspendresume type subtask xs element name enabling type subtask xs element name parallelism type subtask xs choice xs group xs group name categorygroup xs choice xs element type user name user xs element type system name system xs element type interaction name interaction xs element type abstract name abstract xs choice xs group xs complextype name unaryoperator xs attribute name value type xs boolean default true xs complextype xs complextype name user xs complexcontent xs extension base task xs attribute name predef_type type usertypeenum xs attribute name ext_type type xs string xs extension xs complexcontent xs complextype xs complextype name system xs complexcontent xs extension base task xs attribute name predef_type type systemtypeenum xs attribute name ext_type type xs string xs extension xs complexcontent xs complextype xs complextype name interaction xs complexcontent xs extension base task xs attribute name predef_type type interactiontypeenum xs attribute name ext_type type xs string xs extension xs complexcontent xs complextype xs complextype name abstract xs complexcontent xs extension base task xs attribute name predef_type type abstracttypeenum xs attribute name ext_type type xs string xs extension xs complexcontent xs complextype structured precondition modeling xs complextype name conditiongroup xs choice minoccurs 1 maxoccurs unbounded xs element name conditiongroup type conditiongroup xs group ref conditionliteral xs choice xs attribute name operator type logicoperator xs complextype xs group name conditionliteral xs choice xs element name valueliteral type valueliteral xs element name domainobjectliteral type domainobjectliteral xs choice xs group xs complextype name valueliteral xs attribute use required name value type xs string xs complextype xs complextype name domainobjectliteral xs attribute use required name domain_object type xs string xs complextype simple types xs simpletype name usertypeenum xs restriction base xs nmtoken xs enumeration value problemsolving xs enumeration value comparing xs enumeration value planning xs restriction xs simpletype xs simpletype name systemtypeenum xs restriction base xs nmtoken xs enumeration value comparison xs enumeration value generatealerts xs enumeration value feedback xs enumeration value grouping xs enumeration value locate xs enumeration value overview xs restriction xs simpletype xs simpletype name interactiontypeenum xs restriction base xs nmtoken xs enumeration value singleselection xs enumeration value multipleselection xs enumeration value edit xs enumeration value control xs enumeration value zooming xs enumeration value filtering xs enumeration value detailondemand xs restriction xs simpletype xs simpletype name abstracttypeenum xs restriction base xs nmtoken xs enumeration value searchinformation xs restriction xs simpletype xs simpletype name logicoperator xs restriction base xs string xs enumeration value and id and xs enumeration value or id or xs enumeration value xor id xor xs enumeration value contains id contains xs enumeration value starts id starts xs enumeration value ends id ends xs enumeration value gt id gt xs enumeration value gteq id gteq xs enumeration value lteq id lteq xs enumeration value lt id lt xs enumeration value eq id eq xs enumeration value neq id neq xs restriction xs simpletype xs schema operators by languages the following table shows which operators are supported by a range of task modelling languages table 1 operators used in different modelling languages order independence choice concurrency suspend and resume deactivation enabling amboss mistrzyk2008 yes yes yes no no yes cpm-goms john1994 no no yes no no yes ctt paterno1999 yes yes yes yes yes yes diane+ tarby1996 no no yes no no yes goms card1983 no no no no no yes gta vanderveer1996 no no no no no yes kmad baron2006 yes yes yes no no yes lotos eijk1989 no yes yes no yes yes mad scapin1989 yes no yes no no yes tadeus schlungbaum1998 no no no no no yes taospec dittmar 2003 no yes yes no no yes tks johnson1988 yes yes yes no no yes taskmodl traettberg2002 yes yes no no no yes tombola uhr2001 yes yes yes no no yes uan hix1993 yes no yes no yes yes useml meixner2011 yes yes yes no yes yes vtmb biere1999 yes yes yes no no yes xuan gray1994 yes yes yes no no yes references baron2006 baron m. lucquiaud v. autard d. et al. k-made un environement pour le noyau du mod le de description de l activit proc. of the 18th french-speaking conference on human-computer-interaction montreal kanada 2006 biere1999 biere m. bomsdorf b. szwillus g. specification and simulation of task models with vtmb. in proc. of the 17th annual chi conference on human factors in computing systems new york 1999 card1983 card s. k. moran t. p. newell a. the psychology of human-computer inter-action. lawrence erlbaum associates 1983 dittmar 2003 dittmar a. forbrig p. higher-order task models. in proc. of the 10th interna-tional workshop on interactive systems design specification and verification 219-230 2003 eijk1989 eijk p.h.j. van vissers c.a. e d az m. the formal description technique lotos results of the esprit sedos project. north-holland 1989 gray1994 gray p. england d. mcgowan s. xuan enhancing uan to capture tempo-ral relationships among actions. in proc. of the conference on people and computers ix 1994 hix1993 hix d. hartson r. developing user interfaces ensuring usability through product process. new york john wiley sons 1993 john1994 john b. kieras d. the goms familiy of uow.acc.tab.analysis techniques tools for design and evaluation. carnegie mellon university school of computer science technical report no. cmu-cs-94-181 1994 johnson1988 johnson p. johnson h. waddington r. et al. task-related knowledge structures analysis modeling and application. in proc. of the 4th conference of the british computer society on people and computers 35-62 1988 meixner2011 meixner g. sei ler m. breiner k. model-driven useware engineering in model-driven development of advanced user interfaces springer 1-26 2011 mistrzyk2008 mistrzyk t. szwillus g. modellierung sicherheitskritischer kommunikation mit aufgabenmodellen. in i-com 1 39-42 2008 paterno1999 patern f. model-based design and evaluation of interactive applications. london springer 1999 paterno2012 patern f santoro c. spano l. d. improving support for visual task modelling 2012 scapin1989 scapin d. pierret-golbreich c. towards a method for task description mad. in proc. of the conference work with displayunits 27-34 1989 schlungbaum1998 schlungbaum e. knowledge-based support of task-based user interface design in tadeus. proc. of the 16th annual chi conference on human factors in computing systems 1998 shneiderman 1996 shneiderman b. the eyes have it a task by data type taxonomy for information visualizations. ieee symposium on visual languages boulder 1996 p336-343. tarby1996 tarby j. c. barthet m. f. the diane+ method. in proc. of the 2nd interna-tional conference on computer-aided design of user interfaces 95-120 1996 traettberg2002 traettberg h. model-based user interface design. phd thesis norwegian university of science and technology 2002 uhr2001 uhr h. die definition und ausf hrung von benutzerspezifischen webprozes-sen mit tombola. konferenz der gesellschaft f r informatik 322-325 2001 vanderveer1996 van der veer g. lenting b. bergevoet b. gta groupware task uow.acc.tab.analysis modeling complexity. acta psychologica 91 297-322 1996 acknowledgements we acknowledge the following people who contributed to the preparation of this document fran ois beuvens paolo bottoni ga lle calvary joelle coutaz gerrit meixner vivian motti. 