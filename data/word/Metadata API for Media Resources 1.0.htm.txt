metadata api for media resources 1.0 metadata api for media resources 1.0 w3c recommendation 13 march 2014 this version http www.w3.org tr 2014 rec-mediaont-api-1.0-20140313 latest published version http www.w3.org tr mediaont-api-1.0 previous version http www.w3.org tr 2013 pr-mediaont-api-1.0-20131015 editors florian stegmaier university of passau werner bailer joanneum research martin h ffernig joanneum research 이 원 석 wonsuk lee samsung electronics ltd. chris poppe ghent university please refer to the errata for this document which may include some normative corrections. see also translations. copyright 2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract this specification defines an api to access metadata information related to media resources on the web. the overall purpose is to provide developers with a convenient access to metadata information stored in different metadata formats. the api provides means to access the set of metadata properties defined in the ontology for media resources 1.0 specification. these properties are used as a pivot vocabulary in this api. the core of this specification is the definition of api interfaces for retrieving metadata information in synchronous and asynchronous modes. it also defines interfaces for structured return types along with the specification of the behavior of an api implementation. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this document has been produced by the media annotations working group which is part of the w3c video on the web activity. the public is encouraged to send comments on this recommendation to the public mailing list public-media-annotation@w3.org public archive use rec comment api in the subject line of your email. the working group has adopted a public test suite and has produced an implementation report for this metadata api for media resources 1.0. no changes to this document have been made since the previous version. the metadata api for media resources may be implemented in both client-only built into a browser as a plugin or as a javascript library and client-server server-side as a web service the level of implementation of this api in these two scenario summarized in the implementation report allowed to exit candidate recommendation. nevertheless this api is not expected to be implemented natively in the browser code. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 1.1 formats in scope 1.2 formats out of scope 1.3 terminology 2. conformance 3. design consideration 4. api description 4.1 mediaresource interface 4.1.1 methods 4.1.2 examples in javascript 4.2 asyncmediaresource interface 4.2.1 methods 4.2.2 callback interfaces 4.2.2.1 propertycallback interface 4.2.2.1.1 methods 4.2.2.2 metadatacallback interface 4.2.2.2.1 methods 4.2.3 examples in javascript 4.3 syncmediaresource interface 4.3.1 methods 4.3.2 examples in javascript 4.4 mediaannotation interface 4.4.1 attributes 4.4.2 example in javascript 4.5 properties 4.5.1 identification properties 4.5.1.1 identifier 4.5.1.1.1 attributes 4.5.1.1.2 example in javascript 4.5.1.2 title 4.5.1.2.1 attributes 4.5.1.2.2 example in javascript 4.5.1.3 language 4.5.1.3.1 attributes 4.5.1.3.2 example in javascript 4.5.1.4 locator 4.5.1.4.1 attributes 4.5.1.4.2 example in javascript 4.5.2 creation properties 4.5.2.1 contributor 4.5.2.1.1 attributes 4.5.2.1.2 example in javascript 4.5.2.2 creator 4.5.2.2.1 attributes 4.5.2.2.2 example in javascript 4.5.2.3 madate 4.5.2.3.1 attributes 4.5.2.3.2 example in javascript 4.5.2.4 location 4.5.2.4.1 attributes 4.5.2.4.2 example in javascript 4.5.3 content properties 4.5.3.1 description 4.5.3.1.1 attributes 4.5.3.1.2 example in javascript 4.5.3.2 keyword 4.5.3.2.1 attributes 4.5.3.2.2 example in javascript 4.5.3.3 genre 4.5.3.3.1 attributes 4.5.3.3.2 example in javascript 4.5.3.4 rating 4.5.3.4.1 attributes 4.5.3.4.2 example in javascript 4.5.4 relational properties 4.5.4.1 relation 4.5.4.1.1 attributes 4.5.4.1.2 example in javascript 4.5.4.2 collection 4.5.4.2.1 attributes 4.5.4.2.2 example in javascript 4.5.5 rights properties 4.5.5.1 copyright 4.5.5.1.1 attributes 4.5.5.1.2 example in javascript 4.5.5.2 policy 4.5.5.2.1 attributes 4.5.5.2.2 example in javascript 4.5.6 distribution properties 4.5.6.1 publisher 4.5.6.1.1 attributes 4.5.6.1.2 example in javascript 4.5.6.2 targetaudience 4.5.6.2.1 attributes 4.5.6.2.2 example in javascript 4.5.7 fragments properties 4.5.7.1 fragment 4.5.7.1.1 attributes 4.5.7.1.2 example in javascript 4.5.7.2 namedfragment 4.5.7.2.1 attributes 4.5.7.2.2 example in javascript 4.5.8 technical properties 4.5.8.1 framesize 4.5.8.1.1 attributes 4.5.8.1.2 example in javascript 4.5.8.2 compression 4.5.8.2.1 attributes 4.5.8.2.2 example in javascript 4.5.8.3 duration 4.5.8.3.1 attributes 4.5.8.3.2 example in javascript 4.5.8.4 format 4.5.8.4.1 attributes 4.5.8.4.2 example in javascript 4.5.8.5 samplingrate 4.5.8.5.1 attributes 4.5.8.5.2 example in javascript 4.5.8.6 framerate 4.5.8.6.1 attributes 4.5.8.6.2 example in javascript 4.5.8.7 averagebitrate 4.5.8.7.1 attributes 4.5.8.7.2 example in javascript 4.5.8.8 numtracks 4.5.8.8.1 attributes 4.5.8.8.2 example in javascript 4.6 metadatasource interface 4.6.1 attributes 4.6.2 examples in javascript 4.7 api status codes 5. usage examples 5.1 usage as javascript api 5.2 usage as web service 6. implementation notes 6.1 multiple identifiers of media resources orfragements 6.2 missing fragment identifiers 6.3 interoperability of implementations 7. security considerations a. web idl description b. acknowledgements c. references c.1 normative references c.2 informative references 1. introduction this specification defines an api to access metadata information related to media resources on the web. the overall purpose is to provide developers with a convenient access to metadata information stored in different metadata formats. the core properties defined in the ontology for media resources 1.0 specification media-ontology will be used as a pivot vocabulary in this api. the description of relations between these core properties and the metadata formats in scope are documented in the ontology for media resources 1.0 specification media-ontology in order to provide cross-community data integration. this api is described using the interface definition language web idl webidl the decision to use web idl which offers bindings for ecmascript and java is based on the use cases and requirements for ontology and metadata api for media resources 1.0 media-annot-reqs this api defines interfaces that enable users applications to consume metadata in an interoperable manner. interoperability between metadata formats is ensured by the use of the ontology for media resources 1.0 specification media-ontology as pivot metadata format. this api offers operations to request particular metadata information represented in a certain metadata format related to media resources on the web. further it specifies the actual representation of the core properties and the behaviour of this api. 1.1 formats in scope refers to the formats in scope of the ontology for media resources 1.0 specification media-ontology 1.2 formats out of scope refers to the formats out of scope of the ontology for media resources 1.0 specification media-ontology 1.3 terminology in this document the terms ontology media resource property mapping and property value types are to be interpreted as defined in section 2 of the ontology for media resources 1.0 specification media-ontology 2. conformance in addition to sections marked as non-normative all authoring guidelines diagrams examples and notes in this specification are non-normative. everything else in this specification is normative. the keywords must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc2119 3. design consideration this section discusses different usage scenarios that led to design of the api. we consider two main scenarios where this api be implemented and invoked in the user agent or as a client accessing a web service. in both client-only and client-server cases of the implementation the media resources and or the metadata sources are in many cases remote. the api is by default specified as an asynchronous api i.e. the calls are not blocking but results or errors are returned using a callback mechanism. in order to better support the web service case a synchronous mode is also defined. the synchronous mode is optional. the two scenarios are shown in figure 1. figure 1 two scenarios with different usage of this api. this specification only defines the metadata api for media resources. other components depicted in figure 1 e.g. access extraction storage of metadata are not covered. scenario 1 client-only user agent in the first scenario this api is implemented in the user agent i.e. built into a browser as a plugin or as a javascript library. here there exist three possibilities to invoke the api by an external calling code an internal calling code behaving like a client or it is attached as an extension to a user agent. usually such implementations are an example for asynchronous processing. besides the metadata api for media resources 1.0 the user agent may include components for metadata access and extraction and mappings for a supported set of formats e.g. as defined in the property mapping table of the ontology for media resources 1.0 specification media-ontology further the metadata sources the media resource and or metadata document s must be retrievable. the access e.g. establish connection retrieval to the metadata sources is handled by the user agent. scenario 2 client-server in the second scenario this api is implemented as a web service following the principles of server-side synchronous processing. such an implementation would be typically used by a non-ui client such as an agent harvesting metadata. however this api can be also accessed from a user agent and used the same way as described in scenario 1 with the help of a client-side library for accessing the web service. in the implementation of the web service this scenario also allows supporting a media repository e.g. content provider s archive database movie store. with the help of such a service the user agent can retrieve metadata sources which might have a custom metadata format not supported by a user agent. in contrast to an integrated component see scenario 1 an implementation of this api in a web service can do more complex mappings on the fly than a component integrated in a user agent and can be more flexible e.g. supporting additional formats in both scenarios the api serves as a mediator between a client application and the actual metadata sources. interoperability is ensured by defining i operations for accessing the metadata information ii a common object structure and iii api behaviour e.g. status codes following this an implementation has to implement this stack of components an implementation of the metadata api for media resources as defined in this document which provides the actual getter methods for the properties. an implementation of the mappings from a specific source format to the core properties. here the metadata api for media resources 1.0 should use the ontology for media resources 1.0 specification media-ontology where applicable. a format specific api to access the metadata. this can be an api for retrieving a metadata document describing a media resource e.g. an xml parser and a set of xpath statements or an extractor to read metadata embedded in the media resource e.g. a library to read exif information from jpeg images in order to define the context in which this api is applied at least a unidirectional reference from the media resource to the metadata document or vice versa is needed. if this is not the case such a reference needs to be provided by the web application scenario 1 web service scenario 2 or media repository scenario 2 this api provides access to metadata information stored in different metadata formats. as such different instances of the same property can exist. 4. api description this api defines a number of interfaces using webidl these can be grouped in the following categories an interface defining the actual retrieval operations for metadata called mediaresource and provided in both synchronous and asynchronous versions see section 4.1 section 4.2 and section 4.3 an interface defining the data structure of response objects metadata annotations called mediaannotation and its specializations see section 4.4 and section 4.5 an interface defining a data structure for metadata sources called metadatasource see section 4.6 next the different interfaces and exposed operations are discussed. implementations of this api must support asynchronous mode of operation may support the synchronous one and must support the interfaces defined in this document. instead of exceptions a status code indicating the state of processing see section 4.7 is returned in the synchronous api or provided via a callback function in the asynchronous api in case an error occurs. then the interfaces for the return types i.e. mediaannotation and its specializations and metadatasource are defined. the idl fragment in appendix a of this specification must be interpreted as required for conforming idl fragments as described in the web idl specification. webidl 4.1 mediaresource interface the mediaresource interface is the core of this api and provides operations to access the metadata properties of a specific media resource. here a clear separation between asynchronous and synchronous mode of operation has been achieved by defining two implementing interfaces derived from mediaresource the asyncmediaresource and the syncmediaresource interface. objects of these interfaces will be created by calling createmediaresource of the mediaresource interface. the actual connection to a specified metadata source will be created with the execution of the getmediaproperty operation of asyncmediaresource or syncmediaresource interface. the mediaresource argument identifies the media resource for which the implementation of this api should try to find relevant metadata sources. optionally references to metadata sources can be passed using an array of objects each implementing the metadatasource interface see section 4.6 interface mediaresource short getsupportedmodes mediaresource createmediaresource domstring mediaresource optional metadatasource metadatasources optional short mode 4.1.1 methods createmediaresource this operation instantiates an object of either asyncmediaresource or syncmediaresource interface. further it allows to set the specific media resource and metadata sources to which this api is applied. parameter type nullable optional description mediaresource domstring this attribute must set the specific media resource that should be processed by the api. metadatasources metadatasource this attribute should specify additional metadata sources. mode short this attribute should specify the desired mode of operation. 1 for asynchronous and 2 for synchronous mode should be used. in the case the mode argument is omitted and the implementation supports both modes the asynchronous mode will be used. no exceptions. return type mediaresource getsupportedmodes this operation is called to identify the implemented mode. the return codes should be as follows 1 for asynchronous 2 for synchronous and 3 for both modes. no parameters. no exceptions. return type short 4.1.2 examples in javascript example for getsupportedmodes ma new mediaresource var mode ma.getsupportedmodes resulting in supportedmodes 3 example for createmediaresource metadatasources new metadatasource 2 metadatasources 0 new metadatasource http www.w3.org 2008 webvideo annotations drafts metadata_formats dc_example1.xml dc metadatasources 1 new metadatasource http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg exif mediaresource new mediaresource if mediaresource.getsupportedmodes 1 mediaresource.getsupportedmodes 3 asyncobject mediaresource.createmediaresource http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg metadatasources 1 else if mediaresource.getsupportedmodes 2 mediaresource.getsupportedmodes 3 syncobject mediaresource.createmediaresource http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg metadatasources 2 4.2 asyncmediaresource interface the asyncmediaresource interface provides a number of operations that allow accessing the metadata of a media resource. this interface must be implemented. next we give the web idl description of the asyncmediaresource interface and describe the different operations that are part of it. in this section the mediaannotations interface is used in the interface definitions. it serves as a container to hold general values about properties enabling an iteration over a set of different properties. its definition can be found in section 4.4 interface asyncmediaresource mediaresource void getmediaproperty domstring propertynames propertycallback successcallback errorcallback errorcallback optional domstring fragment optional domstring sourceformat optional domstring language void getoriginalmetadata domstring sourceformat metadatacallback successcallback errorcallback errorcallback 4.2.1 methods getmediaproperty this operation allows retrieval of the value of a specific property several or all properties in an asynchronous manner. the specific property is passed as an argument and a list of objects is returned that hold the values according to the requested property. these objects implement the mediaannotation interface described in section 4.4. depending on the requested property the returned objects implement a different subtypes inheriting from the mediaannotation interface for example requesting title gives back an array of objects implementing the title interface requesting creator results in objects implementing the creator interface and so on. these interfaces are described in section 4.5. an example can be found here. parameter type nullable optional description propertynames domstring this argument identifies an array containing the properties for which the values need to be retrieved. for an empty array all properties carrying values will be retrieved. successcallback propertycallback this argument holds a callback object for asynchronous requests to the property. the successcallback object implements the propertycallback interface and holds a handleevent operation that needs to be called once all data for the requested property is gathered. this handleevent operation needs to be called with a new mediaannotation array. errorcallback errorcallback this argument holds a callback object for failure of asynchronous requests to the property. the errorcallback object implements the errorcallback interface and holds a handleevent operation that needs to be called if an attempt fails. this handleevent operation needs to be called with a new domstring representing the status code of the error see section 4.7 for details fragment domstring this argument contains a uri identifying the specific media fragment for which the metadata is requested. the uri must conform to the uri for media fragment media-fragments specification. this parameter is optional. sourceformat domstring this argument identifies a specific metadata format. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology if a metadata format is defined only the metadata available in the specified metadata format are retrieved. this parameter is optional. language domstring this argument allows to identify the language of the metadata. values for the metadata will only be returned if it is available in the specified language. recommended best practice is to use bcp 47 bcp47 this parameter is optional. no exceptions. return type void getoriginalmetadata this operation allows retrieval of the original metadata according to the specified source format in an asynchronous manner. an example can be found here. parameter type nullable optional description sourceformat domstring this argument identifies a specific metadata format. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology if a metadata format is defined only the metadata available in the specified metadata format are retrieved. successcallback metadatacallback this argument holds a callback object for asynchronous requests for the original metadata. the successcallback object implements the metadatacallback interface and holds a handleevent operation that needs to be called once all properties having values are listed. this handleevent operation needs to be called with a new domstring array holding the original metadata. errorcallback errorcallback this argument holds a callback object for failure of asynchronous requests for the original metadata. the errorcallback object implements the errorcallback interface and holds a handleevent operation that needs to be called if an attempt fails. this handleevent operation needs to be called with a new domstring representing the status code of the error see section 4.7 for details no exceptions. return type void 4.2.2 callback interfaces 4.2.2.1 propertycallback interface the propertycallback interface holds a handleevent operation that needs to be called once all data for the requested property has been gathered. interface propertycallback void handleevent mediaannotation mediaannotations 4.2.2.1.1 methods handleevent this operation is called when all data is gathered corresponding to a request for values of one or more properties. parameter type nullable optional description mediaannotations mediaannotation this argument holds a list of objects with values according to the requested property. these objects implement the mediaannotation interface described in section 4.4. depending on the requested property the returned objects implement a different subtypes inheriting from the mediaannotation interface no exceptions. return type void 4.2.2.2 metadatacallback interface the metadatacallback interface holds a handleevent operation that needs to be called once the requested metadata has been gathered. interface metadatacallback void handleevent domstring metadata 4.2.2.2.1 methods handleevent this operation is called when all data is gathered corresponding to a request for the original metadata. parameter type nullable optional description metadata domstring this argument holds a list of domstrings representing the original metadata. note that multiple metadata instances can exist e.g. one dublin core and one mpeg-7 document no exceptions. return type void 4.2.3 examples in javascript example for asynchronous getmediaproperty asyncmediaresource mediaresource.createmediaresource http www.imdb.com title tt0133152 new array 1 asyncmediaresource.getmediaproperty title successcallback errorcallback function successcallback mediaannotation mediaannotations resulting in title propertyname title value planet of the apes language en-us statuscode 200 title propertyname title value monkey planet language en-us statuscode 200 function errorcallback domstring error resulting in error statuscode 200 example for asynchronous getoriginalmetadata asyncmediaresource mediaresource.createmediaresource http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg new array 1 asyncmediaresource.getoriginalmetadata dc successcallback errorcallback function successcallback domstring metadata resulting in statuscode 200 originalmetadata metadata xmlns http example.org myapp xmlns xsi http www.w3.org 2001 xmlschema-instance xsi schemalocation http example.org myapp http example.org myapp schema.xsd xmlns dc http purl.org dc elements 1.1 dc title dc title dc title metadata function errorcallback domstring error resulting in error statuscode 200 4.3 syncmediaresource interface the syncmediaresource interface provides a number of operations to access the metadata of a media resource. this interface may be implemented. next we give the web idl description of the syncmediaresource interface for synchronous requests and describe the different operations that are part of it. the mediaresource defines a constructor that can be called to construct the object based on an identifier of the media resource and optionally some metadata sources. interface syncmediaresource mediaresource mediaannotation getmediaproperty domstring propertynames optional domstring fragment optional domstring sourceformat optional domstring language domstring getoriginalmetadata domstring sourceformat 4.3.1 methods getmediaproperty this operation allows retrieval of the metadata of a specific property several or all properties in a synchronous manner. the passed array holds the requested properties and an array of objects is returned. if the array is empty every property holding values will be requested and returned. the returned objects implement the mediaannotation interface see section 4.3 depending on the requested property the returned objects implement different subtypes inheriting from the mediaannotation interface for example requesting title gives back an array of objects implementing the title interface requesting creator results in objects implementing the creator interface and so on. these subtypes are described in section 4.4. the operation returns a mediaannotation array holding the requested properties. if an error occurs during retrieval a mediaannotation object with the corresponding status code e.g. 400 404 or 415 will be generated and inserted at the first position of the array. an example can be found here. in this section the mediaannotations interface is used in the interface definitions. it serves as a container to hold general values about properties enabling an iteration over a set of different properties. its explanation can be found in section 4.4 parameter type nullable optional description propertynames domstring this argument holds the requested properties as an array. if the array is empty each property holding values will be returned. fragment domstring this argument contains a uri identifying the specific media fragment for which the metadata is requested. the uri must conform to the uri for media fragment media-fragments specification. this parameter is optional. sourceformat domstring this argument identifies a specific metadata format. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology if a metadata format is defined only the metadata available in the specified metadata format is retrieved. this parameter is optional. language domstring this argument allows to identify the language of the metadata. values for the metadata will only be returned if it is available in the specified language. recommended best practice is to use bcp 47 bcp47 this parameter is optional. no exceptions. return type mediaannotation getoriginalmetadata this operation allows retrieval of the original metadata according to the specified source format in a synchronous manner. the operation returns a domstring array holding the status code of the request at the first and the original metadata at the second position. an example can be found here. parameter type nullable optional description sourceformat domstring this argument identifies a specific metadata format. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology if a metadata format is defined only the metadata available in the specified metadata format is retrieved. no exceptions. return type domstring 4.3.2 examples in javascript the examples in this section use getmediaproperty to get an object implementing the mediaannotation interface. the noerrorstatus function ensures that no error is present and the requested properties carry values. we give some javascript examples on how to use the synchronous mediaresource interface and it s operations. example for synchronous getmediaproperty syncmediaresource mediaresource.createmediaresource http www.imdb.com title tt0133152 new array 2 title syncmediaresource.getmediaproperty title if noerrorstatus title 0 statuscode true resulting in title propertyname title value planet of the apes language en-us statuscode 200 title propertyname title value planet der affen language de-de statuscode 200 example for synchronous getoriginalmetadata syncmediaresource mediaresource.createmediaresource http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg new array 2 dcmetadata syncmediaresource.getoriginalmetadata dc if noerrorstatus dcmetadata 0 statuscode true resulting in statuscode 200 originalmetadata metadata xmlns http example.org myapp xmlns xsi http www.w3.org 2001 xmlschema-instance xsi schemalocation http example.org myapp http example.org myapp schema.xsd xmlns dc http purl.org dc elements 1.1 dc title dc title dc title metadata 4.4 mediaannotation interface mediaannotation interface is used as the return type of mediaresource.getmediaproperty operation. it is a container for holding general values about metadata properties. as several metadata properties are defined as complex types specific derived types of mediaannotation have been defined adding their specific attributes. however mediaannotation can be used as a generic return type to access a printable string representation of the property in the value attribute it also includes a status code. in case of general errors the first element of the returned mediaannotation array contains the global error code otherwise the status can be given for each of the returned properties. the following design considerations have been used for specifying the derived interfaces for each of the metadata properties for each metadata property an interface is derived from mediaannotation adding typed attributes according to the specification in the ontology document. this api must fill value with a printable string representation it is recommended to follow these steps use a name label if present for a uri if a uri identifies a value known by this api use the appropriate label dereference a uri to obtain a label if possible return the uri create a string from the values of the set of attributes e.g. numeric values this approach possibly duplicates a string that is found in another attribute in the value attribute. this is considered as an acceptable amount of redundancy for the benefit of having a generic value field for all metadata properties that can be used regardless of the specific metadata property and data type of the attributes. if an attribute has type uri string the interface shall have two attributes one with link and one with label appended to the attribute name representing the uri and string respectively for consistency this approach is also followed if the attribute has only either uri or string as type. this approach allows for user extensions by deriving from mediaannotation or one of the derived interfaces for one of the metadata properties. interface mediaannotation attribute domstring propertyname attribute domstring value attribute domstring language attribute domstring sourceformat attribute domstring fragmentidentifier attribute domstring mappingtype attribute short statuscode 4.4.1 attributes fragmentidentifier of type domstring this attribute should be an uri determining the fragment for which the metadata is relevant. no exceptions. language of type domstring this attribute should hold the language of the metadata. the attribute is empty if language is not applicable for a specific property. recommended best practice is to use bcp 47 bcp47 no exceptions. mappingtype of type domstring this attribute specifies the kind of mapping as discussed in the semantic level mappings. the value of this attribute should be one of the mapping characteristics. no exceptions. propertyname of type domstring the name of the property must be specified and should correspond to the property names defined in the ontology for media resources 1.0 specification media-ontology sourceformat of type domstring this attribute allows to specify the metadata source from which the metadata was retrieved. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology no exceptions. statuscode of type short this attribute must specify the status code for the associated property e.g. 264 indicating a structured return value no exceptions. value of type domstring this attribute must be filled with an printable string representation. no exceptions. 4.4.2 example in javascript the noerrorstatus function ensures that no error is present and the requested properties carry values. the mediaannotation interface will be never instantiated only instances of the derived interfaces will be created. these must be filled at least with the parameters specified in the mediaannotation interface and may be filled with the specific attributes. mediaannotation image.getmediaproperty title if noerrorstatus mediaannotation 0 statuscode true resulting in title propertyname title value gone with the wind language en-us sourceformat mpeg7 fragmentidentifier http www.example.com video.ogv#t 10,20 mappingtype exact match statuscode 200 4.5 properties this section describes the different properties that can be requested through the mediaresource.getmediaproperty operation. when invoking this operation objects implementing the mediaannotation interface are returned that represent the specified property. all properties are represented with an interface inherited from the mediaannotation interface following the design guidelines described above several of the following return type interfaces can hold the value of the property as both uri i.e. a pointer to a controlled vocabulary or as free text. the uri is preferred and the respective attribute of the mediaannotation interface or specialized type shall be filled whenever possible i.e. when the information is included in or can be constructed from the source metadata in the following for each property a synchronous javascript example illustrates the usage of the property specific attributes. in any case the general attributes of the mediaannotation interface could be also requested. 4.5.1 identification properties 4.5.1.1 identifier when the mediaresource.getmediaproperty operation is invoked with identifier as a value of the propertynames parameter an object implementing the identifier interface is returned representing the identifier property defined in the ontology for media resources 1.0 specification media-ontology interface identifier mediaannotation attribute domstring identifierlink 4.5.1.1.1 attributes identifierlink of type domstring this attribute holds a uri identifying the media resource. no exceptions. 4.5.1.1.2 example in javascript id image.getmediaproperty identifier resulting in identifier propertyname identifier identifierlink urn uuid 36a87260-1102-11df-8a39-0800200c9a66 statuscode 200 4.5.1.2 title when the mediaresource.getmediaproperty operation is invoked with title as a value of the propertynames parameter an object implementing the title interface is returned representing the title property defined in the ontology for media resources 1.0 specification media-ontology interface title mediaannotation attribute domstring titlelabel attribute domstring typelink attribute domstring typelabel 4.5.1.2.1 attributes titlelabel of type domstring this attribute holds the title as a plain string. no exceptions. typelabel of type domstring this attribute holds the type of the title as a plain string. no exceptions. typelink of type domstring this attribute holds the type of the title as a uri. no exceptions. 4.5.1.2.2 example in javascript title song.getmediaproperty title resulting in title propertyname title titlelabel artificial horizon typelink http www.ebu.ch metadata cs ebu_objecttypecodecs.xml#21 typelabel album title statuscode 200 4.5.1.3 language when the mediaresource.getmediaproperty operation is invoked with language as a value of the propertynames parameter an object implementing the language interface is returned representing the language property defined in the ontology for media resources 1.0 specification media-ontology interface language mediaannotation attribute domstring languagelink attribute domstring languagelabel 4.5.1.3.1 attributes languagelabel of type domstring this attribute represents the language of the media resource as a plain string which can be filtered on in the getmediaproperty operation. recommended best practice is to use bcp 47 bcp47 no exceptions. languagelink of type domstring this attribute represents the language of the media resource as a uri. no exceptions. 4.5.1.3.2 example in javascript language video.getmediaproperty language resulting in language propertyname language languagelabel en-us statuscode 200 4.5.1.4 locator when the mediaresource.getmediaproperty operation is invoked with locator as a value of the propertynames parameter an object implementing the locator interface is returned representing the locator property defined in the ontology for media resources 1.0 specification media-ontology interface locator mediaannotation attribute domstring locatorlink 4.5.1.4.1 attributes locatorlink of type domstring this attribute specifies the location of the media resource by a uri. no exceptions. 4.5.1.4.2 example in javascript locator image.getmediaproperty locator resulting in locator propertyname locator locatorlink http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg statuscode 200 4.5.2 creation properties 4.5.2.1 contributor when the mediaresource.getmediaproperty operation is invoked with contributor as a value of the propertynames parameter an object implementing the contributor interface is returned representing the contributor property defined in the ontology for media resources 1.0 specification media-ontology interface contributor mediaannotation attribute domstring contributorlink attribute domstring contributorlabel attribute domstring rolelink attribute domstring rolelabel 4.5.2.1.1 attributes contributorlabel of type domstring this attribute represents the contributor i.e. the agent making the contribution as a plain string no exceptions. contributorlink of type domstring this attribute represents the contributor i.e. the agent making the contribution as a uri. no exceptions. rolelabel of type domstring this attribute represents the role of the contributor as a plain string. no exceptions. rolelink of type domstring this attribute represents the role of the contributor as uri. no exceptions. 4.5.2.1.2 example in javascript contributor video.getmediaproperty contributor resulting in contributor propertyname contributor contributorlink http en.wikipedia.org wiki tim_burton contributorlabel tim burton rolelink http www.imdb.com name nm0000318 rolelabel director statuscode 200 4.5.2.2 creator when the mediaresource.getmediaproperty operation is invoked with creator as a value of the propertynames parameter an object implementing the creator interface is returned representing the creator property defined in the ontology for media resources 1.0 specification media-ontology interface creator mediaannotation attribute domstring creatorlink attribute domstring creatorlabel attribute domstring rolelink attribute domstring rolelabel 4.5.2.2.1 attributes creatorlabel of type domstring this attribute represents the creator i.e. the agent participating in the creation of the media resource as a plain string. no exceptions. creatorlink of type domstring this attribute represents the creator i.e. the agent participating in the creation of the media resource as a uri. no exceptions. rolelabel of type domstring this attribute represents the role of the creator as a plain string. no exceptions. rolelink of type domstring this attribute represents the role of the creator as uri. no exceptions. 4.5.2.2.2 example in javascript creator video.getmediaproperty creator resulting in creator propertyname creator creatorlink http dbpedia.org resource william_shakespeare creatorlabel william shakespeare rolelink http www.ebu.ch metadata cs ebu_rolecodecs.xml#22.5 rolelabel playwright statuscode 200 4.5.2.3 madate when the mediaresource.getmediaproperty operation is invoked with date as a value of the propertynames parameter an object implementing the date interface is returned representing the date property defined in the ontology for media resources 1.0 specification media-ontology this property has been renamed from date into madate in order to avoid naming conflicts with other objects named date in web applications. interface madate mediaannotation attribute domstring date attribute domstring typelink attribute domstring typelabel 4.5.2.3.1 attributes date of type domstring this attribute represents a date related to the media resource. a date value must be represented using one of the specific date time data types of xml schema depending on the available precision gyear gyearmonth date datetime or datetimestamp. no exceptions. typelabel of type domstring this attribute defines the category of date e.g. creation date broadcast date release date date recorded and date edited as a plain string. no exceptions. typelink of type domstring this attribute defines the category of date e.g. creation date broadcast date release date date recorded and date edited as a uri. no exceptions. 4.5.2.3.2 example in javascript madate video.getmediaproperty date resulting in madate propertyname date date 2009-06-26t15 30 00 typelink urn smpte ul 06.0e.2b.34.01.01.01.02.07.02.01.10.02.03.00.00 typelabel modification date statuscode 200 4.5.2.4 location when the mediaresource.getmediaproperty operation is invoked with location as a value of the propertynames parameter an object implementing the location interface is returned representing the location property defined inthe ontology for media resources 1.0 specification media-ontology interface location mediaannotation attribute domstring locationlink attribute domstring locationlabel attribute double longitude attribute double latitude attribute double altitude attribute domstring coordinatesystemlabel attribute domstring coordinatesystemlink 4.5.2.4.1 attributes altitude of type double this attribute holds the altitude of the location w.r.t. the coordinate system specified by the coordiatesystem attribute. no exceptions. coordinatesystemlabel of type domstring this attribute identifies the coordinate system used by its name. no exceptions. coordinatesystemlink of type domstring this attribute identifies the coordinate system used by a uri. no exceptions. latitude of type double this attribute holds the latitude of the location w.r.t. the coordinate system specified by the coordiatesystem attribute. no exceptions. locationlabel of type domstring this attribute identifies the location by its name as a plain string. no exceptions. locationlink of type domstring this attribute identifies the location as a uri. no exceptions. longitude of type double this attribute holds the longitude of the location w.r.t. the coordinate system specified by the coordiatesystem attribute. no exceptions. 4.5.2.4.2 example in javascript location video.getmediaproperty location resulting in location propertyname location locationlink http en.wikipedia.org wiki san_jose california locationlabel san jose longitude 37.33986481118008 latitude 121.88507080078125 altitude 0 coordinatesystemlabel wgs84 coordinatesystemlink http www.w3.org 2003 01 geo wgs84_pos#point statuscode 200 4.5.3 content properties 4.5.3.1 description when the mediaresource.getmediaproperty operation is invoked with description as a value of the propertynames parameter an object implementing the description interface is returned representing the description property defined in the ontology for media resources 1.0 specification media-ontology interface description mediaannotation attribute domstring descriptionlabel 4.5.3.1.1 attributes descriptionlabel of type domstring this attribute contains a description of the content of the media resource. no exceptions. 4.5.3.1.2 example in javascript description image.getmediaproperty description resulting in description propertyname description descriptionlabel group picture of the w3c mawg at the f2f meeting in stockholm. statuscode 200 4.5.3.2 keyword when the mediaresource.getmediaproperty operation is invoked with keyword as a value of the propertynames parameter an object implementing the keyword interface is returned representing the keyword property defined in the ontology for media resources 1.0 specification media-ontology interface keyword mediaannotation attribute domstring keywordlabel attribute domstring keywordlink 4.5.3.2.1 attributes keywordlabel of type domstring this attribute contains a keyword describing the content as a plain string. no exceptions. keywordlink of type domstring this attribute contains a uri representing a keyword describing the content. no exceptions. 4.5.3.2.2 example in javascript keyword image.getmediaproperty keyword resulting in keyword propertyname keyword keywordlabel meeting with people from outside the organisation keywordlink http sw.opencyc.org 2008 06 10 concept en meetingwithorganizationaloutsiders statuscode 200 keyword propertyname keyword keywordlabel standardisation keywordlink http purl.org vocabularies princeton wn30 synset-standardization-noun-1 statuscode 200 4.5.3.3 genre when the mediaresource.getmediaproperty operation is invoked with genre as a value of the propertynames parameter an object implementing the genre interface is returned representing the genre property defined in the ontology for media resources 1.0 specification media-ontology interface genre mediaannotation attribute domstring genrelabel attribute domstring genrelink 4.5.3.3.1 attributes genrelabel of type domstring this attribute represents the genre of the media resource as a plain string. no exceptions. genrelink of type domstring this attribute represents the genre of the media resource as a uri. no exceptions. 4.5.3.3.2 example in javascript genre image.getmediaproperty genre resulting in genre propertyname genre genrelabel sports genrelink http www.ebu.ch metadata cs ebu_contentgenrecs.xml#3.1.1.9 statuscode 200 4.5.3.4 rating when the mediaresource.getmediaproperty operation is invoked with rating as a value of the propertynames parameter an object implementing the rating interface is returned representing the rating property defined in the ontology for media resources 1.0 specification media-ontology interface rating mediaannotation attribute double ratingvalue attribute domstring ratingsystemlabel attribute domstring ratingsystemlink attribute double minimum attribute double maximum 4.5.3.4.1 attributes maximum of type double this attribute specifies the maximum rating value in the rating system. no exceptions. minimum of type double this attribute specifies the minimum rating value in the rating system. no exceptions. ratingsystemlabel of type domstring this attribute identifies the rating system by a plain string. no exceptions. ratingsystemlink of type domstring this attribute identifies the rating system as a uri. no exceptions. ratingvalue of type double this attribute contains the value of the rating. no exceptions. 4.5.3.4.2 example in javascript rating image.getmediaproperty rating resulting in rating propertyname rating ratingvalue 10.0 ratingsystemlabel john doe ratingsystemlink http individuals.example.com johndoe minimum 0 maximum 10.0 statuscode 200 4.5.4 relational properties 4.5.4.1 relation when the mediaresource.getmediaproperty operation is invoked with relation as a value of the propertynames parameter an object implementing the relation interface is returned representing the relation property defined in the ontology for media resources 1.0 specification media-ontology interface relation mediaannotation attribute domstring targetlink attribute domstring targetlabel attribute domstring typelink attribute domstring typelabel 4.5.4.1.1 attributes targetlabel of type domstring this attribute identifies the related resource by a plain string. no exceptions. targetlink of type domstring this attribute identifies the related resource by a uri. no exceptions. typelabel of type domstring this attribute specifies the type of relationship by a plain string. no exceptions. typelink of type domstring this attribute specifies the type of relationship by a uri. no exceptions. 4.5.4.1.2 example in javascript relation image.getmediaproperty relation resulting in relation propertyname relation targetlink http www.w3.org 2008 webvideo annotations wiki image mawg-stockholm-20090626_thumb.jpg targetlabel group picture of mawg in stockholm typelink http www.ebu.ch metadata cs ebu_howrelatedcs.xml#19 typelabel thumbnail statuscode 200 4.5.4.2 collection when the mediaresource.getmediaproperty operation is invoked with collection as a value of the propertynames parameter an object implementing the collection interface is returned representing the collection property defined inthe ontology for media resources 1.0 specification media-ontology interface collection mediaannotation attribute domstring collectionlink attribute domstring collectionlabel 4.5.4.2.1 attributes collectionlabel of type domstring this attribute holds the name of the collection from which the media resource originates as a plain string. no exceptions. collectionlink of type domstring this attribute holds the name of the collection from which the media resource originates as uri. no exceptions. 4.5.4.2.2 example in javascript collection image.getmediaproperty collection resulting in collection propertyname collection collectionlink http individuals.example.com johndoe myworkpictures collectionlabel my work pictures statuscode 200 4.5.5 rights properties 4.5.5.1 copyright when the mediaresource.getmediaproperty operation is invoked with copyright as a value of the propertynames parameter an object implementing the copyright interface is returned representing the copyright property defined in the ontology for media resources 1.0 specification media-ontology interface copyright mediaannotation attribute domstring copyrightlabel attribute domstring holderlabel attribute domstring holderlink 4.5.5.1.1 attributes copyrightlabel of type domstring this attribute contains the copyright statement as a plain string. no exceptions. holderlabel of type domstring this attribute identifies the copyright holder by a plain string. no exceptions. holderlink of type domstring this attribute identified the copyright holder by a uri. no exceptions. 4.5.5.1.2 example in javascript copyright image.getmediaproperty copyright resulting in copyright propertyname copyright copyrightlabel all images in the collection are copyrighted by john doe. holderlabel john doe holderlink http individuals.example.com johndoe statuscode 200 4.5.5.2 policy when the mediaresource.getmediaproperty operation is invoked with policy as a value of the propertynames parameter an object implementing the policy interface is returned representing the policy property defined in the ontology for media resources 1.0 specification media-ontology interface policy mediaannotation attribute domstring statementlink attribute domstring statementlabel attribute domstring typelink attribute domstring typelabel 4.5.5.2.1 attributes statementlabel of type domstring this attribute contains a plain string of the policy statement. no exceptions. statementlink of type domstring this attribute contains a uri of the policy statement. no exceptions. typelabel of type domstring this attribute identifies the type of the policy as a uri as a plain string. no exceptions. typelink of type domstring this attribute identifies the type of the policy as a uri. no exceptions. 4.5.5.2.2 example in javascript policy image.getmediaproperty policy resulting in policy propertyname policy statementlink http creativecommons.org licenses by 2.5 statementlabel attribution 2.5 generic cc by 2.5 typelabel license statuscode 200 4.5.6 distribution properties 4.5.6.1 publisher when the mediaresource.getmediaproperty operation is invoked with publisher as a value of the propertynames parameter an object implementing the publisher interface is returned representing the publisher property defined in the ontology for media resources 1.0 specification media-ontology interface publisher mediaannotation attribute domstring publisherlink attribute domstring publisherlabel 4.5.6.1.1 attributes publisherlabel of type domstring this attribute represents the publisher as a plain string. no exceptions. publisherlink of type domstring this attribute represents the publisher as a uri. no exceptions. 4.5.6.1.2 example in javascript publisher image.getmediaproperty publisher resulting in publisher propertyname publisher publisherlabel acme publisherlink http company.example.com acme statuscode 200 4.5.6.2 targetaudience when the mediaresource.getmediaproperty operation is invoked with targetaudience as a value of the propertynames parameter an object implementing the targetaudience interface is returned representing the targetaudience property defined in the ontology for media resources 1.0 specification media-ontology interface targetaudience mediaannotation attribute domstring audiencelink attribute domstring audiencelabel attribute domstring classificationsystemlink attribute domstring classificationsystemlabel 4.5.6.2.1 attributes audiencelabel of type domstring this attribute identifies the target audience by a plain string. no exceptions. audiencelink of type domstring this attribute identifies the target audience by a uri. no exceptions. classificationsystemlabel of type domstring this attribute specifies the classification system by a plain string. no exceptions. classificationsystemlink of type domstring this attribute specifies the classification system by a uri. no exceptions. 4.5.6.2.2 example in javascript targetaudience image.getmediaproperty targetaudience resulting in targetaudience propertyname targetaudience audiencelink http www.mpaa.org ratings what-each-rating-means#nc-17 audiencelabel no one 17 and under admitted classificationsystemlink http www.mpaa.org ratings classificationsystemlabel mpaa statuscode 200 4.5.7 fragments properties 4.5.7.1 fragment when the mediaresource.getmediaproperty operation is invoked with fragment as a value of the propertynames parameter an object implementing the fragment interface is returned representing the fragment property defined in the ontology for media resources 1.0 specification media-ontology interface fragment mediaannotation attribute domstring identifier attribute domstring rolelink attribute domstring rolelabel 4.5.7.1.1 attributes identifier of type domstring this attribute identifies the fragment as media fragment uri temporal spatial or track no exceptions. rolelabel of type domstring this attribute identifies the role of the fragment as a plain string which can be filtered on in the getmediaproperty operation. no exceptions. rolelink of type domstring this attribute identifies the role of the fragment as a uri which can be filtered on in the getmediaproperty operation. no exceptions. 4.5.7.1.2 example in javascript fragment movie.getmediaproperty fragment resulting in fragment propertyname fragment identifier http www.example.com video.ogv#t 10,20 rolelabel chapter statuscode 200 4.5.7.2 namedfragment when the mediaresource.getmediaproperty operation is invoked with namedfragment as a value of the propertynames parameter an object implementing the namedfragment interface is returned representing the namedfragment property defined in the ontology for media resources 1.0 specification media-ontology interface namedfragment mediaannotation attribute domstring identifier attribute domstring label 4.5.7.2.1 attributes identifier of type domstring this attribute identifies a named fragment by a media fragment uri. no exceptions. label of type domstring this attribute contains a plain text label of a named media fragment which can be used to contruct a media fragment uri fro a named fragment. no exceptions. 4.5.7.2.2 example in javascript namedfragment movie.getmediaproperty namedfragment resulting in namedfragment propertyname namedfragment identifier http www.example.com video.ogv#t 30,35 label kissscene statuscode 200 4.5.8 technical properties 4.5.8.1 framesize when the mediaresource.getmediaproperty operation is invoked with framesize as a value of the propertynames parameter an object implementing the framesize interface is returned representing the framesize property defined in the ontology for media resources 1.0 specification media-ontology interface framesize mediaannotation attribute double width attribute double height attribute domstring unit 4.5.8.1.1 attributes height of type double this attribute represents the height of the frame. no exceptions. unit of type domstring this attribute represents the unit of the frame width height. the default value is pixels. no exceptions. width of type double this attribute represents the width of the frame. no exceptions. 4.5.8.1.2 example in javascript framesize image.getmediaproperty framesize resulting in framesize propertyname framesize width 3072 height 2304 unit pixels statuscode 200 4.5.8.2 compression when the mediaresource.getmediaproperty operation is invoked with compression as a value of the propertynames parameter an object implementing the compression interface is returned representing the compression property defined in the ontology for media resources 1.0 specification media-ontology interface framesize mediaannotation attribute domstring compressionlink attribute domstring compressionlabel 4.5.8.2.1 attributes compressionlabel of type domstring this attribute specifies the compression type of the media resource as a plain string. no exceptions. compressionlink of type domstring this attribute specifies the compression type of the media resource by a uri. no exceptions. 4.5.8.2.2 example in javascript compression video.getmediaproperty compression resulting in compression propertyname compression compressionlabel h.264 avc compressionlink urn example-org codingnames2010#itu-h264 statuscode 200 4.5.8.3 duration when the mediaresource.getmediaproperty operation is invoked with duration as a value of the propertynames parameter an object implementing the duration interface is returned representing the duration property defined in the ontology for media resources 1.0 specification media-ontology interface duration mediaannotation attribute double duration 4.5.8.3.1 attributes duration of type double this attribute represents the duration of the media resource in seconds as an double value. no exceptions. 4.5.8.3.2 example in javascript duration video.getmediaproperty duration resulting in duration propertyname duration duration 3600 statuscode 200 4.5.8.4 format when the mediaresource.getmediaproperty operation is invoked with format as a value of the propertynames parameter an object implementing the format interface is returned representing the format property defined in the ontology for media resources 1.0 specification media-ontology interface format mediaannotation attribute domstring formatlink attribute domstring formatlabel 4.5.8.4.1 attributes formatlabel of type domstring this attribute specifies the mime type of the media resource. no exceptions. formatlink of type domstring this attribute identifies the mime type of the media resource by a uri. no exceptions. 4.5.8.4.2 example in javascript format image.getmediaproperty format resulting in format propertyname format formatlabel image jpeg formatlink http dbpedia.org resource jpeg statuscode 200 4.5.8.5 samplingrate when the mediaresource.getmediaproperty operation is invoked with samplingrate as a value of the propertynames parameter an object implementing the samplingrate interface is returned representing the samplingrate property defined in the ontology for media resources 1.0 specification media-ontology interface samplingrate mediaannotation attribute double samplingrate 4.5.8.5.1 attributes samplingrate of type double this attribute specifies the audio sampling rate in hz as a double. no exceptions. 4.5.8.5.2 example in javascript samplingrate audio.getmediaproperty samplingrate resulting in samplingrate propertyname samplingrate samplingrate 44100 statuscode 200 4.5.8.6 framerate when the mediaresource.getmediaproperty operation is invoked with framerate as a value of the propertynames parameter an object implementing the framerate interface is returned representing the framerate property defined inthe ontology for media resources 1.0 specification media-ontology interface framerate mediaannotation attribute double framerate 4.5.8.6.1 attributes framerate of type double this attribute specifies the framerate in fps as a double value. no exceptions. 4.5.8.6.2 example in javascript framerate video.getmediaproperty framerate resulting in framerate propertyname framerate framerate 30 statuscode 200 4.5.8.7 averagebitrate when the mediaresource.getmediaproperty operation is invoked with averagebitrate as a value of the propertynames parameter an object implementing the averagebitrate interface is returned representing the averagebitrate property defined in the ontology for media resources 1.0 specification media-ontology interface averagebitrate mediaannotation attribute double averagebitrate 4.5.8.7.1 attributes averagebitrate of type double this attribute specifies the average bitrate in kbps as a double value. no exceptions. 4.5.8.7.2 example in javascript bitrate video.getmediaproperty averagebitrate resulting in averagebitrate propertyname averagebitrate averagebitrate 45.06 statuscode 200 4.5.8.8 numtracks when the mediaresource.getmediaproperty operation is invoked with numtracks as a value of the propertynames parameter an object implementing the numtracks interface is returned representing the numtracks property defined in the ontology for media resources 1.0 specification media-ontology interface numtracks mediaannotation attribute short number attribute domstring typestring 4.5.8.8.1 attributes number of type short this attribute specifies the number of tracks as an integer value. no exceptions. typestring of type domstring this attribute specifies the type of the tracks that are counted as a plain string e.g. audio subtitle no exceptions. 4.5.8.8.2 example in javascript numtracks video.getmediaproperty numtracks resulting in numtracks propertyname numtracks number 2 typestring audio statuscode 200 4.6 metadatasource interface metadatasource interface is used to identify other metadata sources. interface metadatasource attribute domstring metadatasource attribute domstring sourceformat 4.6.1 attributes metadatasource of type domstring an uri identifying the metadata source. no exceptions. sourceformat of type domstring the name of the actual metadata format. it should use the metadata format identifiers defined in the ontology for media resources 1.0 specification media-ontology no exceptions. 4.6.2 examples in javascript metadatasource new metadatasource http www.w3.org 2008 webvideo annotations drafts metadata_formats dc_example1.xml dc 4.7 api status codes this section introduces a set of status codes for the defined api to indicate the system behavior. as described in section 4.4 the status code is returned as one of the attributes of the mediaannotation object returned by a method call to the api. these status codes are used on the api level and applied to either client side or server side implementations. numerical code textual description example 200 ok property delivered correctly 204 no content property retrieved without content 206 partial content only a subset of the available data stored in the result set 400 bad request syntactical error 404 not found the queries resource is not found 415 unsupported media type get duration call on an image data store 462 property not defined in source format location is not defined in mediarss 500 internal server error internal library e.g. extractor crashes 562 property not supported a subset of properties implemented 5. usage examples 5.1 usage as javascript api this part illustrates some examples how to use this api using javascript in actual implementations. moreover in these examples it is assumed that the implementation of this api knows where to find the metadata that corresponds to a specific media resource if necessary the location of the metadata can be configured by the use of the metadatasource interface the implementation should provide the mappings of different metadata formats to the core properties of the ontology for media resources 1.0 specification media-ontology example 1 return the name of the director of the movie apocalypse now search the video array for the one with title apocalypse now for var i 0 i mediaresourcevideoarray.length i++ request for the titles of the video the variable titles will be filled with an array of mediaannotation objects. titles mediaresourcevideoarray i getmediaproperty title check if the request is finished correctly if noerrorstatus titles 0 statuscode true for var j 0 j titles.length j++ check if the title matches if titles j titlelabel apocalypse now request for the director of the video the variable results will be filled with an array of mediaannotation objects. tempresults mediaresourcevideoarray i getmediaproperty contributor for var k 0 k tempresults.length k++ if tempresults i rolelabel director result tempresults i break resulting in contributor propertyname contributor value francis ford coppola statuscode 200 example 2 retrieve the title of the second song from the album joshua tree by u2. get the id of the second song using the fragments property tracks albummediaresource.getmediaproperty fragment trackidentifier tracks 1 identifier use this identifier to get the mediaresource object that represents the track mediaresource new mediaresource if mediaresource.getsupportedmodes 2 mediaresource.getsupportedmodes 3 syncmediaresource mediaresource.createmediaresource trackidentifier new array 2 get the title of the track title syncmediaresource.getmediaproperty title resulting in title propertyname title value i still haven t found what i m looking for statuscode 200 example 3 return the genre of the movie apocalypse now genre movie.getmediaproperty genre en-us resulting in genre propertyname genre value action statuscode 200 genre propertyname genre value drama statuscode 200 5.2 usage as web service this part illustrates how this api could be implemented using web services. note that web idl currently does not provide bindings for web services. the given examples correspond to the examples given in section 4.5 for each property. request http example.com my-media-resource getoriginalmetadata dc response json format statuscode 200 originalmetadata xml version 1.0 metadata xmlns http example.org myapp xmlns xsi http www.w3.org 2001 xmlschema-instance xsi schemalocation http example.org myapp http example.org myapp schema.xsd xmlns dc http purl.org dc elements 1.1 dc title dc title dc title metadata the following examples illustrate how to request values for the different properties. request http example.com my-media-resource ma-query identifier response json format identifier propertyname identifier identifierlink urn uuid 36a87260-1102-11df-8a39-0800200c9a66 statuscode 200 request http example.com my-media-resource ma-query title response json format title propertyname title value artificial horizon typelink http www.ebu.ch metadata cs ebu_objecttypecodecs.xml#21 typelabel album title statuscode 200 request http example.com my-media-resource ma-query language response json format language propertyname language languagelabel en-us statuscode 200 request http example.com my-media-resource ma-query locator response json format locator propertyname locator locatorlink http www.w3.org 2008 webvideo annotations wiki images 9 93 mawg-stockholm-20090626.jpg statuscode 200 request http example.com my-media-resource ma-query contributor response json format contributor propertyname contributor contributorlink http en.wikipedia.org wiki tim_burton contributorlabel tim burton rolelink http www.imdb.com name nm0000318 rolelabel director statuscode 200 request http example.com my-media-resource ma-query creator response json format creator propertyname creator creatorlink http dbpedia.org resource william_shakespeare creatorlabel william shakespeare rolelink http www.ebu.ch metadata cs ebu_rolecodecs.xml#22.5 rolelabel playwright statuscode 200 request http example.com my-media-resource ma-query date response json format madate propertyname date date 2009-06-26t15 30 00 typelink urn smpte ul 06.0e.2b.34.01.01.01.02.07.02.01.10.02.03.00.00 typelabel modification date statuscode 200 request http example.com my-media-resource ma-query location response json format location propertyname location locationlink http en.wikipedia.org wiki san_jose california locationlabel san jose longitude 37.33986481118008 latitude 121.88507080078125 altitude 0 coordinatesystemlabel wgs84 coordinatesystemlink http www.w3.org 2003 01 geo wgs84_pos#point statuscode 200 request http example.com my-media-resource ma-query description response json format description propertyname description descriptionlabel group picture of the w3c mawg at the f2f meeting in stockholm. statuscode 200 request http example.com my-media-resource ma-query keyword response json format keyword propertyname keyword keywordlabel meeting with people from outside the organisation keywordlink http sw.opencyc.org 2008 06 10 concept en meetingwithorganizationaloutsiders statuscode 200 keyword propertyname keyword keywordlabel standardisation keywordlink http purl.org vocabularies princeton wn30 synset-standardization-noun-1 statuscode 200 request http example.com my-media-resource ma-query genre response json format genre propertyname genre genrelabel sports genrelink http www.ebu.ch metadata cs ebu_contentgenrecs.xml#3.1.1.9 statuscode 200 request http example.com my-media-resource ma-query rating response json format rating propertyname rating ratingvalue 10.0 ratingsystemlabel john doe ratingsystemlink http individuals.example.com johndoe minimum 0 maximum 10.0 statuscode 200 request http example.com my-media-resource ma-query relation response json format relation propertyname relation targetlink http www.w3.org 2008 webvideo annotations wiki image mawg-stockholm-20090626_thumb.jpg targetlabel group picture of mawg in stockholm typelink http www.ebu.ch metadata cs ebu_howrelatedcs.xml#19 typelabel thumbnail statuscode 200 request http example.com my-media-resource ma-query collection response json format collection propertyname collection collectionlink http individuals.example.com johndoe myworkpictures collectionlabel my work pictures statuscode 200 request http example.com my-media-resource ma-query copyright response json format copyright propertyname copyright copyrightlabel all images in the collection are copyrighted by john doe. holderlabel john doe holderlink http individuals.example.com johndoe statuscode 200 request http example.com my-media-resource ma-query policy response json format policy propertyname policy statementlink http creativecommons.org licenses by 2.5 statementlabel attribution 2.5 generic cc by 2.5 typelabel license statuscode 200 request http example.com my-media-resource ma-query publisher response json format publisher propertyname publisher publisherlabel acme publisherlink http company.example.com acme statuscode 200 request http example.com my-media-resource ma-query targetaudience response json format targetaudience propertyname targetaudience audiencelink http www.mpaa.org ratings what-each-rating-means#nc-17 audiencelabel no one 17 and under admitted classificationsystemlink http www.mpaa.org ratings classificationsystemlabel mpaa statuscode 200 request http example.com my-media-resource ma-query fragment response json format fragment propertyname fragment identifier http www.example.com video.ogv#t 10,20 rolelabel chapter statuscode 200 request http example.com my-media-resource ma-query namedfragment response json format namedfragment propertyname namedfragment label kissscene identifier http www.example.com video.ogv#t 30,35 statuscode 200 request http example.com my-media-resource ma-query framesize response json format framesize propertyname framesize width 3072 height 2304 unit pixels statuscode 200 request http example.com my-media-resource ma-query compression response json format compression propertyname compression compressionlabel h.264 avc urn example-org codingnames2010#itu-h264 statuscode 200 request http example.com my-media-resource ma-query duration response json format duration propertyname duration duration 3600 statuscode 200 request http example.com my-media-resource ma-query format response json format format propertyname format formatlabel image jpeg formatlink http dbpedia.org resource jpeg statuscode 200 request http example.com my-media-resource ma-query samplingrate response json format samplingrate propertyname samplingrate samplingrate 44100 statuscode 200 request http example.com my-media-resource ma-query framerate response json format framerate propertyname framerate framerate 30 statuscode 200 request http example.com my-media-resource ma-query averagebitrate response json format averagebitrate propertyname averagebitrate averagebitrate 45.06 statuscode 200 request http example.com my-media-resource ma-query numtracks response json format numtracks propertyname numtracks number 2 typestring audio statuscode 200 6. implementation notes this section contains recommendations for implementators for handling missing or multiple identifiers of media resources fragments as well as for interoperability of implementations. 6.1 multiple identifiers of media resources or fragments in some source formats it could be possible to identify the resource or one of its fragments in multiple ways e.g. by one or more identifiers fragment name or temporal spatial fragment uris. for example there could be a temporal media fragment which can be addressed by the time range that also has an assigned id. in the rdf representation of the ontology for media resources this can be represented as recommended in the guidelines by using owl sameas. to ensure a similar behaviour in the api an implementation should return all such identifiers in a response. if queries to properties of a fragment with multiple identifiers are made the implementation should accept each of the alternative identifiers and return the same response for each of them. 6.2 missing fragment identifiers there are source formats which may contain metadata about a fragment e.g. a track without specifying any kind of identifier for it. for the rdf representation this is not a problem as blank nodes can be used. in an api implementation a client requesting the list of fragments cannot query properties of a fragment in case there is no identifier. an implementation should generate an identifier for the fragment in such a case and should ensure that it is valid for a sufficiently long time so that the client can use it in subsequent queries to properties of fragments. the identifier is not guaranteed to remain permanently valid. this can be implemented in different ways including the following in a session-aware environment e.g. in the user agent in a web service environment with session handling the identifier could be bound to the session and remain valid at least for the duration of the session. in a stateless environment the identifier could be the same for all clients and remain valid a defined time after it has been last used i.e. part of a query or response the identifier could be defined to be unique and permanent. in that case the implementation has to manage the assignment of identifiers to metadata sources. 6.3 interoperability of implementations the api can be implemented in two different modes. the asynchronous mode is mandatory while the synchrounous one is optional. in this context interoperability between these modes would be a desired feature in order to provide both processing modes based on the implementation of one mode only. an implementation of the optional synchronous mode of the api e.g. in a web service is turned into the mandatory asynchronous communication by a wrapper. therefore the required wrapper functionality is implemented in javascript using the web workers specification webworkers processing non-blocking scripts. a demo of the wrapper code can be downloaded from mawg-repo first the existing operations of the mediaresource interface are adapted in order to support the synchronous as well as asynchronous mode mawg_api.js then the implementation of the asyncmediaresource interface wrapping the synchronous communication is added. therefore the two operations of the asyncmediaresource interface getmediaproperty and getoriginalmetadata refer to the corresponding synchronous calls by web workers media_property_worker.js media_property_worker.js finally the result of the synchronous communication is pushed forward to the synchronous operation by invoking a callback function. wrapping an asynchronous implementation by an synchronous call is infeasible in javascript since threads cannot be suspended and interact with concurrent ones. nonetheless another programming language e.g. java can be used to warp asynchronous api calls in web service calls. 7. security considerations this specification defines a api to access metadata information related to media resources on the web. these apis will provide means for requesting metadata information which can already be accessed in one or different formats either as separate document or embedded in media resources. as such this api introduces no additional security issue. one should nevertheless note that some metadata could be used to access personal information about someone without declaration of agreement. for example temporal and geographic information about a media resource could indirectly provide information about its creator. there are related activities and technical documents in w3c working on this topics such as policy requirements policy-reqs in dap wg odrl 1.1 odrl11 p3p 1.1 p3p11 and pling wiki pling-wiki a. web idl description follow this link to download the webidl description as idl file. interface mediaresource short getsupportedmodes mediaresource createmediaresource domstring mediaresource optional metadatasource metadatasources optional short mode interface asyncmediaresource mediaresource void getmediaproperty domstring propertynames propertycallback successcallback errorcallback errorcallback optional domstring fragment optional domstring sourceformat optional domstring language void getoriginalmetadata domstring sourceformat metadatacallback successcallback errorcallback errorcallback interface propertycallback void handleevent mediaannotation mediaannotations interface metadatacallback void handleevent domstring metadata interface errorcallback void handleevent domstring errorstatus interface syncmediaresource mediaresource mediaannotation getmediaproperty domstring propertynames optional domstring fragment optional domstring sourceformat optional domstring language domstring getoriginalmetadata domstring sourceformat interface metadatasource attribute domstring metadatasource attribute domstring sourceformat interface mediaannotation attribute domstring propertyname attribute domstring value attribute domstring language attribute domstring sourceformat attribute domstring fragmentidentifier attribute domstring mappingtype attribute short statuscode interface identifier mediaannotation attribute domstring identifierlink interface title mediaannotation attribute domstring titlelabel attribute domstring typelink attribute domstring typelabel interface language mediaannotation attribute domstring languagelink attribute domstring languagelabel interface locator mediaannotation attribute domstring locatorlink interface contributor mediaannotation attribute domstring contributorlink attribute domstring contributorlabel attribute domstring rolelink attribute domstring rolelabel interface creator mediaannotation attribute domstring creatorlink attribute domstring creatorlabel attribute domstring rolelink attribute domstring rolelabel interface madate mediaannotation attribute domstring date attribute domstring typelink attribute domstring typelabel interface location mediaannotation attribute domstring locationlink attribute domstring locationlabel attribute double longitude attribute double latitude attribute double altitude attribute domstring coordinatesystemlabel attribute domstring coordinatesystemlink interface description mediaannotation attribute domstring descriptionlabel interface keyword mediaannotation attribute domstring keywordlink attribute domstring keywordlabel interface genre mediaannotation attribute domstring genrelink attribute domstring genrelabel interface rating mediaannotation attribute double ratingvalue attribute domstring ratingsystemlink attribute domstring ratingsystemlabel attribute double min attribute double max interface relation mediaannotation attribute domstring targetlink attribute domstring targetlabel attribute domstring typelink attribute domstring typelabel interface collection mediaannotation attribute domstring collectionlink attribute domstring collectionlabel interface copyright mediaannotation attribute domstring copyrightlabel attribute domstring holderlink attribute domstring holderlabel interface policy mediaannotation attribute domstring statementlink attribute domstring statementlabel attribute domstring typelink attribute domstring typelabel interface publisher mediaannotation attribute domstring publisherlink attribute domstring publisherlabel interface targetaudience mediaannotation attribute domstring audiencelink attribute domstring audiencelabel attribute domstring classificationsystemlink attribute domstring classificationsystemlabel interface fragment mediaannotation attribute domstring identifier attribute domstring rolelink attribute domstring rolelabel interface namedfragment mediaannotation attribute domstring identifier attribute domstring label interface framesize mediaannotation attribute double width attribute double height attribute domstring unit interface compression mediaannotation attribute domstring compressionlink attribute domstring compressionlabel interface duration mediaannotation attribute double duration interface format mediaannotation attribute domstring formatlink attribute domstring formatlabel interface samplingrate mediaannotation attribute double samplingrate interface framerate mediaannotation attribute double framerate interface averagebitrate mediaannotation attribute double averagebitrate interface numtracks mediaannotation attribute short number attribute domstring typestring b. acknowledgements this document is the work of the w3c media annotations working group. members of the working group are at the time of writing and by alphabetical order werner bailer joanneum research tobias b rger public invited expert eric carlson apple inc. pierre-antoine champin universit de lyon ashish chawla public invited expert jaime delgado universitat polit cnica de catalunya jean-pierre evain public invited expert martin h ffernig joanneum research philip j genstedt opera software ralf klamma public invited expert wonsuk lee samsung electronics co. ltd. v ronique malais vrije universiteit erik mannens ibbt hui miao samsung electronics co. ltd. thierry michel w3c ercim frank nack university of amsterdam soohong daniel park samsung electronics co. ltd. silvia pfeiffer w3c invited experts chris poppe ibbt victor rodr guez universitat polit cnica de catalunya felix sasaki potsdam university of applied sciences david singer apple inc. florian stegmaier public invited expert john strassner public invited expert joakim s derberg ericsson mari carmen su rez-figueroa public invited expert thai wey then apple inc. ruben tous universitat polit cnica de catalunya rapha l troncy eurecom vassilis tzouvaras k-space davy van deursen ibbt the people who have contributed to discussions on public-media-annotation@w3.org are also gratefully acknowledged. c. references c.1 normative references media-fragments raphael troncy erik mannens silvia pfeiffer and davy van deursen. media fragments uri 1.0. w3c recommendation 25 september 2012. url http www.w3.org tr 2012 rec-media-frags-20120925 media-ontology wonsuk lee werner bailer tobias b rger et al. media fragments uri 1.0. w3c recommendation 09 february 2012. url http www.w3.org tr 2012 rec-mediaont-10-20120209 rfc2119 s. bradner. key words for use in rfcs to indicate requirement levels. march 1997. internet rfc 2119. url http www.ietf.org rfc rfc2119.txt webidl cameron mccormack. web idl 19 april 2012. w3c candidate recommendation. work in progress. url http www.w3.org tr 2012 cr-webidl-20120419 c.2 informative references bcp47 a. phillips m. davis. tags for identifying languages september 2009. ietf best current practice. url http tools.ietf.org html bcp47 mawg-repo mawg code repository. url http sourceforge.net projects mawg media-annot-reqs wonsuk lee felix sasaki tobias b rger v ronique malais use cases and requirements for ontology and metadata api for media object 1.0.w3c working draft 21 january 2010. url http www.w3.org tr 2010 wd-media-annot-reqs-20100121 odrl11 renato iannella. open digital rights language odrl version 1.1. w3c note. 19 september 2002. url http www.w3.org tr odrl p3p11 matthias schunter rigo wenning. the platform for privacy preferences 1.1 p3p1.1 specification. 13 november 2006. w3c note. url http www.w3.org tr 2006 note-p3p11-20061113 pling-wiki policy languages interest group pling pling wiki. url http www.w3.org policy pling policy-reqs laura arribas paddy byers marcin hanclik frederick hirsch david rogers. device api access control use cases and requirements 17 march 2011. w3c working group note. url http www.w3.org tr 2011 note-dap-policy-reqs-20110317 webworkers ian hickson. web workers 01 may 2012. w3c candidate recommendation. url http www.w3.org tr workers 