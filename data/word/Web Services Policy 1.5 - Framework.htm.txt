web services policy 1.5 framework web services policy 1.5 framework w3c recommendation 04 september 2007 this version http www.w3.org tr 2007 rec-ws-policy-20070904 latest version http www.w3.org tr ws-policy previous version http www.w3.org tr 2007 pr-ws-policy-20070706 editors asir s vedamuthu microsoft corporation david orchard bea systems inc. frederick hirsch nokia maryann hondo ibm corporation prasad yendluri webmethods a subsidiary of software ag toufic boubez layer 7 technologies mit yal inalp sap ag. please refer to the errata for this document which may include some normative corrections. see also translations. this document is also available in these non-normative formats pdf postscript xml and plain text. copyright 2007 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract the web services policy 1.5 framework provides a general purpose model and corresponding syntax to describe the policies of entities in a web services-based system. web services policy framework defines a base set of constructs that can be used and extended by other web services specifications to describe a broad range of service requirements and capabilities. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this is the w3c recommendation of the web services policy 1.5 framework specification. it has been produced by the web services policy working group which is part of the w3c web services activity. this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. the working group released a test suite along with an implementation report. a diff-marked version against the previous version of this document is available. the working group is tracking all comments via bugzilla and highly prefers to receive comments via this system. if access to bugzilla is not feasible you may send your comments to the mailing list public-ws-policy-comments@w3.org mailing list public archive each bugzilla entry and email message should contain only one comment. all comments on this specification should be made following the description for issues of the working group. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. introduction 1.1 example 2. notations and terminology 2.1 notational conventions 2.2 extensibility 2.3 xml namespaces 2.4 terminology 3. policy model 3.1 policy assertion 3.2 policy alternative 3.3 policy 3.4 policies of entities in a web services based system 4. policy expression 4.1 normal form policy expression 4.2 policy identification 4.3 compact policy expression 4.3.1 optional policy assertions 4.3.2 policy assertion nesting 4.3.3 policy operators 4.3.4 policy references 4.3.5 policy inclusion 4.3.6 normalization 4.4 ignorable policy assertions 4.5 policy intersection 4.6 use of iris in policy expressions 5. security considerations 5.1 information disclosure threats 5.2 spoofing and tampering threats 5.3 downgrade threats 5.4 repudiation threats 5.5 denial of service threats 5.6 general xml considerations 6. conformance appendices a. the application wspolicy+xml media type a.1 registration b. references b.1 normative references b.2 other references c. acknowledgements non-normative 1. introduction web services policy 1.5 framework defines a framework and a model for expressing policies that refer to domain-specific capabilities requirements and general characteristics of entities in a web services-based system. a policy is a collection of policy alternatives. a policy alternative is a collection of policy assertions. a policy assertion represents a requirement capability or other property of a behavior. a policy expression is an xml infoset representation of its policy either in a normal form or in its equivalent compact form. some policy assertions specify traditional requirements and capabilities that will manifest themselves in the messages exchanged e.g. authentication scheme transport protocol selection other policy assertions have no wire manifestation in the messages exchanged yet are relevant to service selection and usage e.g. privacy policy qos characteristics web services policy 1.5 framework provides a single policy language to allow both kinds of assertions to be expressed and evaluated in a consistent manner. web services policy 1.5 framework does not cover discovery of policy policy scopes and subjects or their respective attachment mechanisms. a policy attachment is a mechanism for associating policy with one or more policy scopes. a policy scope is a collection of policy subjects to which a policy applies. a policy subject is an entity e.g. an endpoint message resource interaction with which a policy can be associated. web services policy 1.5 attachment web services policy attachment defines such policy attachment mechanisms especially for associating policy with arbitrary xml elements xml 1.0 wsdl artifacts wsdl 1.1 wsdl 2.0 core language and uddi elements uddi api 2.0 uddi data structure 2.0 uddi 3.0 other specifications are free to define either extensions to the mechanisms defined in web services policy 1.5 attachment web services policy attachment or additional mechanisms not covered by web services policy 1.5 attachment web services policy attachment for purposes of associating policy with policy scopes and subjects. 1.1 example example 1-1 illustrates a security policy expression using assertions defined in ws-securitypolicy ws-securitypolicy example 1-1. use of web services policy with security policy assertions. 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp signedparts 05 sp body 06 sp signedparts 07 wsp all 08 wsp all 09 sp encryptedparts 10 sp body 11 sp encryptedparts 12 wsp all 13 wsp exactlyone 14 wsp policy lines 03-07 represent one policy alternative for signing a message body. lines 08-12 represent a second policy alternative for encrypting a message body. lines 02-13 illustrate the exactlyone policy operator. policy operators group policy assertions into policy alternatives. a valid interpretation of the policy above would be that an invocation of a web service will either sign or encrypt the message body. 2. notations and terminology this section specifies the notations namespaces and terminology used in this specification. 2.1 notational conventions this specification uses the following syntax within normative outlines the syntax appears as an xml instance but values in italics indicate data types instead of literal values. characters are appended to elements and attributes to indicate cardinality 0 or 1 0 or more 1 or more the character is used to indicate an exclusive choice between alternatives. the characters and are used to indicate that contained items are to be treated as a group with respect to cardinality or choice. this document relies on the xml information set xml information set information item properties are indicated by the style infoset property xml namespace prefixes see table 2-1 are used to indicate the namespace of the element or attribute being defined. the ellipses characters are used to indicate a point of extensibility that allows other element or attribute information items. elements and attributes defined by this specification are referred to in the text of this document using xpath 1.0 xpath 1.0 expressions. extensibility points are referred to using an extended version of this syntax an element extensibility point is referred to using any in place of the element name. this indicates that any element name can be used from any namespace unless specified otherwise such as in section 4.3.3 policy operators. an attribute extensibility point is referred to using any in place of the attribute name. this indicates that any attribute name can be used from any namespace. normative text within this specification takes precedence over normative outlines which in turn take precedence over the xml schema xml schema structures descriptions. 2.2 extensibility within normative outlines in this specification ellipses i.e. indicate a point of extensibility that allows other element or attribute information items. information items may be added at the indicated extension points but must not contradict the semantics of the element information item indicated by the parent or owner property of the extension. in this context if an attribute information item is not recognized it should be ignored. if an element information item is not recognized it must be treated as a policy assertion unless specified otherwise such as in section 4.3.4 policy references. 2.3 xml namespaces this specification uses a number of namespace prefixes throughout they are listed in table 2-1. note that the choice of any namespace prefix is arbitrary and not semantically significant see xml namespaces table 2-1. prefixes and namespaces used in this specification prefix namespace specification sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 ws-securitypolicy wsam http www.w3.org 2007 05 addressing metadata ws-addressing metadata wsp http www.w3.org ns ws-policy this specification wsu http docs.oasis-open.org wss 2004 01 oasis-200401-wss-wssecurity-utility-1.0.xsd ws-security 2004 xs http www.w3.org 2001 xmlschema xml schema structures all information items defined by this specification are identified by the xml namespace uri xml namespaces http www.w3.org ns ws-policy. a normative xml schema xml schema structures xml schema datatypes document can be obtained indirectly by dereferencing the namespace document at the ws-policy 1.5 namespace uri. it is the intent of the w3c web services policy working group that the web services policy 1.5 framework and web services policy 1.5 attachment xml namespace uri will not change arbitrarily with each subsequent revision of the corresponding xml schema documents as the specifications transition through candidate recommendation proposed recommendation and recommendation status. however should the specifications revert to working draft status and a subsequent revision published as a wd cr or pr draft results in non-backwardly compatible changes from a previously published wd cr or pr draft of the specification the namespace uri will be changed accordingly. under this policy the following are examples of backwards compatible changes that would not result in assignment of a new xml namespace uri addition of new global element attribute complextype and simpletype definitions. addition of new elements or attributes in locations covered by a previously specified wildcard. modifications to the pattern facet of a type definition for which the value-space of the previous definition remains valid or for which the value-space of the vast majority of instances would remain valid. modifications to the cardinality of elements i.e. modifications to minoccurs or maxoccurs attribute value of an element declaration for which the value-space of possible instance documents conformant to the previous revision of the schema would still be valid with regards to the revised cardinality rule. 2.4 terminology the keywords must must not required shall shall not should should not recommended may and optional in this document are to be interpreted as described in rfc 2119 ietf rfc 2119 we introduce the following terms that are used throughout this document collection the items in a collection in this specification are unordered and may contain duplicates. ignorable policy assertion an ignorable policy assertion is an assertion that may be ignored for purposes of determining the compatibility of alternatives in policy intersection in a lax mode as defined in 4.5 policy intersection nested policy expression a nested policy expression is a policy expression that is an element information item in the children property of a policy assertion. policy a policy is a potentially empty collection of policy alternatives. policy alternative a policy alternative is a potentially empty collection of policy assertions. policy assertion a policy assertion represents a requirement a capability or other property of a behavior. policy assertion parameter a policy assertion parameter qualifies the behavior indicated by a policy assertion. policy assertion type a policy assertion type represents a class of policy assertions and implies a schema for the assertion and assertion-specific semantics. policy attachment a policy attachment is a mechanism for associating policy with one or more policy scopes. policy expression a policy expression is an xml infoset representation of a policy either in a normal form or in an equivalent compact form. policy scope a policy scope is a collection of policy subjects to which a policy may apply. policy subject a policy subject is an entity e.g. an endpoint message resource operation with which a policy can be associated. 3. policy model this section defines an abstract model for policies and for operations upon policies. the descriptions below use xml infoset terminology for convenience of description. however this abstract model itself is independent of how it is represented as an xml infoset. 3.1 policy assertion definition a policy assertion represents a requirement a capability or other property of a behavior. a policy assertion identifies a behavior that is a requirement or capability of a policy subject. definition a policy subject is an entity e.g. an endpoint message resource operation with which a policy can be associated. assertions indicate domain-specific e.g. security transactions semantics and are expected to be defined in separate domain-specific specifications. an assertion may indicate that it is an ignorable policy assertion see 4.4 ignorable policy assertions definition an ignorable policy assertion is an assertion that may be ignored for purposes of determining the compatibility of alternatives in policy intersection in a lax mode as defined in 4.5 policy intersection by default an assertion is not ignorable for policy intersection. assertions are typed by the authors that define them. definition a policy assertion type represents a class of policy assertions and implies a schema for the assertion and assertion-specific semantics. the policy assertion type is identified only by the xml infoset namespace name and local name properties that is the qualified name or qname of the root element information item representing the assertion. assertions of a given type must be consistently interpreted independent of their policy subjects. authors may define that an assertion contains a policy expression as defined in 4. policy expression as one of its children nested policy expression s are used by authors to further qualify one or more specific aspects of the parent policy assertion. the qualification may indicate a relationship or context between the parent policy assertion and a nested policy expression. for example within a security domain security policy authors may define an assertion describing a set of security algorithms to qualify the specific behavior of a security binding assertion. a parent policy assertion of one domain may also serve as a container for the nested policy expression from another domain. the xml infoset of a policy assertion may contain a non-empty attributes property and or a non-empty children property. such properties excluding the attribute and element information items from the ws-policy language xml namespace name are policy assertion parameters and may be used to parameterize the behavior indicated by the assertion. definition a policy assertion parameter qualifies the behavior indicated by a policy assertion. for example an assertion identifying support for a specific reliable messaging mechanism might include an attribute information item to indicate how long an endpoint will wait before sending an acknowledgement. authors should be cognizant of the processing requirements when defining complex assertions containing policy assertion parameters or nested policy expressions. specifically authors are encouraged to consider when the identity of the root element information item alone is enough to convey the requirement or capability. 3.2 policy alternative definition a policy alternative is a potentially empty collection of policy assertions. definition the items in a collection in this specification are unordered and may contain duplicates. an alternative with zero assertions indicates no behaviors. an alternative with one or more assertions indicates behaviors implied by those and only those assertions. assertions within an alternative are not ordered and thus aspects such as the order in which behaviors indicated by assertions are applied to a subject are beyond the scope of this specification. however authors can write assertions that control the order in which behaviors are applied. a policy alternative may contain multiple assertions of the same type. mechanisms for determining the aggregate behavior indicated by the assertions and their post-schema-validation infoset psvi see xml schema part 1 xml schema structures content if any are specific to the assertion type and are outside the scope of this document. if policy assertion authors did not specify the semantics of repetition of policy assertions of a type that allows neither parameters nor nested policy expressions within a policy alternative then repetition is simply redundancy and multiple assertions of the assertion type within a policy alternative have the same meaning as a single assertion of the type within the policy alternative. note depending on the semantics of the domain specific policy assertions regardless if they are qualified by nested policy expressions a combination of the policy assertions can be required to specify a particular behavior. for example a combination of two or three assertions from the ws-securitypolicy ws-securitypolicy specification is used to indicate message-level security for protecting messages that is the sp asymmetricbinding assertion is used to indicate message-level security the sp signedparts assertion is used to indicate the parts of a message to be protected and the sp encryptedparts assertion is used to indicate the parts of a message that require confidentiality. 3.3 policy definition a policy is a potentially empty collection of policy alternatives. a policy with zero alternatives contains no choices a policy with one or more alternatives indicates choice in requirements or capabilities within the policy. alternatives are not ordered and thus aspects such as preferences between alternatives in a given context are beyond the scope of this specification. alternatives within a policy may differ significantly in terms of the behaviors they indicate. conversely alternatives within a policy may be very similar. in either case the value or suitability of an alternative is generally a function of the semantics of assertions within the alternative and is therefore beyond the scope of this specification. 3.4 policies of entities in a web services based system applied to a web services based system policy is used to convey conditions on an interaction between entities requester application provider service web infrastructure component etc an interaction involves one or more message exchanges between two entities. it is the responsibility of assertion authors to define the interaction scope of an assertion including any constraints on the policy subjects to which the assertion may be attached and a clear specification of the message s within that interaction scope to which the assertion applies. any entity in a web services based system may expose a policy to convey conditions under which it functions. satisfying assertions in the policy usually results in behavior that reflects these conditions. for example if two entities requester and provider expose their policies a requester might use the policy of the provider to decide whether or not to use the service. a requester may choose any alternative since each is a valid configuration for interaction with the service but a requester must choose only a single alternative for an interaction with a service since each represents an alternative configuration. a policy assertion is supported by an entity in the web services based system if and only if the entity satisfies the requirement or accommodates the capability corresponding to the assertion. a policy alternative is supported by an entity if and only if the entity supports all the assertions in the alternative. and a policy is supported by an entity if and only if the entity supports at least one of the alternatives in the policy. note that although policy alternatives are meant to be mutually exclusive it cannot be decided in general whether or not more than one alternative can be supported at the same time. note that an entity may be able to support a policy even if the entity does not understand the type of each assertion in the policy the entity only has to understand the type of each assertion in a policy alternative that the entity supports. this characteristic is crucial to versioning and incremental deployment of new assertions because this allows a provider s policy to include new assertions in new alternatives while allowing entities to continue to use old alternatives in a backward-compatible manner. 4. policy expression this section describes how to convey policy in an interoperable form using the xml infoset representation of a policy. definition a policy expression is an xml infoset representation of a policy either in a normal form or in an equivalent compact form. the normal form see section 4.1 normal form policy expression of a policy expression is the most straightforward xml infoset representation of the policy data model. equivalent alternative representations allow policy authors to compactly express a policy see section 4.3 compact policy expression policy authors might be more interested in the compact form see section 4.3 compact policy expression where the outlines and definitions describe what is valid with regards to the policy language xml schema. while the policy language xml schema is a representation of the compact form the normal form is more restrictive as outlined in section 4.1 normal form policy expression. 4.1 normal form policy expression to facilitate interoperability this specification defines a normal form for policy expressions that is a straightforward xml infoset representation of a policy enumerating each of its alternatives that in turn enumerate each of their assertions. the schema outline for the normal form of a policy expression is as follows 01 wsp policy 02 wsp exactlyone 03 wsp all assertion assertion wsp all 04 wsp exactlyone 05 wsp policy the following describes the element information items defined in the schema outline above wsp policy a policy expression. wsp policy wsp exactlyone a collection of policy alternatives. if there are no element information items in the children property there are no admissible policy alternatives i.e. no behavior is admissible. wsp policy wsp exactlyone wsp all a policy alternative a collection of policy assertions. if there are no element information items in the children property this is an admissible policy alternative that is empty i.e. no behavior is specified. wsp policy wsp exactlyone wsp all xml infoset representation of a policy assertion. wsp policy any additional attributes may be specified but must not contradict the semantics of the owner element if an attribute is not recognized it should be ignored. if an assertion in the normal form of a policy expression contains a nested policy expression the nested policy expression must contain at most one policy alternative see 4.3.2 policy assertion nesting to simplify processing and improve interoperability the normal form of a policy expression should be used where practical. for example the following is the normal form of a policy expression. 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp signedparts 05 sp body 06 sp signedparts 07 wsp all 08 wsp all 09 sp encryptedparts 10 sp body 11 sp encryptedparts 12 wsp all 13 wsp exactlyone 14 wsp policy lines 03-07 and lines 08-12 express the two alternatives in the policy. if the first alternative is selected the message body needs to be signed ws-securitypolicy is supported conversely if the second alternative is selected the message body needs to be encrypted. 4.2 policy identification a policy expression may be associated with an iri ietf rfc 3987 the schema outline for attributes to associate an iri is as follows 01 wsp policy name xs anyuri 02 wsu id xs id xml id xs id 03 04 05 wsp policy the following describes the attribute information items listed and defined in the schema outline above wsp policy name the identity of the policy expression as an absolute iri ietf rfc 3987 if omitted there is no implied value. this iri may be used to refer to a policy from other xml documents using a policy attachment mechanism such as those defined in ws-policyattachment web services policy attachment definition a policy attachment is a mechanism for associating policy with one or more policy scopes. definition a policy scope is a collection of policy subjects to which a policy may apply. wsp policy wsu id xml id the identity of the policy expression as an id within the enclosing xml document. if omitted there is no implied value. the constraints of the xml 1.0 xml 1.0 id type must be met. to refer to this policy expression an iri-reference may be formed using this value per section 4.2 of ws-security ws-security 2004 when wsu id is used. note the use of xml id attribute in conjunction with canonical xml 1.0 is inappropriate as described in appendix c of xml id version 1.0 xml id and thus this combination must be avoided see c14n 1.0 note for example a policy expression identified using xml id attribute should not be signed using xml digital signature when canonical xml 1.0 is being used as the canonicalization method. note canonical xml 1.1 c14n11 is intended to address the issues that occur with canonical xml 1.0 with regards to xml id. the w3c xml security specifications maintenance wg has been chartered to address how to integrate canonical xml 1.1 with xml security including xml signature secspecmaintwg see http www.w3.org 2007 xmlsec the following example illustrates how to associate a policy expression with the absolute iri http www.example.com policies p1 01 wsp policy name http www.example.com policies p1 xmlns wsp http www.w3.org ns ws-policy 02 details omitted for readability 03 wsp policy the following example illustrates how to associate a policy expression with the iri-reference p1 01 wsp policy wsu id p1 xmlns wsp http www.w3.org ns ws-policy xmlns wsu http docs.oasis-open.org wss 2004 01 oasis-200401-wss-wssecurity-utility-1.0.xsd 02 details omitted for readability 03 wsp policy 4.3 compact policy expression to express a policy in a more compact form while still using the xml infoset this specification defines three constructs an attribute to decorate an assertion semantics for recursively nested policy operators and a policy reference inclusion mechanism. each sub section below describes a construct and its equivalent normal form. to interpret a compact expression in an interoperable form a policy expression in the compact form can be converted see section 4.3.6 normalization to the normal form see section 4.1 normal form policy expression a policy expression consists of a wsp policy wrapper element and zero or more child and descendent elements. 4.3.1 optional policy assertions to indicate that a policy assertion is optional this specification defines an attribute that is a compact authoring style for expressing a pair of alternatives one with and one without that assertion. the schema outline for this attribute is as follows 01 assertion wsp optional xs boolean assertion the following describes the attribute information item defined in the schema outline above assertion wsp optional if the actual value see xml schema part 1 xml schema structures is true the expression of the assertion is semantically equivalent to the following 01 wsp exactlyone 02 wsp all assertion assertion wsp all 03 wsp all 04 wsp exactlyone if the actual value see xml schema part 1 xml schema structures is false the expression of the assertion is semantically equivalent to the following 01 wsp exactlyone 02 wsp all assertion assertion wsp all 03 wsp exactlyone omitting this attribute is semantically equivalent to including it with a value of false. policy expressions should not include this attribute with a value of false but policy parsers must accept this attribute with a value of false. for example the following compact policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 sp includetimestamp wsp optional true 03 wsp policy is equivalent to the following normal form policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp includetimestamp 05 wsp all 06 wsp all 07 wsp exactlyone 08 wsp policy the wsp optional attribute in line 02 of the first policy expression indicates that the assertion in line 02 is to be included in a policy alternative whilst excluded from another it is included in lines 03-05 and excluded in line 06 note that wsp optional does not appear in the normal form of a policy expression. 4.3.2 policy assertion nesting any policy assertion may contain a policy expression. definition a nested policy expression is a policy expression that is an element information item in the children property of a policy assertion. the schema outline for a nested policy expression is 01 assertion 02 03 wsp policy wsp policy 04 05 assertion the following describes additional processing constraints on the outline listed above assertion wsp policy this indicates that the assertion contains a nested policy expression. if there is no wsp policy element information item in the children property the assertion has no nested policy expression. if the schema outline for an assertion type requires a nested policy expression but the assertion does not further qualify one or more aspects of the behavior indicated by the assertion type i.e. no assertions are needed in the nested policy expression the assertion must include an empty wsp policy element information item in its children property. as explained in section 4.3.3 policy operators this is equivalent to a nested policy expression with a single alternative that has zero assertions. note this specification does not define processing for arbitrary wsp policy element information items in the descendants of an assertion parameter e.g. in the children property of one of the children as in 01 wsp policy 02 lorem 03 ipsum 04 wsp policy 05 06 wsp policy 07 ipsum 08 lorem 09 wsp policy policy assertions containing a nested policy expression are normalized recursively. the nesting of a policy expression and a wsp policy child is retained in the normal form but in the normal form each nested policy expression contains at most one policy alternative. if an assertion a contains a nested policy expression e and if e contains more than one policy alternative a is duplicated such that there are as many instances of a as choices in e and the nested policy expression of a duplicate a contains a single choice. this process is applied recursively to the assertions within those choices and to their nested policy expression if any. intuitively if a compact policy is thought of as a tree whose branches have branches etc in the normal form a policy is a stump with straight vines. for example consider the following policy expression with nested policy expressions in a compact form 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 sp transportbinding 03 wsp policy 04 sp algorithmsuite 05 wsp policy 06 wsp exactlyone 07 sp basic256rsa15 08 sp tripledesrsa15 09 wsp exactlyone 10 wsp policy 11 sp algorithmsuite 12 sp transporttoken 13 wsp policy sp httpstoken wsp policy sp httpstoken 15 wsp policy 16 sp transporttoken details omitted for readability 17 wsp policy 18 sp transportbinding 19 wsp policy lines 02-18 in this policy expression contain a single transport binding security policy assertion within its nested policy expression lines 03-17 is an algorithm suite assertion lines 04-11 whose nested policy expression lines 05-10 contains two policy alternatives lines 07-08 generally a nested policy expression implies recursive processing in the example above the behavior indicated by the transport binding assertion requires the behavior indicated by one of the assertions within the algorithm suite assertion. the example above is equivalent to the following 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp transportbinding 05 wsp policy 06 sp algorithmsuite 07 wsp policy 08 sp basic256rsa15 09 wsp policy 10 sp algorithmsuite 11 sp transporttoken 12 wsp policy sp httpstoken wsp policy sp httpstoken 14 wsp policy 15 sp transporttoken details omitted for readability 16 wsp policy 17 sp transportbinding 18 wsp all 19 wsp all 20 sp transportbinding 21 wsp policy 22 sp algorithmsuite 23 wsp policy 24 sp tripledesrsa15 25 wsp policy 26 sp algorithmsuite 27 sp transporttoken 28 wsp policy sp httpstoken wsp policy sp httpstoken 30 wsp policy 31 sp transporttoken details omitted for readability 32 wsp policy 33 sp transportbinding 34 wsp all 35 wsp exactlyone 36 wsp policy in the listing above the transport binding and its nested policy expression have been duplicated once for each of the nested alternatives in lines 07-08 of the compact policy. the first alternative lines 03-18 contains a single nested algorithm suite alternative line 08 as does the second alternative lines 19-34 and 24 4.3.3 policy operators policies are used to convey a set of capabilities requirements and general characteristics of entities see 1. introduction these are generally expressible as a set of policy alternatives. policy operators wsp policy wsp all and wsp exactlyone elements are used to group policy assertions into policy alternatives. to compactly express complex policies policy operators may be recursively nested that is one or more instances of wsp policy wsp all and or wsp exactlyone may be nested within wsp policy wsp all and or wsp exactlyone. the schema outline for the wsp policy element in the compact form is as follows 01 wsp policy 02 wsp policy wsp policy 03 wsp exactlyone wsp exactlyone 04 wsp all wsp all 05 wsp policyreference wsp policyreference 06 07 08 wsp policy the following describes the attribute and element information items defined in the schema outline above wsp policy this element is the wsp policy operator. wsp policy wsp policy this element is a nested wsp policy operator. wsp policy wsp exactlyone this element is a nested wsp exactlyone operator. wsp policy wsp all this element is a nested wsp all operator. wsp policy wsp policyreference this element references a policy expression to be included per section 4.3.5 policy inclusion. wsp policy any additional attributes may be specified but must not contradict the semantics of the owner element if an attribute is not recognized it should be ignored. wsp policy any additional elements may be specified. such elements must not use the web services policy language xml namespace name and must not contradict the semantics of the parent element the schema outline for the wsp exactlyone element in the compact form is as follows 01 wsp exactlyone 02 wsp policy wsp policy 03 wsp exactlyone wsp exactlyone 04 wsp all wsp all 05 wsp policyreference wsp policyreference 06 07 08 wsp exactlyone the following describes the attribute and element information items defined in the schema outline above wsp exactlyone this element is the wsp exactlyone operator. wsp exactlyone wsp policy this element is a nested wsp policy operator. wsp exactlyone wsp exactlyone this element is a nested wsp exactlyone operator. wsp exactlyone wsp all this element is a nested wsp all operator. wsp exactlyone wsp policyreference this element references a policy expression to be included per section 4.3.5 policy inclusion. wsp exactlyone any additional elements may be specified. such elements must not use the web services policy language xml namespace name and must not contradict the semantics of the parent element the schema outline for the wsp all element in the compact form is as follows 01 wsp all 02 wsp policy wsp policy 03 wsp exactlyone wsp exactlyone 04 wsp all wsp all 05 wsp policyreference wsp policyreference 06 07 08 wsp all the following describes the attribute and element information items defined in the schema outline above wsp all this element is the wsp all operator. wsp all wsp policy this element is a nested wsp policy operator. wsp all wsp exactlyone this element is a nested wsp exactlyone operator. wsp all wsp all this element is a nested wsp all operator. wsp all wsp policyreference this element references a policy expression to be included per section 4.3.5 policy inclusion. wsp all any additional elements may be specified. such elements must not use the web services policy language xml namespace name and must not contradict the semantics of the parent element note the wsp all and wsp exactlyone elements do not allow attribute extensibility because such attributes cannot be preserved through normalization. the following rules are used to transform a compact policy expression into a normal form policy expression equivalence use of wsp policy as an operator within a policy expression is equivalent to wsp all. a collection of assertions in an wsp all operator is equivalent to a policy alternative. for instance 01 wsp all 02 assertion 1 03 assertion 2 04 wsp all is equivalent to 01 wsp exactlyone 02 wsp all 03 assertion 1 04 assertion 2 05 wsp all 06 wsp exactlyone empty wsp all expresses a policy alternative with zero policy assertions. note that since wsp policy is equivalent to wsp all wsp policy is therefore equivalent to wsp all i.e. a policy alternative with zero assertions. wsp exactlyone expresses a policy with zero policy alternatives. commutative in line with the previous statements that policy assertions within a policy alternative and policy alternatives within a policy are not ordered see 3.2 policy alternative and 3.3 policy respectively wsp all and wsp exactlyone are commutative. for example 01 wsp all assertion 1 assertion 2 wsp all is equivalent to 01 wsp all assertion 2 assertion 1 wsp all and 01 wsp exactlyone 02 assertion 1 assertion 2 03 wsp exactlyone is equivalent to 01 wsp exactlyone 02 assertion 2 assertion 1 03 wsp exactlyone associative wsp all and wsp exactlyone are associative. for example 01 wsp all 02 assertion 1 03 wsp all assertion 2 wsp all 04 wsp all is equivalent to 01 wsp all assertion 1 assertion 2 wsp all and 01 wsp exactlyone 02 assertion 1 03 wsp exactlyone assertion 2 wsp exactlyone 04 wsp exactlyone is equivalent to 01 wsp exactlyone 02 assertion 1 assertion 2 03 wsp exactlyone idempotent wsp all and wsp exactlyone are idempotent. for example 01 wsp all 02 wsp all assertion 1 assertion 2 wsp all 03 wsp all is equivalent to 01 wsp all assertion 1 assertion 2 wsp all and 01 wsp exactlyone 02 wsp exactlyone 03 assertion 1 assertion 2 04 wsp exactlyone 05 wsp exactlyone is equivalent to 01 wsp exactlyone 02 assertion 1 assertion 2 03 wsp exactlyone distributive wsp all is distributive over wsp exactlyone. that is a wsp all element containing only wsp exactlyone child elements is equivalent to a wsp exactlyone element containing for each possible combination of one child element from each of the wsp exactlyone element over which being distributed a wsp all element containing that combination. for example 01 wsp all 02 wsp exactlyone 03 assertion 1 04 assertion 2 05 wsp exactlyone 06 wsp all is equivalent to 01 wsp exactlyone 02 wsp all 03 assertion 1 04 wsp all 05 wsp all 06 assertion 2 07 wsp all 08 wsp exactlyone similarly by repeatedly distributing wsp all over wsp exactlyone 01 wsp all 02 wsp exactlyone 03 assertion 1 04 assertion 2 05 wsp exactlyone 06 wsp exactlyone 07 assertion 3 08 assertion 4 09 wsp exactlyone 10 wsp all is equivalent to 01 wsp exactlyone 02 wsp all assertion 1 assertion 3 wsp all 03 wsp all assertion 1 assertion 4 wsp all 04 wsp all assertion 2 assertion 3 wsp all 05 wsp all assertion 2 assertion 4 wsp all 06 wsp exactlyone distributing wsp all over an empty wsp exactlyone is equivalent to no alternatives. for example 01 wsp all 02 wsp exactlyone 03 wsp all is equivalent to 01 wsp exactlyone and 01 wsp all 02 wsp exactlyone 03 assertion 1 04 assertion 2 05 wsp exactlyone 06 wsp exactlyone 07 wsp all is equivalent to 01 wsp exactlyone for example given the following compact policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 sp requirederivedkeys wsp optional true 03 wsp exactlyone 04 sp wssusernametoken10 05 sp wssusernametoken11 06 wsp exactlyone 07 wsp policy applying section 4.3.1 optional policy assertions to wsp optional in line 02 and distributing wsp all over wsp exactlyone per section 4.3.3 policy operators for the assertions in lines 04-05 yields 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all wsp optional alternative with assertion 04 sp requirederivedkeys 05 wsp all 06 wsp all wsp optional alternative without 07 wsp exactlyone 08 wsp exactlyone 09 wsp all 10 sp wssusernametoken10 11 wsp all 12 wsp all 13 sp wssusernametoken11 14 wsp all 15 wsp exactlyone 16 wsp policy note that the assertion listed in line 02 in the first listing expands into the two alternatives in lines 03-06 in the second listing. finally noting that wsp policy is equivalent to wsp all and distributing wsp all over wsp exactlyone yields the following normal form policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp requirederivedkeys 05 sp wssusernametoken10 06 wsp all 07 wsp all 08 sp requirederivedkeys 09 sp wssusernametoken11 10 wsp all 11 wsp all 12 sp wssusernametoken10 13 wsp all 14 wsp all 15 sp wssusernametoken11 16 wsp all 17 wsp exactlyone 18 wsp policy note that the two alternatives listed in lines 03-06 in the second listing are combined with the two alternatives listed in lines 09-14 in the second listing to create four alternatives in the normalized policy lines 03-06 07-10 11-13 and 14-16 consider another example given the following compact policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 sp requirederivedkeys 03 wsp exactlyone 04 sp wssusernametoken10 05 sp wssusernametoken11 06 wsp exactlyone 07 wsp policy applying section 4.3.1 optional policy assertions to wsp optional false in line 02 and distributing wsp all over wsp exactlyone per section 4.3.3 policy operators for the assertions in lines 04-05 yields 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp requirederivedkeys 05 wsp all 06 wsp exactlyone 07 wsp exactlyone 08 wsp all 09 sp wssusernametoken10 10 wsp all 11 wsp all 12 sp wssusernametoken11 13 wsp all 14 wsp exactlyone 15 wsp policy note that the assertion listed in line 02 in the first listing expands into an alternative in lines 03-05 in the second listing. finally noting that wsp policy is equivalent to wsp all and distributing wsp all over wsp exactlyone yields the following normal form policy expression 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp exactlyone 03 wsp all 04 sp requirederivedkeys 05 sp wssusernametoken10 06 wsp all 07 wsp all 08 sp requirederivedkeys 09 sp wssusernametoken11 10 wsp all 11 wsp exactlyone 12 wsp policy note that the first alternative listed in lines 03-05 in the second listing is combined with the two alternatives listed in lines 08-13 in the second listing to create two alternatives in the normalized policy lines 03-06 and 07-10 4.3.4 policy references the wsp policyreference element is used to reference policy expressions. the semantics of the wsp policyreference element are determined by the context in which it is used for an example see 4.3.5 policy inclusion the schema outline for the wsp policyreference element is as follows 01 wsp policyreference 02 uri xs anyuri 03 digest xs base64binary digestalgorithm xs anyuri 04 05 06 wsp policyreference the following describes the attribute and element information items defined in the schema outline above wsp policyreference this element references a policy expression that is being referenced. wsp policyreference uri this attribute references a policy expression by an iri. for a policy expression within the same xml document the reference should be an iri-reference to a policy expression identified by an id. for an external policy expression there is no requirement that the iri be resolvable retrieval mechanisms are beyond the scope of this specification. after retrieval there is no requirement to check that the retrieved policy expression is associated section 4.2 policy identification with this iri. the iri included in the retrieved policy expression if any may be different than the iri used to retrieve the policy expression. wsp policyreference digest this attribute is of type xs base64binary and specifies the digest of the referenced policy expression. this is used to ensure the included policy is the expected policy. if omitted there is no implied value. wsp policyreference digestalgorithm this optional uri attribute specifies the digest algorithms being used. this specification predefines the default algorithm below although additional algorithms can be expressed. uri description http www.w3.org ns ws-policy sha1exc implied the digest is a sha1 hash over the octet stream resulting from using the exclusive xml canonicalization defined for xml signature xml-signature wsp policyreference any additional attributes may be specified but must not contradict the semantics of the owner element if an attribute is not recognized it should be ignored. wsp policyreference any additional elements may be specified but must not contradict the semantics of the parent element if an element is not recognized it should be ignored. 4.3.5 policy inclusion in order to share assertions across policy expressions the wsp policyreference element may be present anywhere a policy assertion is allowed inside a policy expression. this element is used to include the content of one policy expression in another policy expression. when a wsp policyreference element references a wsp policy element then the semantics of inclusion are simply to replace the wsp policyreference element with a wsp all element whose children property is the same as the children property of the referenced wsp policy element. that is the contents of the referenced policy conceptually replace the wsp policyreference element and are wrapped in a wsp all operator. using the wsp policyreference element a policy expression must not reference itself either directly or indirectly. note references that have a digest attribute should be validated before being included. in the example below two policies include and extend a common policy. in the first example there is a single policy document containing two policy assertions. the expression is given an identifier but not a fully qualified location. the second and third expressions reference the first expression by uri indicating the referenced expression is within the document. 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy xmlns wsu http docs.oasis-open.org wss 2004 01 oasis-200401-wss-wssecurity-utility-1.0.xsd wsu id protection 02 sp encryptsignature wsp optional true 03 sp protecttokens wsp optional true 04 wsp policy 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 wsp policyreference uri protection 03 sp onlysignentireheadersandbody 04 wsp policy 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy 02 sp includetimestamp 03 wsp policyreference uri protection 04 sp onlysignentireheadersandbody 05 wsp policy there are times when it is desirable to re-use a portion of a policy expression. generally this can be accomplished by placing the common assertions in a separate policy expression and referencing it. 4.3.6 normalization to interpret a compact expression in an interoperable form a compact expression may be converted to the corresponding normal form expression by the following procedure start with the element information item e as defined in the xml information set xml information set of the policy expression. the namespace name of e is always http www.w3.org ns ws-policy in the base case the local name property of e is policy in the recursive case the local name property of e is policy exactlyone or all expand element information items as defined in the xml information set xml information set in the children property of e that are policy references per section 4.3.5 policy inclusion. convert each element information item c in the children property of e into normal form. if the namespace name property of c is http www.w3.org ns ws-policy and the local name property of c is policy exactlyone or all c is an expression of a policy operator normalize c by recursively applying this procedure. otherwise the element information item c is an assertion normalize c per sections 4.3.1 optional policy assertions and 4.3.2 policy assertion nesting. apply the policy operator indicated by e to the normalized element information items in its children property and construct a normal form per section 4.3.3 policy operators and 4.1 normal form policy expression. note that an implementation may use a more efficient procedure and is not required to explicitly convert a compact expression into the normal form as long as the processing results are indistinguishable from doing so. 4.4 ignorable policy assertions the wsp ignorable attribute indicates if a policy assertion is an ignorable policy assertion. the behavior implied by an ignorable assertion is expected to be a behavior that need not be engaged for successful interoperation with the entity that includes such ignorable assertions in its policy. the schema outline for the wsp ignorable attribute is as follows 01 assertion wsp ignorable xs boolean assertion the following describes the attribute information item defined in the schema outline above assertion wsp ignorable this attribute is of type xs boolean. if the actual value see xml schema part 1 xml schema structures is true the assertion is an ignorable policy assertion. if the actual value is false the assertion is not an ignorable policy assertion. omitting this attribute is semantically equivalent to including it with a value of false. 4.5 policy intersection policy intersection is optional but a useful tool when two or more parties express policy and want to limit the policy alternatives to those that are mutually compatible. for example when a requester and a provider express requirements on a message exchange intersection identifies compatible policy alternatives if any included in both requester and provider policies. policy intersection is a commutative operation performed on two policies that yields a policy that contains a collection of the compatible policy alternatives. note while policy intersection at times is analogous with set intersection it does not imply formal set intersection semantics there are two modes for intersection strict and lax. how the mode is selected or indicated for the policy intersection is outside the scope of this specification. as a first approximation an intersection algorithm is defined below that approximates compatibility of policy assertions in a domain-independent manner. mechanisms for determining assertion parameter compatibility are not part of this domain-independent policy intersection. determining whether two policy assertions of the same type are compatible may involve domain-specific processing for purposes of determining assertion parameter compatibility. domain-independent policy intersection may be extended to include domain-specific processing. if a domain-specific intersection processing algorithm is required this will be known from the qname of the specific assertion type involved in the policy alternative. however regardless of whether an assertion s qname indicates domain-specific processing an implementation of the domain-independent intersection need not apply the domain-specific processing. the domain-independent policy intersection algorithm is two policy assertions are compatible if they have the same type and if either assertion contains a nested policy expression the two assertions are compatible if they both have a nested policy expression and the alternative in the nested policy expression of one is compatible with the alternative in the nested policy expression of the other. assertion parameters are not part of the domain-independent compatibility determination defined herein but this domain-independent policy intersection may be extended to include domain-specific processing for purposes of determining assertion parameter compatibility. if the mode is strict two policy alternatives a and b are compatible if each assertion in a is compatible with an assertion in b and if each assertion in b is compatible with an assertion in a. if the mode is lax two policy alternatives a and b are compatible if each assertion in a that is not an ignorable policy assertion is compatible with an assertion in b and if each assertion in b that is not an ignorable policy assertion is compatible with an assertion in a. if two alternatives are compatible their intersection is an alternative containing all of the occurrences of all of the assertions from both alternatives i.e. the bag union of the two regardless of whether or not they are marked with the wsp ignorable true attribute. two policies are compatible if an alternative in one is compatible with an alternative in the other. if two policies are compatible their intersection is the set of the intersections between all pairs of compatible alternatives choosing one alternative from each policy. if two policies are not compatible their intersection has no policy alternatives. the result of policy intersection can be zero or more alternatives. each alternative may contain more than one assertion of the same type which may come from different input policies. see section 3.2 policy alternative for mechanisms for determining the aggregate behavior indicated by multiple assertions of the same policy assertion type. if policy assertion authors did not specify the semantics of multiple assertions of the same assertion type within a policy alternative and the type and its descendant assertion types within a nested policy expression outline if any do not allow any parameters then multiple assertions of the type within a policy alternative in the intersection result have the same meaning as a single assertion of the type within the policy alternative. an entity applies all the behaviors implied by a policy alternative when that policy alternative is chosen from the intersection result see 3.4 policies of entities in a web services based system if an entity includes a policy assertion type a in its policy and this policy assertion type a does not occur in an intersected result then that entity should not apply the behavior implied by assertion type a. if a policy assertion type z is not included in the input policies being intersected then the intersection result is silent about the behavior implied by the assertion type z. as an example of intersection consider two input policies in normal form 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy policy p1 02 wsp exactlyone 03 wsp all alternative a1 04 sp signedelements 05 sp xpath s envelope s body sp xpath 06 sp signedelements 07 sp encryptedelements 08 sp xpath s envelope s body sp xpath 09 sp encryptedelements 10 wsp all 11 wsp all alternative a2 12 sp signedparts 13 sp body 14 sp header namespace http www.w3.org 2005 08 addressing 15 sp signedparts 16 sp encryptedparts 17 sp body 18 sp encryptedparts 19 wsp all 20 wsp exactlyone 21 wsp policy the listing above contains two policy alternatives. the first alternative lines 03-10 contains two policy assertions. one indicates which elements should be signed lines 04-06 its type is sp signedelements line 04 and its parameters include an xpath expression for the content to be signed line 05 the other assertion lines 07-09 has a similar structure type line 07 and parameters line 08 the second alternative lines 11-19 also contains two assertions each with type line 12 and line 16 and parameters lines 13-14 and line 17 as this example illustrates compatibility between two policy assertions is based on assertion type and delegates parameter processing to domain-specific processing. 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy policy p2 02 wsp exactlyone 03 wsp all alternative a3 04 sp signedparts 05 sp encryptedparts 06 sp body 07 sp encryptedparts 08 wsp all 09 wsp all alternative a4 10 sp signedelements 11 sp xpath s envelope s body sp xpath 12 sp signedelements 13 wsp all 14 wsp exactlyone 15 wsp policy because there is only one alternative a2 in policy p1 with the same assertion type as another alternative a3 in policy p2 the intersection is a policy with a single alternative that contains all of the assertions in a2 and in a3. 01 wsp policy xmlns sp http docs.oasis-open.org ws-sx ws-securitypolicy 200702 xmlns wsp http www.w3.org ns ws-policy intersection of p1 and p2 02 wsp exactlyone 03 wsp all 04 sp signedparts 05 sp body 06 sp header namespace http www.w3.org 2005 08 addressing 07 sp signedparts 08 sp encryptedparts 09 sp body 10 sp encryptedparts 11 sp signedparts 12 sp encryptedparts 13 sp body 14 sp encryptedparts 15 wsp all 16 wsp exactlyone 17 wsp policy note that there are two assertions of the type sp signedparts and two assertions of the type sp encryptedparts one from each of the input policies. in general whether two assertions of the same type are compatible or repetition is redundancy depends on the domain-specific semantics of the assertion type. as mentioned above if the assertions have no parameters and the assertions in nested policiy expressions have no parameters then multiple assertions of the type within a policy alternative in the intersection result have the same meaning as a single assertion of the type within the policy alternative. based on the semantics of multiple assertions of the encryptedparts assertion type as specified in the ws-securitypolicy ws-securitypolicy specification one of the sp encryptedparts assertion in the above example is redundant. whether the two sp signedparts assertions are compatible or one of them is redundant depends on the semantics defined for this assertion type. as another example of intersection of ws-addressing assertions that utilize the framework intersection algorithm consider two input policies 01 wsp policy xmlns wsp http www.w3.org ns ws-policy xmlns wsam http www.w3.org 2007 05 addressing metadata 02 wsp exactlyone 03 wsp all alternative a5 04 wsam addressing 05 wsp policy 06 wsam addressing 07 wsp all 08 wsp exactlyone 09 wsp policy lines 04 06 in the above policy expression contain an addressing policy assertion with the empty wsp policy in line 05 the empty wsp policy is a nested policy expression with an alternative that has zero assertions. in the example above the addressing assertion indicates the use of addressing without any restriction. 01 wsp policy xmlns wsp http www.w3.org ns ws-policy xmlns wsam http www.w3.org 2007 05 addressing metadata 02 wsp exactlyone 03 wsp all alternative a6 04 wsam addressing 05 wsp policy 06 wsam anonymousresponses 07 wsp policy 08 wsam addressing 09 wsp all 10 wsp exactlyone 11 wsp policy lines 04 08 in the above policy expression contain an addressing policy assertion with a nested policy expression in lines 05 06 the nested policy expression indicates that the provider requires request messages to use response endpoint eprs that contain the anonymous uri. the nested policy expression contains an alternative that has one assertion wsam anonymousresponses. the two assertions in alternatives a5 and a6 have the same assertion type and have nested policy expressions. the nested policy expression within the addressing assertion in the alternative a5 contains an alternative that has zero assertions. the nested policy expression within the addressing assertion in the alternative a6 contains an alternative that has one assertion. the nested policy expressions within these two assertions are incompatible because the alternative in one is incompatible with the alternative in the other. therefore the two assertions are incompatible and hence the two alternatives are incompatible. 4.6 use of iris in policy expressions policy expressions use iris for some identifiers. this document does not define a base uri but relies on the mechanisms defined in xml base xml base and rfcs 3023 ietf rfc 3023 3986 ietf rfc 3986 and 3987 ietf rfc 3987 for establishing a base uri against which relative iris can be made absolute. 5. security considerations it is recommended that policies and assertions be integrity protected to permit the detection of tampering. this can be done using a technology such as xml dsig xml-signature ssl tls ietf rfc 2246 or ws-security 2004 ws-security 2004 policies should not be accepted unless they are signed and have an associated security token to specify the signer has the right to speak for the scope containing the policy. that is a relying party shouldn t rely on a policy unless the policy is signed and presented with sufficient credentials to pass the relying parties acceptance criteria. it should be noted that the mechanisms described in this document could be secured as part of a soap message soap 1.1 soap 1.2 messaging framework using ws-security ws-security 2004 or embedded within other objects using object-specific security mechanisms. this section describes the security considerations that service providers requestors policy authors policy assertion authors and policy implementers need to consider when exposing consuming and designing policy expressions authoring policy assertions or implementing policy. 5.1 information disclosure threats a policy is used to represent the capabilities and requirements of a web service. policies may include sensitive information. malicious consumers may acquire sensitive information fingerprint the service and infer service vulnerabilities. these threats can be mitigated by requiring authentication for sensitive information by omitting sensitive information from the policy or by securing access to the policy. for securing access to policy metadata policy providers can use mechanisms from other web services specifications such as ws-security ws-security 2004 and ws-metadataexchange ws-metadataexchange 5.2 spoofing and tampering threats if a policy expression is unsigned it could be easily tampered with or replaced. to prevent tampering or spoofing of policy requestors should discard a policy unless it is signed by the provider and presented with sufficient credentials. requestors should also check that the signer is actually authorized to express policies for the given policy subject. 5.3 downgrade threats a policy may offer several alternatives that vary from weak to strong set of requirements. an adversary may interfere and remove all the alternatives except the weakest one say no security requirements or an adversary may interfere and discard this policy and insert a weaker policy previously issued by the same provider. policy authors or providers can mitigate these threats by sun-setting older or weaker policy alternatives. requestors can mitigate these threats by discarding policies unless they are signed by the provider. 5.4 repudiation threats malicious providers may include policy assertions in its policy whose behavior cannot be verified by examining the wire message from the provider to requestor. in general requestors have no guarantee that a provider will behave as described in the provider s policy expression. the provider may not and perform a malicious activity. for example say the policy assertion is privacy notice information and the provider violates the semantics by disclosing private information. requestors can mitigate this threat by discarding policy alternatives which include assertions whose behavior cannot be verified by examining the wire message from the provider to requestor. assertion authors can mitigate this threat by not designing assertions whose behavior cannot be verified using wire messages. 5.5 denial of service threats malicious providers may provide a policy expression with a large number of alternatives a large number of assertions in alternatives deeply nested policy expressions or chains of policyreference elements that expand exponentially see the chained sample below this is similar to the well-known dtd entity expansion attack policy implementers need to anticipate these rogue providers and use a configurable bound with defaults on number of policy alternatives number of assertions in an alternative depth of nested policy expressions etc. example 5-1. chained policy reference elements 01 wsp policy wsu id p1 02 wsp policyreference uri p2 03 wsp policyreference uri p2 04 wsp policy 05 06 wsp policy wsu id p2 07 wsp policyreference uri p3 08 wsp policyreference uri p3 09 wsp policy 10 11 wsp policy wsu id p3 12 wsp policyreference uri p4 13 wsp policyreference uri p4 14 wsp policy 15 16 policy wsu id p4 through p99 17 18 wsp policy wsu id p100 19 wsp policyreference uri p101 20 wsp policyreference uri p101 21 wsp policy 22 23 wsp policy wsu id p101 24 mtom optimizedmimeserialization 25 wsp policy malicious providers may provide a policy expression that includes multiple policyreference elements that use a large number of different internet addresses. these may require the consumers to establish a large number of tcp connections. policy implementers need to anticipate such rogue providers and use a configurable bound with defaults on number of policyreference elements per policy expression. 5.6 general xml considerations implementers of web services policy language should be careful to protect their software against general xml threats like deeply nested xml or xml that contains malicious content. 6. conformance an element information item whose namespace name is http www.w3.org ns ws-policy and whose local part is policy or policyreference conforms to this specification if it is valid according to the xml schema xml schema structures for that element as defined by this specification http www.w3.org 2007 02 ws-policy.xsd and additionally adheres to all the constraints contained in this specification. such a conformant element information item constitutes a policy expression. a. the application wspolicy+xml media type this appendix defines the application wspolicy+xml media type which can be used to describe web services policy documents serialized as xml. either wsp policy or wsp policyattachment could be the root element of such a document. a.1 registration mime media type name application mime subtype name wspolicy+xml required parameters none optional parameters charset this parameter has identical semantics to the charset parameter of the application xml media type as specified in ietf rfc 3023. encoding considerations identical to those of application xml as described in ietf rfc 3023 section 3.2 as applied to the web services policy document infoset. security considerations see section 5. security considerations in this document and the security consideration section in web services policy attachment. interoperability considerations there are no known interoperability issues. published specifications this document and web services policy attachment. applications which use this media type this new media type is being registered to allow for deployment of web services policy and references to web services policy on the world wide web. additional information file extension wspolicy fragment identifiers a syntax identical to that of application xml as described in ietf rfc 3023. base uri as specified in ietf rfc 3023 section 6. also see section 4.6 use of iris in policy expressions in this document and section 3.5 use of iris in policy attachment in web services policy attachment. macintosh file type code text person and email address to contact for further information world wide web consortium web-human@w3.org intended usage common author change controller the web services policy 1.5 specification set is a work product of the world wide web consortium s web service policy working group. the w3c has change control over these specifications. b. references b.1 normative references web services policy attachment web services policy 1.5 attachment a. s. vedamuthu d. orchard f. hirsch m. hondo p. yendluri t. boubez and yal inalp editors. world wide web consortium 04 september 2007. this version of the specification of the web services policy 1.5 attachment specification is http www.w3.org tr 2007 rec-ws-policy-attach-20070904. the latest version of web services policy 1.5 attachment is available at http www.w3.org tr ws-policy-attach. ietf rfc 2119 key words for use in rfcs to indicate requirement levels s. bradner author. internet engineering task force march 1997. available at http www.ietf.org rfc rfc2119.txt. ietf rfc 3986 uniform resource identifier uri generic syntax t. berners-lee r. fielding and l. masinter authors. network working group january 2005. available at http www.ietf.org rfc rfc3986.txt. ietf rfc 3987 internationalized resource identifiers iris m. duerst and m. suignard authors. internet engineering task force january 2005. available at http www.ietf.org rfc rfc3987.txt. ws-security 2004 web services security soap message security 1.0 ws-security 2004 a. nadalin c. kaler p. hallam-baker and r. monzillo editors. organization for the advancement of structured information standards march 2004. available at http docs.oasis-open.org wss 2004 01 oasis-200401-wss-soap-message-security-1.0.pdf. xml base xml base jonathan marsh editor. world wide web consortium 27 june 2001. this version of the xml base recommendation is http www.w3.org tr 2001 rec-xmlbase-20010627 the latest version of xml base is available at http www.w3.org tr xmlbase xml 1.0 extensible markup language xml 1.0 fourth edition t. bray j. paoli c. m. sperberg-mcqueen and e. maler editors. world wide web consortium 10 february 1998 revised 16 august 2006. this version of the xml 1.0 recommendation is http www.w3.org tr 2006 rec-xml-20060816. the latest version of xml 1.0 is available at http www.w3.org tr rec-xml. xml id xml id version 1.0 j. marsh d. veillard and n. walsh editors. world wide web consortium 9 september 2005. this version of the xml id version 1.0 recommendation is http www.w3.org tr 2005 rec-xml-id-20050909 the latest version of xml id version 1.0 is available at http www.w3.org tr xml-id xml information set xml information set second edition j. cowan and r. tobin editors. world wide web consortium 24 october 2001 revised 4 february 2004. this version of the xml information set recommendation is http www.w3.org tr 2004 rec-xml-infoset-20040204. the latest version of xml information set is available at http www.w3.org tr xml-infoset. xml namespaces namespaces in xml 1.0 t. bray d. hollander a. layman and r. tobin editors. world wide web consortium 14 january 1999 revised 16 august 2006. this version of the namespaces in xml recommendation is http www.w3.org tr 2006 rec-xml-names-20060816 the latest version of namespaces in xml is available at http www.w3.org tr rec-xml-names. xml schema structures xml schema part 1 structures second edition h. thompson d. beech m. maloney and n. mendelsohn editors. world wide web consortium 2 may 2001 revised 28 october 2004. this version of the xml schema part 1 recommendation is http www.w3.org tr 2004 rec-xmlschema-1-20041028. the latest version of xml schema part 1 is available at http www.w3.org tr xmlschema-1. xml schema datatypes xml schema part 2 datatypes second edition p. byron and a. malhotra editors. world wide web consortium 2 may 2001 revised 28 october 2004. this version of the xml schema part 2 recommendation is http www.w3.org tr 2004 rec-xmlschema-2-20041028. the latest version of xml schema part 2 is available at http www.w3.org tr xmlschema-2. ietf rfc 3023 ietf rfc 3023 xml media types m. murata s. st. laurent d. kohn july 1998. see http www.ietf.org rfc rfc3023.txt. b.2 other references c14n 1.0 note known issues with canonical xml 1.0 c14n 1.0 j. kahan and k. lanz editors. world wide web consortium 20 december 2006. available at http www.w3.org tr 2006 note-c14n-issues-20061220 ietf rfc 2246 ietf rfc 2246 the tls protocol t. dierks c. allen january 1999. see http www.ietf.org rfc rfc2246.txt. soap 1.1 simple object access protocol soap 1.1 d. box et al editors. world wide web consortium 8 may 2000. available at http www.w3.org tr 2000 note-soap-20000508 soap 1.2 messaging framework soap version 1.2 part 1 messaging framework m. gudgin m. hadley n. mendelsohn j-j. moreau h. frystyk nielsen editors. world wide web consortium 24 june 2003 revised 27 april 2007. this version of the soap version 1.2 part 1 messaging framework recommendation is http www.w3.org tr 2007 rec-soap12-part1-20070427 the latest version of soap version 1.2 part 1 messaging framework is available at http www.w3.org tr soap12-part1 secspecmaintwg xml security specifications maintenance working group see http www.w3.org 2007 xmlsec. uddi api 2.0 uddi version 2.04 api t. bellwood editor. organization for the advancement of structured information standards 19 july 2002. this version of uddi version 2.0 api is http uddi.org pubs programmersapi-v2.04-published-20020719.htm. the latest version of the uddi 2.0 api is available at http uddi.org pubs programmersapi_v2.htm. uddi data structure 2.0 uddi version 2.03 data structure reference c. von riegen editor. organization for the advancement of structured information standards 19 july 2002. this version of uddi version 2.0 data structures is http uddi.org pubs datastructure-v2.03-published-20020719.htm. the latest version of the uddi 2.0 data structures is available at http uddi.org pubs datastructure_v2.htm. uddi 3.0 uddi version 3.0.2 l. cl ment et al editors. organization for the advancement of structured information standards 19 october 2004. this version of the uddi version 3.0 is http www.oasis-open.org committees uddi-spec doc spec v3 uddi-v3.0.2-20041019.htm. the latest version of the uddi 3.0 specification is available at http uddi.org pubs uddi_v3.htm. ws-addressing metadata web services addressing 1.0 metadata m. gudgin m. hadley t. rogers and yal inalp editors. world wide web consortium 4 september 2007. this version of the web services addressing 1.0 metadata is http www.w3.org tr 2007 rec-ws-addr-metadata-20070904 the latest version of web services addressing 1.0 metadata is available at http www.w3.org tr ws-addr-metadata. ws-securitypolicy ws-securitypolicy v1.2 a. nadalin m. goodner m. gudgin a. barbir and h. granqvist editors. organization for the advancement of structured information standards 1 july 2007. available at http docs.oasis-open.org ws-sx ws-securitypolicy 200702 ws-securitypolicy-1.2-spec-os.pdf. namespace document available at http docs.oasis-open.org ws-sx ws-securitypolicy 200702. wsdl 1.1 web services description language wsdl 1.1 e. christensen et al authors. world wide web consortium march 2001. available at http www.w3.org tr 2001 note-wsdl-20010315. wsdl 2.0 core language web services description language wsdl version 2.0 part 1 core language r. chinnici j. j. moreau a. ryman s. weerawarana editors. world wide web consortium 26 june 2007. this version of the wsdl 2.0 specification is http www.w3.org tr 2007 rec-wsdl20-20070626 the latest version of wsdl 2.0 is available at http www.w3.org tr wsdl20 ws-metadataexchange web services metadata exchange ws-metadataexchange k. ballinger et al authors. bea systems inc. computer associates international inc. international business machines corporation microsoft corporation inc. sap ag sun microsystems and webmethods august 2006. available at http schemas.xmlsoap.org ws 2004 09 mex xml-signature xml-signature syntax and processing d. eastlake j. reagle and d. solo editors. the internet society world wide web consortium 12 february 2002. this version of the xml-signature syntax and processing recommendation is http www.w3.org tr 2002 rec-xmldsig-core-20020212 the latest version of xml-signature syntax and processing is available at http www.w3.org tr xmldsig-core c14n11 canonical xml 1.1 j. boyer and g. marcy authors. w3c candidate recommendation 21 june 2007. this is a work in progress. this version is available at http www.w3.org tr 2007 cr-xml-c14n11-20070621. the latest version of canonical xml 1.1 is available at http www.w3.org tr xml-c14n11 c. acknowledgements non-normative this document is the work of the w3c web services policy working group. members of the working group are at the time of writing and by alphabetical order dimitar angelov sap ag abbie barbir nortel networks charlton barreto adobe systems inc. sergey beryozkin iona technologies inc. vladislav bezrukov sap ag toufic boubez layer 7 technologies symon chang bea systems inc. paul cotton microsoft corporation glen daniels progress software doug davis ibm corporation jacques durand fujitsu limited ruchith fernando wso2 christopher ferris ibm corporation william henry iona technologies inc. frederick hirsch nokia maryann hondo ibm corporation ondrej hrebicek microsoft corporation steve jones layer 7 technologies tom jordahl adobe systems inc. paul knight nortel networks philippe le h garet w3c mit mark little jboss inc. mohammad makarechian microsoft corporation ashok malhotra oracle corporation jonathan marsh wso2 monica martin sun microsystems inc. arnaud meyniel axway software jeff mischkinsky oracle corporation dale moberg axway software anthony nadalin ibm corporation david orchard bea systems inc. sanjay patil sap ag manjula peiris wso2 fabian ritzmann sun microsystems inc. daniel roth microsoft corporation tom rutt fujitsu limited sanka samaranayake wso2 felix sasaki w3c keio yakov sverdlov ca asir vedamuthu microsoft corporation sanjiva weerawarana wso2 mit yal inalp sap ag prasad yendluri webmethods a subsidiary of software ag previous members of the working group were jeffrey crump jong lee bob natale eugene osovetsky bijan parsia skip snow seumas soltysik mark temple-raston. the people who have contributed to discussions on public-ws-policy@w3.org are also gratefully acknowledged. 