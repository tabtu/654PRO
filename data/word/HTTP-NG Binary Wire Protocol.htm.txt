http-ng binary wire protocol wd-http-ng-wire-19980710 http-ng binary wire protocol w3c working draft 10 july 1998 this version http www.w3.org tr 1998 wd-http-ng-wire-19980710 latest version http www.w3.org tr wd-http-ng-wire authors bill janssen xerox parc janssen@parc.xerox.com copyright 1998 w3c mit inria keio all rights reserved. w3c liability trademark document use and software licensing rules apply. 1. status of this document this is a w3c working draft for review by w3c members and other interested parties. it is a draft document and may be updated replaced or obsoleted by other documents at any time. it is inappropriate to use w3c working drafts as reference material or to cite them as other than work in progress a list of current w3c technical reports can be found at http www.w3.org tr. this document has been produced as part of the w3c http-ng activity. this is work in progress and does not imply endorsement by or the consensus of either w3c or members of the http-ng protocol design working group. we expect the document to evolve as we get more data from the web characterization group describing the current state of the web. this document describes a binary on-the-wire protocol to be used when sending http-ng operation invocations or terminations across a network connection. it is part of a suite of documents describing the http-ng design and prototype implementation http-ng short- and longterm goals wd http-ng architectural model wd http-ng wire protocol wd the classic web interfaces in http-ng wd the mux protocol wd description of the http-ng testbed note please send comments on this specification to www-http-ng-comments@w3.org 2. syntax used in this document two data description languages are used in this document. the first called isl is an abstract language for defining data types and interfaces. it is described in the ilu manual. the second is a pseudo-c syntax. it should be interpreted as c data structure layouts without any automatic padding to size boundaries and allowing arbitrary bit-size limits on structs and unions as well as on ints and enums. each use of isl and pseudo-c is marked as to which language is being used. 3. model of operation this protocol assumes a particular model of operation based on conventional rpc technology with certain variations. the basic idea is that clients make use of services exported from a server by invoking operations on objects resident in that server. the client is connected to the server by a connection which carries operation invocation requests from the client known as the caller to the server known as the callee and operation results from the callee back to the caller. multiple connections can exist simultaneously between the same client and server. the connection has state associated with it which allows the caller and callee to use shorthand notations for some of the data passed to the other party. two rpc messages are defined by this protocol the request which is used by the caller to invoke an operation on the callee and the reply which is used to transfer operation results from the callee to the caller. every reply message is associated with a particular request message but not every request message has a reply message associated with it. connections are directional operation invocation requests always flow from the caller to the callee replies always flow from the callee to the caller. in addition to the rpc messages several control messages are defined for this protocol. these control messages are used to improve the efficiency and robustness of the connection. they are intended to be generated and consumed by the implementation of the wire protocol and should have no direct effect on the applications using the protocol. a request message indicates two important elements the operation and the discriminant object or discriminant it also contains data values which are the input parameters to the operation. the model used here assumes that operations are grouped into sets the elements of which have a well-defined ordering each operation set is called an interface. it further assumes that an interface can be identified by a urn which also a uuid and that each operation in an interface can be identified with the ordinal number of the operation within the ordering of the elements of the interface. it assumes that every discriminant object can be identified with an object id also a urn and uuid. it provides for the fact that with most distributed object systems all of the discriminants available at a particular server share a common prefix to their object id this is called the server id. note that this characteristic is not required but the protocol provides an efficiency optimization for the case where it is true. in such a case we call the portion of the object id not contained in the server id the instance handle. each request has an implicit connection-specific serial number associated with it serial numbers begin with the value one 1 and have a maximum value of 16777215. when the maximum serial number of a connection has been reached the connection must be terminated and further operations must be invoked over a new connection. a reply message indicates the termination status of the operation provides information about synchronization and may contain data values which are output parameters or return values from the operation. it contains an explicit serial number to indicate which request it is a reply to. replies may either indicate successful completion of the operation or several different kinds of exceptional termination if an exception is signalled additional information is passed to indicate which of the possible exceptions for the operation was raised. the model assumes that the messages are carried back and forth between the two parties by a transport subsystem. it requires that the transport subsystem be reliable sequenced and message-oriented. by reliable we mean that after a message is handed to the transport the transport will either deliver it to the other party or will signal an error if its reliable delivery cannot be ascertained. by sequenced we mean that the transport will deliver messages to the other party in the same order in which the sender handed them to the transport. by message-oriented we mean that the transport will provide indication of the beginning and ending of the messages without reference to any data encoded inside the message. an example of this type of transport would be the record marking defined in internet rfc 1831 used with tcp ip. 4. global issues 4.1. byte order all values use network standard byte order i.e. big-endian because all internet protocols use it. if in the future this becomes a problem for the internet this protocol will be affected by whatever solution is used to solve the problem in the wider internet context. note that the data marshalling format defined in internet rfc 1832 which this protocol incorporates by reference is also defined to be a big-endian protocol. 4.2. alignment and padding the marshalled form of each value begins on a 32-bit boundary. the marshalled form of each value is padded-after if necessary to the next 32-bit boundary. the padding bits may be either 0 or 1 in any combination. 4.3. marshalling format marshalling is via the xdr format specified in internet rfc 1832. it could be argued that this format is inexcusably wasteful with certain value types such as boolean 32 bits or byte 32 bits and that a 16-bit or 8-bit oriented format should be designed and used in its place. however the argument of using an existing internet standard for this purpose rather than inventing a new one is a strong one a new format should only be defined if measurement of the overhead shows gross waste. 4.4. security this protocol assumes that security provisions are made either at some level above it typically in the application interfaces or at some level below it typically by use of a secure transport mechanism. it contains no protocol-level mechanisms for providing or assuring any of the concerns normally related to security. 4.5. session context unlike some previous protocols this protocol is session-oriented. that means that individual messages are sent in the context of a session and are context-sensitive. this context-sensitivity allows session-wide compression. however to support various kinds of marshalling architectures in implementations of this system all marshalling can be done in a context-insensitive fashion at the expense of sending additional bytes across the wire. however unmarshalling implementations must always be capable of tracking and using context-sensitive information. 5. utility types the following data structures are defined in pseudo-c typedef enum false 0 true 1 boolean typedef enum initializeconnection 0 terminateconnection 1 defaultcharset 2 controlmsgtype typedef enum success 0 userexception 1 occurred during operation systemexceptionbefore 2 occurred before beginning operation systemexceptionafter 3 occurred after beginning operation replystatus typedef struct boolean cached_disc 1 true if cached object key union struct boolean cache_key 1 true if both sides cache it unsigned key_len 13 length of key bytes uncached_key unsigned cache_index 14 cache index if cached v discriminantid typedef struct boolean cached_op 1 true if cached id union struct boolean cache_operation 1 true if should be cached unsigned method_id 13 method index uncached_op_info unsigned cache_index 14 cache index if cached_op set v operationid typedef enum mangledmessage 0 bad protocol synchronization processfinished 1 sending party has exitted resourcemanagement 2 transient close wrongcallee 3 bad server id received maxserialnumber 4 the maximum serial number was used terminationcause typedef struct unsigned major 4 unsigned minor 4 protocolversion typedef unsigned unused 6. messages only a few messages are defined. the initializeconnection message is used by the caller to verify that it has connected to the right server and that it is using the correct version of the wire protocol. the defaultcharset message allows both sides to independently define a default value for string charsets. the request message causes an operation to be started on the remote server. the reply message is sent from the server to the client to inform it of the completion status of the operation and to convey any result values. the terminateconnection message allows either side to indicate graceful shutdown of a connection. 6.1. extension headers this protocol uses a feature called an extension header to provide for extensibility and tailorability. features such as serialization contexts or global thread identifiers may be implemented via this feature. an extension header is an encapsulated value of the isl type extensionheader. each request message and reply message may contain a value of type extensionheaderlist which contains a number of extension headers. the following isl fragment decribes the types extensionheaderlist and extensionheader interface http-ng-w3ng imports http-ng end brand http-ng.w3.org type simplestring string language i-default limit 0xffff type cinfostring string language i-httpngcinfo limit 0xffff type extensionheader record name http-ng.uuidstring value pickle end type extensionheaderlist sequence of extensionheader 6.2. request message request header pseudo-c typedef struct boolean control_msg 1 false boolean ext_hdr_present 1 true if ext hdr list present operationid operation_id 15 identifies operation discriminantid object_key 15 identifies discriminant requestmsgheader 4 bytes total the actual message consists of the following sections requestmsgheader extension header list if any xdr string containing object type id of object type defining operation if not cached bytes of object_key if not cached padded to 4 byte boundary explicit input parameter values if any padded to a 4 byte boundary the operation_id contains either a connection-specific 14-bit cache index or a 13-bit method id the zero-based ordinal position of the method in the isl declaration of the object type in which the operation is defined of the operation. if the method id is given an additional value an xdr string value containing the object type id of the object type in which the operation is defined is also passed. this means that this protocol will not support interfaces in which object types have more than 8192 methods directly defined. the object_key is either a 14-bit connection-specific cache index or the length of a variable length octet sequence of 8192 or fewer bytes containing the service-point-relative name for the object the instance-handle of the url the object key value of false false 0 normally a zero byte variable length object key is reserved for use by the protocol. the object_key is marshalled onto the transport as an xdr value of type fixed-length opaque data where the length is that specified in the v.key_len field of the object_key. 6.2.1 operation and object memoizing callers may reduce the size of messages by memoizing operation ids and object ids that are passed in the connection. this is done by the caller setting the cache_key for object ids or cache_operation for operation ids bit in the discriminantid or operationid struct when the object key or operation id is first sent. each side must then assign the next available index to that object or operation. the space of operations is separate from the space of object ids so that a total of 16383 possible values is available for memoizing of discriminant objects and 16383 different possible values for memoizing of operations. note that the index is passed implicitly so both sides of the connection must synchronize their use of indices. a shared set of indices may be loaded into the connection by some mechanism before any messages are sent. this specification does not define a mechanism for doing so. 6.3. reply message reply header pseudo-c typedef struct boolean control_msg 1 false boolean ext_hdr_present 1 true if ext hdr list present replystatus 2 unused reply_1 4 unsigned serial_no 24 serial from request replymsgheader 4 bytes total the actual message consists of the following fields replymsgheader extension header list if any exception id 32-bit unsigned if any explicit output parameter values if any padded to 4 byte boundary 6.4. initializeconnection message initializeconnection header pseudo-c typedef struct boolean control_msg 1 true controlmsgtype msg_type 3 initializeconnection unused verify_1 4 protocolversion version 8 what version of the protocol unsigned server_id_len 16 length of server id initializeconnectionmsgheader the actual message consists of the following fields initializeconnectionmsgheader server_id_len-length server id for supposed callee padded to 4-byte boundary this message is sent from caller to callee as the first message of the connection. it is used to pass the server id of the connection from client to server so that both sides understand what the omitted prefix portion of discriminant ids is. if the server id received by the callee is not the correct server id for the callee i.e. the callee has objects which do not have that prefix in their object ids the callee should terminate the connection with the appropriate reason. the server id is passed as an xdr fixed-length opaque data value of the length specified in server_id_len. 6.5. terminateconnection message terminateconnection header pseudo-c typedef struct boolean control_msg 1 true controlmsgtype msg_type 3 terminateconnection terminationcause cause 4 why connection terminated unsigned serial_no 24 last request processed sent terminateconnectionmsgheader the actual message consists simply of the header it provides for graceful connection shutdown. it is sent either from the caller to the callee or from the callee to the caller and informs the other party that it is cancelling the connection for one of these reasons a badly formatted message has arrived from the other party and protocol sychronization is believe lost or the caller has sent a initializeconnection message with the wrong major version for the protocol this party process thread whatever is going away and the other party should not attempt to reconnect to it this connection is being terminated due to active resource management the other party should attempt to reconnect if it needs to this reason is typically only useful from callee to caller the caller has sent a initializeconnection message with the wrong server id the caller has used the maximum serial number available for this connection. the serial_no field contains the serial number of the last message completely processed by the caller when terminateconnection is sent from caller to callee or the serial number of the last message sent by the callee when sent from callee to caller no further messages should be sent on the connection by a sender of a terminateconnection message after it has been sent or by a receiver of terminateconnection messsage after it has been received. 6.6. defaultcharset message defaultcharset header pseudo-c typedef struct boolean control_msg 1 true controlmsgtype msg_type 3 defaultcharset unused bits_12 12 unused unsigned charset_mibenum 16 default charset defaultcharsetmsgheader this message is sent by either side of a connection to establish a default charset for subsequent messages sent by that side of the connection. the charset defines how string values are marshalled as octet sequences. the default charset defines the default marshalling unless overridden by an explicit charset in a string value. each side of the connection may establish a default charset independently of the other side of the connection the default charset only applies to string values in messages coming from that side. a new value of the default charset may be established at any time by sending another defaultcharset message. 7. data marshalling the data value format used for parameters is the xdr format specified in internet rfc 1832. however we extend the xdr specification with one additional type called flagged variable-length opaque data. it is similar to xdr s regular variable-length opaque data except that the high-order bit of the length field is used as a flag bit instead of being part of the length. this means that flagged variable-length opaque data can only carry opaque data of lengths less than or equal to 2 31 1. 0 1 2 3 4 5 flag length n byte0 byte1 n-1 0 0 bit 31 bits------- n bytes------ r bytes--- n+r where n+r mod 4 0 flagged variable-length opaque 7.1. boolean type values of type boolean are passed as xdr bool. 7.2. enumeration types values of enumeration types are passed as xdr enum. each enumeration value is assigned its ordinal value as it appears in the declaration of the enumeration type starting with the value one 7.3. numeric types 7.3.1. fixed-point types values of fixed-point types are passed by passing the value of the numerator. we define a number of special cases for efficient marshalling of common integer types as well as a general case for passing values of fixed-point types that are not covered by the special cases. special cases 32-bit integer fixed-point values with a minimum-numerator value greater than or equal to 2147483648 and with a minimum numerator value less than or equal to 2147483647 are passed as xdr integer. 32-bit unsigned integer fixed-point values with a minimum-numerator value greater than or equal to 0 and with a maximum numerator less than or equal to 4294967295 are passed as xdr unsigned integer. 64-bit integer fixed-point values with a with a minimum numerator value greater than or equal to 9223372036854775808 and with a maximum numerator less than or equal to 9223372036854775807are passed as xdr hyper integer. 64-bit unsigned integer fixed-point values with a minimum-numerator value greater than or equal to 0 and with a maximum numerator value less than or equal to 18446744073709551615 are passed as xdr unsigned hyper integer. general case the numerator of the value is passed as xdr flagged variable-length opaque data with the bytes of the data containing the value expressed as a base-256 number in big-endian order that is with the most significant digit of the value first. the flag bit is used to carry the sign the flag bit is 0 for a positive number or zero and 1 for a negative number. 7.3.2. floating-point types we define a number of special cases for efficient marshalling of common floating-point types as well as a general case for passing values of floating-point types that are not covered by the special cases. special cases ieee single floating point types matching the ieee 32-bit floating-point format that is with the parameters significand-size 24 exponent-base 2 maximum-exponent-value 127 minimum-exponent-value 126 has-not-a-number true has-infinity true denormalized-value-allowed true and has-signed-zero true are passed as xdr floating-point. ieee double floating point types matching the ieee 64-bit floating-point format that is with the parameters significand-size 53 exponent-base 2 maximum-exponent-value 1023 minimum-exponent-value 1022 has-not-a-number true has-infinity true denormalized-value-allowed true and has-signed-zero true are passed as xdr double-precision floating-point. intel extended double floating point types matching the intel ieee floating-point-compliant extended double floating-point format that is with the parameters significand-size 64 exponent-base 2 maximum-exponent-value 16383 minimum-exponent-value 16382 has-not-a-number true has-infinity true denormalized-value-allowed true and has-signed-zero true are passed as a 12-byte value of xdr fixed-length opaque data containing the floating-point value in the format specified in the unix system v application binary interface intel 386 processor supplement intel abi document the 63 bits of the fraction occupy the first 7 bytes in little-endian order plus the low seven bits of the eighth byte the 1 bit explicit leading significand bit occupies the high-order bit of the eighth byte the 15 bits of the exponent occupy the ninth byte and the low-order bits of the tenth byte in little-endian order the sign bit occupies the high-order bit of the tenth byte the eleventh and twelfth bytes are unused and should contain zero values. sparc powerpc extended double floating point types matching the xdr quadruple-precision floating-point format that is with the parameters significand-size 113 exponent-base 2 maximum-exponent-value 16383 minimum-exponent-value 16382 has-not-a-number true has-infinity true denormalized-value-allowed true and has-signed-zero true which is the form of extended double floating-point used by powerpc and sparc processors are passed as xdr quadruple-precision floating-point. general case values of floating-point types not matching the special cases identified above are passed as a value of the xdr struct type generalfloatingpointvalue which has the following definition xdr enum normal 1 notanumber 2 infinity 3 floatingpointvaluetype struct flagged opaque fixedpointsignandsignificand flagged opaque fixedpointexponent normalfloatingpointvalue union switch floatingpointvaluetype disc case normal normalfloatingpointvalue value case notanumber void case infinity void generalfloatingpointvalue the two fields of the normalfloatingpointvalue struct each contain an on-the-wire representation of a fixed-point value of the fixed-point type denominator 1 no-mininum-numerator no-maximum-numerator the fixedpointsignandsignificand field contains the sign of the floating-point value as the sign and the actual significand as the absolute value of the fixed-point value. the fixedpointexponent field contains the exponent of the floating-point value. 7.4. string types each string value sent in this protocol has a charset rfc 2278 associated with it identified by the charset s iana-assigned mibenum value. each side of a session may establish a default charset by sending the defaultcharset message. string values that use the default character set do not contain explicit charset information string values that use a charset other than the default charset contain the mibenum value for the charset along with the bytes of the string. we send a string value as a value of xdr flagged variable-length opaque data. if the flag bit is 1 the first two bytes of the string value are the mibenum of the charset high-order byte first the remaining bytes are the bytes of the string. if the flag bit is 0 the bytes of opaque data simply contain the bytes of the string the charset is the default charset for the session. it is a marshalling error to send a string value with a flag bit of 0 over a session for which no default charset has been established. to avoid context-sensitivity in marshalling a string it is always valid to marshal a string with an explicit charset value even if the charset value is the same as the default charset for the session. when marshalling a string into a pickle the charset should always be explicitly included. 7.5. sequence types values of sequence types are passed as xdr variable-length arrays with one exception sequences of any fixed-point type with a minimum numerator greater than or equal to 0 and a maximum numerator less than or equal to 255 are passed as xdr variable-length opaque data with one numerator value per octet. 7.6. array types values of array types are passed as xdr fixed-length arrays with one exception arrays of any fixed-point type with a minimum numerator greater than or equal to 0 and a maximum numerator less than or equal to 255 are passed as xdr fixed-length opaque data with one numerator value per octet. values of array types are passed as xdr fixed-length arrays with one exception 7.7. record types values of record types are passed as xdr struct. 7.8. union types values of union types are passed as xdr union with the union discriminant being the zero-based ordinal value for the encapsulated value s type. 7.9. pickle type a pickle is passed as an xdr variable-length opaque data containing the type id of the pickled value s type followed by the xdr-marshalled pickled value. to save pickle space for common value types used in metadata we define a packed format for the type id marshalling. a type id is marshalled into a pickle as a 32-bit header in an xdr unsigned integer possibly followed by an xdr fixed-length opaque data containing the string form of the type id of the pickled type. the header has the following internal structure pseudo-c typedef struct unsigned version 8 pickletypekind type_kind 8 unsigned type_id_len 16 typeidheader the version field gives the version number of the pickle format the type_kind field contains a value from the enum pseudo-c typedef enum typekind_unconstrained 0 anything not covered by other type kinds... typekind_boolean 1 boolean typekind_s8 2 fixed-point denom 1 min-num 128 max-num 127 typekind_s16 3 fixed-point denom 1 min-num 32768 max-num 32767 typekind_s32 4 fixed-point denom 1 min-num 2147483648 max-num 2147483647 typekind_s64 5 fixed-point denom 1 min-num 9223372036854775808 max-num 9223372036854775807 typekind_u8 6 fixed-point denom 1 min-num 0 max-num 255 typekind_u16 7 fixed-point denom 1 min-num 0 max-num 65535 typekind_u32 8 fixed-point denom 1 min-num 0 max-num 4294967296 typekind_u64 9 fixed-point denom 1 min-num 0 max-num 18446744073709551616 typekind_ieee_float32 10 floating-point significand-size 24 exponent-base 2 maximum-exponent-value 127 minimum-exponent-value 126 has-not-a-number true has-infinity true denormalized-value-allowed true has-signed-zero true typekind_ieee_float64 11 floating-point significand-size 53 exponent-base 2 maximum-exponent-value 1023 minimum-exponent-value 1022 has-not-a-number true has-infinity true denormalized-value-allowed true has-signed-zero true typekind_i_default_str 12 string language i-default typekind_object 13 local or remote object other types like date etc should be added here... pickletypekind if the value of type_kind is typekind_unconstrained the value of type_kind_len is the length of a value of xdr type fixed-length opaque data containing the full string type id of the type which immediately follows the header. otherwise no opaque data is marshalled. for the purposes of marshalling pickles have no default charset this means that strings marshalled into a pickle should always contain an explicit charset. pickles should be considered a single message for the purposes of marshalling aliased reference types. 7.10. reference types 7.10.1. optional types optional types are passed as xdr optional-data. 7.10.2. aliased types the scope of aliasing in this protocol is the message as in java rmi rather than the call as in dce rpc. that is aliasing occurs only within the context of a single invocation or result rather than across a full invocation-result pair. for the purposes of marshalling a pickle scope should be considered a single message scope. each unique value of an aliased type that is marshalled is assigned a 32-bit unsigned integer value unique in the scope of aliasing called its aliased identifier. this identifier is marshalled as an xdr unsigned integer. if the aliased value has not previously been sent in this scope its value is then marshalled as a value of its base type would be. note that this means that the full value of every aliased type is sent only once in a scope subsequent occurrences send only the aliased identifier. xxx how to handle overflow of aliased value cache 7.11. object types an instance of an object type is passed as the state of the object type which also contains information about the actual type of the value. for remote object types this state is followed by the object identifier and optionally information about how the instance may be contacted. 7.11.1. parameter type versus actual type when marshalling the state of an object it s important to distinguish two important types of the value the parameter type which is the type that both sides of the session expect the value to have and the actual type of the value which is the most-derived type of the object and may be a subtype of the parameter type. if the actual type is different from the parameter type extra information must be passed along with the value to allow the receiver to properly distinguish the type and its associated data. however if the actual type is the same as the parameter type some of this information can be omitted. 7.11.2. passing the actual type id we pass the state of the object type as the type id of the most-derived-type of the object followed by the state attributes of each type of the object. the type id is passed as one of three values depending on the following conditions if the parameter type of the object is sealed both sides already know the most-derived-type id of the instance and know that the actual type must be the same as the parameter type. in this case the type id is passed as xdr void. if the actual type of the object is the same as the parameter type this is indicated by passing a zero-length value of xdr variable-length opaque data. otherwise the type id is passed as a value of xdr variable-length opaque data containing the type id. 7.11.3. passing the state attributes the state attributes are marshalled in one of two ways if the actual type of the instance is the same as the parameter type the state of each of the types of the object are passed by walking the supertype inheritance tree of the instance in a depth-first order passing the value of each attribute of any particular state in the order in which they are defined as if each state formed an xdr structure with the attributes as the components of the structure. the value of each attribute is marshalled directly according to the type of the attribute. if the actual type of the instance is a subtype of the parameter type the receiver has to be able to handle state for types it has no knowledge of. to allow for this the state of each type is passed as an encapsulation. that is the state of the instance is passed as a sequence of xdr structure values each containing the state for one of the types of the instance. types of the instance which have no associated state do not appear in this sequence. an xdr expression of the sequence would be the following xdr struct opaque type_id 0xffff opaque state typestate typedef typestate statesequence the type_id field contains the type id for that type of the the object value. the variable-length opaque data field state contains the values of the attributes of the state marshalled as an xdr structure where the components of the structure are the attributes of the state. 7.11.4. passing the object id and contact info in the case of a remote object type the server id instance handle and contact info for the value are passed as a value of the following xdr structure type remoteobjectinfo xdr typedef string contactinfo 0xffff struct opaque server_id opaque instance_handle contactinfo cinfos remoteobjectinfo where server_id is a identifier for the server which supports the desired object and instance_handle is a server-relative name for the object. the cinfos field contains zero or more pieces of information about the way in which the object needs to be contacted including information such as whether various transport layers are involved. 8. system exceptions 8.1. unknownproblem exception code 0 isl values none an unknown problem occurred. 8.2. implementationlimit exception code 1 isl values none the request could not be properly addressed because of some implementation resource limit on the callee side. 8.3. switchconnectioncinfo exception code 2 isl values new-cinfo http-ng-w3ng.cinfostring this exception requests the caller to upgrade the connection protocol and transport information to the cinfo specified as the argument and re-try the call. this is the equivalent of the upgrade message in http 1.1 and the relocate_reply message in corba giop. 8.4. marshal exception code 3 isl values none a marshalling problem was encountered. 8.5. nosuchobjecttype exception code 4 isl values none the object type of the operation was unknown at the server. 8.6. nosuchmethod exception code 5 isl values none the object type of the operation was known at the server but did not contain the indicated method. 8.7. nosuchobject exception code 6 isl values none the specified discriminant object was not available at the server. 8.8. invalidtype exception code 7 isl values none the object specified by the discriminant did not participate in the type specified in the operation. 8.9. rejected exception code 8 isl values reason optional simplestring the server refused to process the request. it may return a string giving a reason for the rejection. 8.10. operationordiscriminantcacheoverflow exception code 9 isl values none the request caused the receiver s cache of operations or discriminants to overflow. the sender may retry the request with uncached operation and discriminant values subsequent requests should not cache any additional operation or discriminant values but may continue to use previously successfully cached values. 9. discussion 9.1. serial numbers does this protocol need to assign serial numbers to requests and replies we do so in order to be able to cancel operations by serial number and to be able to return reply messages out of order. the first problem that of cancelling operations could be dealt with by keeping track of serial numbers implicitly and using an explicit serial number only in the cancelrequest message. doing this would imply that the replies would have to be returned in the order in which the requests were passed but would allow us to have 6 byte request messages 4 bytes if we count the discriminant as part of the arguments instead of part of the header and 4 byte reply messages. thus the only real purpose for serial numbers is to allow replies to be returned out of order and possibly to make debugging the protocol easier there are other deeper unanswered questions here about the serialization semantics of the protocol. for instance should the callee wait until dispatching a reply to one request until beginning to process the next one the current answer to these questions is that it is highly useful to allow a threaded callee to process multiple requests in parallel and to allow it to return requests out of order. thus serial numbers are useful. we assume that higher-level protocols desiring serialization will provide a serialization context as part of the context of the call and that serialization will be handled at either a higher or lower level. 9.2. memoizing of pickle and object types a great deal of the traffic over this protocol may consist of values of type pickle the equivalent of object-by-value or of http s mime-encapsulated body type or of some object type. it is tempting to introduce a form of memoizing for these value types similar to that used for request discriminants. there are two reasons not to do so xdr provides no explicit support for memoizing which means that we would have to provide a marshalling format for these types which has no clean layering onto xdr. for instance it might be possible to pass an object value as an xdr 32-bit unsigned integer with the following private pseudo-c structure struct boolean use_cached_value 1 boolean cache_this_value 1 union unsigned int url_len 30 unsigned int cache_key 30 v either by itself if use_cached_value is set or followed by an xdr fixed length opaque value containing the url for the object if use_cached_value is not set this type of variable structure has no equivalent in xdr. on the other hand it could well be argued that since we are marshalling an object type something not explicitly covered by xdr that we are simply providing an extension to xdr in the spirit of the marshalling. we could even use a simpler construct such as xdr union. a more powerful argument is that allowing arbitrary memoizing of large items can let the caller place almost arbitrary loads on the storage requirements of the callee. it could be argued that the callee can reset the connection at any time if the load becomes too onerous via terminateconnection. neither of these arguments seems overwhelmingly powerful. 9.3. url forms open issues we need to specify a default object type and default cinfo the exact format of typeid values and cinfo stacks must also be specified. the form of server-id should also be defined to allow slash characters internally. should server-id be stylized in a way which makes it easy to use with dns how should http urls be integrated into this if at all should we have multiple url forms with some information about the cinfo being integrated into some of the forms for example henrik has suggested that a url of the form http-ng foo.bar.com object-id might be used to indicate that object object-id is available at foo.bar.com and that the client should use some protocol negotiation protocol to work out the exact shape of the cinfo. proposed urls for http-ng objects will be of the form w3ng server-id instance-handle type type cinfo cinfo where server-id is a identifier for the server which supports the desired object instance-handle is a server-relative name for the object type is the type id for the most derived type of the object and cinfo is information about the way in which the object needs to be contacted including information such as whether various transport layers are involved. this form has the virtue of becoming a urn if the optional cinfo and type fields are omitted. 9.4. current syntax of cinfo strings the syntax of cinfo currently follows the ilu definition. each cinfo string has the form described below where brackets indicate optionality an alphanumeric-id is an identifier composed of ascii lowercase alphabetic and numeric characters beginning with a lowercase alphabetic character and a non-underscore-string is any string of ascii characters not containing the underscore character cinfo pinfo tinfo-stack pinfo scheme parms scheme alphanumeric-id parms parm parms parm non-underscore-string tinfo-stack tinfo tinfo-stack tinfo scheme parms 9.4.1. syntax of w3ng pinfo the current syntax of the pinfo string for the ilu implementation of the w3ng wire protocol is scheme w3ng parms major-version minor-version where major-version and minor-version are numbers between 0 and 15. if the minor-version is not specified it defaults to 0. 9.4.2. syntax of w3mux tinfo the current syntax of the tinfo string for the ilu implementation of the w3mux transport layer is scheme w3mux parms channel endpoint where channel is a protocol id number mux and endpoint is a uuid string for an endpoint. the size of the endpoint string must be less than 1000 bytes. 9.4.3. syntax of tcp tinfo the current syntax of the tinfo string for the ilu implementation of the tcp transport layer is scheme tcp parms host port where host is string of less than 1000 bytes indicating the ip address or hostname of the remote machine and port is the tcp port on which the host is listening. 9.4.4. syntax of sunrpcrm tinfo the current syntax of the tinfo string for the ilu implementation of the sunrpcrm transport layer is scheme sunrpcrm no parameters are defined. this layer implements the onc rpc record-marking scheme on top of a reliable byte stream as defined in section 10 of the onc rpc rfc onc rpc 10. references rfc 2278 http info.internet.isi.edu 80 in-notes rfc files rfc2278.txt xdr rfc 1832 http info.internet.isi.edu 80 in-notes rfc files rfc1832.txt onc rpc rfc 1831 http info.internet.isi.edu 80 in-notes rfc files rfc1831.txt isl ftp ftp.parc.xerox.com pub ilu 2.0a12 manual-html manual_2.html wd-http-ng-arch-model work in progress http www.w3.org tr 1998 wd-http-ng-architecture mux work in progress http www.w3.org tr 1998 wd-mux ilu ftp ftp.parc.xerox.com pub ilu 2.0a12 manual-html manual_2.html 11. address of author bill janssen xerox palo alto research center 3333 coyote hill rd palo alto ca 94304 phone 650 812-4763 fax 650 812-4777 email janssen@parc.xerox.com http http www.parc.xerox.com istl members janssen index a aliased types marshalling of alignment array of byte marshalling of array types marshalling of author b big-endian boolean boolean pseudo-c enum type boolean type marshalling of byte order c cinfo marshalling of connection definition of contact info marshalling of controlmsgtype pseudo-c enum type d defaultcharsetmsgheader pseudo-c struct type discriminant object id memoizing discriminant identification of discriminantid pseudo-c struct type e enumeration types marshalling of extension headers f fixed-point types marshalling of flagged variable-length opaque data xdr type floatingpointvaluetype xdr type g generalfloatingpointvalue xdr type graceful connection shutdown h http-ng-w3ng.extensionheader isl type http-ng-w3ng.extensionheaderlist isl type http-ng-w3ng.simplestring isl type i implementationlimit system exception initializeconnection message initializeconnectionmsgheader pseudo-c struct type instance handle instance handle marshalling of integer types marshalling of interface invalidtype system exception isl- xdr mapping m marshal system exception marshalling of data memoizing memoizing of pickle and object types message-oriented transport messages description of model of operation n normalfloatingpointvalue xdr type nosuchmethod system exception nosuchobject system exception nosuchobjecttype system exception o object id object state marshalling of object types marshalling of operation id memoizing operation identification of operationid pseudo-c struct type optional types marshalling of p padding pickle types marshalling of protocolversion pseudo-c struct type pseudo-c syntax definition of r record types marshalling of rejected system exception reliable sequenced message transport remote object types marshalling of reply message replymsgheader pseudo-c struct type replystatus pseudo-c enum type request message requestmsgheader pseudo-c struct type s security sequence of byte marshalling of sequence types marshalling of sequenced transport serial numbers discussion of serial numbers range of server id session context statesequence xdr type string types marshalling of success subtype of reply switchconnectioncinfo system exception syntax used system exceptions systemexception subtype of reply t terminateconnection message terminateconnectionmsgheader pseudo-c struct type terminationcause pseudo-c enum type transport requirements typestate xdr type u union types marshalling of unknownproblem system exception unused pseudo-c alias type userexception subtype of reply w w3ng url form x xdr type remoteobjectinfo xdr internet rfc 1832 use of 