the rdf data cube vocabulary the rdf data cube vocabulary w3c recommendation 16 january 2014 this version http www.w3.org tr 2014 rec-vocab-data-cube-20140116 latest published version http www.w3.org tr vocab-data-cube implementation report http www.w3.org 2011 gld wiki data_cube_implementations previous version http www.w3.org tr 2013 pr-vocab-data-cube-20131217 editors richard cyganiak deri nui galway dave reynolds epimorphics ltd contributors jeni tennison please refer to the errata a list of issues with this document discovered after publication. this document is also available in this non-normative format diff to previous version the english version of this specification is the only normative version. non-normative translations may also be available. copyright 2012-2014 w3c mit ercim keio beihang all rights reserved. w3c liability trademark and document use rules apply. abstract there are many situations where it would be useful to be able to publish multi-dimensional data such as statistics on the web in such a way that it can be linked to related data sets and concepts. the data cube vocabulary provides a means to do this using the w3c rdf resource description framework standard. the model underpinning the data cube vocabulary is compatible with the cube model that underlies sdmx statistical data and metadata exchange an iso standard for exchanging and sharing statistical data and metadata among organizations. the data cube vocabulary is a core foundation which supports extension vocabularies to enable publication of other aspects of statistical data flows or other multi-dimensional data sets. the namespace for all terms in this ontology is http purl.org linked-data cube# the vocabulary defined in this document is also available in these non-normative formats turtle. status of this document this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. this vocabulary was originally developed and published outside of w3c but has been extended and further developed within the government linked data working group. this document was published by the government linked data working group as a recommendation. if you wish to make comments regarding this document please send them to public-gld-comments@w3.org subscribe archives all comments are welcome. please see the working group s implementation report. this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. an individual who has actual knowledge of a patent which the individual believes contains essential claim s must disclose the information in accordance with section 6 of the w3c patent policy. table of contents 1. outline of the vocabulary 1.1 vocabulary index 2. introduction 2.1 rdf and linked data 2.2 sdmx and related standards 2.3 audience and scope 3. namespaces and document conventions 4. conformance 5. data cubes 5.1 data sets 5.2 the cube model dimensions attributes measures 5.3 introducing slices 5.4 an example 6. creating data structure definitions 6.1 dimensions attributes and measures 6.2 content oriented guidelines 6.3 example dimensions and measure 6.4 componentspecifications and datastructuredefinitions 6.5 handling multiple measures 7. expressing data sets 7.1 data sets and observations 7.2 slices and groups of observations 8. concept schemes and code lists 8.1 coded values for components properties 8.2 hierarchical code lists 8.3 non-skos hierarchies 8.4 aggregation 9. dataset metadata 9.1 categorizing a data set 9.2 describing publishers 10. abbreviated and normalized data cubes 10.1 normalization algorithm 11. well-formed cubes 11.1 integrity constraints 12. vocabulary reference 12.1 datasets 12.2 observations 12.3 slices 12.4 dimensions attributes measures 12.5 reusable general purpose component properties 12.6 data structure definitions 12.7 component specifications for qualifying component use in a dsd 12.8 slice definitions 12.9 concepts 12.10 non-skos hierarchies a. acknowledgements b. change history c. complete example data cube d. references d.1 normative references d.2 informative references 1. outline of the vocabulary fig. 1 pictorial summary of key terms and their relationship 1.1 vocabulary index classes qb attachable qb attributeproperty qb codedproperty qb componentproperty qb componentset qb componentspecification qb dataset qb datastructuredefinition qb dimensionproperty qb hierarchicalcodelist qb measureproperty qb observation qb slice qb observationgroup qb slicekey properties qb attribute qb codelist qb component qb componentattachment qb componentproperty qb componentrequired qb concept qb dataset qb dimension qb hierarchyroot qb measure qb measuredimension qb measuretype qb observation qb observationgroup qb order qb parentchildproperty qb slice qb slicekey qb slicestructure qb structure 2. introduction this section is non-normative. statistical data is a foundation for policy prediction planning and adjustments and underpins many of the mash-ups and visualisations we see on the web. there is strong interest in being able to publish statistical data in a web-friendly format to enable it to be linked and combined with related information. at the heart of a statistical dataset is a set of observed values organized along a group of dimensions together with associated metadata. the data cube vocabulary enables such information to be represented using the w3c rdf resource description framework standard and published following the principles of linked data. the vocabulary is based upon the approach used by the sdmx iso standard for statistical data exchange. this cube model is very general and so the data cube vocabulary can be used for other data sets such as survey data spreadsheets and olap data cubes olap the data cube vocabulary is focused purely on the publication of multi-dimensional data on the web. we envisage a series of modular vocabularies being developed which extend this core foundation. in particular we see the need for an sdmx extension vocabulary to support the publication of additional context to statistical data such as the encompassing data flows and associated provision agreements other extensions are possible to support metadata for surveys so called micro-data as encompassed by ddi or publication of statistical reference metadata. the data cube in turn builds upon the following existing rdf vocabularies skos for concept schemes scovo for core statistical structures dublin core terms for metadata void for data access foaf for agents org for organizations 2.1 rdf and linked data linked data is an approach to publishing data on the web enabling datasets to be linked together through references to common concepts. the approach lod recommends use of http uris to name the entities and concepts so that consumers of the data can look-up those uris to get more information including links to other related uris. rdf rdf-primer provides a standard for the representation of the information that describes those entities and concepts and is returned by dereferencing the uris. there are a number of benefits to being able to publish multi-dimensional data such as statistics using rdf and the linked data approach the individual observations and groups of observations become web addressable. this allows publishers and third parties to annotate and link to this data for example a report can reference the specific figures it is based on allowing for fine grained provenance trace-back. data can be flexibly combined across datasets sets for example find all religious schools in census areas with high values for national indicators pertaining to religious tolerance the statistical data becomes an integral part of the broader web of linked data. for publishers who currently only offer static files then publishing as linked-data offers a flexible non-proprietary machine readable means of publication that supports an out-of-the-box web api for programmatic access. it enables reuse of standardized tools and components. 2.2 sdmx and related standards the statistical data and metadata exchange sdmx initiative was organised in 2001 by seven international organizations bis ecb eurostat imf oecd world bank and the un to realise greater efficiencies in statistical practice. these organisations all collect significant amounts of data mostly from the national level to support policy. they also disseminate data at the supra-national and international levels. there have been a number of important results from this work two versions of a set of technical specifications iso ts 17369 sdmx and the release of several recommendations for structuring and harmonising cross-domain statistics the sdmx content-oriented guidelines. all of the products are available at www.sdmx.org. the standards are now being widely adopted around the world for the collection exchange processing and dissemination of aggregate statistics by official statistical organisations. the un statistical commission recommended sdmx as the preferred standard for statistics in 2007. the sdmx specification defines a core information model which is reflected in concrete form in two syntaxes sdmx-ml an xml syntax and sdmx-edi. the rdf data cube vocabulary builds upon the core of the the sdmx 2.0 information model sdmx20 readers may find the sdmx user guide sdmx-guide useful background. a key component of the sdmx standards package are the content-oriented guidelines cogs a set of cross-domain concepts code lists and categories that support interoperability and comparability between datasets by providing a shared terminology between sdmx implementers cog rdf versions of these terms are available separately for use along with the data cube vocabulary see content oriented guidelines for further details. these external resources do not form a normative part of the data cube vocabulary specification. 2.3 audience and scope this document describes the data cube vocabulary it is aimed at people wishing to publish statistical or other multi-dimension data in rdf. mechanics of cross-format translation from other formats such as sdmx-ml are not covered here. 3. namespaces and document conventions the names of rdf entities classes predicates individuals are uris. these are usually expressed using a compact notation where the name is written prefix localname and where the prefix identifies a namespace uri. the namespace identified by the prefix is prepended to the localname to obtain the full uri. the following namespaces are used in this document prefix namespace reference qb http purl.org linked-data cube# this document skos http www.w3.org 2004 02 skos core# skos-reference scovo http purl.org net scovo# scovo haus09 void http rdfs.org ns void# void foaf http xmlns.com foaf 0.1 foaf org http www.w3.org ns org# org dct http purl.org dc terms dc11 owl http www.w3.org 2002 07 owl# owl2-primer rdf http www.w3.org 1999 02 22-rdf-syntax-ns# rdf-concepts rdfs http www.w3.org 2000 01 rdf-schema# rdf-schema admingeo http data.ordnancesurvey.co.uk ontology admingeo non-normative used for examples only interval http reference.data.gov.uk def intervals non-normative used for examples only eg http example.org ns# non-normative used for examples only all rdf examples are written in turtle syntax turtle 4. conformance as well as sections marked as non-normative all authoring guidelines diagrams examples and notes in this specification are non-normative. everything else in this specification is normative. the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc2119 a data interchange however that interchange occurs is conformant with data cube if it uses terms classes and properties from data cube in a way consistent with their semantics as declared in this specification in particular the exchanged rdf graphs constitute either well-formed or well-formed abbreviated data cubes it does not use terms from other vocabularies instead of ones defined in this vocabulary that could reasonably be used use of such terms in addition to data cube terms is permissible a conforming data interchange may include terms from other vocabularies may use only a subset of data cube terms. 5. data cubes this section is non-normative. 5.1 data sets this section is non-normative. a dataset is a collection of statistical data that corresponds to a defined structure. the data in a data set can be roughly described as belonging to one of the following kinds observations this is the actual data the measured values. in a statistical table the observations would be the values in the table cells. organizational structure to locate an observation within the hypercube one has at least to know the value of each dimension at which the observation is located so these values must be specified for each observation. datasets can have additional organizational structure in the form of slices as described in section 7.2. structural metadata having located an observation we need certain metadata in order to be able to interpret it. what is the unit of measurement is it a normal value or a series break is the value measured or estimated these metadata are provided as attributes and can be attached to individual observations or to higher levels. reference metadata this is metadata that describes the dataset as a whole such as categorization of the dataset its publisher and a sparql endpoint where it can be accessed. external metadata is described in section 9. 5.2 the cube model dimensions attributes measures this section is non-normative. a statistical data set comprises a collection of observations made at some points across some logical space. the collection can be characterized by a set of dimensions that define what the observation applies to e.g. time area gender along with metadata describing what has been measured e.g. economic activity population how it was measured and how the observations are expressed e.g. units multipliers status we can think of the statistical data set as a multi-dimensional space or hyper-cube indexed by those dimensions. this space is commonly referred to as a cube for short though the name shouldn t be taken literally it is not meant to imply that there are exactly three dimensions there can be more or fewer nor that all the dimensions are somehow similar in size. a cube is organized according to a set of dimensions attributes and measures. we collectively call these components. the dimension components serve to identify the observations. a set of values for all the dimension components is sufficient to identify a single observation. examples of dimensions include the time to which the observation applies or a geographic region which the observation covers. the measure components represent the phenomenon being observed. the attribute components allow us to qualify and interpret the observed value s they enable specification of the units of measure any scaling factors and metadata such as the status of the observation e.g. estimated provisional 5.3 introducing slices this section is non-normative. it is frequently useful to group subsets of observations within a dataset. in particular to fix all but one or a small subset of the dimensions and be able to refer to all observations with those dimension values as a single entity. we call such a selection a slice through the cube. for example given a data set on regional performance indicators then we might group together all the observations about a given indicator and a given region. each such group would be a slice representing a time series of observed values. a data publisher may identify slices through the data for various purposes. they can be a useful grouping to which metadata might be attached for example to note a change in measurement process which affects a particular time or region. slices also enable the publisher to identify and label particular subsets of the data which should be presented to the user they can enable the consuming application to more easily construct the appropriate graph or chart for presentation. in statistical applications it is common to work with slices in which a single dimension is left unspecified. in particular to refer to such slices in which the single free dimension is time as time series and to refer slices along non-time dimensions as sections. within the data cube vocabulary we allow arbitrary dimensionality slices and do not give different names to particular types of slice. such sub-classes of slice could be added in extension vocabularies. 5.4 an example this section is non-normative. in order to illustrate the use of the data cube vocabulary we will use a small demonstration data set extracted from statswales report number 003311 which describes life expectancy broken down by region unitary authority age and time. the extract we will use is 2004-2006 2005-2007 2006-2008 male female male female male female newport 76.7 80.7 77.1 80.9 77.0 81.5 cardiff 78.7 83.3 78.6 83.7 78.7 83.4 monmouthshire 76.6 81.3 76.5 81.5 76.6 81.7 merthyr tydfil 75.5 79.1 75.5 79.4 74.9 79.6 we can see that there are three dimensions time period rolling averages over three year timespans region and sex. each observation represents the life expectancy for that population the measure and we will need an attribute to define the units years of the measured values. an example of slicing the data would be to define slices in which the time and sex are fixed for each slice. such slices then show the variation in life expectancy across the different regions i.e. corresponding to the columns in the above tabular layout. a complete encoding of this data as a data cube including such a slice structure is shown in appendix c. 6. creating data structure definitions a qb datastructuredefinition defines the structure of one or more datasets. in particular it defines the dimensions attributes and measures used in the dataset along with qualifying information such as ordering of dimensions and whether attributes are required or optional. for well-formed data sets much of this information is implicit within the rdf component properties found on the observations. however the explicit declaration of the structure has several benefits it enables verification that the data set matches the expected structure in particular helps with detection of incoherent sets obtained by combining differently structured source data it allows a consumer to easily determine what dimensions are available for query and their presentational order which in turn simplifies data consumption for example for ui construction it supports transmission of the structure information in associated sdmx data flows see below it is common when publishing statistical data to have a regular series of publications which all follow the same structure. the notion of a data structure definition dsd allows us to define that structure once and then reuse it for each publication in the series. consumers can then be confident that the structure of the data has not changed. 6.1 dimensions attributes and measures the data cube vocabulary represents the dimensions attributes and measures as rdf properties. each is an instance of the abstract qb componentproperty class which in turn has sub-classes qb dimensionproperty qb attributeproperty and qb measureproperty. a component property encapsulates several pieces of information the concept being represented e.g. time or geographic area the nature of the component dimension attribute or measure as represented by the type of the component property the type or code list used to represent the value. the same concept can be manifested in different components. for example the concept of currency may be used as a dimension in a data set dealing with exchange rates or as an attribute when describing the currency in which an observed trade took place the concept of time is typically used only as a dimension but may be encoded as a data value e.g. an xsd datetime or as a symbolic value e.g. a uri drawn from the reference time uri set developed by data.gov.uk in statistical agencies it is common to have a standard thesaurus of statistical concepts which underpin the components used in multiple different data sets. to support this reuse of general statistical concepts the data cube vocabulary provides the qb concept property which links a qb componentproperty to the concept it represents. we use the skos vocabulary skos-primer to represent such concepts. this is very natural for those cases where the concepts are already maintained as a controlled term list or thesaurus. when developing a data structure definition for an informal data set there may not be an appropriate concept already. in those cases if the concept is likely to be reused in other guises it is recommended to publish a skos concept along with the specific qb componentproperty. however if such reuse is not expected then it is not required to do so the qb concept link is optional and a simple instance of the appropriate subclass of qb componentproperty is sufficient. the representation of the possible values of the component is described using the rdfs range property of the component in the usual rdf manner. thus for example values of a time dimension might be represented using literals of type xsd datetime or as uris drawn from a time reference service. in statistical data sets it is common for values to be encoded using some possibly hierarchical code list and it can be useful to be able to easily identify the overall code list in some more structured form. to cater for this a component can also be optionally annotated with a qb codelist to indicate a set of skos concepts which may be used as codes. the qb codelist value may be a skos conceptscheme skos collection or qb hierarchicalcodelist. in such a case the rdfs range of the component might be left as simply skos concept but a useful design pattern is to also define an rdfs class whose members are all the skos concepts within a particular scheme. in that way the rdfs range can be made more specific which enables generic rdf tools to perform appropriate range checking. note that in any sdmx extension vocabulary there would be one further item of information to encode about components the role that they play within the structure definition. in particular it is sometimes convenient for consumers to be able to easily identify which is the time dimension which component is the primary measure and so forth. it turns out that such roles are intrinsic to the concepts and so this information can be encoded by providing subclasses of skos concept for each role. the particular choice of roles here is specific to the sdmx standard and so is not included within the core data cube vocabulary. before illustrating the components needed for our running example there is one more piece of machinery to introduce a reusable set of concepts and components based on sdmx. 6.2 content oriented guidelines this section is non-normative. the sdmx standard includes a set of content oriented guidelines cog cog which define a set of common statistical concepts and associated code lists that are intended to be reusable across data sets. a community group has developed rdf encodings of these guidelines. these comprise prefix namespace description sdmx-concept http purl.org linked-data sdmx 2009 concept# skos concepts for each cog defined concept sdmx-code http purl.org linked-data sdmx 2009 code# skos concepts and conceptschemes for each cog defined code list sdmx-dimension http purl.org linked-data sdmx 2009 dimension# component properties corresponding to each cog concept that can be used as a dimension sdmx-attribute http purl.org linked-data sdmx 2009 attribute# component properties corresponding to each cog concept that can be used as an attribute sdmx-measure http purl.org linked-data sdmx 2009 measure# component properties corresponding to each cog concept that can be used as a measure these community resources are provided as a convenience and do not form part of the data cube specification. however they are used by a number of existing data cube publications and so we will reference them within our worked examples. 6.3 example dimensions and measure this section is non-normative. turning to our example data set then we can see there are three dimensions to represent time period region unitary authority and sex. there is a single primary measure which corresponds to the topic of the data set life expectancy and encodes a value in years. hence we need the following components. time. there is a suitable predefined concept in the smdx-cog for this ref_period so we could reuse the corresponding component property sdmx-dimension refperiod. however to represent the time period itself it would be convenient to use the data.gov.uk reference time service and to declare this within the data structure definition. example 1 eg refperiod a rdf property qb dimensionproperty rdfs label reference period en rdfs subpropertyof sdmx-dimension refperiod rdfs range interval interval qb concept sdmx-concept refperiod region. again there is a suitable cog concept and associated component that we can use for this and again we can customize the range of the component. in this case we can use the ordnance survey administrative geography ontology os-geo example 2 eg refarea a rdf property qb dimensionproperty rdfs label reference area en rdfs subpropertyof sdmx-dimension refarea rdfs range admingeo unitaryauthority qb concept sdmx-concept refarea sex. in this case we can use the corresponding cog component sdmx-dimension sex directly since the default code list for it includes the terms we need. measure. this property will give the value of each observation. we could use the default smdx-measure obsvalue for this defining the topic being observed using metadata however it can aid readability and processing of the rdf data sets to use a specific measure corresponding to the phenomenon being observed. example 3 eg lifeexpectancy a rdf property qb measureproperty rdfs label life expectancy en rdfs subpropertyof sdmx-measure obsvalue rdfs range xsd decimal unit measure attribute. the primary measure on its own is a plain decimal value. to correctly interpret this value we need to define what units it is measured in years in this case this is defined using attributes which qualify the interpretation of the observed value. specifically in this example we can use the predefined sdmx-attribute unitmeasure which in turn corresponds to the cog concept of unit_measure. to express the value of this attribute we would typically use a common thesaurus of units of measure. for the sake of this simple example we will use the dbpedia resource http dbpedia.org resource year which corresponds to the topic of the wikipedia page on years this covers the minimal components needed to define the structure of this data set. 6.4 componentspecifications and datastructuredefinitions to combine the components into a specification for the structure of this dataset we need to declare a qb datastructuredefinition resource which in turn will reference a set of qb componentspecification resources. the qb datastructuredefinition will be reusable across other data sets with the same structure. in the simplest case the qb componentspecification simply references the corresponding qb componentproperty usually using one of the sub properties qb dimension qb measure or qb attribute however it is also possible to qualify the component specification in several ways. attributes may be declared as optional or required. if an attribute is required to be present for every observation then the specification should set qb componentrequired. in the absence of such a declaration an attribute is assumed to be optional. the qb componentrequired declaration may only be applied to component specifications of attributes measures and dimensions are always required. the components may be ordered by giving an integer value for qb order. this order carries no semantics but can be useful to aid consuming agents in generating appropriate user interfaces. it can also be useful in the publication chain to enable synthesis of appropriate uris for observations. by default the values of all of the components will be attached to each individual observation this is called the normalized representation. this allows such observations to stand alone so that a sparql query to retrieve the observation can immediately locate the attributes which enable the observation to be interpreted. however it is also permissible to attach attributes to the overall data set to an intervening slice or to a specific measure in the case of multiple measures this reduces some of the redundancy in the encoding of the instance data. to declare such an abbreviated structure the qb componentattachment property of the specification should reference the class corresponding to the attachment level e.g. qb dataset for attributes that will be attached to the overall data set the classes which can be used as such attachment levels are all subclasses of qb attachable. in the case of our running example the dimensions can be usefully ordered. there is only one attribute the unit measure and this is required. in the interest of illustrating the vocabulary use we will declare that this attribute will be attached at the level of the data set however normalized representations are in general easier to query and combine. so the structure of our example data set and other similar datasets can be declared by example 4 eg dsd-le a qb datastructuredefinition the dimensions qb component qb dimension eg refarea qb order 1 qb component qb dimension eg refperiod qb order 2 qb component qb dimension sdmx-dimension sex qb order 3 the measure s qb component qb measure eg lifeexpectancy the attributes qb component qb attribute sdmx-attribute unitmeasure qb componentrequired true xsd boolean qb componentattachment qb dataset note that we have given the data structure definition dsd a uri since it will be reused across different datasets with the same structure. similarly the component properties themselves can be reused across different dsds. however the component specifications are only useful within the scope of a particular dsd and so we have chosen to represent them using blank nodes. 6.5 handling multiple measures our example data set is relatively simple in having a single observable in this case life expectancy that is being measured. in other data sets there can be multiple measures. these measures may be of similar nature e.g. a data set on local government performance might provide multiple different performance indicators for each region or quite different e.g. a data set on trades might provide quantity value weight for each trade there are two approaches to representing multiple measures supported by the data cube vocabulary. in the first approach each observation records a single observed value for one measure. we introduce an additional dimension whose value indicates the measure being conveyed by each observation. this measure dimension approach is the one supported by the sdmx information model. in the second approach a single observation can provide values for multiple different measures. this is particularly appropriate in cases where each of those values relates to a single observational event such as a multi-spectral sensor measurement. this multi-measure approach is commonly used in applications such as business intelligence and olap. the data cube vocabulary permits either representation approach to be used though they cannot be mixed within the same data set. both representation approaches require that for every point in the space of dimensions for which there is an observation a value must be given for every measure. in the case of multi-measure observations each measure must be present on each observation. in cubes which use a measure dimension there are sets of observations for each populated point in the cube and within each of those sets there must be an observation giving each measure. multi-measure observations this approach allows multiple observed values to be attached to an individual observation. it is suited to representation of things like sensor data and olap cubes. to use this representation you simply declare multiple qb measureproperty components in the data structure definition and attach an instance of each property to the observations within the data set. for example if we have a set of shipment data containing unit count and total weight for each shipment then we might have a data structure definition such as example 5 eg dsd1 a qb datastructuredefinition rdfs comment shipments by time multiple measures approach en qb component qb dimension sdmx-dimension reftime qb measure eg-measure quantity qb measure eg-measure weight this would correspond to individual observations such as example 6 eg dataset1 a qb dataset qb structure eg dsd1 eg obs1a a qb observation qb dataset eg dataset1 sdmx-dimension reftime 2010-07-30 xsd date eg-measure weight 1.3 eg-measure quantity 42 note that one limitation of the multi-measure approach is that it is not possible to attach an attribute to a single observed value. an attribute attached to the observation instance will apply to the whole observation e.g. to indicate who made the observation attributes can also be attached directly to the qb measureproperty itself e.g. to indicate the unit of measure for that measure but that attachment applies to the whole data set indeed any data set using that measure property and cannot vary for different observations. for applications where this limitation is a problem then use the measure dimension approach. measure dimension this approach restricts observations to having a single measured value but allows a data set to carry multiple measures by adding an extra dimension a measure dimension. the value of the measure dimension denotes which particular measure is being conveyed by the observation. this is the representation approach used within sdmx and an extension vocabulary could introduce a sub-class of qb datastructuredefinition which enforces such a single-measure restriction. to use this representation you declare an additional dimension within the data structure definition to play the role of the measure dimension. for use within the data cube vocabulary we provide a single distinguished component for this purpose qb measuretype. an extension vocabulary could generalize this through the provision of roles to identify concepts which act as measure types enabling other measure dimensions to be declared. in the special case of using qb measuretype as the measure dimension the set of allowed measures is assumed to be those measures declared within the dsd. there is no need to define a separate code list or enumerated class to duplicate this information. thus qb measuretype is a magic dimension property with an implicit code list. this notion of an implicit code list for qb measuretype is a small divergence from sdmx usage. the data structure definition for our above example using this representation approach would then be example 7 eg dsd2 a qb datastructuredefinition rdfs comment shipments by time measure dimension approach en qb component qb dimension sdmx-dimension reftime qb measure eg-measure quantity qb measure eg-measure weight qb dimension qb measuretype this would correspond to individual observations such as example 8 eg dataset2 a qb dataset qb structure eg dsd2 eg obs2a a qb observation qb dataset eg dataset2 sdmx-dimension reftime 2010-07-30 xsd date qb measuretype eg-measure weight eg-measure weight 1.3 eg obs2b a qb observation qb dataset eg dataset2 sdmx-dimension reftime 30-07-2010 xsd date qb measuretype eg-measure quantity eg-measure quantity 42 note the duplication of having the measure property show up both as the property that carries the measured value and as the value of the measure dimension. we accept this duplication as necessary to ensure the uniform cube dimension mechanism and a uniform way of declaring and using measure properties on all kinds of datasets. those familiar with sdmx should also note that in the rdf representation there is no need for a separate primary measure which subsumes each of the individual measures those individual measures are used directly. extension vocabularies could address the round-tripping of the sdmx primary measure by use of a separate annotation on the data structure definition. 7. expressing data sets 7.1 data sets and observations a resource representing the entire data set is created and typed as qb dataset and linked to the corresponding data structure definition via the qb structure property. pitfall note the capitalization of qb dataset which differs from the capitalization in other vocabularies such as void dataset and dcat dataset. this unusual capitalization is chosen for compatibility with the sdmx standard. the same applies to the related property qb dataset. each observation is represented as an instance of type qb observation. in the basic case then values for each of the attributes dimensions and measurements are attached directly to the observation remember that these components are all rdf properties the observation is linked to the containing data set using the qb dataset property. thus for our running example we might expect to have example 9 eg dataset-le1 a qb dataset rdfs label life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en qb structure eg dsd-le eg o1 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo newport_00pr eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m sdmx-attribute unitmeasure http dbpedia.org resource year eg lifeexpectancy 76.7 eg o2 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo cardiff_00pt eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m sdmx-attribute unitmeasure http dbpedia.org resource year eg lifeexpectancy 78.7 eg o3 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo monmouthshire_00pp eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m sdmx-attribute unitmeasure http dbpedia.org resource year eg lifeexpectancy 76.6 this normalized structure makes it easy to query and combine data sets but there is some redundancy here. for example the unit of measure for the life expectancy is uniform across the whole data set and does not change between observations. to cater for situations like this the data cube vocabulary allows components to be attached at a high level in the nested structure. indeed if we re-examine our original data structure declaration we see that we declared the unit of measure to be attached at the data set level. so an shortened version of the example is example 10 eg dataset-le1 a qb dataset rdfs label life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en qb structure eg dsd-le sdmx-attribute unitmeasure http dbpedia.org resource year eg o1 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo newport_00pr eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 76.7 eg o2 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo cardiff_00pt eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 78.7 eg o3 a qb observation qb dataset eg dataset-le1 eg refarea ex-geo monmouthshire_00pp eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 76.6 in a data set containing just observations with no intervening structure then each observation must have a complete set of dimension values along with all the measure values. if the set is structured by using slices then further abbreviation is possible as discussed in the next section. 7.2 slices and groups of observations slices allow us to group subsets of observations together. this is not intended to represent arbitrary selections from the observations but uniform slices through the cube in which one or more of the dimension values are fixed. slices may be used for a number of reasons to guide consuming applications in how to present the data e.g. to organize data as a set of time series to provide an identity uri for the slice to enable it to be annotated or externally referenced to reduce the verbosity of the data set by only stating each fixed dimensional value once. to illustrate the use of slices let us group the sample data set into geographic series. that will enable us to refer to e.g. male life expectancy observations for 2004-2006 and guide applications to present a comparative chart across regions. we first define the structure of the slices we want by associating a slice key with the data structure definition. this is done by creating a qb slicekey to list the component properties which must be dimensions which will be fixed in the slice. the key is attached to the dsd using qb slicekey. for example example 11 eg slicebyregion a qb slicekey rdfs label slice by region en rdfs comment slice by grouping regions together fixing sex and time values en qb componentproperty eg refperiod sdmx-dimension sex eg dsd-le-slice1 a qb datastructuredefinition qb component qb dimension eg refarea qb order 1 qb dimension eg refperiod qb order 2 qb dimension sdmx-dimension sex qb order 3 qb measure eg lifeexpectancy qb attribute sdmx-attribute unitmeasure qb componentattachment qb dataset qb slicekey eg slicebyregion in the instance data then slices are represented by instances of qb slice which link to the observations in the slice via qb observation and to the key by means of qb slicestructure. data sets indicate the slices they contain by means of qb slice. thus in our example we would have example 12 eg dataset-le2 a qb dataset rdfs label life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en qb structure eg dsd-le-slice2 sdmx-attribute unitmeasure http dbpedia.org resource year qb slice eg slice2 eg slice2 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m qb observation eg o1b eg o2b eg o3b eg o1b a qb observation qb dataset eg dataset-le2 eg refarea ex-geo newport_00pr eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 76.7 eg o2b a qb observation qb dataset eg dataset-le2 eg refarea ex-geo cardiff_00pt eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 78.7 eg o3b a qb observation qb dataset eg dataset-le2 eg refarea ex-geo monmouthshire_00pp eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m eg lifeexpectancy 76.6 note that here we are still repeating the dimension values on the individual observations. this normalized representation means that a consuming application can still query for observed values uniformly without having to first parse the data structure definition and search for slice definitions. if it is desired this redundancy can be reduced by declaring different attachment levels for the dimensions. for example example 13 eg dsd-le-slice3 a qb datastructuredefinition qb component qb dimension eg refarea qb order 1 qb dimension eg refperiod qb order 2 qb componentattachment qb slice qb dimension sdmx-dimension sex qb order 3 qb componentattachment qb slice qb measure eg lifeexpectancy qb attribute sdmx-attribute unitmeasure qb componentattachment qb dataset qb slicekey eg slicebyregion eg dataset-le3 a qb dataset rdfs label life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en qb structure eg dsd-le-slice3 sdmx-attribute unitmeasure http dbpedia.org resource year qb slice eg slice3 eg slice3 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m qb observation eg o1c eg o2c eg o3c eg o1c a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 76.7 eg o2c a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 78.7 eg o3c a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 76.6 there are also situations in which a publisher wishes to group a set of observations together for ease of access or presentation purposes but where that set is not defined by simply fixing a set of dimension values. for example in representing weather observations it can be desirable to group together the latest observation available from each station even though each observation may have been taken at a different time. for those situations the data cube vocabulary supports qb observationgroup. a qb observationgroup can contain an arbitrary collection of observations. a qb slice is a special case of a qb observationgroup. 8. concept schemes and code lists 8.1 coded values for components properties the values for dimensions within a data set must be unambiguously defined. they may be typed values e.g. xsd datetime for time instances or codes drawn from some code list. similarly many attributes used in data sets represent coded values from some controlled term list rather than free text descriptions. in the data cube vocabulary such codes are represented by uri references in the usual rdf fashion. sometimes appropriate uri sets already exist for the relevant dimensions e.g. the representations of area and time periods in our running example in other cases the data set being converted may use controlled terms from some scheme which does not yet have associated uris. in those cases we recommend use of skos representing the individual code values using skos concept and the overall set of admissible values using skos conceptscheme or skos collection. we illustrate this with an example drawn from the translation of the sdmx cog code list for gender as used already in our worked example. the relevant subset of this code list is example 14 sdmx-code sex a skos conceptscheme skos preflabel code list for sex sex codelist scheme en rdfs label code list for sex sex codelist scheme en skos notation cl_sex skos note this code list provides the gender. en skos definition http sdmx.org wp-content uploads 2009 01 02_sdmx_cog_annex_2_cl_2009.pdf rdfs seealso sdmx-code sex sdmx-code sex skos hastopconcept sdmx-code sex-f sdmx-code sex skos hastopconcept sdmx-code sex-m sdmx-code sex a rdfs class owl class rdfs subclassof skos concept rdfs label code list for sex sex codelist class en rdfs comment this code list provides the gender. en rdfs seealso sdmx-code sex sdmx-code sex-f a skos concept sdmx-code sex skos topconceptof sdmx-code sex skos preflabel female en skos notation f skos inscheme sdmx-code sex sdmx-code sex-m a skos concept sdmx-code sex skos topconceptof sdmx-code sex skos preflabel male en skos notation m skos inscheme sdmx-code sex skos preflabel is used to give a name to the code skos note gives a description and skos notation can be used to record a short form code which might appear in other serializations. the skos specification skos-reference recommends the generation of a custom datatype for each use of skos notation but here the notation is not intended for use within rdf encodings it merely documents the notation used in other representations which do not use such a datatype it is convenient and good practice when developing a code list to also create a class to denote all the codes within the code list irrespective of hierarchical structure. this allows the range of an qb componentproperty to be defined by using rdfs range which then permits standard rdf closed-world checkers to validate use of the code list without requiring custom sdmx-rdf-aware tooling. we do that in the above example by using the common convention that the class name is the same as that of the concept scheme but with leading upper case. this code list can then be associated with a coded property such as a dimension example 15 eg sex a qb dimensionproperty qb codedproperty qb codelist sdmx-code sex rdfs range sdmx-code sex explicitly declaring the code list using qb codelist is not mandatory but can be helpful in those cases where a concept scheme has been defined. 8.2 hierarchical code lists in some cases code lists have a hierarchical structure. in particular this is used in sdmx when the data cube includes aggregations of data values e.g. aggregating a measure across geographic regions hierarchical code lists should be represented using the skos narrower relationship or a sub-property of it to link from the skos hastopconcept codes down through the tree or lattice of child codes. in some publishing tool chains the corresponding transitive closure skos narrowertransitive will be automatically inferred. the use of skos narrower makes it possible to declare new concept schemes which extend an existing scheme by adding additional aggregation layers on top. all items are linked to the scheme via skos inscheme. 8.3 non-skos hierarchies it is sometimes convenient to be able to specify a hierarchical arrangement of concepts other than through the use of the skos relation skos narrower. there are several situations where this is useful for example in some cases publishers wish to be able to reuse existing reference data as their code lists. this particularly occurs where a geographic or admin-geographic hierarchy is already maintained by a separate authority but which uses non-skos containment or part-of relationships. where such maintained reference data is to be reused there can be multiple hierarchies which relate the same codes. in particular a set of geographic entities may participate in both a geographic-containment hierarchy and an administrative hierarchy which do not precisely align. the data cube vocabulary supports this situation through the qb hierarchicalcodelist class. an instance of qb hierarchicalcodelist defines a set of root concepts in the hierarchy qb hierarchyroot and a parent-to-child relationship qb parentchildproperty which links a term in the hierarchy to its immediate sub-terms. thus a qb hierarchicalcodelist is similar to a skos conceptscheme in which qb hierarchyroot plays the same role as skos hastopconcept and the value of qb parentchildproperty plays the same role as skos narrower. in the case where a code list is already available as a skos concept scheme or collection or could reasonable me made so then those should be used directly. qb hierarchicalcodelist is provided for cases where the terms are not available as skos but are available in some other rdf representation suitable for reuse. for example the ordnance survey of great britain publishes a geographic hierarchy which has eleven roots european regions such as wales scotland the south west and uses a spatial relations ontology to define a containment hierarchy. this could be represented as a qb hierarchicalcodelist using the following. example 16 prefix spatial http data.ordnancesurvey.co.uk ontology spatialrelations eg gbgeohierarchy a qb hierarchicalcodelist rdfs label geographic hierarchy for great britain en qb hierarchyroot http data.ordnancesurvey.co.uk id 7000000000041427 south west http data.ordnancesurvey.co.uk id 7000000000041426 west midlands http data.ordnancesurvey.co.uk id 7000000000041421 south east http data.ordnancesurvey.co.uk id 7000000000041430 yorkshire the humber http data.ordnancesurvey.co.uk id 7000000000041423 east midlands http data.ordnancesurvey.co.uk id 7000000000041425 eastern http data.ordnancesurvey.co.uk id 7000000000041428 london http data.ordnancesurvey.co.uk id 7000000000041431 north west http data.ordnancesurvey.co.uk id 7000000000041422 north east http data.ordnancesurvey.co.uk id 7000000000041424 wales http data.ordnancesurvey.co.uk id 7000000000041429 scotland qb parentchildproperty spatial contains eg geodimension a qb dimensionproperty qb codelist eg gbgeohierarchy note that in some cases the hierarchy to be reused may only have a property relating child concepts to parent concepts. this situation is handled by declaring the qb parentchildproperty to be the owl inverseof of the child-to-parent property. for example example 17 prefix spatial http data.ordnancesurvey.co.uk ontology spatialrelations eg gbgeohierarchy a qb hierarchicalcodelist qb parentchildproperty owl inverseof spatial within future extensions of data cube may support additional sub classes of qb hierarchicalcodelist for example to declare hierarchies in which each parent is a disjoint union of its children. 8.4 aggregation the use of skos or non-skos hierarchies makes it possible to publish aggregated statistics for the non-leaf concepts in the hierarchy. the data cube vocabulary itself imposes no constraints on how such aggregation is done. indeed in statistical applications the appropriate statistical corrections to make to aggregated values may be non-trivial and dependent on the data and precise uow.acc.tab.analysis methodology. similarly in other applications such as olap a number of different aggregation operators are commonly used. vocabulary terms to represent the aggregation operations employed within a given dataset and how one dataset might be derived from another are not supported in this version of the data cube specification. this area may be addressed by future extensions to data cube. 9. dataset metadata datasets should be marked up with metadata to support discovery presentation and processing. dublin core terms dc11 should be used for representing the key metadata annotations commonly needed for datasets. the rdfs terms for display label rdfs label descriptive comment rdfs comment should be given as well for compatibility with earlier versions of data cube and common rdf practice. the recommend core set of metadata terms is dct title rdfs label may be same as dct title dct description rdfs comment may be same as dct description dct issued dct modified dct subject dct publisher dct license other documents notably dcat provide additional recommendations for metadata terms for data sets which may be used for describing data cube datasets. 9.1 categorizing a data set publishers of statistics often categorize their data sets into different statistical domains such as education labour or transportation. we encourage use of dct subject to record such a classification of a whole data set. the classification terms can include coarse grained classifications such as the list of subject-matter domains from the sdmx content-oriented guidelines and fine grained classifications to support discovery of data sets. the classification schemes are typically represented using the skos vocabulary. for convenience the smdx subject-matter domains have been encoded as a skos concept scheme at http purl.org linked-data sdmx 2009 subject#. thus our sample dataset might be marked up by example 18 eg dataset1 a qb dataset rdfs label life expectancy en dct title life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en dct description life expectancy within welsh unitary authorities extracted from stats wales en dct issued 2010-08-11 xsd date dct subject sdmx-subject 3.2 regional and small area statistics sdmx-subject 1.4 health eg wales wales where eg wales is a skos concept drawn from an appropriate controlled vocabulary for places. 9.2 describing publishers the organization that publishes a dataset should be recorded as part of the dataset metadata. again we recommend use of the dublin core term dct publisher for this. the organization should be represented as an instance of foaf agent or some more specific subclass such as org organization org example 19 eg dataset1 a qb dataset dct publisher http example.com meta#organization http example.com meta#organization a org organization foaf agent rdfs label example org extension vocabularies may provide additional metadata properties and may impose constraints on what metadata must be provided. 10. abbreviated and normalized data cubes in normal form then the qb observations which make up a data cube have property values for each of the required dimensions attributes and measures as declared in the associated data structure definition. this form for a data cube is termed normalized. it is a convenient format for querying data and makes it possible to write uniform queries which extract sets of observations including from across multiple cubes. however the verbosity of a fully normalized representation incurs overheads in transmission and storage of data cubes which may be problematic in some settings. note that abbreviated form is provided as an option and there is requirement that it be used. in many settings standard compression techniques can eliminate much of the overhead of normalized form. to address this the data cube vocabulary supports a notion of an abbreviated format in which component properties may be attached to other levels in the data cube. specifically they may be attached to a qb dataset or qb slice. in those cases the attached property is taken to be applied to all the qb observation instances associated with that attachment point. for illustration see example 4 in which the unit of measure is declared as to be attached to the whole data set and need not be repeated for every observation. it is also possible to attach attributes to a qb measureproperty in which case the attribute is intended to apply only to that property and not to the observations in which that property occurs. 10.1 normalization algorithm we define these notions by means of a transformation algorithm which can normalize an abbreviated data cube. we express this transformation using the sparql 1.1 update language sparql11-update use of this notation does not imply that the transformation must be implemented this way. information exchanges using data cube may retain data in abbreviated form and use other techniques such as query rewriting to ease access may implement the normalization algorithm by other means or may handle all data in normalized form or any mix of these. the normalization algorithm comprises two sets of sparql update operations which should be applied in turn to a sparql dataset in which the default graph contains the data cube rdf graph to be normalized. the first update operation performs selective type and property closure operations. these serve two purposes. they ensure that rdf type assertions on instances of qb observation and qb slice may be omitted in an abbreviated data cube. they also simplify the second set of update operations by expanding the sub properties of qb componentproperty specifically qb dimension qb measure and qb attribute phase 1 type and property closure prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# prefix qb http purl.org linked-data cube# insert o rdf type qb observation where qb observation o insert o rdf type qb observation ds rdf type qb dataset where o qb dataset ds insert s rdf type qb slice where qb slice s. insert cs qb componentproperty p p rdf type qb dimensionproperty where cs qb dimension p insert cs qb componentproperty p p rdf type qb measureproperty where cs qb measure p insert cs qb componentproperty p p rdf type qb attributeproperty where cs qb attribute p these closure operations are implied by the rdfs semantics of the data cube vocabulary. data cube processors may apply full rdfs closure in place of the update operation defined here. the second update operation checks the components of the data structure definition of the data set for declared attachment levels. for each of the possible attachments levels it looks for occurrences of that component to be pushed down to the corresponding observations. phase 2 push down attachment levels prefix qb http purl.org linked-data cube# dataset attachments insert obs comp value where spec qb componentproperty comp qb componentattachment qb dataset dataset qb structure qb component spec comp value obs qb dataset dataset. slice attachments insert obs comp value where spec qb componentproperty comp qb componentattachment qb slice dataset qb structure qb component spec qb slice slice slice comp value qb observation obs dimension values on slices insert obs comp value where spec qb componentproperty comp comp a qb dimensionproperty dataset qb structure qb component spec qb slice slice slice comp value qb observation obs 11. well-formed cubes an instance of an rdf data cube should conform to a set of integrity constraints which we define in this section. a well-formed rdf data cube is an a rdf graph describing one or more instances of qb dataset for which each of the integrity checks defined here passes. a well-formed abbreviated rdf data cube is an a rdf graph which when expanded using the normalization algorithm yields a well-formed rdf data cube. 11.1 integrity constraints each integrity constraint is expressed as narrative prose and where possible a sparql sparql11-query ask query or query template. if the ask query is applied to an rdf graph then it will return true if that graph contains one or more data cube instances which violate the corresponding constraint. using sparql queries to express the integrity constraints does not imply that integrity checking must be performed this way. implementations are free to use alternative query formulations or alternative implementation techniques to perform equivalent checks. each integrity constraint query assumes the following set of prefix bindings prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# prefix rdfs http www.w3.org 2000 01 rdf-schema# prefix skos http www.w3.org 2004 02 skos core# prefix qb http purl.org linked-data cube# prefix xsd http www.w3.org 2001 xmlschema# prefix owl http www.w3.org 2002 07 owl# the complete set of constraints is listed below. ic-0. datatype consistency the rdf graph must be consistent under rdf d-entailment rdf-mt using a datatype map containing all the datatypes used within the graph. ic-1. unique dataset every qb observation has exactly one associated qb dataset. ask check observation has a data set obs a qb observation filter not exists obs qb dataset dataset1 union check has just one data set obs a qb observation qb dataset dataset1 dataset2 filter dataset1 dataset2 ic-2. unique dsd every qb dataset has exactly one associated qb datastructuredefinition. ask check dataset has a dsd dataset a qb dataset filter not exists dataset qb structure dsd union check has just one dsd dataset a qb dataset qb structure dsd1 dsd2 filter dsd1 dsd2 ic-3. dsd includes measure every qb datastructuredefinition must include at least one declared measure. ask dsd a qb datastructuredefinition filter not exists dsd qb component qb componentproperty a qb measureproperty ic-4. dimensions have range every dimension declared in a qb datastructuredefinition must have a declared rdfs range. ask dim a qb dimensionproperty filter not exists dim rdfs range ic-5. concept dimensions have code lists every dimension with range skos concept must have a qb codelist. ask dim a qb dimensionproperty rdfs range skos concept filter not exists dim qb codelist ic-6. only attributes may be optional the only components of a qb datastructuredefinition that may be marked as optional using qb componentrequired are attributes. ask dsd qb component componentspec componentspec qb componentrequired false xsd boolean qb componentproperty component filter not exists component a qb attributeproperty ic-7. slice keys must be declared every qb slicekey must be associated with a qb datastructuredefinition. ask slicekey a qb slicekey filter not exists a qb datastructuredefinition qb slicekey slicekey ic-8. slice keys consistent with dsd every qb componentproperty on a qb slicekey must also be declared as a qb component of the associated qb datastructuredefinition. ask slicekey a qb slicekey qb componentproperty prop dsd qb slicekey slicekey filter not exists dsd qb component qb componentproperty prop ic-9. unique slice structure each qb slice must have exactly one associated qb slicestructure. ask slice has a key slice a qb slice filter not exists slice qb slicestructure key union slice has just one key slice a qb slice qb slicestructure key1 key2 filter key1 key2 ic-10. slice dimensions complete every qb slice must have a value for every dimension declared in its qb slicestructure. ask slice qb slicestructure qb componentproperty dim filter not exists slice dim ic-11. all dimensions required every qb observation has a value for each dimension declared in its associated qb datastructuredefinition. ask obs qb dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty filter not exists obs dim ic-12. no duplicate observations no two qb observations in the same qb dataset may have the same value for all dimensions. ask filter allequal for each pair of observations test if all the dimension values are the same select min equal as allequal where obs1 qb dataset dataset obs2 qb dataset dataset filter obs1 obs2 dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty obs1 dim value1 obs2 dim value2 bind value1 value2 as equal group by obs1 obs2 ic-13. required attributes every qb observation has a value for each declared attribute that is marked as required. ask obs qb dataset qb structure qb component component component qb componentrequired true xsd boolean qb componentproperty attr filter not exists obs attr ic-14. all measures present in a qb dataset which does not use a measure dimension then each individual qb observation must have a value for every declared measure. ask observation in a non-measuretype cube obs qb dataset qb structure dsd filter not exists dsd qb component qb componentproperty qb measuretype verify every measure is present dsd qb component qb componentproperty measure measure a qb measureproperty filter not exists obs measure ic-15. measure dimension consistent in a qb dataset which uses a measure dimension then each qb observation must have a value for the measure corresponding to its given qb measuretype. ask observation in a measuretype-cube obs qb dataset qb structure dsd qb measuretype measure dsd qb component qb componentproperty qb measuretype must have value for its measuretype filter not exists obs measure ic-16. single measure on measure dimension observation in a qb dataset which uses a measure dimension then each qb observation must only have a value for one measure by ic-15 this will be the measure corresponding to its qb measuretype ask observation with measuretype obs qb dataset qb structure dsd qb measuretype measure omeasure any measure on the observation dsd qb component qb componentproperty qb measuretype qb component qb componentproperty omeasure omeasure a qb measureproperty must be the same as the measuretype filter omeasure measure ic-17. all measures present in measures dimension cube in a qb dataset which uses a measure dimension then if there is a observation for some combination of non-measure dimensions then there must be other observations with the same non-measure dimension values for each of the declared measures. ask count number of other measures found at each point select nummeasures count obs2 as count where find the dsds and check how many measures they have select dsd count m as nummeasures where dsd qb component qb componentproperty m. m a qb measureproperty group by dsd observation in measuretype cube obs1 qb dataset qb structure dsd qb dataset dataset qb measuretype m1 other observation at same dimension value obs2 qb dataset dataset qb measuretype m2 filter not exists dsd qb component qb componentproperty dim filter dim qb measuretype dim a qb dimensionproperty obs1 dim v1 obs2 dim v2. filter v1 v2 group by obs1 nummeasures having count nummeasures ic-18. consistent data set links if a qb dataset d has a qb slice s and s has an qb observation o then the qb dataset corresponding to o must be d. ask dataset qb slice slice slice qb observation obs filter not exists obs qb dataset dataset ic-19. codes from code list if a dimension property has a qb codelist then the value of the dimension property on every qb observation must be in the code list. the following integrity check queries must be applied to an rdf graph which contains the definition of the code list as well as the data cube to be checked. in the case of a skos conceptscheme then each concept must be linked to the scheme using skos inscheme. in the case of a skos collection then the collection must link to each concept or to nested collections using skos member. if the collection uses skos memberlist then the entailment of skos member values defined by s36 in skos-reference must be materialized before this check is applied. ask obs qb dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty qb codelist list list a skos conceptscheme obs dim v filter not exists v a skos concept skos inscheme list ask obs qb dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty qb codelist list list a skos collection obs dim v filter not exists v a skos concept list skos member+ v ic-20. codes from hierarchy if a dimension property has a qb hierarchicalcodelist with a non-blank qb parentchildproperty then the value of that dimension property on every qb observation must be reachable from a root of the hierarchy using zero or more hops along the qb parentchildproperty links. this check cannot be made by a simple fixed sparql query. instead a query template is supplied. an instance of the template should be generated for each qb hierarchicalcodelist which has an iri value for its qb parentchildproperty. that is for each binding of p in the following instantiation query select p where hierarchy a qb hierarchicalcodelist qb parentchildproperty p filter isiri p the template is then instantiated by replacing the string p by the iri found by the instantiation query. the template is ask obs qb dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty qb codelist list list a qb hierarchicalcodelist obs dim v filter not exists list qb hierarchyroot p v ic-21. codes from hierarchy inverse if a dimension property has a qb hierarchicalcodelist with an inverse qb parentchildproperty then the value of that dimension property on every qb observation must be reachable from a root of the hierarchy using zero or more hops along the inverse qb parentchildproperty links. this check cannot be made by a simple fixed sparql query. instead a query template is supplied. an instance of the template should be generated for each qb hierarchicalcodelist which has a blank-node value for its qb parentchildproperty with an associated inverse property. that is for each binding of p in the following instantiation query select p where hierarchy a qb hierarchicalcodelist qb parentchildproperty pcp filter isblank pcp pcp owl inverseof p filter isiri p the template is then instantiated by replacing the string p by the iri found by the instantiation query. the template is ask obs qb dataset qb structure qb component qb componentproperty dim dim a qb dimensionproperty qb codelist list list a qb hierarchicalcodelist obs dim v filter not exists list qb hierarchyroot p v 12. vocabulary reference 12.1 datasets see section expressing data sets. class qb dataset sub class of qb attachable equivalent to scovo dataset represents a collection of observations possibly organized into various slices conforming to some common dimensional structure. 12.2 observations see section expressing data sets. class qb observation sub class of qb attachable equivalent to scovo item a single observation in the cube may have one or more associated measured values. property qb dataset domain qb observation range qb dataset indicates the data set of which this observation is a part. property qb observation domain qb observationgroup range qb observation indicates a observation contained within this slice of the data set. 12.3 slices see section slices. class qb observationgroup a possibly arbitrary group of observations. class qb slice sub class of qb attachable qb observationgroup denotes a subset of a dataset defined by fixing a subset of the dimensional values component properties on the slice. property qb slice domain qb dataset range qb slice sub property of qb observationgroup indicates a subset of a dataset defined by fixing a subset of the dimensional values. property qb observationgroup domain range qb observationgroup indicates a group of observations. the domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single dataset. 12.4 dimensions attributes measures see section dimensions attributes and measures. class qb attachable abstract superclass for everything that can have attributes and dimensions. class qb componentproperty sub class of rdf property abstract super-class of all properties representing dimensions attributes or measures. class qb dimensionproperty sub class of qb componentproperty qb codedproperty the class of component properties which represent the dimensions of the cube. class qb attributeproperty sub class of qb componentproperty the class of component properties which represent attributes of observations in the cube e.g. unit of measurement. class qb measureproperty sub class of qb componentproperty the class of component properties which represent the measured value of the phenomenon being observed. class qb codedproperty sub class of qb componentproperty superclass of all coded component properties. 12.5 reusable general purpose component properties see section measure dimensions. property qb measuretype domain range qb measureproperty generic measure dimension the value of this dimension indicates which measure from the set of measures in the dsd is being given by the observation. 12.6 data structure definitions see section componentspecifications and datastructuredefinitions. class qb datastructuredefinition sub class of qb componentset defines the structure of a dataset or slice. property qb structure domain qb dataset range qb datastructuredefinition indicates the structure to which this data set conforms property qb component domain qb datastructuredefinition range qb componentspecification indicates a component specification which is included in the structure of the dataset. 12.7 component specifications for qualifying component use in a dsd see section componentspecifications and datastructuredefinitions. class qb componentspecification sub class of qb componentset used to define properties of a component attribute dimension etc which are specific to its usage in a dsd. class qb componentset abstract class of things which reference one or more componentproperties property qb componentproperty domain qb componentset range qb componentproperty indicates a componentproperty i.e. attribute dimension expected on a dataset or a dimension fixed in a slicekey. property qb order domain qb componentspecification range xsd int indicates a priority order for the components of sets with this structure used to guide presentations lower order numbers come before higher numbers un-numbered components come last. property qb componentrequired domain qb componentspecification range xsd boolean indicates whether a component property is required true or optional false in the context of a dsd. only applicable to components corresponding to an attribute. defaults to false optional property qb componentattachment domain qb componentspecification range rdfs class indicates the level at which the component property should be attached this might be an qb dataset qb slice or qb observation or a qb measureproperty. property qb dimension domain range qb dimensionproperty sub property of qb componentproperty an alternative to qb componentproperty which makes explicit that the component is a dimension. property qb measure domain range qb measureproperty sub property of qb componentproperty an alternative to qb componentproperty which makes explicit that the component is a measure. property qb attribute domain range qb attributeproperty sub property of qb componentproperty an alternative to qb componentproperty which makes explicit that the component is a attribute. property qb measuredimension domain range qb dimensionproperty sub property of qb componentproperty an alternative to qb componentproperty which makes explicit that the component is a measure dimension. 12.8 slice definitions see section slices. class qb slicekey sub class of qb componentset denotes a subset of the component properties of a dataset which are fixed in the corresponding slices. property qb slicestructure domain qb slice range qb slicekey indicates the slice key corresponding to this slice. property qb slicekey domain qb datastructuredefinition range qb slicekey indicates a slice key which is used for slices in this dataset. 12.9 concepts see section concept schemes and code lists. property qb concept domain qb componentproperty range skos concept gives the concept which is being measured or indicated by a componentproperty. property qb codelist domain qb codedproperty range owl unionof skos conceptscheme skos collection qb hierarchicalcodelist gives the code list associated with a codedproperty. 12.10 non-skos hierarchies see section non-skos hierarchies. class qb hierarchicalcodelist represents a generalized hierarchy of concepts which can be used for coding. the hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to their child concept the same concepts may be members of multiple hierarchies provided that different qb parentchildproperty values are used for each hierarchy. property qb hierarchyroot domain qb hierarchicalcodelist specifies a root of the hierarchy. a hierarchy may have multiple roots but must have at least one. property qb parentchildproperty domain qb hierarchicalcodelist range rdf property specifies a property which relates a parent concept in the hierarchy to a child concept. note that a child may have more than one parent. a. acknowledgements this work is based on a collaboration that was initiated in a workshop on publishing statistical datasets in sdmx and the semantic web hosted by ons in sunningdale united kingdom in february 2010 and continued at the odaf 2010 workshop in tilburg. the authors would like to thank all the participants at those workshops for their input into this work but especially arofan gregory for his patient explanations of sdmx and insight in the need and requirements for a core data cube representation. the editors would like to thank john sheridan for his comments suggestions and support for the original work. many individuals provided valuable comments on this specification as it made its way through the w3c process. we would like to especially acknowledge the contributions of benedikt kaempgen sarven capadisli and curran kelleher. b. change history changes since the w3c proposed recommendation 17 december 2013 none. corrected typo in reference to eg wales in example 18. fixed broken like to scovo reference haus09 added namespace and links to vocabulary file to the abstract for ease of reference. added missing closure rule to infer rdf type of qb dataset from its use in a qb observation. corrected mis-statement of domain of qb slicekey in the reference section was correct in the rest of the specification corrected typo in statement of ic-8. minor typographical corrections. updated references including moving turtle to a non-normative reference. removed cr specific text on implementation feedback and at risk features. changes since w3c last call working draft 12 march 2013 section 1. modified diagram to clarify that qb slice is a sub class of qb observationgroup section 5.1. moved description of data set here for greater clarity was in section 7. section 6.2. further clarified the status of cog rdf vocabularies. example 6.3. retitled for clarity. section 6.4 corrected with multiple observations to with multiple measures section 6.4. added mention of qb attachable previously only mentioned in the vocabulary reference section 6.5. rewritten description of handling of multiple measures for greater clarity. section 6.5.2. removed reference to sdmx-in-rdf vocabulary which is not part of this specification. section 6.5.2 clarified that the special nature of qb measuretype is a divergence from sdmx. section 7. change terminology from internal and external metadata to structural and reference metadata for compatibility with sdmx terminology. section 8.2. clarified that sub properties of skos narrower may be used. section 8.3. removed third bullet on the motivation for qb hierarchicalcodelist exhaustivity and mutual exclusion added reference to sdmx user guide as additional background context. added complete example data cube as an appendix providing a link to it from earlier on in the document. section 10. clarified that abbreviated form is an option and there is no requirement to use it in place of normalized form. section 12.2. corrected domain of qb observation from qb slice to qb observationgroup was given correctly in the ontology and text body but was mis-stated in the reference section. references. updated org reference. various typographical corrections. changes since w3c working draft 5 april 2012 added section on criteria for well-formed cubes. issue-29 added section on normalization algorithm for handling abbreviated cubes. added conformance section. clarified that qb componentrequired is only applicable to attributes and that it defaults to optional. moved vocabulary reference into the normative body of the specification adding hyperlinks for all qb terms. added section on non-skos hierarchies. issue-31. added note that aggregation operations and inter-cube relations are out of scope for this version. issue-30. added qb observationgroup as a generalization of qb slice. issue-33. removed qb subslice as being problematic in how they interact with attachment levels. issue-34. generalized range of qb codelist to allow skos collection. issue-39. moved namespace definitions to a normative section within the body of the specification. moved jeni tennison from being listed as an author to being a contributor. c. complete example data cube this is a complete data cube encoding of the running example introduced in section 5.4. it uses the abbreviated format so that it can be concisely presented. it passes all the integrity checks when the declaration of sdmx-dimension sex is included from http purl.org linked-data sdmx 2009 dimension and so is a well-formed abbreviated data cube. prefix rdf http www.w3.org 1999 02 22-rdf-syntax-ns# prefix rdfs http www.w3.org 2000 01 rdf-schema# prefix owl http www.w3.org 2002 07 owl# prefix xsd http www.w3.org 2001 xmlschema# prefix skos http www.w3.org 2004 02 skos core# prefix void http rdfs.org ns void# prefix dct http purl.org dc terms prefix foaf http xmlns.com foaf 0.1 prefix org http www.w3.org ns org# prefix admingeo http data.ordnancesurvey.co.uk ontology admingeo prefix interval http reference.data.gov.uk def intervals prefix qb http purl.org linked-data cube# prefix sdmx-concept http purl.org linked-data sdmx 2009 concept# prefix sdmx-dimension http purl.org linked-data sdmx 2009 dimension# prefix sdmx-attribute http purl.org linked-data sdmx 2009 attribute# prefix sdmx-measure http purl.org linked-data sdmx 2009 measure# prefix sdmx-metadata http purl.org linked-data sdmx 2009 metadata# prefix sdmx-code http purl.org linked-data sdmx 2009 code# prefix sdmx-subject http purl.org linked-data sdmx 2009 subject# prefix ex-geo http example.org geo# prefix eg http example.org ns# data set eg dataset-le3 a qb dataset dct title life expectancy en rdfs label life expectancy en rdfs comment life expectancy within welsh unitary authorities extracted from stats wales en dct description life expectancy within welsh unitary authorities extracted from stats wales en dct publisher eg organization dct issued 2010-08-11 xsd date dct subject sdmx-subject 3.2 regional and small area statistics sdmx-subject 1.4 health ex-geo wales wales qb structure eg dsd-le3 sdmx-attribute unitmeasure http dbpedia.org resource year qb slice eg slice1 eg slice2 eg slice3 eg slice4 eg slice5 eg slice6 eg organization a org organization foaf agent rdfs label example org en data structure definition eg dsd-le3 a qb datastructuredefinition qb component the dimensions qb dimension eg refarea qb order 1 qb dimension eg refperiod qb order 2 qb componentattachment qb slice qb dimension sdmx-dimension sex qb order 3 qb componentattachment qb slice the measure s qb component qb measure eg lifeexpectancy the attributes qb component qb attribute sdmx-attribute unitmeasure qb componentrequired true xsd boolean qb componentattachment qb dataset slices qb slicekey eg slicebyregion eg slicebyregion a qb slicekey rdfs label slice by region en rdfs comment slice by grouping regions together fixing sex and time values en qb componentproperty eg refperiod sdmx-dimension sex dimensions and measures eg refperiod a rdf property qb dimensionproperty rdfs label reference period en rdfs subpropertyof sdmx-dimension refperiod rdfs range interval interval qb concept sdmx-concept refperiod eg refarea a rdf property qb dimensionproperty rdfs label reference area en rdfs subpropertyof sdmx-dimension refarea rdfs range admingeo unitaryauthority qb concept sdmx-concept refarea eg lifeexpectancy a rdf property qb measureproperty rdfs label life expectancy en rdfs subpropertyof sdmx-measure obsvalue rdfs range xsd decimal observations column 1 eg slice1 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m qb observation eg o11 eg o12 eg o13 eg o14 eg o11 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 76.7 eg o12 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 78.7 eg o13 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 76.6 eg o14 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 75.5 column 2 eg slice2 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2004-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-f qb observation eg o21 eg o22 eg o23 eg o24 eg o21 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 80.7 eg o22 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 83.3 eg o23 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 81.3 eg o24 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 79.1 column 3 eg slice3 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2005-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m qb observation eg o31 eg o32 eg o33 eg o34 eg o31 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 77.1 eg o32 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 78.6 eg o33 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 76.5 eg o34 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 75.5 column 4 eg slice4 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2005-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-f qb observation eg o41 eg o42 eg o43 eg o44 eg o41 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 80.9 eg o42 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 83.7 eg o43 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 81.5 eg o44 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 79.4 column 5 eg slice5 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2006-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-m qb observation eg o51 eg o52 eg o53 eg o54 eg o51 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 77.0 eg o52 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 78.7 eg o53 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 76.6 eg o54 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 74.9 column 6 eg slice6 a qb slice qb slicestructure eg slicebyregion eg refperiod http reference.data.gov.uk id gregorian-interval 2006-01-01t00 00 00 p3y sdmx-dimension sex sdmx-code sex-f qb observation eg o61 eg o62 eg o63 eg o64 eg o61 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo newport_00pr eg lifeexpectancy 81.5 eg o62 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo cardiff_00pt eg lifeexpectancy 83.4 eg o63 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo monmouthshire_00pp eg lifeexpectancy 81.7 eg o64 a qb observation qb dataset eg dataset-le3 eg refarea ex-geo merthyr_tdfil_00ph eg lifeexpectancy 79.6 d. references d.1 normative references dc11 dublin core metadata initiative. dublin core metadata element set version 1.1. july 1999. dublin core recommendation. url http dublincore.org documents dcmi-terms owl2-primer pascal hitzler markus kr tzsch bijan parsia peter patel-schneider sebastian rudolph. owl 2 web ontology language primer second edition 11 december 2012. w3c recommendation. url http www.w3.org tr owl2-primer rdf-concepts graham klyne jeremy carroll. resource description framework rdf concepts and abstract syntax. 10 february 2004. w3c recommendation. url http www.w3.org tr rdf-concepts rdf-mt patrick hayes. rdf semantics. 10 february 2004. w3c recommendation. url http www.w3.org tr rdf-mt rdf-primer frank manola eric miller. rdf primer. 10 february 2004. w3c recommendation. url http www.w3.org tr rdf-primer rdf-schema dan brickley ramanathan guha. rdf schema 1.1. 9 january 2014. w3c proposed edited recommendation. url http www.w3.org tr rdf-schema rfc2119 s. bradner. key words for use in rfcs to indicate requirement levels. march 1997. internet rfc 2119. url http www.ietf.org rfc rfc2119.txt skos-reference alistair miles sean bechhofer. skos simple knowledge organization system reference. 18 august 2009. w3c recommendation. url http www.w3.org tr skos-reference sparql11-query steven harris andy seaborne. sparql 1.1 query language. 21 march 2013. w3c recommendation. url http www.w3.org tr sparql11-query sparql11-update paul gearon alexandre passant axel polleres. sparql 1.1 update. 21 march 2013. w3c recommendation. url http www.w3.org tr sparql11-update d.2 informative references cog sdmx contnent oriented guidelines http sdmx.org page_id 11 dcat fadi maali john erickson. data catalog vocabulary dcat w3c candidate recommendation. 5 november 2013. url http www.w3.org tr vocab-dcat foaf dan brickley libby miller. foaf vocabulary specification 0.98. 9 august 2010. url http xmlns.com foaf spec haus09 michael hausenblas wolfgang halb yves raimond lee feigenbaum danny ayers. scovo using statistics on the web of data. 2009. url http mhausenblas.info pubs eswc09-inuse-scovo.pdf lod linked data http linkeddata.org olap online analytical processing data cubes http en.wikipedia.org wiki olap_cube org dave reynolds. the organzation ontology. 25 june 2013. w3c candidate recommendation. url http www.w3.org tr vocab-org os-geo ordnance survey administrative geography ontology http data.ordnancesurvey.co.uk ontology admingeo scovo the statistical core vocabulary http sw.joanneum.at scovo schema.html sdmx-guide sdmx user guide version 2009.1 january 2009. statistical data and metadata exchange initiative. url http sdmx.org wp-content uploads 2009 02 sdmx-userguide-version2009-1-71.pdf sdmx20 sdmx information model uml conceptual design version 2.0 november 2005 statistical data and metadata exchange initiative. url http sdmx.org docs 2_0 sdmx_2_0 20section_02_informationmodel.pdf skos-primer antoine isaac ed summers. skos simple knowledge organization system primer. 18 august 2009. w3c note. url http www.w3.org tr skos-primer turtle eric prud hommeaux gavin carothers. rdf 1.1 turtle. 9 january 2014. w3c proposed recommendation. url http www.w3.org tr turtle void keith alexander richard cyganiak michael hausenblas jun zhao. describing linked datasets with the void vocabulary. 3 march 2011. w3c note. url http www.w3.org tr void 