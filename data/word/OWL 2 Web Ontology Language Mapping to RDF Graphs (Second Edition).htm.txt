owl 2 web ontology language mapping to rdf graphs second edition owl 2 web ontology language mapping to rdf graphs second edition w3c recommendation 11 december 2012 this version http www.w3.org tr 2012 rec-owl2-mapping-to-rdf-20121211 latest version series 2 http www.w3.org tr owl2-mapping-to-rdf latest recommendation http www.w3.org tr owl-mapping-to-rdf previous version http www.w3.org tr 2012 per-owl2-mapping-to-rdf-20121018 editors peter f. patel-schneider nuance communications boris motik university of oxford contributors in alphabetical order bernardo cuenca grau university of oxford ian horrocks university of oxford bijan parsia university of manchester alan ruttenberg science commons creative commons michael schneider fzi research center for information technology please refer to the errata for this document which may include some normative corrections. a color-coded version of this document showing changes made since the previous version is also available. this document is also available in these non-normative formats pdf version. see also translations. copyright 2012 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract the owl 2 web ontology language informally owl 2 is an ontology language for the semantic web with formally defined meaning. owl 2 ontologies provide classes properties individuals and data values and are stored as semantic web documents. owl 2 ontologies can be used along with information written in rdf and owl 2 ontologies themselves are primarily exchanged as rdf documents. the owl 2 document overview describes the overall state of owl 2 and should be read before other owl 2 documents. this document defines the mapping of owl 2 ontologies into rdf graphs and vice versa. status of this document may be superseded this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr summary of changes there have been no substantive changes since the previous version. for details on the minor changes see the change log and color-coded diff. please send comments please send any comments to public-owl-comments@w3.org public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions. open discussion among developers is welcome at public-owl-dev@w3.org public archive endorsed by w3c this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. patents this document was produced by a group operating under the 5 february 2004 w3c patent policy. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. table of contents 1 introduction and preliminaries 2 mapping from the structural specification to rdf graphs 2.1 translation of axioms without annotations 2.2 translation of annotations 2.3 translation of axioms with annotations 2.3.1 axioms that generate a main triple 2.3.2 axioms that are translated to multiple triples 2.3.3 axioms represented by blank nodes 3 mapping from rdf graphs to the structural specification 3.1 extracting declarations and the iris of the directly imported ontology documents 3.1.1 resolving included rdf graphs 3.1.2 parsing of the ontology header and declarations 3.2 populating an ontology 3.2.1 analyzing declarations 3.2.2 parsing of annotations 3.2.3 parsing of ontology annotations 3.2.4 parsing of expressions 3.2.5 parsing of axioms 4 appendix change log informative 4.1 changes since recommendation 4.2 changes since proposed recommendation 4.3 changes since candidate recommendation 4.4 changes since last call 5 acknowledgments 6 references 1 introduction and preliminaries this document defines two mappings between the structural specification of owl 2 owl 2 specification and rdf graphs rdf concepts the mapping presented in section 2 can be used to transform any owl 2 ontology o into an rdf graph t o the mapping presented in section 3 can be used to transform an rdf graph g satisfying certain restrictions into an owl 2 dl ontology og. these transformations do not incur any change in the formal meaning of the ontology. more precisely for any owl 2 dl ontology o let g t o be the rdf graph obtained by transforming o as specified in section 2 and let og be the owl 2 dl ontology obtained by applying the reverse transformation from section 3 to g then o and og are logically equivalent that is they have exactly the same set of models. the mappings presented in this document are backwards-compatible with that of owl 1 dl every owl 1 dl ontology encoded as an rdf graph can be mapped into a valid owl 2 dl ontology using the mapping from section 3 such that the resulting owl 2 dl ontology has exactly the same set of models as the original owl 1 dl ontology. the syntax for triples used in this document is the one used in the rdf semantics rdf semantics full iris are abbreviated using the prefixes from the owl 2 specification owl 2 specification owl 2 ontologies mentioned in this document should be understood as instances of the structural specification of owl 2 owl 2 specification when required these are written in this document using the functional-style syntax. the following notation is used throughout this document for referring to parts of rdf graphs x denotes an iri x denotes a blank node x denotes a blank node or an iri lt denotes a literal and xlt denotes a blank node an iri or a literal. the italicized keywords must must not should should not and may are used to specify normative features of owl 2 documents and tools and are interpreted as specified in rfc 2119 rfc 2119 2 mapping from the structural specification to rdf graphs this section defines a mapping of an owl 2 ontology o into an rdf graph t o the mapping is presented in three parts. section 2.1 shows how to translate axioms that do not contain annotations section 2.2 shows how to translate annotations and section 2.3 shows how to translate axioms containing annotations. 2.1 translation of axioms without annotations table 1 presents the operator t that maps an owl 2 ontology o into an rdf graph t o provided that no axiom in o is annotated. the mapping is defined recursively that is the mapping of a construct often depends on the mappings of its subconstructs but in a slightly unusual way if the mapping of a construct refers to the mapping of a subconstruct then the triples generated by the recursive invocation of the mapping on the subconstruct are added to the graph under construction and the main node of the mapping of the subconstruct is used in place of the recursive invocation itself. the definition of the operator t uses the operator tann in order to translate annotations. the operator tann is defined in section 2.2. it takes an annotation and an iri or a blank node and produces the triples that attach the annotation to the supplied object. in the mapping each generated blank node i.e. each blank node that does not correspond to an anonymous individual is fresh in each application of a mapping rule. furthermore possible conditions on the mapping rules are enclosed in curly braces finally the following conventions are used in this section to denote different parts of owl 2 ontologies op denotes an object property ope denotes an object property expression dp denotes a data property dpe denotes a data property expression ap denotes an annotation property c denotes a class ce denotes a class expression dt denotes a datatype dr denotes a data range u denotes an iri f denotes a constraining facet a denotes an individual named or anonymous a denotes a named individual lt denotes a literal as denotes an annotation source and av denotes an annotation value. in this section t seq y1 yn denotes the translation of a sequence of objects from the structural specification into an rdf list as shown in table 1. table 1. transformation to triples element e of the structural specification triples generated in an invocation of t e main node of t e seq rdf nil seq y1 yn x rdf first t y1 x rdf rest t seq y2 yn x ontology ontologyiri versioniri import importedontologyiri1 import importedontologyirik annotation1 annotationm axiom1 axiomn ontologyiri rdf type owl ontology ontologyiri owl versioniri versioniri ontologyiri owl imports importedontologyiri1 ontologyiri owl imports importedontologyirik tann annotation1 ontologyiri tann annotationm ontologyiri t axiom1 t axiomn ontologyiri ontology import importedontologyiri1 import importedontologyirik annotation1 annotationm axiom1 axiomn x rdf type owl ontology x owl imports importedontologyiri1 x owl imports importedontologyirik tann annotation1 x tann annotationm x t axiom1 t axiomn x c c dt dt op op dp dp ap ap u u a a abc@ rdf plainliteral abc abc@langtag rdf plainliteral abc langtag lt where lt is a literal of datatype other than rdf plainliteral lt declaration datatype dt t dt rdf type rdfs datatype declaration class c t c rdf type owl class declaration objectproperty op t op rdf type owl objectproperty declaration dataproperty dp t dp rdf type owl datatypeproperty declaration annotationproperty ap t ap rdf type owl annotationproperty declaration namedindividual a t a rdf type owl namedindividual objectinverseof op x owl inverseof t op x dataintersectionof dr1 drn x rdf type rdfs datatype x owl intersectionof t seq dr1 drn x dataunionof dr1 drn x rdf type rdfs datatype x owl unionof t seq dr1 drn x datacomplementof dr x rdf type rdfs datatype x owl datatypecomplementof t dr x dataoneof lt1 ltn x rdf type rdfs datatype x owl oneof t seq lt1 ltn x datatyperestriction dt f1 lt1 fn ltn x rdf type rdfs datatype x owl ondatatype t dt x owl withrestrictions t seq y1 yn y1 f1 lt1 yn fn ltn x objectintersectionof ce1 cen x rdf type owl class x owl intersectionof t seq ce1 cen x objectunionof ce1 cen x rdf type owl class x owl unionof t seq ce1 cen x objectcomplementof ce x rdf type owl class x owl complementof t ce x objectoneof a1 an x rdf type owl class x owl oneof t seq a1 an x objectsomevaluesfrom ope ce x rdf type owl restriction x owl onproperty t ope x owl somevaluesfrom t ce x objectallvaluesfrom ope ce x rdf type owl restriction x owl onproperty t ope x owl allvaluesfrom t ce x objecthasvalue ope a x rdf type owl restriction x owl onproperty t ope x owl hasvalue t a x objecthasself ope x rdf type owl restriction x owl onproperty t ope x owl hasself true xsd boolean x objectmincardinality n ope x rdf type owl restriction x owl onproperty t ope x owl mincardinality n xsd nonnegativeinteger x objectmincardinality n ope ce x rdf type owl restriction x owl onproperty t ope x owl minqualifiedcardinality n xsd nonnegativeinteger x owl onclass t ce x objectmaxcardinality n ope x rdf type owl restriction x owl onproperty t ope x owl maxcardinality n xsd nonnegativeinteger x objectmaxcardinality n ope ce x rdf type owl restriction x owl onproperty t ope x owl maxqualifiedcardinality n xsd nonnegativeinteger x owl onclass t ce x objectexactcardinality n ope x rdf type owl restriction x owl onproperty t ope x owl cardinality n xsd nonnegativeinteger x objectexactcardinality n ope ce x rdf type owl restriction x owl onproperty t ope x owl qualifiedcardinality n xsd nonnegativeinteger x owl onclass t ce x datasomevaluesfrom dpe dr x rdf type owl restriction x owl onproperty t dpe x owl somevaluesfrom t dr x datasomevaluesfrom dpe1 dpen dr n 2 x rdf type owl restriction x owl onproperties t seq dpe1 dpen x owl somevaluesfrom t dr x dataallvaluesfrom dpe dr x rdf type owl restriction x owl onproperty t dpe x owl allvaluesfrom t dr x dataallvaluesfrom dpe1 dpen dr n 2 x rdf type owl restriction x owl onproperties t seq dpe1 dpen x owl allvaluesfrom t dr x datahasvalue dpe lt x rdf type owl restriction x owl onproperty t dpe x owl hasvalue t lt x datamincardinality n dpe x rdf type owl restriction x owl onproperty t dpe x owl mincardinality n xsd nonnegativeinteger x datamincardinality n dpe dr x rdf type owl restriction x owl onproperty t dpe x owl minqualifiedcardinality n xsd nonnegativeinteger x owl ondatarange t dr x datamaxcardinality n dpe x rdf type owl restriction x owl onproperty t dpe x owl maxcardinality n xsd nonnegativeinteger x datamaxcardinality n dpe dr x rdf type owl restriction x owl onproperty t dpe x owl maxqualifiedcardinality n xsd nonnegativeinteger x owl ondatarange t dr x dataexactcardinality n dpe x rdf type owl restriction x owl onproperty t dpe x owl cardinality n xsd nonnegativeinteger x dataexactcardinality n dpe dr x rdf type owl restriction x owl onproperty t dpe x owl qualifiedcardinality n xsd nonnegativeinteger x owl ondatarange t dr x subclassof ce1 ce2 t ce1 rdfs subclassof t ce2 equivalentclasses ce1 cen t ce1 owl equivalentclass t ce2 t cen-1 owl equivalentclass t cen disjointclasses ce1 ce2 t ce1 owl disjointwith t ce2 disjointclasses ce1 cen n 2 x rdf type owl alldisjointclasses x owl members t seq ce1 cen disjointunion c ce1 cen t c owl disjointunionof t seq ce1 cen subobjectpropertyof ope1 ope2 t ope1 rdfs subpropertyof t ope2 subobjectpropertyof objectpropertychain ope1 open ope t ope owl propertychainaxiom t seq ope1 open equivalentobjectproperties ope1 open t ope1 owl equivalentproperty t ope2 t open-1 owl equivalentproperty t open disjointobjectproperties ope1 ope2 t ope1 owl propertydisjointwith t ope2 disjointobjectproperties ope1 open n 2 x rdf type owl alldisjointproperties x owl members t seq ope1 open objectpropertydomain ope ce t ope rdfs domain t ce objectpropertyrange ope ce t ope rdfs range t ce inverseobjectproperties ope1 ope2 t ope1 owl inverseof t ope2 functionalobjectproperty ope t ope rdf type owl functionalproperty inversefunctionalobjectproperty ope t ope rdf type owl inversefunctionalproperty reflexiveobjectproperty ope t ope rdf type owl reflexiveproperty irreflexiveobjectproperty ope t ope rdf type owl irreflexiveproperty symmetricobjectproperty ope t ope rdf type owl symmetricproperty asymmetricobjectproperty ope t ope rdf type owl asymmetricproperty transitiveobjectproperty ope t ope rdf type owl transitiveproperty subdatapropertyof dpe1 dpe2 t dpe1 rdfs subpropertyof t dpe2 equivalentdataproperties dpe1 dpen t dpe1 owl equivalentproperty t dpe2 t dpen-1 owl equivalentproperty t dpen disjointdataproperties dpe1 dpe2 t dpe1 owl propertydisjointwith t dpe2 disjointdataproperties dpe1 dpen n 2 x rdf type owl alldisjointproperties x owl members t seq dpe1 dpen datapropertydomain dpe ce t dpe rdfs domain t ce datapropertyrange dpe dr t dpe rdfs range t dr functionaldataproperty dpe t dpe rdf type owl functionalproperty datatypedefinition dt dr t dt owl equivalentclass t dr haskey ce ope1 opem dpe1 dpen t ce owl haskey t seq ope1 opem dpe1 dpen sameindividual a1 an t a1 owl sameas t a2 t an-1 owl sameas t an differentindividuals a1 a2 t a1 owl differentfrom t a2 differentindividuals a1 an n 2 x rdf type owl alldifferent x owl members t seq a1 an classassertion ce a t a rdf type t ce objectpropertyassertion op a1 a2 t a1 t op t a2 objectpropertyassertion objectinverseof op a1 a2 t a2 t op t a1 negativeobjectpropertyassertion ope a1 a2 x rdf type owl negativepropertyassertion x owl sourceindividual t a1 x owl assertionproperty t ope x owl targetindividual t a2 datapropertyassertion dpe a lt t a t dpe t lt negativedatapropertyassertion dpe a lt x rdf type owl negativepropertyassertion x owl sourceindividual t a x owl assertionproperty t dpe x owl targetvalue t lt annotationassertion ap as av t as t ap t av subannotationpropertyof ap1 ap2 t ap1 rdfs subpropertyof t ap2 annotationpropertydomain ap u t ap rdfs domain t u annotationpropertyrange ap u t ap rdfs range t u 2.2 translation of annotations the operator tann which translates annotations and attaches them to an iri or a blank node is defined in table 2. table 2. translation of annotations annotation ann triples generated in an invocation of tann ann y annotation ap av t y t ap t av annotation annotation1 annotationn ap av t y t ap t av x rdf type owl annotation x owl annotatedsource t y x owl annotatedproperty t ap x owl annotatedtarget t av tann annotation1 x tann annotationn x let ann be the following annotation. annotation rdfs label peter griffin an invocation of tann ann a peter then produces the following triples. a peter rdfs label peter griffin let ann be the following annotation which is itself annotated. annotation annotation a author a seth_macfarlane rdfs label peter griffin an invocation of tann ann a peter then produces the following triples a peter rdfs label peter griffin x rdf type owl annotation x owl annotatedsource a peter x owl annotatedproperty rdfs label x owl annotatedtarget peter griffin x a author a seth_macfarlane 2.3 translation of axioms with annotations if an axiom ax contains embedded annotations annotation1 annotationm its serialization into rdf depends on the type of the axiom. let ax be the axiom that is obtained from ax by removing all axiom annotations. 2.3.1 axioms that generate a main triple if the row of table 1 corresponding to the type of ax contains a single main triple s p xlt then the axiom ax is translated into the following triples s p xlt x rdf type owl axiom x owl annotatedsource s x owl annotatedproperty p x owl annotatedtarget xlt tann annotation1 x tann annotationm x this is the case if ax is of type subclassof disjointclasses with two classes subobjectpropertyof without a property chain as the subproperty expression subdatapropertyof objectpropertydomain datapropertydomain objectpropertyrange datapropertyrange inverseobjectproperties functionalobjectproperty functionaldataproperty inversefunctionalobjectproperty reflexiveobjectproperty irreflexiveobjectproperty symmetricobjectproperty asymmetricobjectproperty transitiveobjectproperty disjointobjectproperties with two properties disjointdataproperties with two properties classassertion objectpropertyassertion datapropertyassertion declaration differentindividuals with two individuals or annotationassertion. consider the following subclass axiom subclassof annotation rdfs comment children are people. a child a person without the annotation the axiom would be translated into the following triple a child rdfs subclassof a person thus the annotated axiom is transformed into the following triples a child rdfs subclassof a person x rdf type owl axiom x owl annotatedsource a child x owl annotatedproperty rdfs subclassof x owl annotatedtarget a person x rdfs comment children are people. for ax of type disjointunion subobjectpropertyof with a subproperty chain or haskey the first triple from the corresponding row of table 1 is the main triple and it is subjected to the transformation described above the other triples from the corresponding row of table 1 called side triples are output without any change. consider the following subproperty axiom subobjectpropertyof annotation rdfs comment an aunt is a mother s sister. objectpropertychain a hasmother a hassister a hasaunt without the annotation the axiom would be translated into the following triples a hasaunt owl propertychainaxiom y1. y1 rdf first a hasmother y1 rdf rest y2 y2 rdf first a hassister y2 rdf rest rdf nil in order to capture the annotation on the axiom the first triple plays the role of the main triple for the axiom so it is represented using a fresh blank node x in order to be able to attach the annotation to it. the original triple is output alongside all other triples as well. x rdf type owl axiom x owl annotatedsource a hasaunt x owl annotatedproperty owl propertychainaxiom x owl annotatedtarget y1 x rdfs comment an aunt is a mother s sister. a hasaunt owl propertychainaxiom y1. y1 rdf first a hasmother y1 rdf rest y2 y2 rdf first a hassister y2 rdf rest rdf nil consider the following key axiom haskey annotation rdfs comment ssn uniquely determines a person. a person a hasssn without the annotation the axiom would be translated into the following triples a person owl haskey y y rdf first a hasssn y rdf rest rdf nil in order to capture the annotation on the axiom the first triple plays the role of the main triple for the axiom so it is represented using a fresh blank node x in order to be able to attach the annotation to it. x rdf type owl axiom x owl annotatedsource a person x owl annotatedproperty owl haskey x owl annotatedtarget y x rdfs comment ssn uniquely determines a person. a person owl haskey y y rdf first a hasssn y rdf rest rdf nil 2.3.2 axioms that are translated to multiple triples if the axiom ax is of type equivalentclasses equivalentobjectproperties equivalentdataproperties or sameindividual its translation into rdf can be broken up into several rdf triples because rdf can only represent binary relations in this case each of the rdf triples obtained by the translation of ax is transformed as described in previous section and the annotations are repeated for each of the triples obtained in the translation. consider the following individual equality axiom sameindividual annotation a source a fox a meg a megan a megan_griffin this axiom is first split into the following equalities between pairs of individuals and the annotation is repeated on each axiom obtained in this process sameindividual annotation a source a fox a meg a megan sameindividual annotation a source a fox a megan a megan_griffin each of these axioms is now transformed into triples as explained in the previous section a meg owl sameas a megan x1 rdf type owl axiom x1 owl annotatedsource a meg x1 owl annotatedproperty owl sameas x1 owl annotatedtarget a megan x1 a source a fox a megan owl sameas a megan_griffin x2 rdf type owl axiom x2 owl annotatedsource a megan x2 owl annotatedproperty owl sameas x2 owl annotatedtarget a megan_griffin x2 a source a fox 2.3.3 axioms represented by blank nodes if the axiom ax is of type negativeobjectpropertyassertion negativedatapropertyassertion disjointclasses with more than two classes disjointobjectproperties with more than two properties disjointdataproperties with more than two properties or differentindividuals with more than two individuals then its translation already requires introducing a blank node x. in such cases ax is translated by first translating ax into x as shown in table 1 and then attaching the annotations of ax to x. consider the following negative object property assertion negativeobjectpropertyassertion annotation a author a seth_macfarlane a brotherof a chris a stewie even without the annotation this axiom would be represented using a blank node. the annotation can readily be attached to this node so the axiom is transformed into the following triples x rdf type owl negativepropertyassertion x owl sourceindividual a chris x owl assertionproperty a brotherof x owl targetindividual a stewie x a author a seth_macfarlane 3 mapping from rdf graphs to the structural specification this section specifies the results of steps cp 2.2 and cp 3.3 of the canonical parsing process from section 3.6 of the owl 2 specification owl 2 specification on an ontology document d that can be parsed into an rdf graph g. an owl 2 tool may implement these steps in any way it chooses however the results must be structurally equivalent to the ones defined in the following sections. these steps do not depend on the rdf syntax used to encode the rdf graph in d therefore the ontology document d is identified in this section with the corresponding rdf graph g. an rdf syntax ontology document is any document accessible from some given iri that can be parsed into an rdf graph and that then be transformed into an owl 2 ontology by the canonical parsing process instantiated as specified in this section. the following sections contain rules in which triple patterns are matched to g. note that if a triple pattern contains a variable number of triples the maximal possible subset of g must be matched. the following notation is used in the patterns the notation nn_int n can be matched to any literal whose value n is a nonnegative integer. possible conditions on the pattern are enclosed in curly braces some patterns use optional parts which are enclosed in square brackets the abbreviation t seq y1 yn denotes the pattern corresponding to rdf lists as shown in table 3. when a list pattern is matched to g all list variables xi and xj with i j must be matched to different nodes furthermore it must not be possible to match the list pattern to two maximal subsets of g such that some list variable in the first pattern instance is matched to the same node as some possibly different variable in the second pattern instance. this is necessary in order to detect malformed lists such as lists with internal cycles lists that share tails and lists that cross. table 3. patterns corresponding to rdf lists sequence s triples corresponding to t s main node of t s seq rdf nil seq y x rdf first y x rdf rest rdf nil x seq y1 yn n 1 x1 rdf first y1 x1 rdf rest x2 xn rdf first yn xn rdf rest rdf nil x1 3.1 extracting declarations and the iris of the directly imported ontology documents this section specifies the result of step cp 2.2 of the canonical parsing process on an rdf graph g. 3.1.1 resolving included rdf graphs for backwards compatibility with owl 1 dl if g contains an owl imports triple pointing to an rdf document encoding an rdf graph g where g does not have an ontology header this owl imports triple is interpreted as an include rather than an import that is the triples of g are included into g and are not parsed into a separate ontology. to achieve this the following transformation is applied to g as long as the following rule is applicable to g. if g contains a pair of triples of the form x rdf type owl ontology x owl imports y and the values for x and y have not already been considered the following actions are performed the document accessible from the iri y is retrieved using the augmented retrieval process from section 3.2 of the owl 2 specification owl 2 specification the document is parsed into an rdf graph g if the parsing succeeds and the graph g does not contain a triple of the form z rdf type owl ontology. then g is merged as in the rdf semantics rdf semantics into g and the triple x owl imports y is removed from g. 3.1.2 parsing of the ontology header and declarations next the ontology header is extracted from g by matching patterns from table 4 to g. it must be possible to match exactly one such pattern to g in exactly one way. the matched triples are removed from g. the set imp g of the iris of ontology documents that are directly imported into g contains exactly all z1 zk that are matched in the pattern. table 4. parsing of the ontology header if g contains this pattern... then the ontology header has this form. x rdf type owl ontology x owl versioniri y x owl imports z1 x owl imports zk k 0 and the following triple pattern cannot be matched in g u w x u rdf type owl ontology w rdf type owl ontologyproperty ontology x y import z1 import zk x rdf type owl ontology x owl imports z1 x owl imports zk k 0 and the following triple pattern cannot be matched in g u w x u rdf type owl ontology w rdf type owl ontologyproperty ontology import z1 import zk next for backwards compatibility with owl 1 dl certain redundant triples are removed from g. in particular if the triple pattern from the left-hand side of table 5 is matched in g then the triples on the right-hand side of table 5 are removed from g. table 5. triples to be removed for backwards compatibility with owl 1 dl if g contains this pattern... then these triples are removed from g. x rdf type owl ontology x rdf type owl ontology x rdf type owl class x rdf type rdfs class x rdf type rdfs class x rdf type rdfs datatype x rdf type rdfs class x rdf type rdfs class x rdf type owl datarange x rdf type rdfs class x rdf type rdfs class x rdf type owl restriction x rdf type rdfs class x rdf type rdfs class x rdf type owl restriction x rdf type owl class x rdf type owl class x rdf type owl objectproperty x rdf type rdf property x rdf type rdf property x rdf type owl functionalproperty x rdf type rdf property x rdf type rdf property x rdf type owl inversefunctionalproperty x rdf type rdf property x rdf type rdf property x rdf type owl transitiveproperty x rdf type rdf property x rdf type rdf property x rdf type owl datatypeproperty x rdf type rdf property x rdf type rdf property x rdf type owl annotationproperty x rdf type rdf property x rdf type rdf property x rdf type owl ontologyproperty x rdf type rdf property x rdf type rdf property x rdf type rdf list x rdf first y x rdf rest z x rdf type rdf list next for backwards compatibility with owl 1 dl g is modified such that declarations can be properly extracted in the next step. when a triple pattern from the first column of table 6 is matched in g the matching triples are replaced in g with the triples from the second column. this matching phase stops when matching a pattern and replacing it as specified does not change g. note that g is a set and thus cannot contain duplicate triples so this last condition prevents infinite matches. table 6. additional declaration triples if g contains this pattern... then the matched triples are replaced in g with these triples. x rdf type owl ontologyproperty x rdf type owl annotationproperty x rdf type owl inversefunctionalproperty x rdf type owl objectproperty x rdf type owl inversefunctionalproperty x rdf type owl transitiveproperty x rdf type owl objectproperty x rdf type owl transitiveproperty x rdf type owl symmetricproperty x rdf type owl objectproperty x rdf type owl symmetricproperty next the set of declarations decl g is extracted from g according to table 7. the matched triples are not removed from g the triples from table 7 can contain annotations so in order to correctly parse the annotations they will be matched again in the step described in section 3.2.5. table 7. parsing declarations in g if g contains this pattern... then this declaration is added to decl g x rdf type owl class declaration class x x rdf type rdfs datatype declaration datatype x x rdf type owl objectproperty declaration objectproperty x x rdf type owl datatypeproperty declaration dataproperty x x rdf type owl annotationproperty declaration annotationproperty x x rdf type owl namedindividual declaration namedindividual x x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget owl class declaration class y x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget rdfs datatype declaration datatype y x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget owl objectproperty declaration objectproperty y x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget owl datatypeproperty declaration dataproperty y x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget owl annotationproperty declaration annotationproperty y x rdf type owl axiom x owl annotatedsource y x owl annotatedproperty rdf type x owl annotatedtarget owl namedindividual declaration namedindividual y finally the set rind of blank nodes used in reification is identified. this is done by initially setting rind and then applying the patterns shown in table 8. the matched triples are not deleted from g. table 8. identifying reification blank nodes if g contains this pattern then x is added to rind. x rdf type owl axiom x rdf type owl annotation x rdf type owl alldisjointclasses x rdf type owl alldisjointproperties x rdf type owl alldifferent x rdf type owl negativepropertyassertion 3.2 populating an ontology this section specifies the result of step cp 3.3 of the canonical parsing process on an rdf graph g the corresponding instance og of the ontology class and the set alldecl g of all declarations for g computed as specified in step cp 3.1 of the canonical parsing process. 3.2.1 analyzing declarations the following functions map an iri or a blank node x occurring in g into an object of the structural specification. in particular ce x maps x into a class expression dr x maps x into a data range ope x maps x into an object property expression dpe x maps x into a data property expression and ap x maps x into an annotation property. initially these functions are undefined for all iris and blank nodes occurring in g this is written as ce x dr x ope x dpe x and ap x the functions are updated as parsing progresses. all of the following conditions must be satisfied at any given point in time during parsing. for each x at most one of ope x dpe x and ap x is defined. for each x at most one of ce x and dr x is defined. furthermore the value of any of these functions for any x must not be redefined during parsing i.e. if a function is not undefined for x no attempt should be made to change the function s value for x functions ce dr ope dpe and ap are initialized as shown in table 9. table 9. initialization of ce dr ope dpe and ap if alldecl g contains this declaration... then perform this assignment. declaration class x ce x a class with the iri x declaration datatype x dr x a datatype with the iri x declaration objectproperty x ope x an object property with the iri x declaration dataproperty x dpe x a data property with the iri x declaration annotationproperty x ap x an annotation property with the iri x 3.2.2 parsing of annotations the annotations in g are parsed next. the function ann assigns a set of annotations ann x to each iri or blank node x. this function is initialized by setting ann x for each each iri or blank node x. next the triple patterns from table 10 are matched in g and for each matched pattern ann x is extended with an annotation from the right column. each time one of these triple patterns is matched the matched triples are removed from g. this process is repeated until no further matches are possible. table 10. parsing of annotations if g contains this pattern... then this annotation is added to ann x x y xlt ap y and there is no blank node w such that g contains the following triples w rdf type owl annotation w owl annotatedsource x w owl annotatedproperty y w owl annotatedtarget xlt annotation y xlt x y xlt w rdf type owl annotation w owl annotatedsource x w owl annotatedproperty y w owl annotatedtarget xlt ap y and no other triple in g contains w in subject or object position annotation ann w y xlt 3.2.3 parsing of ontology annotations let x be the node that was matched in g to x or x according to the patterns from table 4 then ann x determines the set of ontology annotations of og. 3.2.4 parsing of expressions next functions ope dr and ce are extended as shown in tables 11 12 and 13 as well as in tables 14 and 15. the patterns in the latter two tables are not generated by the mapping from section 2 but they can be present in rdf graphs that encode owl 1 dl ontologies. each time a pattern is matched the matched triples are removed from g. pattern matching is repeated until no triple pattern can be matched to g. table 11. parsing object property expressions if g contains this pattern... then ope x is set to this object property expression. x owl inverseof y ope x and ope y objectinverseof ope y table 12. parsing of data ranges if g contains this pattern... then dr x is set to this data range. x rdf type rdfs datatype x owl intersectionof t seq y1 yn n 2 and dr yi for each 1 i n dataintersectionof dr y1 dr yn x rdf type rdfs datatype x owl unionof t seq y1 yn n 2 and dr yi for each 1 i n dataunionof dr y1 dr yn x rdf type rdfs datatype x owl datatypecomplementof y dr y datacomplementof dr y x rdf type rdfs datatype x owl oneof t seq lt1 ltn n 1 dataoneof lt1 ltn x rdf type rdfs datatype x owl ondatatype y x owl withrestrictions t seq z1 zn z1 w1 lt1 zn wn ltn dr y is a datatype datatyperestriction dr y w1 lt1 wn ltn table 13. parsing of class expressions if g contains this pattern... then ce x is set to this class expression. x rdf type owl class x owl intersectionof t seq y1 yn n 2 and ce yi for each 1 i n objectintersectionof ce y1 ce yn x rdf type owl class x owl unionof t seq y1 yn n 2 and ce yi for each 1 i n objectunionof ce y1 ce yn x rdf type owl class x owl complementof y ce y objectcomplementof ce y x rdf type owl class x owl oneof t seq y1 yn n 1 objectoneof y1 yn x rdf type owl restriction x owl onproperty y x owl somevaluesfrom z ope y and ce z objectsomevaluesfrom ope y ce z x rdf type owl restriction x owl onproperty y x owl allvaluesfrom z ope y and ce z objectallvaluesfrom ope y ce z x rdf type owl restriction x owl onproperty y x owl hasvalue z ope y objecthasvalue ope y z x rdf type owl restriction x owl onproperty y x owl hasself true xsd boolean ope y objecthasself ope y x rdf type owl restriction x owl minqualifiedcardinality nn_int n x owl onproperty y x owl onclass z ope y and ce z objectmincardinality n ope y ce z x rdf type owl restriction x owl maxqualifiedcardinality nn_int n x owl onproperty y x owl onclass z ope y and ce z objectmaxcardinality n ope y ce z x rdf type owl restriction x owl qualifiedcardinality nn_int n x owl onproperty y x owl onclass z ope y and ce z objectexactcardinality n ope y ce z x rdf type owl restriction x owl mincardinality nn_int n x owl onproperty y ope y objectmincardinality n ope y x rdf type owl restriction x owl maxcardinality nn_int n x owl onproperty y ope y objectmaxcardinality n ope y x rdf type owl restriction x owl cardinality nn_int n x owl onproperty y ope y objectexactcardinality n ope y x rdf type owl restriction x owl onproperty y x owl hasvalue lt dpe y datahasvalue dpe y lt x rdf type owl restriction x owl onproperty y x owl somevaluesfrom z dpe y and dr z datasomevaluesfrom dpe y dr z x rdf type owl restriction x owl onproperties t seq y1 yn x owl somevaluesfrom z n 1 dpe yi for each 1 i n and dr z datasomevaluesfrom dpe y1 dpe yn dr z x rdf type owl restriction x owl onproperty y x owl allvaluesfrom z dpe y and dr z dataallvaluesfrom dpe y dr z x rdf type owl restriction x owl onproperties t seq y1 yn x owl allvaluesfrom z n 1 dpe yi for each 1 i n and dr z dataallvaluesfrom dpe y1 dpe yn dr z x rdf type owl restriction x owl minqualifiedcardinality nn_int n x owl onproperty y x owl ondatarange z dpe y and dr z datamincardinality n dpe y dr z x rdf type owl restriction x owl maxqualifiedcardinality nn_int n x owl onproperty y x owl ondatarange z dpe y and dr z datamaxcardinality n dpe y dr z x rdf type owl restriction x owl qualifiedcardinality nn_int n x owl onproperty y x owl ondatarange z dpe y and dr z dataexactcardinality n dpe y dr z x rdf type owl restriction x owl mincardinality nn_int n x owl onproperty y dpe y datamincardinality n dpe y x rdf type owl restriction x owl maxcardinality nn_int n x owl onproperty y dpe y datamaxcardinality n dpe y x rdf type owl restriction x owl cardinality nn_int n x owl onproperty y dpe y dataexactcardinality n dpe y table 14. parsing of data ranges for compatibility with owl 1 dl if g contains this pattern... then dr x is set to this object property expression. x rdf type owl datarange x owl oneof t seq lt1 ltn n 1 dataoneof lt1 ltn x rdf type owl datarange x owl oneof t seq datacomplementof rdfs literal table 15. parsing of class expressions for compatibility with owl 1 dl if g contains this pattern... then ce x is set to this class expression. x rdf type owl class x owl unionof t seq owl nothing x rdf type owl class x owl unionof t seq y ce y ce y x rdf type owl class x owl intersectionof t seq owl thing x rdf type owl class x owl intersectionof t seq y ce y ce y x rdf type owl class x owl oneof t seq owl nothing 3.2.5 parsing of axioms next og is populated with axioms. for clarity the axiom patterns are split into two tables. table 16 presents the patterns for axioms without annotations. annotated axioms are parsed as follows in case of the patterns for owl alldisjointclasses owl alldisjointproperties owl alldifferent and owl negativepropertyassertion axiom annotations are defined by ann x for all other axioms axiom annotations are obtained by additionally matching patterns from table 17 in g during axiom matching. the axioms in g are parsed as follows all annotated axioms are parsed first. only when no pattern for annotated axioms can be matched in g then the patterns for axioms without annotations are matched. in either case each time a triple pattern is matched the matched triples are removed from g. table 16. parsing of axioms without annotations if g contains this pattern... then the following axiom is added to og. x rdf type owl class declaration class x x rdf type rdfs datatype declaration datatype x x rdf type owl objectproperty declaration objectproperty x x rdf type owl datatypeproperty declaration dataproperty x x rdf type owl annotationproperty declaration annotationproperty x x rdf type owl namedindividual declaration namedindividual x x rdfs subclassof y ce x and ce y subclassof ce x ce y x owl equivalentclass y ce x and ce y equivalentclasses ce x ce y x owl disjointwith y ce x and ce y disjointclasses ce x ce y x rdf type owl alldisjointclasses x owl members t seq y1 yn n 2 and ce yi for each 1 i n disjointclasses ce y1 ce yn x owl disjointunionof t seq y1 yn n 2 ce x and ce yi for each 1 i n disjointunion ce x ce y1 ce yn x rdfs subpropertyof y ope x and ope y subobjectpropertyof ope x ope y x owl propertychainaxiom t seq y1 yn n 2 ope yi for each 1 i n and ope x subobjectpropertyof objectpropertychain ope y1 ope yn ope x x owl equivalentproperty y ope x and ope y equivalentobjectproperties ope x ope y x owl propertydisjointwith y ope x and ope y disjointobjectproperties ope x ope y x rdf type owl alldisjointproperties x owl members t seq y1 yn n 2 and ope yi for each 1 i n disjointobjectproperties ope y1 ope yn x rdfs domain y ope x and ce y objectpropertydomain ope x ce y x rdfs range y ope x and ce y objectpropertyrange ope x ce y x owl inverseof y ope x and ope y inverseobjectproperties ope x ope y x rdf type owl functionalproperty ope x functionalobjectproperty ope x x rdf type owl inversefunctionalproperty ope x inversefunctionalobjectproperty ope x x rdf type owl reflexiveproperty ope x reflexiveobjectproperty ope x x rdf type owl irreflexiveproperty ope x irreflexiveobjectproperty ope x x rdf type owl symmetricproperty ope x symmetricobjectproperty ope x x rdf type owl asymmetricproperty ope x asymmetricobjectproperty ope x x rdf type owl transitiveproperty ope x transitiveobjectproperty ope x x rdfs subpropertyof y dpe x and dpe y subdatapropertyof dpe x dpe y x owl equivalentproperty y dpe x and dpe y equivalentdataproperties dpe x dpe y x owl propertydisjointwith y dpe x and dpe y disjointdataproperties dpe x dpe y x rdf type owl alldisjointproperties x owl members t seq y1 yn n 2 and dpe yi for each 1 i n disjointdataproperties dpe y1 dpe yn x rdfs domain y dpe x and ce y datapropertydomain dpe x ce y x rdfs range y dpe x and dr y datapropertyrange dpe x dr y x rdf type owl functionalproperty dpe x functionaldataproperty dpe x x owl equivalentclass y dr x amd dr y datatypedefinition dr x dr y x owl haskey t seq y1 yk ce x and the sequence y1 yk can be partitioned into disjoint sequences z1 zm and w1 wn such that m 0 or n 0 or both and ope zi for each 1 i m and dpe wj for each 1 j n haskey ce x ope z1 ope zm dpe w1 dpe wn x owl sameas y sameindividual x y x owl differentfrom y differentindividuals x y x rdf type owl alldifferent x owl members t seq x1 xn n 2 differentindividuals x1 xn x rdf type owl alldifferent x owl distinctmembers t seq x1 xn n 2 differentindividuals x1 xn x rdf type y ce y classassertion ce y x x y z ope y objectpropertyassertion ope y x z x rdf type owl negativepropertyassertion x owl sourceindividual w x owl assertionproperty y x owl targetindividual z ope y negativeobjectpropertyassertion ope y w z x y lt dpe y datapropertyassertion dpe y x lt x rdf type owl negativepropertyassertion x owl sourceindividual w x owl assertionproperty y x owl targetvalue lt dpe y negativedatapropertyassertion dpe y w lt x rdf type owl deprecatedclass annotationassertion owl deprecated x true xsd boolean x rdf type owl deprecatedproperty annotationassertion owl deprecated x true xsd boolean x rdfs subpropertyof y ap x and ap y subannotationpropertyof ap x ap y x rdfs domain y ap x annotationpropertydomain ap x y x rdfs range y ap x annotationpropertyrange ap x y table 17. parsing of annotated axioms if g contains this pattern... then the following axiom is added to og. s p xlt x rdf type owl axiom x owl annotatedsource s x owl annotatedproperty p x owl annotatedtarget xlt s p xlt is the main triple of an axiom according to table 16 and g contains possible necessary side triples for the axiom the result is the axiom corresponding to s p xlt and possible side triples that additionally contains the annotations ann x next for each blank node or iri x such that x rind and for each annotation annotation annotation1 annotationn ap y ann x with n possibly being equal to zero the following annotation assertion is added to og annotationassertion annotation1 annotationn ap x y finally the patterns from table 18 are matched in g and the resulting axioms are added to og. these patterns are not generated by the mapping from section 2 but they can be present in rdf graphs that encode owl 1 dl ontologies. note that the patterns from the table do not contain triples of the form x rdf type owl class because such triples are removed while parsing the entity declarations as specified in section 3.1.2. each time a triple pattern is matched the matched triples are removed from g. table 18. parsing of axioms for compatibility with owl 1 dl if g contains this pattern... then the following axiom is added to og. x owl complementof y ce x and ce y equivalentclasses ce x objectcomplementof ce y x owl unionof t seq ce x equivalentclasses ce x owl nothing x owl unionof t seq y ce x and ce y equivalentclasses ce x ce y x owl unionof t seq y1 yn n 2 ce x and ce yi for each 1 i n equivalentclasses ce x objectunionof ce y1 ce yn x owl intersectionof t seq ce x equivalentclasses ce x owl thing x owl intersectionof t seq y ce x and ce y equivalentclasses ce x ce y x owl intersectionof t seq y1 yn n 2 ce x and ce yi for each 1 i n equivalentclasses ce x objectintersectionof ce y1 ce yn x owl oneof t seq ce x equivalentclasses ce x owl nothing x owl oneof t seq y1 yn n 1 and ce x equivalentclasses ce x objectoneof y1 yn at the end of this process the graph g must be empty. 4 appendix change log informative 4.1 changes since recommendation this section summarizes the changes to this document since the recommendation of 27 october 2009. with the publication of the xml schema definition language xsd 1.1 part 2 datatypes recommendation of 5 april 2012 the elements of owl 2 which are based on xsd 1.1 are now considered required and the note detailing the optional dependency on the xsd 1.1 candidate recommendation of 30 april 2009 has been removed from the status of this document section. minor typographical errors were corrected as detailed on the owl 2 errata page. 4.2 changes since proposed recommendation this section summarizes the changes to this document since the proposed recommendation of 22 september 2009. the two arguments in the classassertion axiom in table 16 were swapped to bring the axiom in line with the functional-style syntax. 4.3 changes since candidate recommendation this section summarizes the changes to this document since the candidate recommendation of 11 june 2009. two minor bugs were fixed in the reverse mappings of inverseof and haskey. 4.4 changes since last call this section summarizes the changes to this document since the last call working draft of 21 april 2009. the rdf vocabulary for annotations was changed owl subject owl predicate and owl object became respectively owl annotatedsource owl annotatedproperty and owl annotatedtarget. several lists of syntax were updated to track a previous change in structural specification and functional-style syntax. two of the examples were fixed. some minor editorial changes were made. 5 acknowledgments the starting point for the development of owl 2 was the owl1.1 member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series. the working group also considered postponed issues from the webont working group. this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole. the editors extend special thanks to markus kr tzsch fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi and evren sirin clark parsia for their thorough reviews. the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozen-bolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles st-quentin and lirmm sandro hawke w3c mit ivan herman w3c ercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus kr tzsch fzi carsten lutz universit t bremen deborah l. mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f. patel-schneider bell labs research alcatel-lucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap. 6 references owl 2 specification owl 2 web ontology language structural specification and functional-style syntax second edition boris motik peter f. patel-schneider bijan parsia eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-syntax-20121211 latest version available at http www.w3.org tr owl2-syntax rdf concepts resource description framework rdf concepts and abstract syntax. graham klyne and jeremy j. carroll eds. w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-concepts-20040210 latest version available as http www.w3.org tr rdf-concepts rdf semantics rdf semantics. patrick hayes ed. w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-rdf-mt-20040210 latest version available as http www.w3.org tr rdf-mt rfc 2119 rfc 2119 key words for use in rfcs to indicate requirement levels. network working group s. bradner. ietf march 1997 http www.ietf.org rfc rfc2119.txt 