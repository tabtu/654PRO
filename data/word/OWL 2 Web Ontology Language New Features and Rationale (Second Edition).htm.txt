owl 2 web ontology language new features and rationale second edition owl 2 web ontology language new features and rationale second edition w3c recommendation 11 december 2012 this version http www.w3.org tr 2012 rec-owl2-new-features-20121211 latest version series 2 http www.w3.org tr owl2-new-features latest recommendation http www.w3.org tr owl-new-features previous version http www.w3.org tr 2012 per-owl2-new-features-20121018 editors christine golbreich university of versailles saint-quentin and lirmm evan k. wallace national institute of standards and technology nist contributors peter f. patel-schneider nuance communications please refer to the errata for this document which may include some normative corrections. a color-coded version of this document showing changes made since the previous version is also available. this document is also available in these non-normative formats pdf version. see also translations. copyright 2012 w3c mit ercim keio all rights reserved. w3c liability trademark and document use rules apply. abstract the owl 2 web ontology language informally owl 2 is an ontology language for the semantic web with formally defined meaning. owl 2 ontologies provide classes properties individuals and data values and are stored as semantic web documents. owl 2 ontologies can be used along with information written in rdf and owl 2 ontologies themselves are primarily exchanged as rdf documents. the owl 2 document overview describes the overall state of owl 2 and should be read before other owl 2 documents. this document is a simple introduction to the new features of the owl 2 web ontology language including an explanation of the differences between the initial version of owl and owl 2. the document also presents the requirements that have motivated the design of the main new features and their rationale from a theoretical and implementation perspective. status of this document may be superseded this section describes the status of this document at the time of its publication. other documents may supersede this document. a list of current w3c publications and the latest revision of this technical report can be found in the w3c technical reports index at http www.w3.org tr summary of changes there have been no substantive changes since the previous version. for details on the minor changes see the change log and color-coded diff. please send comments please send any comments to public-owl-comments@w3.org public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions. open discussion among developers is welcome at public-owl-dev@w3.org public archive endorsed by w3c this document has been reviewed by w3c members by software developers and by other w3c groups and interested parties and is endorsed by the director as a w3c recommendation. it is a stable document and may be used as reference material or cited from another document. w3c s role in making the recommendation is to draw attention to the specification and to promote its widespread deployment. this enhances the functionality and interoperability of the web. patents this document was produced by a group operating under the 5 february 2004 w3c patent policy. this document is informative only. w3c maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent. table of contents 1 introduction 2 features rationale 2.1 syntactic sugar 2.1.1 f1 disjointunion 2.1.2 f2 disjointclasses 2.1.3 f3 negativeobjectpropertyassertion and negativedatapropertyassertion 2.2 new constructs for properties 2.2.1 f4 self restriction 2.2.2 f5 property qualified cardinality restrictions 2.2.3 f6 reflexive irreflexive and asymmetric object properties 2.2.4 f7 disjoint properties 2.2.5 f8 property chain inclusion 2.2.6 f9 keys 2.3 extended datatype capabilities 2.3.1 f10 extra datatypes and datatype restrictions 2.3.2 f11 n-ary datatypes 2.3.3 datatype definitions 2.3.4 data range combinations 2.4 simple metamodeling capabilities 2.4.1 f12 punning 2.5 extended annotations 2.5.1 f13 annotations 2.5.2 axioms about annotation properties 2.6 other innovations 2.6.1 f14 declarations 2.6.2 top and bottom properties 2.6.3 iris 2.6.4 imports and versioning 2.7 minor features 2.7.1 anonymous individuals 2.7.2 inverse properties 3 profiles 3.1 f15 owl 2 el owl 2 ql owl 2 rl 3.1.1 owl 2 el 3.1.2 owl 2 ql 3.1.3 owl 2 rl 3.2 which profile to choose 4 other design choices and rationale 4.1 syntax 4.2 backward compatibility 5 recapitulatory table 6 references 7 appendix use cases 7.1 use cases features 7.2 use case 1 brain image annotation for neurosurgery hcls 7.3 use case 2 the foundational model of anatomy hcls 7.4 use case 3 classification of chemical compounds hcls 7.5 use case 4 querying multiple sources in an automotive company automotive 7.6 use case 5 obo ontologies for biomedical data integration hcls 7.7 use case 6 spatial and topological relationships at the ordnance survey earth and space 7.8 use case 7 the systematized nomenclature of medicine hcls 7.9 use case 8 simple part-whole relations in owl ontologies hcls 7.10 use case 9 kidney allocation policy in france hcls 7.11 use case 10 eligibility criteria for patient recruitment 7.12 use case 11 multiple ucs on datatype hcls 7.13 use case 12 prot g report on the experiences of owl users tool 7.14 use case 13 web service modeling telecom 7.15 use case 14 managing vocabulary in collaborative environments wiki 7.16 use case 15 uml association class designer 7.17 use case 16 database federation designer 7.18 use case 17 tools developers tools 7.19 use case 18 virtual solar terrestrial observatory earth and space 7.20 use case 19 semantic provenance capture earth and space 7.21 use case 20 biochemical self-interaction chemical domain 7.22 use cases bibliography 8 appendix change log informative 8.1 changes since recommendation 8.2 changes since proposed recommendation 8.3 changes since last call 9 acknowledgments 1 introduction this document provides an overview of the main new features of owl 2 and their rationale. these features were determined based on real applications and user and tool-developer experience some of which has been documented in the owled workshop series. the inclusion of the features is supported by use cases provided to the w3c owl working group some of which are listed in the section 7. this document also describes and motivates some of the other design decisions that were made during the development of owl 2 or purposefully retained from owl web ontology language owl 1 particularly the various concrete syntaxes for owl 2 and the relationship of owl 2 with rdf section 4 owl 2 extends owl 1 and inherits the language features design decisions and use cases for owl 1. this document thus forms an extension of the use cases and requirements that underlie owl 1 owl use cases and requirements owl 2 adds several new features to owl 1 including increased expressive power for properties extended support for datatypes simple metamodeling capabilities extended annotation capabilities and keys section 2 owl 2 also defines several profiles owl 2 language subsets that may better meet certain performance requirements or may be easier to implement section 3 2 features rationale the new features of owl 2 are presented here organized in the following categories syntactic sugar to make some common statements easier to say new constructs that increase expressivity extended support for datatypes simple metamodeling capabilities extended annotation capabilities other innovations and minor features. each feature is described in a common pattern as follows a brief sentence explaining why the new feature was added a feature description including an informal meaning informal syntax and a simple example issued from use cases the theoretical and implementation implications of the new feature and links to related use cases. readers may selectively show or hide the examples and the functional syntax fss or the rdf syntax in the examples by toggling the buttons below 2.1 syntactic sugar owl 2 adds syntactic sugar to make some common patterns easier to write. since all these constructs are simply shorthands they do not change the expressiveness semantics or complexity of the language. implementations however may prefer to take special notice of these constructs for more efficient processing. 2.1.1 f1 disjointunion while owl 1 provides means to define a set of subclasses as a disjoint and complete covering of a superclass by using several axioms this cannot be done concisely. disjointunion defines a class as the union of other classes all of which are pairwise disjoint. it is a shorthand for separate axioms making the classes pairwise disjoint and one setting up the union class. normative syntax direct semantics rdf-based semantics disjointunion a c ce1 cen where c is a class cei 1 i n are class expressions and a zero or more annotations. hcls functional-style syntax disjointunion brainhemisphere lefthemisphere righthemisphere uc#2 a brainhemisphere is exclusively either a lefthemisphere or righthemisphere and cannot be both of them. disjointunion lobe frontallobe parietallobe temporallobe occipitallobe limbiclobe uc#1 a lobe is exclusively either a frontallobe parietallobe temporallobe occipitallobe or a limbiclobe and cannot be more than one of them. rdf brainhemisphere owl disjointunionof lefthemisphere righthemisphere uc#2 a brainhemisphere is exclusively either a lefthemisphere or righthemisphere and cannot be both of them. lobe owl disjointunionof frontallobe parietallobe temporallobe occipitallobe limbiclobe uc#1 a lobe is exclusively either a frontallobe parietallobe temporallobe occipitallobe or a limbiclobe and cannot be more than one of them. chemistry functional-style syntax disjointunion aminegroup primaryaminegroup secondaryaminegroup tertiaryaminegroup uc#3 an aminegroup is exclusively either a primaryaminegroup secondaryaminegroup or a tertiaryaminegroup and cannot be both of them. rdf aminegroup owl disjointunionof primaryaminegroup secondaryaminegroup tertiaryaminegroup uc#3 an aminegroup is exclusively either a primaryaminegroup a secondaryaminegroup or a tertiaryaminegroup and cannot be both of them. automotive functional-style syntax disjointunion cardoor frontdoor reardoor trunkdoor uc#4 a cardoor is exclusively either a frontdoor a reardoor or a trunkdoor and not more than one of them. rdf cardoor owl disjointunionof frontdoor reardoor trunkdoor uc#4 a cardoor is exclusively either a frontdoor a reardoor or a trunkdoor and not more than one of them. use case 1 use case 2 use case 3 use case 4 2.1.2 f2 disjointclasses while owl 1 provides means to state that two subclasses are disjoint stating that several subclasses are pairwise disjoint cannot be done concisely. disjointclasses states that all classes from the set are pairwise disjoint. it is a shorthand for binary disjointness axioms between the classes. normative syntax direct semantics rdf-based semantics disjointclasses a ce1 cen where cei 1 i n are class expressions and a zero or more annotations. hcls functional-style syntax disjointclasses upperlobeoflung middlelobeoflung lowerlobeoflung uc#2 upperlobeoflung middlelobeoflung lowerlobeoflung are pairwise exclusive. disjointclasses leftlung rightlung uc#2 nothing can be both a leftlung and a rightlung. rdf x rdf type owl alldisjointclasses x owl members upperlobeoflung middlelobeoflung lowerlobeoflung uc#2 upperlobeoflung middlelobeoflung lowerlobeoflung are pairwise exclusive. leftlung owl disjointwith rightlung uc#2 nothing can be both a leftlung and a rightlung. note the fma uses a huge number of disjoint classes fma c 3736 of template left x vs right x e.g. left lung vs right lung 13989 classes x of left y vs x of right y e.g. skin of right breast vs skin of left breast 75 classes x of male y vs x of female y e.g. right side of male chest vs right side of female chest use case 1 use case 2 2.1.3 f3 negativeobjectpropertyassertion and negativedatapropertyassertion while owl 1 provides means to assert values of a property for an individual it does not provide a construct for directly asserting values that an individual does not have negative facts negativeobjectpropertyassertion resp. negativedatapropertyassertion states that a given property does not hold for the given individuals resp. literal normative syntax direct semantics rdf-based semantics negativeobjectpropertyassertion a ope a1 a2 where ope is an object property expression a1 a2 are individuals and a zero or more annotations. negativedatapropertyassertion a dpe a lt where dpe is a data property expression a an individual lt a literal and a 0 or more annotations. hcls functional-style syntax negativeobjectpropertyassertion livesin thispatient iledefrance uc#9 thispatient does not live in the iledefrance region. negativedatapropertyassertion hasage thispatient 5 xsd integer uc#9 thispatient is not five years old. rdf x rdf type owl negativepropertyassertion x owl sourceindividual thispatient x owl assertionproperty livesin x owl targetindividual iledefrance thispatient does not live in the iledefrance region. x rdf type owl negativedatapropertyassertion x owl sourceindividual thispatient x owl assertionproperty hasage x owl targetvalue 5 xsd integer thispatient is not five years old. use case 9 2.2 new constructs for properties owl 1 was mainly focused on constructs for expressing information about classes and individuals and exhibited some weakness regarding expressiveness for properties. owl 2 offers new constructs for expressing additional restrictions on properties new characteristics of properties incompatibility of properties property chains and keys. 2.2.1 f4 self restriction owl 1 does not allow for the definition of classes of objects that are related to themselves by a given property for example the class of processes that regulate themselves. this local reflexivity is useful in many applications particularly when global reflexivity does not hold for a property in general but local reflexivity holds for some classes of object. the owl 2 construct objecthasself allows local reflexivity to be used in class descriptions. self restrictions are part of sroiq sroiq an extension of the description logic underlying owl-dl shoin designed to provide additions requested by users while not affecting its decidability and practicability. sroiq is supported by several reasoners including fact++ hermit and pellet tools a class expression defined using an objecthasself restriction denotes the class of all objects that are related to themselves via the given object property. normative syntax direct semantics rdf-based semantics objecthasself ope where ope is an object property expression. hcls functional-style syntax subclassof autoregulatingprocess objecthasself regulate auto-regulating processes regulate themselves. subclassof auto-phosphorylating-kinase objecthasself phosphorylate uc#20 auto-phosphorylating-kinases phosphorylate themselves. rdf autoregulatingprocess owl subclassof x x rdf type owl restriction x owl onproperty regulate x owl hasself true xsd boolean auto-regulating processes regulate themselves. auto-phosphorylating-kinase owl subclassof x uc#20 x rdf type owl restriction x owl onproperty phosphorylate x owl hasself true xsd boolean auto-phosphorylating-kinases phosphorylate themselves. use case 5 use case 3 2.2.2 f5 property qualified cardinality restrictions while owl 1 allows for restrictions on the number of instances of a property e.g. for defining persons that have at least three children it does not provide a means to restrain the class or data range of the instances to be counted qualified cardinality restrictions e.g. for specifying the class of persons that have at least three children who are girls. in owl 2 both qualified and unqualified cardinality restrictions are possible. qualified object and data cardinality restrictions are present in sroiq and have been successfully implemented. they are already supported by various tools and reasoners e.g. prot g 4 fact++ hermit kaon2 pellet and racer tools owl api objectmincardinality objectmaxcardinality and objectexactcardinality respectively datamincardinality datamaxcardinality and dataexactcardinality allow for the assertion of minimum maximum or exact qualified cardinality restrictions object respectively data properties. normative syntax direct semantics rdf-based semantics object property cardinality restrictions objectmincardinality n ope ce where n is a non-negative integer ope an object property expression and ce is zero or one class expression. objectmaxcardinality n ope ce where n is a non-negative integer ope an object property expression and ce is zero or one class expression. objectexactcardinality n ope ce where n is a non-negative integer ope an object property expression and ce is zero or one class expression. hcls functional-style syntax objectmincardinality 5 hasdirectpart owl thing class of objects having at least 5 direct part. objectexactcardinality 1 hasdirectpart frontallobe uc#1 class of objects having exactly one direct part of type frontal lobe. rdf x rdf type owl restriction x minqualifiedcardinality 5 xsd nonnegativeinteger x owl onproperty hasdirectpart class of objects having at least 5 direct part. x rdf type owl restriction w owl cardinality 1 xsd nonnegativeinteger x owl onproperty hasdirectpart x owl onclass frontallobe uc#1 class of objects having exactly one direct part of type frontal lobe. in owl 1 it is possible to express that a brain hemisphere has at least 5 direct parts but not that it has exactly one direct part of each specific type frontal parietal temporal occipital limbic lobe as needed in uc#1. in owl 2 both statements are possible as shown in the examples above. chemistry functional-style syntax objectmaxcardinality 3 boundto hydrogen uc#3 class of objects bound to at most three different hydrogen rdf x rdf type owl restriction x maxqualifiedcardinality 3 xsd nonnegativeinteger x owl onproperty boundto x owl onclass hydrogen uc#3 class of objects bound to at most three different hydrogen automotive functional-style syntax objectmaxcardinality 5 haspart door uc#4 class of objects having at most 5 door objectexactcardinality 2 haspart reardoor uc#4 class of objects having exactly 2 reardoor rdf x rdf type owl restriction x maxqualifiedcardinality 5 xsd nonnegativeinteger x owl onproperty haspart x owl onclass door uc#4 class of objects having at most 5 door x rdf type owl restriction w owl cardinality 2 xsd nonnegativeinteger x owl onproperty haspart x owl onclass reardoor uc#4 class of objects having exactly 2 reardoor data property cardinality restrictions datamincardinality n dpe dr where n is a non-negative integer dpe a data property expression and dr is zero or one data range. datamaxcardinality n dpe dr where n is a non-negative integer dpe a data property expression and dr is zero or one data range. dataexactcardinality n dpe dr where n is a non-negative integer dpe a data property expression and dr is zero or one data range. hcls functional-style syntax datamaxcardinality 1 hasssn each individual has at most one social security number rdf x rdf type owl restriction x maxqualifiedcardinality 1 xsd nonnegativeinteger x owl onproperty hasssn each individual has at most one social security number use case 1 use case 2 use case 3 use case 4 use case 8 2.2.3 f6 reflexive irreflexive and asymmetric object properties while owl 1 allows assertions that an object property is symmetric or transitive it is impossible to assert that the property is reflexive irreflexive or asymmetric. the owl 2 construct reflexiveobjectproperty allows it to be asserted that an object property expression is globally reflexive that is the property holds for all individuals. normative syntax direct semantics rdf-based_semantics reflexiveobjectproperty a ope where ope is an object property expression and a zero or more annotations. hcls functional-style syntax reflexiveobjectproperty samebloodgroup uc#9 everything has the same blood group as itself. reflexiveobjectproperty part_of uc#2 everything is part_of itself rdf samebloodgroup rdf type owl reflexiveproperty uc#9 everything has the same blood group as himself. part_of rdf type owl reflexiveproperty uc#2 everything is part_of itself note there are different interpretations of the mereological relations. for example obo use case 5 states that part_of is reflexive while the mereological relation anatomicalpartof between anatomical entities is asserted to be irreflexive in use case 1. the owl 2 construct irreflexiveobjectproperty allows it to be asserted that an object property expression is irreflexive that is the property does not hold for any individual. normative syntax direct semantics rdf-based_semantics irreflexiveobjectproperty a ope where ope is an object property expression and a zero or more annotations. hcls functional-style syntax irreflexiveobjectproperty proper_part_of uc#5 nothing can be a proper part of itself. irreflexiveobjectproperty boundby uc#1 nothing can be bound by itself. rdf proper_part_of rdf type owl irreflexiveproperty uc#5 nothing can be a proper part of itself. boundby rdf type owl irreflexiveproperty uc#1 nothing can be bound by itself. earth and space functional-style syntax irreflexiveobjectproperty flowsinto uc#6 nothing can flow into itself. rdf flowsinto rdf type owl irreflexiveproperty uc#6 nothing can flow into itself. note the given examples correspond to the statements about mereological and topological properties anatomicalpartof boundby in the given use cases e.g. use case 1. other applications may however use these terms for properties with different characteristics. the owl 2 construct asymmetricobjectproperty allows it to be asserted that an object property expression is asymmetric that is if the property expression ope holds between the individuals x and y then it cannot hold between y and x. note that asymmetric is stronger than simply not symmetric. normative syntax direct semantics rdf-based_semantics asymmetricobjectproperty a ope where ope is an object property expression and a zero or more annotations. hcls functional-style syntax asymmetricobjectproperty proper_part_of uc#8 the property proper_part_of is asymmetric. rdf proper_part_of rdf type owl asymmetricproperty uc#8 the property proper_part_of is asymmetric. these constructs are part of sroiq and have been implemented in sroiq reasoners such as fact++ hermit and pellet. use case 5 use case 6 use case 8 note many use cases illustrate the desirability for reflexivity irreflexivity asymmetry or local reflexivity. the usefulness of these features was explicitly mentioned by the health care and life sciences interest group in their last call comment. the semantic web deployment working group swd also explicitly mentioned the potential usefulness of reflexivity and asymmetry e.g. for specifying application-specific specializations of skos semantic relations see comment from the swd for example in mereology the partof relation is defined to be transitive reflexive and antisymmetric. many applications that describe complex structures e.g. in life sciences or systems engineering require extensive use of part-whole relations axiomatized in this way. other relations encountered in ontology modeling also require such axiomatizations possibly with different characteristics e.g. obo ro examples include proper part of and locative relations typically transitive and irreflexive causal relations typically transitive and irreflexive and membership relations typically irreflexive another example is the skos broader relationship. the skos specification skos makes no statements regarding the reflexivity or irreflexivity of skos broader to allow both interpretations for example it should be considered reflexive for a direct translation of an inferred owl subclass hierarchy but irreflexive for most thesauri or classification schemes. owl 2 reflexivity irreflexivity allows one of these two features to be added on demand. self restrictions are even more fine grained allowing skos broader to be made only locally reflexive or irreflexive w.r.t. a given skos concept via a subclassof axiom 2.2.4 f7 disjoint properties while owl 1 provides means to state the disjointness of classes it is impossible to state that properties are disjoint. the owl 2 construct disjointobjectproperties allows it to be asserted that several object properties are pairwise incompatible exclusive that is two individuals cannot be connected by two different properties of the set. this construct is part of sroiq and has been implemented in sroiq reasoners. normative syntax direct semantics rdf-based semantics disjointobjectproperties a ope1 open where opei 1 i n are object property expressions and a zero or more annotations. hcls functional-style syntax disjointobjectproperties connectedto contiguouswith uc#1 connectedto and contiguouswith are exclusive properties. rdf connectedto owl propertydisjointwith contiguouswith uc#1 connectedto and contiguouswith are exclusive properties. note use case 1 defines two anatomical entities related by a third anatomical entity as connected while when they are adjacent they are said to be contiguous. disjointdataproperties allows it to be asserted that several data properties are pairwise incompatible exclusive normative syntax direct semantics rdf-based semantics disjointdataproperties a dpe1 dpen where dpei 1 i n are data property expressions and a zero or more annotations. functional-style syntax disjointdataproperties starttime endtime start time of something e.g. surgery must be different from its end time. rdf starttime owl propertydisjointwith endtime start time of something e.g. surgery must be different from its end time. use case 1 use case 2 use case 3 2.2.5 f8 property chain inclusion owl 1 does not provide a means to define properties as a composition of other properties as uncle could be defined hence it is not possible to propagate a property e.g. locatedin along another property e.g. partof the owl 2 construct objectpropertychain in a subobjectpropertyof axiom allows a property to be defined as the composition of several properties. such axioms are known as complex role inclusions in sroiq which also defines regularity conditions necessary for decidability and have been implemented in sroiq reasoners. normative syntax direct semantics rdf-based semantics an axiom subobjectpropertyof objectpropertychain ope1 open ope states that any individual x connected with an individual y by a chain of object properties expressions ope1 open is necessary connected with y by the object property ope. subobjectpropertyof a objectpropertychain ope1 open ope where opei 1 i n are object property and a zero or more annotations. hcls functional-style syntax subpropertyof objectpropertychain locatedin partof locatedin uc#7 if x is located in y and y is part of z then x is located in z for example a disease located in a part is located in the whole. rdf locatedin owl propertychainaxiom partof locatedin uc#7 if x is located in y and y is part of z then x is located in z for example a disease located in a part is located in the whole. use case 1 use case 5 use case 7 use case 8 2.2.6 f9 keys owl 1 does not provide a means to define keys. however keys are clearly of vital importance to many applications in order to uniquely identify individuals of a given class by values of a set of key properties. the owl 2 construct haskey allows keys to be defined for a given class. while in owl 2 key properties are not required to be functional or total properties it is always possible to separately state that a key property is functional if desired. keys in owl 2 are a form of dl safe rule dl-safe they have been implemented in hermit kaon2 and pellet and can be added to other reasoners. an haskey axiom states that each named instance of a class is uniquely identified by a data or object property or a set of properties that is if two named instances of the class coincide on values for each of key properties then these two individuals are the same. normative syntax direct semantics rdf-based semantics haskey a ce ope1 opem dpe1 dpen where ce is a class expression opei 1 i m are object property expressions dpej 1 j n are data property expression and a zero or more annotations. hcls functional-style syntax haskey registeredpatient haswaitinglistn each registered patient on the abm national organ waiting list is uniquely identified by his waiting list number uc#9 classassertion registeredpatient thispatient thispatient is a registeredpatient. datapropertyassertion haswaitinglistn thispatient 123-45-6789 thispatient has the the waiting list number 123-45-6789 rdf registeredpatient owl haskey haswaitinglistn each registered patient on the abm national organ waiting list is uniquely identified by his waiting list number uc#9 thispatient rdf type registeredpatient thispatient is a registeredpatient. thispatient haswaitinglistn 123-45-6789 thispatient has the the waiting list number 123-45-6789 in this example since haswaitinglistn is a key for the class registeredpatient the number 123-45-6789 uniquely identifies thispatient. the axiom haskey registeredpatient haswaitinglistn only states that two different patients who have got a number assigned cannot have the same number on the waiting list if the values of haswaitinglistn were the same for two named instances of the class registeredpatient these two individuals would be equal. an haskey axiom is similar to an inversefunctionalproperty axiom the main difference being that it is applicable only to individuals that are explicitly named. it does not state that each registered patient has at least or at most one value of haswaitinglistn. the inference that each patient who has a haswaitinglistn belongs to the class registeredpatient cannot be drawn. functional-style syntax haskey transplantation donorid recipientid oforgan each transplantation is uniquely identified by a donor a recipient and an organ uc#9 rdf transplantation owl haskey donorid recipientid oforgan each transplantation is uniquely identified by a donor a recipient and an organ uc#9 a set of several properties is needed to identify a transplantation indeed a donor may provide several organs to a single person e.g. a kidney and a liver or the same kind of organ to two recipients e.g. a kidney or different organs to different recipients. use case 2 use case 7 use case 9 2.3 extended datatype capabilities 2.3.1 f10 extra datatypes and datatype restrictions owl 1 provides support for only integers and strings as datatypes and does not support any subsets of these datatypes. for example one could state that every person has an age which is an integer but could not restrict the range of that datatype to say that adults have an age greater than 18. owl 2 provides new capabilities for datatypes supporting a richer set of datatypes and restrictions of datatypes by facets as in xml schema. owl 2 datatypes include a various kinds of numbers adding support for a wider range of xml schema datatypes double float decimal positiveinteger etc. and providing its own datatypes e.g. owl real b strings with or without a language tag using the rdf plainliteral datatype and c boolean values binary data iris time instants etc. datatyperestriction also makes it possible to specify restrictions on datatypes by means of constraining facets that constrain the range of values allowed for a given datataype by length for strings e.g. minlength maxlength and minimum maximum value e.g. mininclusive maxinclusive. extended datatypes are allowed in many description logics and are supported by several reasoners. normative syntax direct semantics rdf-based semantics datatyperestriction dt f1 lt1 fn ltn where dt is a unary datatype and fi lti 1 i n are pairs of constraining facet and literal. hcls functional-style syntax datatyperestriction xsd integer mininclusive 18 uc#9 new datatype with a lower bound of 18 on the xml schema datatype xsd integer rdf x rdf type rdfs datatype x owl ondatatype xsd integer x owl withrestrictions y y xsd mininclusive 5 xsd integer uc#9 new datatype with a lower bound of 18 on the xml schema datatype xsd integer this datatype is needed for example to define patients under 18 children who depend on a hospital s pediatric services while those over 18 adults depend on adult services. use case 9 use case 11 use case 12 use case 18 use case 19 2.3.2 f11 n-ary datatypes in owl 1 it is not possible to represent relationships between values for one object e.g. to represent that a square is a rectangle whose length equals its width. n-ary datatype support was not added to owl 2 because there were issues regarding just what support should be added. however owl 2 includes syntactic constructs needed for n-ary datatypes to provide a common basis for extensions. the data range extension linear equations note proposes an extension to owl 2 for defining data ranges in terms of linear in equations with rational coefficients. hcls functional-style syntax dataallvaluesfrom admissiontemperature currenttemperature datacomparison arguments x y leq x y uc#11 individuals whose admissiontemperature is less than or equal to their currenttemperature. use case 10 use case 11 2.3.3 datatype definitions owl 1 allows a new class to be defined by a class description but it does not offer means to explicitly define a new datatype. for ease of writing reading and maintaining ontologies owl 2 provides a new construct to define datatypes this is particularly useful if the same datatype is used multiple times in an ontology. datatypedefinition allows to explicitly name a new datatype. normative syntax direct semantics rdf-based semantics datatypedefinition a dt dr where dt is a datatype dr a data range and a zero or more annotations. hcls functional-style syntax datatypedefinition adultage datatyperestriction xsd integer mininclusive 18 uc#9 an adult age is defined by using a lower bound of 18 with the xml schema datatype xsd integer rdf adultage owl equivalentclass x x rdf type rdfs datatype x owl ondatatype xsd integer x owl withrestrictions y y xsd mininclusive 18 xsd integer an adult age is defined by using a lower bound of 18 with the xml schema datatype xsd integer use case 9 2.3.4 data range combinations while owl 1 allows a new class to be constructed by combining classes it does not provide means to construct a new datatype by combining other ones. in owl 2 it is possible to define new datatypes in this way. in owl 2 combinations of data ranges can be constructed using intersection dataintersectionof union dataunionof and complement datacomplementof of data ranges. dataintersectionof a dr1 drn where dri 1 i n are data ranges and a zero or more annotations. dataunionof a dr1 drn where dri 1 i n are data ranges and a zero or more annotations. datacomplementof a dr where dri 1 i n are data ranges and a zero or more annotations. functional-style syntax datacomplementof adultage this data range contains all literals that are not a positive integer greater or equal to 18 rdf x rdf type rdfs datatype x owl complementof adultage this data range contains all literals that are not a positive integer greater or equal to 18 use case 9 2.4 simple metamodeling capabilities 2.4.1 f12 punning owl 1 dl required a strict separation between the names of e.g. classes and individuals. owl 2 dl relaxes this separation somewhat to allow different uses of the same term e.g. eagle to be used for both a class the class of all eagles and an individual the individual representing the species eagle belonging to the meta class of all plant and animal species. however owl 2 dl still imposes certain restrictions it requires that a name cannot be used for both a class and a datatype and that a name can only be used for one kind of property. the owl 2 direct semantics treats the different uses of the same name as completely separate as is required in dl reasoners. telecom declaration class person uc#13 1 person is declared to be a class classassertion service s1 2 s1 is an individual of service. objectpropertyassertion hasinput s1 person 3 the individual s1 is connected by hasinput to the individual person. the same term person denotes both a class in 1 and an individual in 3 this is possible in owl 2 thanks to punning class individual collaborative environment wiki declaration class deprecated_properties uc#14 1 deprecated_properties is declared to be a class declaration objectproperty is_located_in 2 is_located_in is declared to be an objectproperty classassertion deprecated_properties is_located_in 3 is_located_in is an individual of deprecated_properties. the same term is_located_in denotes both a property 2 and an individual 3 this is possible in owl 2 thanks to punning property individual use case 14 could also be represented using an annotation deprecated property on the property is_located_in which might be more intuitive or better modeling. uml design declaration class person declaration class company uc#15 1 person and company are declared to be classes. subclassof personcompany association 2 personcompany denotes a subclass of an association used to model an association between classes person and company as a class. objectpropertydomain personcompany person 3 the domain of the property personcompany is person. objectpropertyrange personcompany company 4 the range of the property personcompany is company. the same term personcompany denotes both a class 2 and an objectproperty 3 4 this is possible in owl 2 thanks to punning class objectproperty use case 12 use case 13 use case 14 use case 15 2.5 extended annotations owl 1 allowed extralogical annotations such as a label or a comment to be given for each ontology entity but did not allow annotations of axioms e.g. giving information about who asserted an axiom or when. owl 2 allows for annotatins on ontologies entities anonymous individuals axioms and annotations themselves. 2.5.1 f13 annotations annotations on ontology entities and anonymous individuals owl 2 provides the construct annotationassertion for annotation of ontology entities such as classes or properties and anonymous individuals. these annotations carry no semantics in the owl 2 direct semantics allowing the direct use of dl reasoners. annotationassertion a ap s v where ap is an annotation property s is an iri or an anonymous individual v is a literal an iri or an anonymous individual and a are 0 or more annotations of the annotation assertion hcls functional-style syntax annotationassertion rdfs label caro 0000003 anatomical structure uc#5 the iri caro 0000003 of caro ontology is annotated by the human-readable label anatomical structure as a value of the rdfs label annotation property annotationassertion fma uwdaid fma heart 7088 uc#2 the iri fma heart of the fma is annotated by the integer 7088 its fma id as a value of the annotation property fma uwdaid. rdf caro 0000003 rdfs label anatomical structure uc#5 the iri caro 0000003 of caro ontology is annotated with the rdfs label annotation property by the human-readable label anatomical structure. fma heart fma uwdaid 7088 xsd positiveinteger uc#2 the iri fma heart of the fma is annotated with the annotation property fma uwdaid by the positive integer 7088 its fma id annotations on axioms annotations ontologies owl 2 provides the construct annotation for annotations of axioms and ontologies. it can also be used for annotations of annotations themselves. these annotations carry no semantics in the owl 2 direct semantics allowing the direct use of dl reasoners. annotation a ap v where ap is an annotation property v is a literal an iri or an anonymous individual and a are 0 or more annotations. hcls functional-style syntax subclassof annotation rdfs comment middle lobes of lungs are necessarily right lobes since left lungs do not have middle lobe. middlelobe rightlobe uc#2 the comment middle lobes of lungs are necessarily right lobes is an annotation of the subclass axiom which explains why middlelobe is a subclass of rightlobe. rdf middlelobe rdfs subclassof rightlobe x rdf type owl annotation x owl annotatedsource middlelobe x owl annotatedproperty rdfs subclassof x owl annotatedtarget rightlobe x rdfs comment middle lobe of lungs are necessary right lobe since left lung do not have middle lobe. uc#2 the comment middle lobe of lungs are necessary right lobe is an annotation of the subclass axiom which explains why middlelobe is a subclass of rightlobe. use case 2 use case 5 use case 12 use case 19 2.5.2 axioms about annotation properties annotation properties can be given domains annotationpropertydomain and ranges annotationpropertyrange and participate in an annotation property hierarchy subannotationpropertyof these special axioms have no semantic meaning in the owl 2 direct semantics but carry the standard rdf semantics in the rdf-based semantics via the mapping to rdf vocabulary subproperty of annotation property subannotationpropertyof a ap1 ap2 where ap 1 and ap2 are annotation properties and a are 0 or more annotations. hcls functional-style syntax subannotationpropertyof narrow_synonym synonym uc#5 the property narrow_synonym is a subproperty of synonym. obo ontologies in particular the gene ontology distinguish different kinds of synonyms exact_synonym narrow_synonym broad_synonym. rdf narrow_synonym rdfs subpropertyof synonym uc#5 the property narrow_synonym is a subproperty of synonym. obo ontologies in particular gene ontology distinguish different kinds of synonyms exact_synonym narrow_synonym broad_synonym. domain of annotation property annotationpropertydomain a ap u where ap is an annotation property u is an iri and a are 0 or more annotations. hcls functional-style syntax annotationpropertydomain fma uwdaid fma anatomicalentity uc#2 only fma anatomicalentity can have an fma uwdaid that is an fma id rdf fma uwdaid rdfs domain fma anatomicalentity uc#2 only fma anatomicalentity can have an fma uwdaid that is an fma id range of annotation property annotationpropertyrange a ap u where ap is an annotation property u is an iri and a are 0 or more annotations. hcls functional-style syntax annotationpropertyrange fma uwdaid xsd positiveinteger uc#2 the id of an fma anatomicalentity is a positive integer rdf fma uwdaid rdfs range xsd positiveinteger uc#2 the id of an fma anatomicalentity is a positive integer use case 2 use case 5 2.6 other innovations 2.6.1 f14 declarations in owl 1 an entity such as a class or an object property could be used in an ontology without any prior announcement so there was no way of ensuring that entity names matched in different axioms. in practice if an entity name was mistyped in an axiom there was no way of catching the error. in owl 2 a declaration signals that an entity is part of the vocabulary of an ontology. a declaration also associates an entity category class datatype object property data property annotation property or individual with the declared entity. declarations are not always necessary see syntax declarations do not affect the meaning of owl 2 ontologies and thus do not have an effect on reasoning. implementations may choose to check that every name is declared if desired. declaration a e where a is an annotation and e an entity. tools the following declarations state that the iri person is used as a class and the iri peter as an individual. functional-style syntax declaration class person uc#17 person is declared to be a class declaration namedindividual peter peter is declared to be an individual rdf person rdf type owl class uc#17 person is declared to be a class peter rdf type owl namedindividual peter is declared to be an individual hcls functional-style syntax declaration class caro 0000003 uc#5 caro 0000003 is declared to be a class rdf caro 0000003 rdf type owl class uc#17 caro 0000003 is declared to be a class use case 17 use case 5 2.6.2 top and bottom properties while owl 1 had only top and bottom predefined entities for classes the two classes owl thing and owl nothing owl 2 also provides top and bottom object and data properties namely owl topobjectproperty owl bottomobjectproperty owl topdataproperty and owl bottomdataproperty. all pairs of individuals are connected by owl topobjectproperty no individuals are connected by owl bottomobjectproperty. all possible individuals are connected with all literals by owl topdataproperty no individual is connected by owl bottomdataproperty to a literal. 2.6.3 iris uniform resource locators uris were used in owl 1 to identify classes ontologies and other ontology elements. uris are strings formed using a subset of ascii. this was quite limiting particularly with respect to non-english language names as ascii only includes letters from the english alphabet. to support broad international needs owl 2 uses internationalized resource identifiers iris rfc3987 for identifying ontologies and their elements. 2.6.4 imports and versioning in owl 1 ontologies can be stored as semantic web documents and ontologies can import other ontologies. owl 2 makes it clear that this importing is by the location of the ontology document. owl 2 also clears up the relationship between an ontology name iri and its location and in response to several requests provides a simple versioning mechanism by means of version names iris each owl 2 ontology may have an ontology iri which is used to identify the ontology. an owl 2 ontology may also have a version iri which is used to identify a particular version of the ontology. an owl 2 ontology is stored at its version iri and one of the ontologies that have the ontology iri is stored at the ontology iri as well. if it does not matter which of the versions is desired then importing can use the ontology iri but if a particular version is desired then the version iri is used. ontology o v import o a ax where o and v are zero or one ontology and version iris import o are 0 or more imports o is an ontology iri a are 0 or more annotations and ax are 0 or more axioms. the ontology is stored at its version iri v. one of the versions using the ontology iri o should also be stored at o this is considered to be the current version of the ontology. 2.7 minor features some other changes have been introduced in the owl 2 syntax but these are not changes in the expressive power with respect to owl 1. 2.7.1 anonymous individuals in owl 1 anonymous individuals were introduced as individuals without identifiers. functional-style syntax individual value city paris value region iledefrance this axiom does not contain an individual name for the subject of the city and region triples so the introduced individual is an anonymous individual. in contrast in owl 2 anonymous individuals are identified using node ids. functional-style syntax objectpropertyassertion city a1 paris uc#9 this axiom introduces an explicit anonymous individual a1 for this unknown address which is in the city of paris objectpropertyassertion region a1 iledefrance and in the region of iledefrance rdf a1 city paris this axiom introduces an explicit anonymous individual a1 for this unknown address which is in the city of paris a1 region iledefrance in the state of rhode island. this change was mainly motivated by a requirement related to the new functional syntax. while patterns using blank nodes could be specified without node ids because of the nested frame structure of abstract syntax constructions this cannot be done in the functional syntax. there is no change in expressive capability. nothing changed on the rdf side and the treatment of anonymous individuals in owl 2 is fully backwards compatible with that in owl 1. in the example above the a1 simply represents a blank node in the rdf graph. use case 9 2.7.2 inverse properties in owl 1 all properties are atomic but it is possible to assert that some object property is the inverse of another property. in owl 2 property expressions such as objectinverseof p can be directly used in class expressions. this makes writing ontologies easier by avoiding the need to name an inverse. an inverse object property expression objectinverseof p connects an individual a1 with a2 if and only if the object property p connects a2 with a1. objectinverseof p where p is an object property. functional-style syntax objectinverseof partof this expression represents the inverse property of partof rdf x owl inverseof partof this expression represents the inverse property of partof an inverse object properties axiom inverseobjectproperties ope1 ope2 states that two properties are inverse. inverseobjectproperties ope1 ope2 where ope1 and ope2 are object property expressions. the following is an example of an owl 1 inverse property axiom. functional-style syntax objectproperty haspart inverse partof haspart has an inverse property named partof. this can be represented in owl 2 by the following axiom stating that haspart is an inverse of partof. functional-style syntax equivalentproperties haspart objectinverseof partof partof is the same as the inverse property of haspart. as such axioms are quite common owl 2 provides the following syntactic shortcut as well. functional-style syntax inverseobjectproperties haspart partof haspart and partof are inverse properties. rdf haspart owl inverseof partof haspart and partof are inverse properties. 3 profiles 3.1 f15 owl 2 el owl 2 ql owl 2 rl owl 1 defined two major dialects owl dl and owl full and one syntactic subset owl lite however it turned out that this was not sufficient to address requirements later identified by deployments of owl ontologies. many applications particularly in the life sciences use very large ontologies e.g. the fma nci thesaurus snomed ct gene ontology and some obo ontologies. such ontologies often need to represent rather complex entities e.g. anatomical entities composed of parts connected in complex ways or to allow the propagation of properties e.g. location of diseases from parts to whole they also have a huge number of classes and heavy use is made of classification in order to facilitate development and maintenance. applications are therefore mainly concerned with language scalability and reasoning performance problems see e.g. issues surrounding the fma fma and are willing to trade off some expressiveness in return for computational guarantees particularly w.r.t. classification. many applications involving classical databases are concerned with interoperability of owl with database technologies and tools. while the ontologies used in such applications are typically relatively lightweight they are often used to query very large sets of individuals stored in standard relational databases. there is therefore a requirement to access such data directly via relational queries e.g. sql other applications are concerned with interoperability of the ontology language with rules and existing rule engines. while the ontologies used in such applications are again typically relatively lightweight they may be used to query large datasets and it may be useful or necessary to operate directly on data in the form of rdf triples. typical cases include both owl applications that are willing to trade the full expressivity of the language for efficiency and rdf s applications that need some added expressivity from owl 2. in order to address the above requirements owl 2 defines three different profiles owl 2 el owl 2 ql and owl 2 rl sublanguages syntactic subsets of owl 2 with useful computational properties e.g. reasoning complexity in range of logspace to ptime or implementation possibilities e.g. fragments implementable using rdbs they are briefly described below for a complete description see profiles owl 2 profiles 3.1.1 owl 2 el owl 2 el captures the expressive power used by many large-scale ontologies e.g. snomed ct and the nci thesaurus. owl 2 el places several syntactic restrictions on the language restrictions on constructs owl 2 el supports existential quantification to a class expression or a data range existential quantification to an individual objecthasvalue or a literal datahasvalue self-restriction enumerations involving a single individual or a single literal intersection of classes and data ranges. missing features include universal quantification to a class expression or a data range cardinality restrictions min max and exact disjunction objectunionof disjointunion and dataunionof class negation and many other features a complete list of missing features is given in owl 2 profiles owl 2 profiles restrictions on axioms owl 2 el supports most axioms e.g. subclass equivalentclass class disjointness range and domain object property inclusion subobjectpropertyof possibly involving property chains and data property inclusion subdatapropertyof transitive properties keys haskey it should be noted that in addition to syntactic restrictions owl 2 el extends the global restrictions on axioms defined in the owl 2 structural specification owl 2 specification with an additional condition see 2.2.6 global restrictions in owl 2 profiles owl 2 profiles as a result of these restrictions owl 2 el reasoners e.g. cel cel can exploit reasoning algorithms including query answering algorithms whose complexity is known to be worst-case polynomial see computational properties in owl 2 profiles owl 2 profiles the el acronym reflects the profile s basis in the el family of description logics el++ el++ update logics that provide only existential quantification. 3.1.2 owl 2 ql owl 2 ql captures the expressive power typically used in simple ontologies like thesauri and most of the expressive power of er uml schemas. owl 2 ql places several syntactic restrictions on the language restrictions on constructs features include a limited form of existential restrictions subclass equivalentclass disjointness range and domain symmetric properties etc. missing features are existential quantification to a class expression or a data range self-restriction existential quantification to an individual or a literal enumeration of individuals and literals universal quantification to a class expression or a data range cardinality restrictions min max and exact disjunction objectunionof disjointunion and dataunionof property inclusions subobjectpropertyof involving property chains functional and inverse-functional properties transitive properties reflexive properties irreflexive properties asymmetric properties keys a complete list of missing features is given in owl 2 profiles owl 2 profiles restrictions on axioms owl 2 ql supports the same class axioms as in the structural specification owl 2 specification except disjointunion which is disallowed. these restrictions enable a tight integration with rdbmss and reasoners can be implemented on top of standard relational databases. this profile is therefore particularly well suited to applications requiring only relatively lightweight ontologies but with very large number of individuals and where it is useful or necessary to access the data directly via relational queries e.g. sql reasoning including query answering can be efficiently implemented using query rewriting techniques and its complexity is known to be worst case nlogspace see computational properties in owl 2 profiles owl 2 profiles the ql acronym reflects the fact that query answering can be implemented by rewriting queries into a standard relational query language. 3.1.3 owl 2 rl owl 2 rl is designed to accommodate both owl 2 applications that can trade the full expressivity of the language for efficiency and rdf s applications that need some added expressivity from owl 2. this is achieved by defining a syntactic subset of owl 2 which is amenable to implementation using rule-based technologies. owl 2 rl places several syntactic restrictions on the language restrictions on constructs most owl 2 class expressions constructs are supported but with their use restricted to certain syntactic positions see table 2 in owl 2 profiles owl 2 profiles for example neither existential quantification to a class nor unions of class expressions objectunionof are allowed on the right hand side of axioms. restrictions on axioms owl 2 rl supports all axioms of owl 2 except disjoint unions of classes reflexive object property axioms and negative object and data property assertions. these restrictions allow owl 2 rl to be implemented using rule-based technologies such as rule extended dbmss and results in the complexity of reasoning including query answering being worst-case polynomial see computational properties in owl 2 profiles owl 2 profiles rule-based implementations can operate directly on rdf triples e.g. oracle s owl prime owl prime and so can be applied to an arbitrary rdf graph i.e. to any owl 2 ontology. in this case only correct answers to queries will be computed reasoning will be sound but it is not guaranteed to obtain all correct answers it may not be complete the profile was inspired by dlp dlp and pd pd and the rl acronym reflects the fact that reasoning can be implemented using a standard rule language. use case 2 use case 3 use case 4 use case 8 use case 16 3.2 which profile to choose application developers may ask themselves which profile best suits their needs. the choice between the different profiles mainly depends on the expressiveness required by the application the priority given to reasoning on classes or data the size of datasets and importance of scalability etc. the following suggestions may be useful users requiring a scalable profile for large but rather simple ontologies and good time performance for ontology tbox schema reasoning may want to consider owl 2 el. users requiring a profile that can easily interoperate with relational database systems and where scalable reasoning on large datasets is the most important task may want to consider owl 2 ql. users requiring a profile that can easily interoperate with rules engines and rule extended dbmss and where scalable reasoning on large datasets is the most important task may want to consider owl 2 rl. note that owl 2 ql and owl 2 rl are both well suited to applications where relatively lightweight ontologies are used with very large datasets. the choice of which to use may depend on the type of data to be processed if it is useful or necessary to access the data directly via relational queries e.g. sql then owl 2 ql may be preferred if it is useful or necessary to operate directly on data in the form of rdf triples then owl 2 rl may be preferred. 4 other design choices and rationale while owl 2 is fully backwards compatible with owl 1 its conceptual design is slightly different in particular regarding owl 2 syntax. 4.1 syntax there are various syntaxes available to serialize and exchange owl 2 ontologies. the primary exchange syntax for owl 2 is the rdf xml syntax rdf xml which is the only syntax that must be supported by implementations. as explained below the main purpose of the functional syntax owl 2 specification is to specify the structure of the language. owl xml owl 2 xml is an xml serialization motivated by the desire for better interoperability with xml based tools and languages. normative syntax the only required exchange syntax for owl 2 ontologies is rdf xml as clearly stated in section 2.1 of the conformance document owl 2 conformance several syntaxes have been defined for owl 2 ontology documents some or all of which could be used by owl 2 tools for exchanging documents. however conformant owl 2 tools that take ontology documents as input s must accept ontology documents using the rdf xml serialization owl 2 rdf mapping and conformant owl 2 tools that publish ontology documents must if possible be able to publish them in the rdf xml serialization if asked to do so e.g. via http content negotiation functional syntax the grammar of owl 1 was defined by the abstract syntax as the functional syntax fs plays a similar role for owl 2 it defines the grammar of the language. but owl 2 is specified not only in terms of a grammar but also of structure. indeed in addition to the functional syntax owl 2 has introduced the structural specification to precisely specify the conceptual structure of owl 2 ontologies. the structural specification is defined using the unified modeling language uml it uses a very simple form of uml diagrams that are expected to be easily understandable by readers familiar with object-oriented systems. the structural specification provides a normative abstract model for all the syntaxes of owl 2 normative and non-normative. it is independent of any concrete exchange syntaxes for owl 2 ontologies. the functional syntax closely follows the structural specification. clarity and readability of the syntax were important factors in the design of the functional syntax. the functional-style syntax has been introduced to allow for easy writing of owl 2 axioms. another benefit of the owl 2 functional syntax is that it is closer to the syntax used in first order logic which makes various specification issues as well as relating owl 2 constructs to the general literature easier. it is one among several syntaxes for owl 2 e.g. rdf xml manchester syntax owl 1 provides a frame-like syntax that allows several features of a class property or individual to be defined in a single axiom at once. this may cause problems in practice. first it bundles many different aspects of the given entity into a single axiom. while this may be convenient when ontologies are being designed it is not convenient for manipulating them programmatically. in fact most implementations of owl 1 break such axioms apart into several atomic axioms each dealing with only a single feature of the entity. however this may cause problems with round-tripping as the structure of the ontology may be destroyed in the process. second this type of axiom is often misinterpreted as a declaration and unique definition of the given entity. in owl 1 however entities may be used without being the subject of any such axiom and there may be many such axioms relating to the same entity. owl 2 has addressed these problems in several ways. first the frame-like notation has been dropped in favor of a more fine-grained structure of axioms each axiom describes just one feature of the given entity. second owl 2 provides explicit declarations and an explicit definition of the notion of structural consistency. although owl 2 is more verbose this is not expected to lead to problems given that most owl ontologies are created using ontology engineering tools. the following is an example of an owl 1 frame-like axiom. objectproperty partof objectinverseof containedin inversefunctional transitive annotation rdfs comment an object is a part of another object. the property partof has an inverse property named containedin is an inverse functional and transitive property and has the human-friendly comment specifies that an object is a part of another object. this can be represented in owl 2 using the following axioms. declaration objectproperty partof declaration of the object property partof annotationassertion rdfs comment partof partof means that an object is a part of another object. this assertion provides a comment on the property partof which is partof means that an object is a part of another object. inverseobjectproperties partof containedin partof and containedin are inverse properties inversefunctionalobjectproperty partof partof is an inverse functional property transitiveobjectproperty partof partof is a transitive property concerning the abstract syntax as in owl 2 if as is used as an exchange syntax then owl 1 ontologies written in as may be input to owl 2 tools and remain valid ontologies. but it should be emphasized that this is an issue of the tool providers the only required exchange syntax for owl 2 ontologies being rdf xml it is up to the tools to decide whether they would accept ontologies serialized in as or in fs for that matter owl xml syntax the owl working group has defined an xml syntax for owl 2 based on xml schema xml schema called the xml_serialization or owl xml owl 2 xml this syntax mirrors the structural specification of owl 2 owl 2 specification the xml syntax is motivated by the desire to support owl users who want better interoperability with xml based tools and languages for example wsdl xslt xquery xpath or schema-aware editors. this is a standard format that owl tool vendors may optionally support to provide access to the extensive tool chain available for xml schemas. thus owl tool developers and users using tools from these vendors will be be able to write xpath xslt xquery and css to work with owl. this was very difficult to do using the rdf xml format which was the only xml format available for owl 1. an additional benefit is that xml data can be exposed to rdf owl applications using grddl. the introduction of owl xml also provides a more comfortable avenue for the xml-savvy user to understand owl and makes owl more appealing to those organizations and individuals who have made considerable investment in xml tooling and training. an open source toolkit is already available for conversion between this format and the required exchange form rdf xml. thus owl xml integrates with existing owl 1 tooling and data while not breaking interoperability among tools. 4.2 backward compatibility the overall structure of owl 2 has not changed compared to owl 1 almost all the building blocks of owl 2 were already present in owl 1 albeit possibly under different names. in owl 1 the abstract syntax see section 2 of the owl 1 semantics owl 1 semantics played the role of both the structure and the functional syntax in owl 2 owl 2 specification the owl 2 functional syntax differs in form from the owl 1 abstract syntax but its role within the overall structure of owl is identical it specifies the structure of the language. the owl 2 functional syntax is much closer to the rdf graph representation and can capture more rdf graphs it also has a direct correspondence to the structural specification in uml uml like owl 1 owl 2 specifies a precise mapping from ontology structures represented using the abstract functional syntax to rdf graphs. owl 2 however also benefits from an explicitly specified mapping from rdf graphs back to ontology structures owl 2 rdf mapping the two semantics direct owl 2 direct semantics and rdf-based owl 2 rdf-based semantics of owl 2 have their direct counterparts in owl 1 under the names direct model-theoretic semantics and rdf-compatible model-theoretic semantics respectively owl 1 semantics an xml presentation syntax was also available for owl 1 owl 1 xml syntax although not as a recommendation on the other hand the manchester syntax owl 2 manchester syntax did not exist for owl 1. owl 1 defined one sub-language owl lite where owl 2 defines three el ql and rl owl 2 profiles owl lite has not been re-specified for owl 2 but because of backward compatibility owl lite ends up as a sub-language of owl 2. the central role of rdf xml as the only required exchange syntax for owl 2 tools and the relationships between the direct and rdf-based semantics i.e. the correspondence theorem have not changed. more importantly backwards compatibility with owl 1 is complete both syntactically and semantically. just as in owl 1 owl 2 can handle all rdf graphs. the vocabulary that is given special meaning in owl 2 includes the special vocabulary of owl 1. however the use of owl datarange while still possible is now deprecated rdfs datatype should be used instead. the direct semantics for owl 2 owl 2 direct semantics is almost completely compatible with the direct semantics for owl 1 owl 1 semantics the only difference is that annotations are semantics-free in the direct semantics for owl 2. it is highly unlikely however that users will notice this difference firstly the semantics given to annotations in the owl 1 direct semantics was extremely weak and unlikely to lead to any significant entailments and secondly owl 1 tools using the direct semantics typically treat annotations as though they are semantics-free. the rdf-based semantics for owl 2 owl 2 rdf-based semantics is completely compatible with the rdf-based semantics for owl 1 owl 1 semantics some of the details of this semantics have changed but the set of inferences is the same. the treatment of importing in rdf documents has changed slightly in owl 2 if the rdf graphs are to be conformant owl 2 dl ontology documents owl 2 conformance in owl 1 importing happened first so the entire merged graph was considered as one unit owl 1 semantics in owl 2 the individual documents are considered separately in most cases owl 2 specification this means that owl 1 dl rdf documents that do not have a well-specified ontology header may need to be slightly modified to be conforming owl 2 dl ontology documents. 5 recapitulatory table this table provides a summary of the main new features with an example for each. it summarizes the relations between use cases column 1 features column 2 and examples column 3 for each use case one specific feature noted by name in bold is selected. the corresponding example is given column 3 and the reference from which it is issued appears in bold column 4 the other features that the use case is concerned with are noted by numbers f1 to f15. the choice of examples aims at reconciling an easy understandable illustration for each feature a variety of domains and real examples from papers available online use case feature s example references uc#1 disjointunion f2 f5 f7 f8 f11 disjointunion lobe frontallobe parietallobe temporallobe occipitallobe limbiclobe lobe is a disjoint union of frontallobe frontallobe parietallob temporallobe occipitallobe limbiclobe medical req ontology with rules brain imaging uc#2 disjointclasses f1 f2 f5 f7 f9 disjointclasses leftlung rightlung a lung cannot be leftlung and rightlung fma uc#20 local reflexivity objecthasself phosphorylates class of all individuals that phosphorylates themselves bio uc#4 qualified cardinality f1 f15 exactcardinality 2 haspart reardoor class of objects having exactly 2 reardoor auto uc#5 asymmetric property f6 f8 f13 asymmetricproperty proper_part_of if p is a proper part of q then q cannot be a proper part of p obo ro obo2owl uc#6 irreflexive property irreflexiveproperty flowsinto nothing flowsinto itself. ordnance uc#7 property chain f9 subpropertyof objectpropertychain locatedin partof locatedin anything locatedin a part is locatedin the whole e.g. a disease. snomed req uc#8 reflexive property f5 f8 reflexiveproperty partof part whole argues about partof as a reflexive property e.g. that a car is a part of a car part whole uc#9 negative property f9 f10 negativepropertyassertion hasage thispatient 5 xsd integer this patient is not five years old. transplant ontology agence biomedecine uc#10 n-ary allvaluesfrom testdate enrollmentdate x y 30 individuals whose testdate is superior to their enrollmentdate 30. n-ary uc#11 n-ary f10 allvaluesfrom admissiontemperature currenttemperature x y individuals whose admissiontemperature is inferior to currenttemperature. n-ary uc#12 datatype restriction f5 f12 f13 datatyperestriction xsd integer mininclusive 18 new datatype with a lower bound of 18 on the xml schema datatype xsd integer e.g. to describe the class adult. protege uc#13 metamodeling declaration class person person is declared to be a class classassertion service s1 s1 is an instance of service propertyassertion hasinput s1 person s1 has input person this is an example of punning for class individual. web service punning uc#14 metamodeling declaration objectproperty is_located_in is_located_in is declared to be an objectproperty classassertion deprecated_properties is_located_in is_located_in is an individual of the class deprecated_properties this is an example of punning for property individual. wiki punning uc#15 metamodeling declaration class person declaration class company person and company are declared to be classes subclassof personcompany association association between classes person and company propertydomain personcompany person the domain of the property personcompany is person. propertyrange personcompany company the range of the property personcompany is company. this is an example of punning for class objectproperty. uml association class punning uc#16 profiles this use case motivates a profile e.g. owl ql where conjunctive query answering is implemented using conventional relational database systems who reads uc#17 declaration declaration class person person is declared to be a class. syntax problem tools obo2owl uc#18 datatype f5 datatyperestriction xsd integer mininclusive 18000 xsd integer maxexclusive 19600 xsd integer the data range for atmosphere above 18000 feet and below 19600 feet vsto uc#19 annotation f10 subclassof rdfs comment data generated by the logparser using the observerlog loginformation information this is an example of an annotation of axioms ncar legend f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 disjoint union disjoint classes negative property assertion local reflexivity qualified cardinality reflexive irreflexive asymmetric disjoint properties property chain inclusion keys datatype restriction n-ary datatype simple metamodeling capabilities extended annotations declarations profiles 6 references owl 2 specification owl 2 web ontology language structural specification and functional-style syntax second edition boris motik peter f. patel-schneider bijan parsia eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-syntax-20121211 latest version available at http www.w3.org tr owl2-syntax owl 2 direct semantics owl 2 web ontology language direct semantics second edition boris motik peter f. patel-schneider bernardo cuenca grau eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-direct-semantics-20121211 latest version available at http www.w3.org tr owl2-direct-semantics owl 2 rdf-based semantics owl 2 web ontology language rdf-based semantics second edition michael schneider editor. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-rdf-based-semantics-20121211 latest version available at http www.w3.org tr owl2-rdf-based-semantics owl 2 rdf mapping owl 2 web ontology language mapping to rdf graphs second edition peter f. patel-schneider boris motik eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-mapping-to-rdf-20121211 latest version available at http www.w3.org tr owl2-mapping-to-rdf owl 2 profiles owl 2 web ontology language profiles second edition boris motik bernardo cuenca grau ian horrocks zhe wu achille fokoue carsten lutz eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-profiles-20121211 latest version available at http www.w3.org tr owl2-profiles owl 2 conformance owl 2 web ontology language conformance second edition michael smith ian horrocks markus kr tzsch birte glimm eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-conformance-20121211 latest version available at http www.w3.org tr owl2-conformance owl 2 xml serialization owl 2 web ontology language xml serialization second edition boris motik bijan parsia peter f. patel-schneider eds. w3c recommendation 11 december 2012 http www.w3.org tr 2012 rec-owl2-xml-serialization-20121211 latest version available at http www.w3.org tr owl2-xml-serialization owl 2 manchester syntax owl 2 web ontology language manchester syntax second edition matthew horridge peter f. patel-schneider. w3c working group note 11 december 2012 http www.w3.org tr 2012 note-owl2-manchester-syntax-20121211 latest version available at http www.w3.org tr owl2-manchester-syntax owl 1 semantics owl web ontology language semantics and abstract syntax. peter f. patel-schneider patrick hayes and ian horrocks eds. w3c recommendation 10 february 2004. owl 1 xml syntax owl web ontology language xml presentation syntax. masahiro hori j r me euzenat and peter f. patel-schneider eds. w3c note 11 june 2003. rfc 3987 rfc 3987 internationalized resource identifiers iris m. duerst and m. suignard. ietf january 2005 http www.ietf.org rfc rfc3987.txt rdf xml rdf xml syntax specification revised dave beckett and brian mcbride eds. w3c recommendation 10 february 2004. owl use cases and requirements owl web ontology language use cases and requirements jeff heflin ed. w3c recommendation 10 february 2004 http www.w3.org tr 2004 rec-webont-req-20040210 latest version available at http www.w3.org tr webont-req sroiq the even more irresistible sroiq. ian horrocks oliver kutz and uli sattler. in proc. of the 10th int. conf. on principles of knowledge representation and reasoning kr 2006 aaai press 2006. shoiq a tableaux decision procedure for shoiq. horrocks i. and sattler u. in proc. of 19th international joint conference on artificial intelligence ijcai 2005 2005 morgan kaufmann los altos. next steps next steps to owl. b. cuenca grau i. horrocks b. parsia p. patel-schneider and u. sattler. in proc. of owl experiences and directions ceur 2006. syntax problem problem with owl syntax. boris motik and i. horrocks owled 2006 2006. cel cel a polynomial-time reasoner for life science ontologies. f. baader c. lutz and b. suntisrivaraporn. in u. furbach and n. shankar editors proceedings of the 3rd international joint conference on automated reasoning ijcar 06 volume 4130 of lecture notes in artificial intelligence pages 287 291. springer-verlag 2006. snomed el+ replacing sep-triplets in snomed ct using tractable description logic operators. b. suntisrivaraporn f. baader s. schulz k. spackman aime 2007 el++ pushing the el envelope. franz baader sebastian brandt and carsten lutz. in proc. of the 19th joint int. conf. on artificial intelligence ijcai 2005 2005. el++ update pushing the el envelope further. franz baader sebastian brandt and carsten lutz. in proc. of the washington dc workshop on owl experiences and directions owled08dc 2008. dl-lite tractable reasoning and efficient query answering in description logics the dl-lite family. diego calvanese giuseppe de giacomo domenico lembo maurizio lenzerini riccardo rosati. j. of automated reasoning 39 3 385 429 2007. dlp description logic programs combining logic programs with description logic. benjamin n. grosof ian horrocks raphael volz and stefan decker. in proc. of the 12th int. world wide web conference www 2003 budapest hungary 2003. pp. 48 57 pd completeness decidability and complexity of entailment for rdf schema and a semantic extension involving the owl vocabulary. herman j. ter horst. j. of web semantics 3 2 3 79 115 2005. owlprime implementing an inference engine for rdfs owl constructs and user-defined rules in oracle. zhe wu eadon g. das s. chong e.i. kolovski v. annamalai m. srinivasan j. oracle nashua nh data engineering 2008. icde 2008. ieee 24th international conference on pages 1239-1248 cancun 2008. metamodeling on the properties of metamodeling in owl. boris motik. on the properties of metamodeling in owl. journal of logic and computation 17 4 617 637 2007. datatype owl datatypes design and implementation. boris motik ian horrocks iswc 2008 karlsruhe deutshland 2008. xml schema w3c xml schema definition language xsd 1.1 part 1 structures. shudi gao c. m. sperberg-mcqueen and henry s. thompson eds. w3c candidate recommendation 30 april 2009 http www.w3.org tr 2009 cr-xmlschema11-1-20090430 latest version available as http www.w3.org tr xmlschema11-1 dl-safe query answering for owl-dl with rules. boris motik ulrike sattler and rudi studer. journal of web semantics science services and agents on the world wide web 3 1 41 60 2005. uml omg unified modeling language omg uml infrastructure v2.1.2. object management group omg available specification november 2007 http www.omg.org spec uml 2.1.2 infrastructure pdf 7 appendix use cases 7.1 use cases features use case disjoint union disjoint classes negative property local reflexivity qualified cardinality reflex. irrefl. asymm. disjoint properties property chain keys datatype restriction n-ary datatype meta- modeling extend. annot. declarations profiles anonym. individual uc#1 uc#2 uc#3 uc#4 uc#5 uc#6 uc#7 uc#8 uc#9 uc#10 uc#11 uc#12 uc#13 uc#14 uc#15 uc#16 uc#17 uc#18 uc#19 the following list of use cases is not exhaustive. use cases included in that list are only some among many that motivated the owl 2 new features whatever user implementor theoretical reasons that appear at this time accepted by the working group for owl 2. some other extensions pointed out in the papers such as rules default etc. possibly needed in the future are indicated within brackets. all use cases are presented using the following pattern overview features example for references. the overview only gives a general description of the use cases. features lists several features required by the use case after the paper. example points to a feature and short example which has been selected to illustrate a specific new feature of owl 2. this same information can be seen in an abbreviated form in table 3.2. for an easy access references points to the related papers available online which url is provided in the bibliography of the appendix. 7.2 use case 1 brain image annotation for neurosurgery hcls overview the system being developed concerns the preparation of surgical procedures in neurosurgery. specifically the aim is to assist a user in labelling the cortical gyri and sulci in the region surrounding a lesion whose resection is the primary objective. providing anatomical landmarks especially in eloquent cortex is highly important for surgery. brain image annotation is also useful for documentation of clinical cases which then enables retrieval of similar cases for decision support in future procedures. a shared ontology of brain anatomy is also needed to integrate multiple distributed image sources indexed by anatomical features. this is useful for large-scale federated systems for statistical uow.acc.tab.analysis of brain images of major brain pathologies. features disjoint union disjoint classes qualified cardinality restrictions disjoint properties property chain inclusion axioms n-ary rules example for disjoint union e.g. lobe is a disjoint union of frontallobe parietallob temporallobe occipitallobe and limbiclobe. references medical req ontology with rules brain imaging 7.3 use case 2 the foundational model of anatomy hcls overview the foundational model of anatomy fma is the most comprehensive ontology of human canonical anatomy. anatomy plays a prominent role in biomedicine and many biomedical ontologies and applications refer to anatomical entities. fma is a tremendous resource in bioinformatics that facilitates sharing of information among applications that use anatomy knowledge. as its authors claim the fma is a reference ontology in biomedical informatics for correlating different views of anatomy aligning existing and emerging ontologies in bioinformatics the anatomy ontology together with the gene and disease reference ontologies constitute the backbone of the future semantic web for life sciences. but the fma would benefit from new features of owl to state that some properties are exclusive e.g. proper-part and boundby since many biomedical ontologies and applications refer to the fma anatomical entities through cross-references keys would also be useful. features disjoint union disjoint classes qualified cardinality restrictions disjoint properties keys extended annotations profiles example for disjoint classes e.g. nothing can be both a leftlung and a rightlung. references fma 7.4 use case 3 classification of chemical compounds hcls overview functional groups describe the semantics of chemical reactivity in terms of atoms and their connectivity which exhibit characteristic chemical behavior when present in a compound. in this use case the authors take a first step towards designing an owl-dl ontology of functional groups for the classification of chemical compounds and highlight the capabilities and limitations of owl 1 and the proposed owl 1.1 in terms of domain requirements. they also describe the application of expressive features in the design of an ontology of basic relations and how an upper-level ontology can be used to guide the formulation of life science knowledge. they report on experiences to enhance existing ontologies so as to facilitate knowledge representation and question answering. monocyclic and polycyclic ring structures are important parts of molecules that participate in several kinds of chemical reactions. a new owl language feature such as qualified cardinality restriction would be helpful to describe the number and types of functional groups. features disjoint union disjoint classes qualified cardinality restrictions profiles example for qualified cardinality restrictions e.g. for specifying the number and types of functional groups. references chemistry 7.5 use case 4 querying multiple sources in an automotive company automotive overview large companies often store information and knowledge in multiple information systems using various models and formats. the key objective in this use case is the retrieval of relevant information from multiple data and knowledge sources for a large automotive company. for this application a language with a profile facilitating querying multiple databases and easy representation of parts library iso 13584 standard plib ontologies of products which is particularly used for e-business catalogues would be helpful. features disjoint union qualified cardinality restrictions profiles owl 2 ql example for qualified cardinality restrictions e.g. the class of automobile having exactly 2 rear doors. references auto 7.6 use case 5 obo ontologies for biomedical data integration hcls overview the open biomedical ontologies obo consortium is pursuing a strategy to facilitate the integration of biomedical data through their annotation using common controlled ontologies. existing obo ontologies including the gene ontology are undergoing coordinated reform and new ontologies are being created on the basis of an evolving set of shared principles governing ontology development. the result is an expanding family of obo ontologies designed to be interoperable and to incorporate accurate representations of biological reality. within that effort the obo ontology of relations is designed to define a set of basic relations with their semantics. obo qualifies each relation using characteristics of being transitive symmetric reflexive anti-symmetric. more generally obo format offers constructs such as is_reflexive is_symmetric is_cyclic is_anti_symmetric etc. that are used in the obo obtologies. converting obo ontologies requires the new owl 2 property axioms reflexive irreflexive asymmetric to map corresponding obo constructs otherwise they should be transformed into annotations. features local reflexivity reflexive irreflexive asymmetric property chain inclusion axioms declaration antisymmetric example for asymmetric e.g. if p is a proper part of q then q cannot be a proper part of p. references obo ro obo2owl 7.7 use case 6 spatial and topological relationships at the ordnance survey earth and space overview ordnance survey is britain s national mapping agency. it currently maintains a continuously updated database of the topography of great britain. the database includes around 440 million man-made and natural landscape features. these features include everything from forests roads and rivers down to individual houses garden plots and even pillar boxes. in addition to this topographic mapping entire new layers of information are progressively being added to the database such as aerial photographic images which precisely match the mapping data providing the addresses of all properties and integrated transport information. for topological and spatial relationships and in many other places we need to be able to say whether a property is reflexive irreflexive asymmetric or antisymmetric in order to capture the true intentions of our axioms features reflexive irreflexive asymmetric antisymmetric example for irreflexive e.g. nothing flows into itself. references ordnance 7.8 use case 7 the systematized nomenclature of medicine hcls overview the systematized nomenclature of medicine clinical terms snomed ct is a work of clinical terminology with broad coverage of the domain of health care and it has been selected as a national standard for use in electronic health applications in many countries including the u.s. u.k. canada australia denmark and others. snomed was originally published in 1976 while snomed ct became available in 2002 as a major expansion resulting from the merger of snomed rt with the u.k. s clinical terms version 3. a major distinguishing feature differentiating it from prior editions is the use of description logic dl to define and organize codes and terms. another major distinguishing feature of snomed is its size and complexity. with over 350,000 concept codes each representing a different class it is an order of magnitude larger than the next largest dl-based ontology of which we are aware. without property chain inclusion axioms adoption of owl by the snomed community would have required awkward workarounds with their attendant complications and complexities effectively killing movement in that direction. with them we have a clear path to using owl 2 for further development and integration with other biomedical ontologies. the required property chain inclusion axioms allow to encode inheritance of properties along another property e.g. part-of which is of utmost importance in anatomy. for example with axioms such as has-location proper-part-of has-location injury to finger can be inferred as injury to hand. as reported in snomed el+ by re-engineering snomed-ct in this way the number of anatomical classes dropped from 54,380 to 18,125 and the time needed by the cel reasoner cel version 0.94 from 900.15 seconds to 18.99 seconds. like the fma given the common use of cross-references between snomed and other biomedical ontologies via concepts id keys would be highly useful as well. features property chain inclusion axioms keys profiles owl 2 el example for property chain e.g. anything located in a part is located in the whole references snomed req 7.9 use case 8 simple part-whole relations in owl ontologies hcls overview representing part-whole relations is a very common issue for those developing ontologies for the semantic web. owl does not provide any built-in primitives for part-whole relations as it does for the subclass relation but contains sufficient expressive power to capture most but not all of the common cases. the study of part-whole relations is an entire field in itself mereology this note is intended only to deal with straightforward cases for defining classes involving part-whole relations. several extensions of whole needed for part-whole are discussed in this study namely needs of qualified cardinality restriction reflexivity propagation from parts to whole features qualified cardinality restriction reflexivity property chain inclusion example for reflexive e.g. a frontal lobe is part of a brain hemisphere or a car is part of a car note according to the definition given in obo the whole is being considered as a part part whole but there are controversial opinions asserting that part of is not reflexive. references part whole 7.10 use case 9 kidney allocation policy in france hcls overview allocation in france falls under the responsibility of the agence de la biomedicine. it includes general rules such as donor-recipient abo blood group identity unique registration on the national waiting list a registration number is assigned at the registration of the waiting list which uniquely identifies a patient on the waiting list and definition of some organ specific nation-wide allocation priorities. for each kidney recipient minimal hla matching and forbidden antigens can be specified. pediatric recipients get a priority for pediatric donors. kidneys are proposed by order of priority to 1 urgent patients 2 patients with panel reactive antibodies level 80 included in a specific acceptable antigen protocol or 1 hla mismatch with the donor then 3 zero mismatch patients and 4 patients with low transplantation accessibility. geographic criteria are involved each region of the transplant map e.g. ile de france is supposed to take in charge only patients living in the region. this real-life application and allocation system show how distinguishing between adults and children has strong implications in health care at hospital patients under 18 child depend on pediatric services while over 18 adult depend on adult services only children less than 16 years waiting for a transplant have a priority on the waiting list. features negative property assertion datatypes restriction keys example for negativepropertyassertion e.g. this patient is not 5 years old. references agence biomedecine transplant ontology 7.11 use case 10 eligibility criteria for patient recruitment overview this use case is based on an ongoing w3c task force on clinical observations interoperability where the goal is to enable re-use and sharing of clinical data created in healthcare delivery in the clinical trials context. in particular the first application chosen to demonstrate feasibility of the interoperability approach is that of patient recruitment. in this case a sample set of clinical trial protocols available from http www.clinicaltrials.gov each of which contains a list of eligibility inclusion and exclusion criteria these eligibility criteria are used for identify eligible patients and potentially form conditions in a sparql query or could be represented as owl classes. they also need to be mapped as per the discussion in the use case above. a list of requirements based on an uow.acc.tab.analysis of these clinical trial protocols is available from http esw.w3.org topic hcls clinicalobservationsinteroperability action attachfile&do get&target functionalrequirements_v1.xls in particular one of the clinical trials requires that the enrolment date of a clinical trial participant be within 30 days after the patient has been started on a particular therapy. this motivated the need for n-ary datatypes with inequality expressions. features n-ary example for n-ary datatypes e.g. the enrolment date of a clinical trial participant should be within 30 days after the patient has been started on a particular therapy 7.12 use case 11 multiple ucs on datatype hcls overview n-ary presents many use cases that would benefit from various datatype extensions features datatypes restriction n-ary example for n-ary datatypes e.g. datatypes restrictions like intervals or n-ary datatype with inequality such as needed in use case 10. references n-ary 7.13 use case 12 prot g report on the experiences of owl users tool overview protege reported in 2005 on prot g experiences with the development of owl support and on the experiences of the user community with owl at that time. while the overall feedback from the community was positive their experience suggested that there were considerable gaps between the user requirements the expressivity of owl and users understanding of owl. to summarize based on their experiences prot g developers suggested a number of extensions to a future version of owl namely integration of user-defined datatypes esp. for numeric ranges qualified cardinality restrictions management of disjointness owl alldisjoint more flexible annotation properties at least as best practices this report underlined that one of the omissions in the owl language that users complain about most often is poor representation of numeric expressions. almost all groups except for those developing traditional medical terminologies sorely need to be able to express quantitative information. typical examples include the length between 1mm and 2mm age greater than 18 years pressure in the range of 1030mb to 1035mb. such range declarations are needed to classify individuals and to build class definitions such as adult and should therefore be supported by reasoners. user base points out that the current owl datatype formalism is much too weak to support most real world applications and that many potential users therefore cannot adopt owl. the user communities anxiously await an extension to the owl specification to represent user-defined datatypes with xml schema facets such as xsd mininclusive. it also points out some limitations related to annotations or metamodeling from an implementors perspective despite the value of annotation properties in owl dl properties that are declared as annotation properties are greatly limited in so far that they can neither have range or domain constraints nor can they be arranged in sub-property hierarchies. this type of information about a property enables tools to control the values that annotation properties can acquire. without range constraints it is difficult to provide the user with appropriate input widgets. in a similar sense it is often helpful to declare meta-classes so that classes can be categorized into types and different interfaces be pro-vided for each type. currently using these features means that the ontology will be forced into owl full. features qualified cardinality restriction datatypes restriction annotations metamodeling example for extra datatypes e.g. adults are individuals whose age is greater than 18 years. references protege 7.14 use case 13 web service modeling telecom overview people often want to use a class to specify the value of some property. an example originating at the university of karlsruhe web service is in service modeling. services are modeled as instances of the service class. for each concrete service i.e. for each instance of service the users wanted to state what the input to the service is. here is an example of a service description 1 service rdf type owl class 2 person rdf type owl class 3 s1 rdf type service 4 s1 input person s1 is an individual of the class service due to 1 and 3 and person is a class due to 2 hence in 4 we have a relationship input between an individual and a class. hence you need some kind of metamodeling to solve this problem. one way would be that the name person may refer both to person as a class and as an individual denoting person as a whole class individual features metamodeling example for simple metamodeling e.g. a class and an individual person may be used both for a class and an individual references web service punning 7.15 use case 14 managing vocabulary in collaborative environments wiki overview it can be useful to relate schema elements classes properties with each other in order to capture pragmatic relationships between them. an example observed in applications of semantic mediawiki a simple but widely used owl-based semantic content management system with light-weight expressiveness owl1.1 wiki is that users wish to relate schema elements to indicate domain-specific relationships and generally to organize ontological vocabulary. examples are statements such as the property is_located_in is in the class deprecated_properties and was replaced by property has_location. objects of the class city should have a value for the property population. expressed by relating class and property these are merely pragmatic descriptions and no logical relationship on schema-level is intended. however in collaborative vocabulary creation it is relevant that users can express such intended relationships. an important aspect of semantic mediawiki is that users can also query for semantic information and this is currently realized as intended by punning. semantic mediawiki has already been extended by using off-the-shelf owl reasoners and it would be desirable if such systems would be able to deal with the use of punning in such simple cases class property individual features metamodeling example for simple metamodeling e.g. a property and an individual to make a statement asserting that a property is an individual of the class deprecated_properties references wiki punning 7.16 use case 15 uml association class designer overview the unified modeling language uml includes a modeling element known as an association class which combines the features of a uml class and a uml association uml s construct for defining class to class relationships association the association class e.g. the association between classes person and company allows a modeler to define a relation as an association and reify it simultaneously. this is convenient when one wants to model attributes of relations themselves. one way to support such case might be class and objectproperty punning class objectproperty features metamodeling example for simple metamodeling e.g. an object property and a class personcompany may be used both for an object property and a class. references uml association class punning 7.17 use case 16 database federation designer overview some life sciences application designer has been building a database federation scheme. the scheme involves designing an xml schema that describes the fields and values in a variety of databases and associated query tools that from a query interface can write queries in several variants of sql to databases that have relevant information. those results are presented as a single integrated view. he hears that owl and semantic web technologies might be a suitable technology for implementing the same functionality and making it available using web standards but doesn t know where to start. this application illustrates common needs of a wide community of users that would like to use their databases and can easily query them in a convivial way. this motivates a profile where conjunctive query answering is implemented using conventional relational database systems. features profiles owl 2 ql example for profiles e.g. owl 2 ql profile to easily query a federation of databases in a convivial way references who reads 7.18 use case 17 tools developers tools overview a user adds an assertion to an ontology however he accidentally mistypes the iri of an individual. it should be possible to detect this error by comparing the iri of the individual in the axiom with the iris explicitly declared to be a part of the ontology if the individual iri has not been explicitly introduced as being in the ontology the user should be given the opportunity to correct his error. tools developers such as those involved in the prot g owl toolset architecture tools have often expressed problems raised for e.g. apis owl api due to lack of declarations. the first problem is that owl does not allow for explicit declarations assertions that a certain class property or an individual exists in an ontology. this aspect of the owl standard was often misinterpreted which caused design errors in owl apis syntax problem features declaration example for declaration e.g. a person is declared to be a class of an ontology. references syntax problem 7.19 use case 18 virtual solar terrestrial observatory earth and space overview numerous single discipline and multi-discipline virtual observatories e.g. http vsto.org http vmo.nasa.gov are beginning to use semantic technologies to provide data access and integration. a virtual observatory is a suite of software applications on a set of computers that allows users to uniformly find access and use resources data software document and image products and services using these from a collection of distributed product repositories and service providers. a vo is a service that unites services and or multiple repositories. from http lwsde.gsfc.nasa.gov vo_framework_7_jan_05.doc. some virtual observatories are focusing quite heavily on provenance encoding at data ingest time e.g. http spcdis.hao.ucar.edu the virtual solar terrestrial observatory vsto is a national science foundation and national center for atmospheric research supported effort that allows researchers to find solar and solar-terrestrial data. it provides an ontology-enhanced interface to semantically-enhanced web services that help access a number of online repositories of scientific data. the background owl ontology contains term descriptions for science terms including instruments observatories parameters etc. users essentially need to specify a description of the data they wish to retrieve which includes either a specific instrument class or a description of that class a date range for the data taken and the parameters. in order to specify that in relevant science terms scientists need to be able to represent numerical ranges and comparisons going beyond the numeric support of owl 1. the application also needs to expand to include spatial descriptions. it would use representational power if provided for spatial geographic containment. requirements qualified cardinality datatype restriction defaults example for datatype restriction e.g. the range for atmosphere is above 18000 and below 19600 feet references vsto 7.20 use case 19 semantic provenance capture earth and space overview in an effort to provide better search capabilities over meta information in addition to scientific data the spcdis effort is providing infrastructure to capture declarative descriptions of scientific provenance information at data ingest time. the initial domain of the effort is solar coronal physics. this effort requires among other things extended annotations as well as datatype restriction. features datatype restriction extended annotations example for extended annotation to attach annotations e.g. comments on axioms such as a subclass axiom to express for instance that the the elements of the subclass are data generated by a log parser. references ncar 7.21 use case 20 biochemical self-interaction chemical domain overview in biochemistry some biomolecules will chemical modify themselves in such a way that it has biologically important consequences. i protein kinases are enzymes capable of adding phosphate groups to certain amino acids found within target proteins. some kinases known as auto-phosphorylating kinases will add phosphate groups to certain target amino acids that are part of itself. ii ribozymes are catalytically active rna molecules in which 7 natural types are known to cleave their own rna sequences. such cleavage may result in significant changes to viral replication gene expression and possibly the generation of different protein transcripts. such catalytically active self-cleaving rna make up a subclass of ribozymes called self-cleaving ribozymes. such biochemical self-interaction can be captured by asserting local reflexivity of the properties. features local reflexivity example for local reflexivity e.g. an auto-phosphorylating kinase is a kinase that phosphorylates itself. references bio 7.22 use cases bibliography medical req web ontology language requirements w.r.t expressiveness of taxonomy and axioms in medicine in proc. of iswc 2003 micro theory creation and usage of a micro theory for long bone fractures an experience reporthoward goldberg vipul kashyap and kent spackman in proc. of kr-med 2008.. ontology with rules ontology enriched by rules for identifying brain anatomical structures in rif 2004 washington 2004. brain imaging towards an hybrid system using an ontology enriched by rules for the semantic annotation of brain mri images in proc. of rr 2007 the brain anatomy case study in proc. of protege 2005. fma the foundational model of anatomy a the foundational model of anatomy b the foundational model of anatomy c. chemistry describing chemical functional groups in owl-dl for the classification of chemical compounds natalia villanueva-rosales and michel dumontier. in owl experiences and directions owled 07 innsbruck austria. modelling life sciences knowledge with owl1.1 owled 08 dc auto an exploratory study in an automotive company. obo the obo foundry coordinated evolution of ontologies to support biomedical data integration. barry smith et al. ro relations in biomedical ontologies. obo2owl obo to owl go to owl1.1 owled 07 obo and owl leveraging semantic web technologies for the life sciences in proc. of iswc 2007. ordnance experiences of using owl at the ordnance survey. snomed req an examination of owl and the requirements of a large health care terminology. agence biomedecine changing kidney allocation policy in france the value of simulation. transplant ontology construction of the dialysis and transplantation ontology. little web a little semantic web goes a long way in biology wolstencroft k. brass a. horrocks i. lord p. sattler u. stevens r. turi d. in proceedings of the 2005 international semantic web conference iswc 2005 pp. 786-800. springer berlin heidelberg new york 2005 part whole simple part-whole relations in owl ontologies alan rector chris welty. w3c editor s draft 11 aug 2005 tools supporting early adoption of owl 1.1 with protege-owl and fact++. matthew horridge and dmitry tsarkov and timothy redmond. in owl experiences and directions owled 06 athens georgia. owl api igniting the owl 1.1 touch paper the owl api matthew horridge and sean bechhofer and olaf noppens 2007 in owl experiences and directions owled 07 innsbruck austria. protege owl the prot g owl experience holger knublauch matthew horridge mark musen alan rector robert stevens nick drummond phil lord natalya f. noy2 julian seidenberg hai wang. in owl experiences and directions owled 05 galway ireland 2005. n-ary n-ary data predicate use case. web service preference-based selection of highly configurable web services steffen lamparter anupriya ankolekar stephan grimm rudi studer www-07 banff canada 2007. wiki reusing ontological background knowledge in semantic wikis denny vrandecic markus kr tzsch proceedings 1st workshop on semantic wikis. budva montenegro june 2006 uml association class association. punning punning use cases. who reads who reads our documents vsto the virtual solar-terrestrial observatory a deployed semantic web application case study for scientific research mcguinness d.l. fox p. cinquini l. west p. garcia j. benedict j.l. middleton d.. vsto2. vmo. ncar semantic provenance capture in data ingest systems bio springer. pnas. skos w3c working draft 29 august 2008 8 appendix change log informative 8.1 changes since recommendation this section summarizes the changes to this document since the recommendation of 27 october 2009. with the publication of the xml schema definition language xsd 1.1 part 2 datatypes recommendation of 5 april 2012 the elements of owl 2 which are based on xsd 1.1 are now considered required and the note detailing the optional dependency on the xsd 1.1 candidate recommendation of 30 april 2009 has been removed from the status of this document section. minor typographical errors were corrected as detailed on the owl 2 errata page. 8.2 changes since proposed recommendation this section summarizes the changes to this document since the proposed recommendation of 22 september 2009. some minor editorial changes were made. 8.3 changes since last call this section summarizes the changes to this document since the candidate recommendation of 11 june 2009. a note was added pointing out that a property being asymmetric is a much stronger notion than its being non-symmetric. a note on the origin of the profile names was added. several minor editorial changes were made. 9 acknowledgments the starting point for the development of owl 2 was the owl1.1 member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series. the working group also considered postponed issues from the webont working group. this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole. the editors extend special thanks to elisa kendall sandpiper software peter f. patel-schneider bell labs research alcatel-lucent and alan ruttenberg science commons for their thorough reviews. the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozen-bolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles st-quentin and lirmm sandro hawke w3c mit ivan herman w3c ercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus kr tzsch fzi carsten lutz universit t bremen deborah l. mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f. patel-schneider bell labs research alcatel-lucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap. 